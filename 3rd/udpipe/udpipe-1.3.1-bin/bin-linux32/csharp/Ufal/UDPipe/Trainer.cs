//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Ufal.UDPipe {

public class Trainer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Trainer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Trainer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Trainer obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Trainer() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          udpipe_csharpPINVOKE.delete_Trainer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static Bytes train(string method, Sentences train, Sentences heldout, string tokenizer, string tagger, string parser, ProcessingError error) {
    global::System.IntPtr cPtr = udpipe_csharpPINVOKE.Trainer_train__SWIG_0(method, Sentences.getCPtr(train), Sentences.getCPtr(heldout), tokenizer, tagger, parser, ProcessingError.getCPtr(error));
    Bytes ret = (cPtr == global::System.IntPtr.Zero) ? null : new Bytes(cPtr, true);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Bytes train(string method, Sentences train, Sentences heldout, string tokenizer, string tagger, string parser) {
    global::System.IntPtr cPtr = udpipe_csharpPINVOKE.Trainer_train__SWIG_1(method, Sentences.getCPtr(train), Sentences.getCPtr(heldout), tokenizer, tagger, parser);
    Bytes ret = (cPtr == global::System.IntPtr.Zero) ? null : new Bytes(cPtr, true);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string DEFAULT {
    get {
      string ret = udpipe_csharpPINVOKE.Trainer_DEFAULT_get();
      return ret;
    } 
  }

  public static string NONE {
    get {
      string ret = udpipe_csharpPINVOKE.Trainer_NONE_get();
      return ret;
    } 
  }

  public Trainer() : this(udpipe_csharpPINVOKE.new_Trainer(), true) {
  }

}

}
