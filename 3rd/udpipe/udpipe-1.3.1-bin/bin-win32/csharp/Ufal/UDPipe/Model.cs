//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Ufal.UDPipe {

public class Model : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Model(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Model obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Model obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Model() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          udpipe_csharpPINVOKE.delete_Model(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static Model load(string fname) {
    global::System.IntPtr cPtr = udpipe_csharpPINVOKE.Model_load(fname);
    Model ret = (cPtr == global::System.IntPtr.Zero) ? null : new Model(cPtr, true);
    return ret;
  }

  public virtual InputFormat newTokenizer(string options) {
    global::System.IntPtr cPtr = udpipe_csharpPINVOKE.Model_newTokenizer(swigCPtr, options);
    InputFormat ret = (cPtr == global::System.IntPtr.Zero) ? null : new InputFormat(cPtr, true);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool tag(Sentence s, string options, ProcessingError error) {
    bool ret = udpipe_csharpPINVOKE.Model_tag__SWIG_0(swigCPtr, Sentence.getCPtr(s), options, ProcessingError.getCPtr(error));
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool tag(Sentence s, string options) {
    bool ret = udpipe_csharpPINVOKE.Model_tag__SWIG_1(swigCPtr, Sentence.getCPtr(s), options);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool parse(Sentence s, string options, ProcessingError error) {
    bool ret = udpipe_csharpPINVOKE.Model_parse__SWIG_0(swigCPtr, Sentence.getCPtr(s), options, ProcessingError.getCPtr(error));
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool parse(Sentence s, string options) {
    bool ret = udpipe_csharpPINVOKE.Model_parse__SWIG_1(swigCPtr, Sentence.getCPtr(s), options);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string DEFAULT {
    get {
      string ret = udpipe_csharpPINVOKE.Model_DEFAULT_get();
      return ret;
    } 
  }

  public static string TOKENIZER_NORMALIZED_SPACES {
    get {
      string ret = udpipe_csharpPINVOKE.Model_TOKENIZER_NORMALIZED_SPACES_get();
      return ret;
    } 
  }

  public static string TOKENIZER_PRESEGMENTED {
    get {
      string ret = udpipe_csharpPINVOKE.Model_TOKENIZER_PRESEGMENTED_get();
      return ret;
    } 
  }

  public static string TOKENIZER_RANGES {
    get {
      string ret = udpipe_csharpPINVOKE.Model_TOKENIZER_RANGES_get();
      return ret;
    } 
  }

}

}
