//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Ufal.UDPipe {

public class Pipeline : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Pipeline(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Pipeline obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Pipeline obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Pipeline() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          udpipe_csharpPINVOKE.delete_Pipeline(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Pipeline(Model m, string input, string tagger, string parser, string output) : this(udpipe_csharpPINVOKE.new_Pipeline(Model.getCPtr(m), input, tagger, parser, output), true) {
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setModel(Model m) {
    udpipe_csharpPINVOKE.Pipeline_setModel(swigCPtr, Model.getCPtr(m));
  }

  public void setInput(string input) {
    udpipe_csharpPINVOKE.Pipeline_setInput(swigCPtr, input);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTagger(string tagger) {
    udpipe_csharpPINVOKE.Pipeline_setTagger(swigCPtr, tagger);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setParser(string parser) {
    udpipe_csharpPINVOKE.Pipeline_setParser(swigCPtr, parser);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setOutput(string output) {
    udpipe_csharpPINVOKE.Pipeline_setOutput(swigCPtr, output);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setImmediate(bool immediate) {
    udpipe_csharpPINVOKE.Pipeline_setImmediate(swigCPtr, immediate);
  }

  public void setDocumentId(string document_id) {
    udpipe_csharpPINVOKE.Pipeline_setDocumentId(swigCPtr, document_id);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public string process(string data, ProcessingError error) {
    string ret = udpipe_csharpPINVOKE.Pipeline_process__SWIG_0(swigCPtr, data, ProcessingError.getCPtr(error));
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string process(string data) {
    string ret = udpipe_csharpPINVOKE.Pipeline_process__SWIG_1(swigCPtr, data);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string DEFAULT {
    get {
      string ret = udpipe_csharpPINVOKE.Pipeline_DEFAULT_get();
      return ret;
    } 
  }

  public static string NONE {
    get {
      string ret = udpipe_csharpPINVOKE.Pipeline_NONE_get();
      return ret;
    } 
  }

}

}
