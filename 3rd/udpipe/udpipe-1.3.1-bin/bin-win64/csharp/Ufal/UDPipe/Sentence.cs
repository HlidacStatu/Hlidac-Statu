//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Ufal.UDPipe {

public class Sentence : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Sentence(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Sentence obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Sentence obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Sentence() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          udpipe_csharpPINVOKE.delete_Sentence(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Sentence() : this(udpipe_csharpPINVOKE.new_Sentence(), true) {
  }

  public Words words {
    set {
      udpipe_csharpPINVOKE.Sentence_words_set(swigCPtr, Words.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = udpipe_csharpPINVOKE.Sentence_words_get(swigCPtr);
      Words ret = (cPtr == global::System.IntPtr.Zero) ? null : new Words(cPtr, false);
      return ret;
    } 
  }

  public MultiwordTokens multiwordTokens {
    set {
      udpipe_csharpPINVOKE.Sentence_multiwordTokens_set(swigCPtr, MultiwordTokens.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = udpipe_csharpPINVOKE.Sentence_multiwordTokens_get(swigCPtr);
      MultiwordTokens ret = (cPtr == global::System.IntPtr.Zero) ? null : new MultiwordTokens(cPtr, false);
      return ret;
    } 
  }

  public EmptyNodes emptyNodes {
    set {
      udpipe_csharpPINVOKE.Sentence_emptyNodes_set(swigCPtr, EmptyNodes.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = udpipe_csharpPINVOKE.Sentence_emptyNodes_get(swigCPtr);
      EmptyNodes ret = (cPtr == global::System.IntPtr.Zero) ? null : new EmptyNodes(cPtr, false);
      return ret;
    } 
  }

  public Comments comments {
    set {
      udpipe_csharpPINVOKE.Sentence_comments_set(swigCPtr, Comments.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = udpipe_csharpPINVOKE.Sentence_comments_get(swigCPtr);
      Comments ret = (cPtr == global::System.IntPtr.Zero) ? null : new Comments(cPtr, false);
      return ret;
    } 
  }

  public static string rootForm {
    get {
      string ret = udpipe_csharpPINVOKE.Sentence_rootForm_get();
      return ret;
    } 
  }

  public bool empty() {
    bool ret = udpipe_csharpPINVOKE.Sentence_empty(swigCPtr);
    return ret;
  }

  public void clear() {
    udpipe_csharpPINVOKE.Sentence_clear(swigCPtr);
  }

  public virtual Word addWord(string form) {
    Word ret = new Word(udpipe_csharpPINVOKE.Sentence_addWord(swigCPtr, form), false);
    return ret;
  }

  public void setHead(int id, int head, string deprel) {
    udpipe_csharpPINVOKE.Sentence_setHead(swigCPtr, id, head, deprel);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void unlinkAllNodes() {
    udpipe_csharpPINVOKE.Sentence_unlinkAllNodes(swigCPtr);
  }

  public bool getNewDoc() {
    bool ret = udpipe_csharpPINVOKE.Sentence_getNewDoc(swigCPtr);
    return ret;
  }

  public string getNewDocId() {
    string ret = udpipe_csharpPINVOKE.Sentence_getNewDocId(swigCPtr);
    return ret;
  }

  public void setNewDoc(bool new_doc, string id) {
    udpipe_csharpPINVOKE.Sentence_setNewDoc__SWIG_0(swigCPtr, new_doc, id);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setNewDoc(bool new_doc) {
    udpipe_csharpPINVOKE.Sentence_setNewDoc__SWIG_1(swigCPtr, new_doc);
  }

  public bool getNewPar() {
    bool ret = udpipe_csharpPINVOKE.Sentence_getNewPar(swigCPtr);
    return ret;
  }

  public string getNewParId() {
    string ret = udpipe_csharpPINVOKE.Sentence_getNewParId(swigCPtr);
    return ret;
  }

  public void setNewPar(bool new_par, string id) {
    udpipe_csharpPINVOKE.Sentence_setNewPar__SWIG_0(swigCPtr, new_par, id);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setNewPar(bool new_par) {
    udpipe_csharpPINVOKE.Sentence_setNewPar__SWIG_1(swigCPtr, new_par);
  }

  public string getSentId() {
    string ret = udpipe_csharpPINVOKE.Sentence_getSentId(swigCPtr);
    return ret;
  }

  public void setSentId(string id) {
    udpipe_csharpPINVOKE.Sentence_setSentId(swigCPtr, id);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getText() {
    string ret = udpipe_csharpPINVOKE.Sentence_getText(swigCPtr);
    return ret;
  }

  public void setText(string id) {
    udpipe_csharpPINVOKE.Sentence_setText(swigCPtr, id);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
