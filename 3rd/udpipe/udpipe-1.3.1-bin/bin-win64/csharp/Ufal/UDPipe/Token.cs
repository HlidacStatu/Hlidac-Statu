//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Ufal.UDPipe {

public class Token : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Token(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Token obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Token obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Token() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          udpipe_csharpPINVOKE.delete_Token(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public string form {
    set {
      udpipe_csharpPINVOKE.Token_form_set(swigCPtr, value);
      if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = udpipe_csharpPINVOKE.Token_form_get(swigCPtr);
      if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string misc {
    set {
      udpipe_csharpPINVOKE.Token_misc_set(swigCPtr, value);
      if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = udpipe_csharpPINVOKE.Token_misc_get(swigCPtr);
      if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Token(string form, string misc) : this(udpipe_csharpPINVOKE.new_Token__SWIG_0(form, misc), true) {
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public Token(string form) : this(udpipe_csharpPINVOKE.new_Token__SWIG_1(form), true) {
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public Token() : this(udpipe_csharpPINVOKE.new_Token__SWIG_2(), true) {
  }

  public bool getSpaceAfter() {
    bool ret = udpipe_csharpPINVOKE.Token_getSpaceAfter(swigCPtr);
    return ret;
  }

  public void setSpaceAfter(bool space_after) {
    udpipe_csharpPINVOKE.Token_setSpaceAfter(swigCPtr, space_after);
  }

  public string getSpacesBefore() {
    string ret = udpipe_csharpPINVOKE.Token_getSpacesBefore(swigCPtr);
    return ret;
  }

  public void setSpacesBefore(string spaces_before) {
    udpipe_csharpPINVOKE.Token_setSpacesBefore(swigCPtr, spaces_before);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getSpacesAfter() {
    string ret = udpipe_csharpPINVOKE.Token_getSpacesAfter(swigCPtr);
    return ret;
  }

  public void setSpacesAfter(string spaces_after) {
    udpipe_csharpPINVOKE.Token_setSpacesAfter(swigCPtr, spaces_after);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getSpacesInToken() {
    string ret = udpipe_csharpPINVOKE.Token_getSpacesInToken(swigCPtr);
    return ret;
  }

  public void setSpacesInToken(string spaces_in_token) {
    udpipe_csharpPINVOKE.Token_setSpacesInToken(swigCPtr, spaces_in_token);
    if (udpipe_csharpPINVOKE.SWIGPendingException.Pending) throw udpipe_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getTokenRange() {
    bool ret = udpipe_csharpPINVOKE.Token_getTokenRange(swigCPtr);
    return ret;
  }

  public uint getTokenRangeStart() {
    uint ret = udpipe_csharpPINVOKE.Token_getTokenRangeStart(swigCPtr);
    return ret;
  }

  public uint getTokenRangeEnd() {
    uint ret = udpipe_csharpPINVOKE.Token_getTokenRangeEnd(swigCPtr);
    return ret;
  }

  public void setTokenRange(uint start, uint end) {
    udpipe_csharpPINVOKE.Token_setTokenRange(swigCPtr, start, end);
  }

}

}
