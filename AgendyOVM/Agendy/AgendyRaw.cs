using Newtonsoft.Json;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AgendyOVM.Agendy
{
    //from https://app.quicktype.io

    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using AgendyRaw;
    //
    //    var coordinate = Coordinate.FromJson(jsonString);

    using System;
    using System.Collections.Generic;

    using System.Globalization;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Raw
    {
        [JsonProperty("položky")]
        public PoložkyStruct[] Položky { get; set; }


        public partial class PoložkyStruct
        {
            [JsonProperty("hlavní-ustanovení", NullValueHandling = NullValueHandling.Ignore)]
            public HlavniUstanovení[] HlavníUstanovení { get; set; }

            [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
            public string Id { get; set; }

            [JsonProperty("kód", NullValueHandling = NullValueHandling.Ignore)]
            public string Kód { get; set; }

            [JsonProperty("název", NullValueHandling = NullValueHandling.Ignore)]
            public Lang Název { get; set; }

            [JsonProperty("ohlašovatel", NullValueHandling = NullValueHandling.Ignore)]
            public string Ohlašovatel { get; set; }

            [JsonProperty("platnost-do", NullValueHandling = NullValueHandling.Ignore)]
            public DateTimeOffset? PlatnostDo { get; set; }

            [JsonProperty("platnost-od", NullValueHandling = NullValueHandling.Ignore)]
            public DateTimeOffset? PlatnostOd { get; set; }

            [JsonProperty("poslední-změna", NullValueHandling = NullValueHandling.Ignore)]
            public DateTimeOffset? PosledníZměna { get; set; }

            [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
            public string Type { get; set; }

            [JsonProperty("ustanovení", NullValueHandling = NullValueHandling.Ignore)]
            public Oznaceni[] Ustanovení { get; set; }

            [JsonProperty("vykonávající-kategorie-ovm", NullValueHandling = NullValueHandling.Ignore)]
            public string[] VykonávajícíKategorieOvm { get; set; }

            [JsonProperty("vykonávající-kategorie-spuú", NullValueHandling = NullValueHandling.Ignore)]
            public string[] VykonávajícíKategorieSpuú { get; set; }

            [JsonProperty("vykonávající-ovm", NullValueHandling = NullValueHandling.Ignore)]
            public string[] VykonávajícíOvm { get; set; }

            [JsonProperty("vykonávající-spuú", NullValueHandling = NullValueHandling.Ignore)]
            public string[] VykonávajícíSpuú { get; set; }

            [JsonProperty("vznik", NullValueHandling = NullValueHandling.Ignore)]
            public DateTimeOffset? Vznik { get; set; }

            [JsonProperty("zánik", NullValueHandling = NullValueHandling.Ignore)]
            public DateTimeOffset? Zánik { get; set; }

            [JsonProperty("činnosti", NullValueHandling = NullValueHandling.Ignore)]
            public Cinnosti[] Činnosti { get; set; }
        }

        public partial class HlavniUstanovení
        {
            [JsonProperty("označení", NullValueHandling = NullValueHandling.Ignore)]
            public string Označení { get; set; }

            [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
            public string Type { get; set; }
        }

        public partial class Lang
        {
            [JsonProperty("cs", NullValueHandling = NullValueHandling.Ignore)]
            public string Cs { get; set; }
        }

        public partial class Oznaceni
        {
            [JsonProperty("označení", NullValueHandling = NullValueHandling.Ignore)]
            public string Označení { get; set; }

            [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
            public string Type { get; set; }
        }

        public partial class Cinnosti
        {
            [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
            public string Id { get; set; }

            [JsonProperty("kód-činnosti", NullValueHandling = NullValueHandling.Ignore)]
            public string KódČinnosti { get; set; }

            [JsonProperty("název-činnosti", NullValueHandling = NullValueHandling.Ignore)]
            public NázevČinnosti NázevČinnosti { get; set; }

            [JsonProperty("platnost-činnosti-do", NullValueHandling = NullValueHandling.Ignore)]
            public DateTimeOffset? PlatnostČinnostiDo { get; set; }

            [JsonProperty("platnost-činnosti-od", NullValueHandling = NullValueHandling.Ignore)]
            public DateTimeOffset? PlatnostČinnostiOd { get; set; }

            [JsonProperty("popis-činnosti", NullValueHandling = NullValueHandling.Ignore)]
            public PopisČinnosti PopisČinnosti { get; set; }

            [JsonProperty("typ-činnosti", NullValueHandling = NullValueHandling.Ignore)]
            public string TypČinnosti { get; set; }

            [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
            public string Type { get; set; }
        }

        public partial class NázevČinnosti
        {
            [JsonProperty("cs", NullValueHandling = NullValueHandling.Ignore)]
            public string Cs { get; set; }
        }

        public partial class PopisČinnosti
        {
            [JsonProperty("cs", NullValueHandling = NullValueHandling.Ignore)]
            public string Cs { get; set; }
        }

        public partial class Agendy
        {
            public static Agendy FromJson(string json) => JsonConvert.DeserializeObject<Agendy>(json, Raw.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }
    }
}

