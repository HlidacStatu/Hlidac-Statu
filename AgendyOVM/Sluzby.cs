using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AgendyOVM.Sluzby
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using Sluzba;
    //
    //    var coordinate = Coordinate.FromJson(jsonString);

    using System;
    using System.Collections.Generic;

    using System.Globalization;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class All
    {
        [JsonProperty("položky")]
        public Sluzba[] Položky { get; set; }
    }

    public partial class Sluzba
    {
        [JsonProperty("agenda", NullValueHandling = NullValueHandling.Ignore)]
        public string Agenda { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("identifikátor", NullValueHandling = NullValueHandling.Ignore)]
        public string Identifikátor { get; set; }

        [JsonProperty("klienti", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Klienti { get; set; }

        [JsonProperty("místní-příslušnost", NullValueHandling = NullValueHandling.Ignore)]
        public MístníPříslušnost[] MístníPříslušnost { get; set; }

        [JsonProperty("název", NullValueHandling = NullValueHandling.Ignore)]
        public Název Název { get; set; }

        [JsonProperty("popis", NullValueHandling = NullValueHandling.Ignore)]
        public Popis Popis { get; set; }

        [JsonProperty("povinnost-sběru-adresy", NullValueHandling = NullValueHandling.Ignore)]
        public string PovinnostSběruAdresy { get; set; }

        [JsonProperty("relevantní-pro", NullValueHandling = NullValueHandling.Ignore)]
        public string[] RelevantníPro { get; set; }

        [JsonProperty("typ-služby", NullValueHandling = NullValueHandling.Ignore)]
        public string TypSlužby { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("ustanovení", NullValueHandling = NullValueHandling.Ignore)]
        public Ustanovení[] Ustanovení { get; set; }

        [JsonProperty("úkony", NullValueHandling = NullValueHandling.Ignore)]
        public Ukony.Ukon[] Úkony { get; set; }

        [JsonProperty("činnosti", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Činnosti { get; set; }
    }

    public partial class MístníPříslušnost
    {
        [JsonProperty("poskytovatel-k-místní-příslušnosti", NullValueHandling = NullValueHandling.Ignore)]
        public string PoskytovatelKMístníPříslušnosti { get; set; }

        [JsonProperty("typ-místní-příslušnosti", NullValueHandling = NullValueHandling.Ignore)]
        public string TypMístníPříslušnosti { get; set; }

        [JsonProperty("typ-působnosti", NullValueHandling = NullValueHandling.Ignore)]
        public string TypPůsobnosti { get; set; }

        [JsonProperty("typ-subjektu", NullValueHandling = NullValueHandling.Ignore)]
        public string TypSubjektu { get; set; }
    }

    public partial class Název
    {
        [JsonProperty("cs", NullValueHandling = NullValueHandling.Ignore)]
        public string Cs { get; set; }
    }

    public partial class Popis
    {
        [JsonProperty("cs", NullValueHandling = NullValueHandling.Ignore)]
        public string Cs { get; set; }
    }

    public partial class Ustanovení
    {
        [JsonProperty("označení", NullValueHandling = NullValueHandling.Ignore)]
        public string Označení { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }
    }


    public partial class Coordinate
    {
        public static Coordinate FromJson(string json) => JsonConvert.DeserializeObject<Coordinate>(json, Sluzby.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Coordinate self) => JsonConvert.SerializeObject(self, Sluzby.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

}
