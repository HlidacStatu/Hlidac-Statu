@using HlidacStatu.JobTableEditor.Data
@using Microsoft.AspNetCore.Components
@using HlidacStatu.DetectJobs
@using System.ComponentModel

@implements IDisposable

<td class="@dropClass @cellStyle" @onclick="ColorChange"
    draggable="true"
    ondragover="event.preventDefault();"
    @ondragstart="@(() => Swapper.StartSwap(this))"
    @ondrop="HandleDrop"
    @ondragenter="HandleDragEnter"
    @ondragleave="HandleDragLeave">
    
    <textarea @onclick:stopPropagation="true" 
        @onclick:preventDefault="true"
        @ondragover="HandleDragEnter"
        @ondragenter="HandleDragEnter"
        draggable="true"
        ondragstart="event.preventDefault(); event.stopPropagation();"
        rows="2" class="form-control" @bind="@CellShell.Value"></textarea>
</td>


@code {
    
    [Parameter]
    public CellShell CellShell { get; set; }
    
    [Parameter]
    public CellSwapper Swapper { get; set; }
    
    [Parameter]
    public int SyncSignaler { get; set; }
    
    private string dropClass = "";
    private string cellStyle;
    

    private void HandleDataChange(object? sender, PropertyChangedEventArgs propertyChangedEventArgs)
    {
        SetCellStyle();
    }


    protected override void OnInitialized()
    {
        SetCellStyle();
        CellShell.PropertyChanged += HandleDataChange;
    }

    private void ColorChange()
    {
        CellShell.SwitchType();
        SetCellStyle();
    }

    public void SetCellStyle()
    {
        cellStyle = CellShell.IsImportant ? "bg-primary bg-opacity-25" : ""; 
    }
    
    //+ validace pokud se při načtení tabulky liší (merged value vs original value)?

    public void Redraw(bool isMarked)
    {
        SetCellStyle();
        StateHasChanged();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        SetCellStyle();
    }

    public void Dispose()
    {
        CellShell.PropertyChanged -= HandleDataChange;
    }
    
    private void HandleDragEnter()
    {
        dropClass = "can-drop";
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";

        Swapper.EndSwap(this);
    }

}