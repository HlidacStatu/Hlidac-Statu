@page "/tableEditor"

@using HlidacStatu.JobTableEditor.Data
@using HlidacStatu.JobTableEditor.Components
@using HlidacStatu.Entities
@using System.Threading
@using HlidacStatu.DetectJobs

@inject JobService JobService
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(Roles = "Admin,TableEditor")]

<h1>Job editor</h1>

<div class="container">
    <div class="row">
        <div class="col-2 bg-primary bg-opacity-25">
            Pozice
        </div>
        <div class="col-2 bg-success bg-opacity-25">
            Cena za MD bez DPH
        </div>
        <div class="col-2 bg-warning bg-opacity-25">
            Cena za MD s DPH
        </div>
    </div>
</div>
<hr style="margin-bottom: 20px;"/>

@if (table == null)
{
    <p>
        <button class="btn btn-primary" @onclick="LoadNewTable">Načti tabulku</button>
    </p>
}
else
{
    <h4 class="text-danger">@errorMessage</h4>
    <button class="btn btn-secondary btn-sm" @onclick="MultiplyPrices">Vynásob ceny 8</button>
    <button class="btn btn-secondary btn-sm" @onclick="AddColumn">Přidej sloupec</button>
    <a class="btn btn-outline-secondary btn-sm" target="_blank" href="https://www.hlidacstatu.cz/manage/ShowPrilohaTablesOnePage?s=@(table.InDocTable.SmlouvaID)&p=@(table.InDocTable.PrilohaHash)&page=@table.InDocTable.Page"><i class="far fa-file-alt"></i>Ukázat stránku s tabulkou</a>
    <span>&nbsp;&nbsp;| &nbsp;</span>
    <button class="btn btn-outline-success" @onclick="SaveTable">Save changes</button>
    <button class="btn btn-outline-warning" @onclick="SuperviseTable">Send to supervisor</button>
    <button class="btn btn-outline-danger" @onclick="NonsenseTable">This table is full of 💩</button>
    <hr style="margin-bottom:20px;"/>
    <table class="table">
        <thead>
        <tr>
            @for (int col = 0; col < table.Cells[0].Length; col++)
            {
                int column = col;
                <th>
                    <button class="btn btn-sm btn-primary bg-opacity-25" @onclick="@(() => SetColumn(column, InHtmlTables.Cell.GuessedCellType.Position) )">Job</button>
                    <button class="btn btn-sm btn-success bg-opacity-25" @onclick="@(() => SetColumn(column, InHtmlTables.Cell.GuessedCellType.Price) )"><i class="far fa-money-bill-alt"></i></button>
                    <button class="btn btn-sm btn-warning bg-opacity-25" @onclick="@(() => SetColumn(column, InHtmlTables.Cell.GuessedCellType.PriceWithVAT) )"><i class="far fa-money-bill-alt"></i> s DPH</button>
                    <button class="btn btn-sm btn-outline-info" @onclick="@(() => SetColumn(column, InHtmlTables.Cell.GuessedCellType.Unknown) )">Nic</button>
                </th>
            }
        </tr>
        </thead>
        <tbody>
        @foreach (var row in table.Cells)
        {
            <tr>
                @foreach (var cell in row)
                {
                    <Cell CellShell="@cell" Swapper="@Swapper"></Cell>
                }
            </tr>
        }
        </tbody>
    </table>
    <hr style="margin-top:20px;"/>
    <button class="btn btn-secondary" @onclick="MultiplyPrices">Vynásob ceny 8</button>
    <a class="btn btn-outline-secondary" target="_blank" href="https://www.hlidacstatu.cz/manage/ShowPrilohaTablesOnePage?s=@(table.InDocTable.SmlouvaID)&p=@(table.InDocTable.PrilohaHash)&page=@table.InDocTable.Page"><i class="far fa-file-alt"></i>Ukázat stránku s tabulkou</a>
    <span>&nbsp;&nbsp;| &nbsp;</span>
    <button class="btn btn-outline-success" @onclick="SaveTable">Save changes</button>
    <button class="btn btn-outline-warning" @onclick="SuperviseTable">Send to supervisor</button>
    <button class="btn btn-outline-danger" @onclick="NonsenseTable">This table is full of 💩</button>

    <hr/>
    
}

@code {
    private SomeTable table;
    private DateTime tableOpenedAt;
    private string errorMessage;
    private CellSwapper Swapper { get; } = new CellSwapper();
    
    private void SetColumn(int column, InHtmlTables.Cell.GuessedCellType cellType)
    {
        foreach (var row in table.Cells)
        {
            row[column].CellType = cellType;
        }
        
    //StateHasChanged();
    }

    private async Task LoadNewTable()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userName = authState?.User?.Identity?.Name;

        table = await JobService.GetNewTable(userName, CancellationToken.None);
        tableOpenedAt = DateTime.Now;
    }

    private async Task SaveTable()
    {
        var isSaved = await TrySave(InDocTables.CheckStatuses.Done);
        if (isSaved)
        {
            table = null;
            errorMessage = "";
        }
    }

    private async Task SuperviseTable()
    {
        var isSaved = await TrySave(InDocTables.CheckStatuses.ForNextReview);
        if (isSaved)
        {
            table = null;
            errorMessage = "";
        }
    }

    private async Task NonsenseTable()
    {
        var isSaved = await TrySave(InDocTables.CheckStatuses.WrongTable);
        if (isSaved)
        {
            table = null;
            errorMessage = "";
        }
    }
    
    private async Task<bool> TrySave(InDocTables.CheckStatuses operation)
    {
        var elapsedTime = DateTime.Now - tableOpenedAt;
        table.ProcessingTime = elapsedTime;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userName = authState?.User?.Identity?.Name;
        table.Author = userName;

        try
        {
            await JobService.SaveChanges(table, operation);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMessage = e.Message;
            return false;
        }

        return true;
    }
    
    private void MultiplyPrices()
    {
        foreach (var row in table.Cells)
        {
            foreach (var cell in row)
            {
                if (cell.CellType == InHtmlTables.Cell.GuessedCellType.Price
                    || cell.CellType == InHtmlTables.Cell.GuessedCellType.PriceWithVAT)
                {
                    var newPrice = (Devmasters.ParseText.ToDecimal(cell.Value) * 8);
                    cell.Value = newPrice.HasValue ? newPrice.Value.ToString("N2") : "";
                }
            }
        }
    }

    private void AddColumn()
    {
        for (int i = 0; i < table.Cells.Length; i++)
        {
            int currentLength = table.Cells[i].Length;
            Array.Resize(ref table.Cells[i], currentLength + 1);
            table.Cells[i][currentLength] = new CellShell(new InHtmlTables.Cell(), i, currentLength);
        }
        
    }

}

