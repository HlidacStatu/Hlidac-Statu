{"version":3,"sources":["../../../projects/lightgallery-angular11/src/lib/lightgallery-angular.service.ts","../../../projects/lightgallery-angular11/src/lib/lightgallery-angular.component.ts","../../../projects/lightgallery-angular11/src/lib/lightgallery-angular.module.ts"],"names":["LightgalleryService","factory","ɵfac","providedIn","Injectable","LgMethods","LightgalleryComponent","_elementRef","this","lgInitialized","prototype","ngAfterViewChecked","registerEvents","LG","lightGallery","nativeElement","settings","ngOnDestroy","destroy","_this","onAfterAppendSlide","addEventListener","event","detail","onInit","onHasVideo","onContainerResize","onAfterAppendSubHtml","onBeforeOpen","onAfterOpen","onSlideItemLoad","onBeforeSlide","onAfterSlide","onPosterClick","onDragStart","onDragMove","onDragEnd","onBeforeNextSlide","onBeforePrevSlide","onBeforeClose","onAfterClose","onRotateLeft","onRotateRight","onFlipHorizontal","onFlipVertical","i0","ɵɵdirectiveInject","ElementRef","selectors","inputs","ngContentSelectors","decls","vars","template","rf","ctx","i0.ɵɵprojection","Component","selector","styles","Input","LightgalleryModule","declarations","exports","NgModule","imports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LightgalleryService {\n    constructor() {}\n}\n","import { Component, ElementRef, Input, OnInit } from '@angular/core';\nimport lightGallery from 'lightgallery';\nimport {\n    AfterAppendSubHtmlDetail,\n    AfterCloseDetail,\n    AfterOpenDetail,\n    AfterSlideDetail,\n    BeforeCloseDetail,\n    BeforeNextSlideDetail,\n    BeforeOpenDetail,\n    BeforePrevSlideDetail,\n    BeforeSlideDetail,\n    ContainerResizeDetail,\n    DragEndDetail,\n    DragMoveDetail,\n    DragStartDetail,\n    FlipHorizontalDetail,\n    FlipVerticalDetail,\n    InitDetail,\n    PosterClickDetail,\n    RotateLeftDetail,\n    RotateRightDetail,\n    SlideItemLoadDetail,\n} from 'lightgallery/lg-events';\nimport { LightGallerySettings } from 'lightgallery/lg-settings';\nimport { LightGallery } from 'lightgallery/lightgallery';\n\nconst LgMethods = {\n    onAfterAppendSlide: 'lgAfterAppendSlide',\n    onInit: 'lgInit',\n    onHasVideo: 'lgHasVideo',\n    onContainerResize: 'lgContainerResize',\n    onUpdateSlides: 'lgUpdateSlides',\n    onAfterAppendSubHtml: 'lgAfterAppendSubHtml',\n    onBeforeOpen: 'lgBeforeOpen',\n    onAfterOpen: 'lgAfterOpen',\n    onSlideItemLoad: 'lgSlideItemLoad',\n    onBeforeSlide: 'lgBeforeSlide',\n    onAfterSlide: 'lgAfterSlide',\n    onPosterClick: 'lgPosterClick',\n    onDragStart: 'lgDragStart',\n    onDragMove: 'lgDragMove',\n    onDragEnd: 'lgDragEnd',\n    onBeforeNextSlide: 'lgBeforeNextSlide',\n    onBeforePrevSlide: 'lgBeforePrevSlide',\n    onBeforeClose: 'lgBeforeClose',\n    onAfterClose: 'lgAfterClose',\n    onRotateLeft: 'lgRotateLeft',\n    onRotateRight: 'lgRotateRight',\n    onFlipHorizontal: 'lgFlipHorizontal',\n    onFlipVertical: 'lgFlipVertical',\n};\n\n@Component({\n    selector: 'lightgallery',\n    template: '<ng-content></ng-content>',\n    styles: [],\n})\nexport class LightgalleryComponent {\n    private LG!: LightGallery;\n    private lgInitialized = false;\n    constructor(private _elementRef: ElementRef) {\n        this._elementRef = _elementRef;\n    }\n\n    @Input() settings!: LightGallerySettings;\n    @Input() onAfterAppendSlide?: (detail: AfterSlideDetail) => void;\n    @Input() onInit?: (detail: InitDetail) => void;\n    @Input() onHasVideo?: (detail: InitDetail) => void;\n    @Input() onContainerResize?: (detail: ContainerResizeDetail) => void;\n    @Input() onAfterAppendSubHtml?: (detail: AfterAppendSubHtmlDetail) => void;\n    @Input() onBeforeOpen?: (detail: BeforeOpenDetail) => void;\n    @Input() onAfterOpen?: (detail: AfterOpenDetail) => void;\n    @Input() onSlideItemLoad?: (detail: SlideItemLoadDetail) => void;\n    @Input() onBeforeSlide?: (detail: BeforeSlideDetail) => void;\n    @Input() onAfterSlide?: (detail: AfterSlideDetail) => void;\n    @Input() onPosterClick?: (detail: PosterClickDetail) => void;\n    @Input() onDragStart?: (detail: DragStartDetail) => void;\n    @Input() onDragMove?: (detail: DragMoveDetail) => void;\n    @Input() onDragEnd?: (detail: DragEndDetail) => void;\n    @Input() onBeforeNextSlide?: (detail: BeforeNextSlideDetail) => void;\n    @Input() onBeforePrevSlide?: (detail: BeforePrevSlideDetail) => void;\n    @Input() onBeforeClose?: (detail: BeforeCloseDetail) => void;\n    @Input() onAfterClose?: (detail: AfterCloseDetail) => void;\n    @Input() onRotateLeft?: (detail: RotateLeftDetail) => void;\n    @Input() onRotateRight?: (detail: RotateRightDetail) => void;\n    @Input() onFlipHorizontal?: (detail: FlipHorizontalDetail) => void;\n    @Input() onFlipVertical?: (detail: FlipVerticalDetail) => void;\n\n    ngAfterViewChecked(): void {\n        if (!this.lgInitialized) {\n            this.registerEvents();\n            this.LG = lightGallery(\n                this._elementRef.nativeElement as HTMLElement,\n                this.settings,\n            );\n            this.lgInitialized = true;\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.LG.destroy();\n        this.lgInitialized = false;\n    }\n\n    private registerEvents(): void {\n        if (this.onAfterAppendSlide) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onAfterAppendSlide,\n                ((event: CustomEvent) => {\n                    this.onAfterAppendSlide &&\n                        this.onAfterAppendSlide(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onInit) {\n            this._elementRef.nativeElement.addEventListener(LgMethods.onInit, ((\n                event: CustomEvent,\n            ) => {\n                this.onInit && this.onInit(event.detail);\n            }) as EventListener);\n        }\n        if (this.onHasVideo) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onHasVideo,\n                ((event: CustomEvent) => {\n                    this.onHasVideo && this.onHasVideo(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onContainerResize) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onContainerResize,\n                ((event: CustomEvent) => {\n                    this.onContainerResize &&\n                        this.onContainerResize(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onAfterAppendSubHtml) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onAfterAppendSubHtml,\n                ((event: CustomEvent) => {\n                    this.onAfterAppendSubHtml &&\n                        this.onAfterAppendSubHtml(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onBeforeOpen) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onBeforeOpen,\n                ((event: CustomEvent) => {\n                    this.onBeforeOpen && this.onBeforeOpen(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onAfterOpen) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onAfterOpen,\n                ((event: CustomEvent) => {\n                    this.onAfterOpen && this.onAfterOpen(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onSlideItemLoad) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onSlideItemLoad,\n                ((event: CustomEvent) => {\n                    this.onSlideItemLoad && this.onSlideItemLoad(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onBeforeSlide) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onBeforeSlide,\n                ((event: CustomEvent) => {\n                    this.onBeforeSlide && this.onBeforeSlide(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onAfterSlide) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onAfterSlide,\n                ((event: CustomEvent) => {\n                    this.onAfterSlide && this.onAfterSlide(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onPosterClick) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onPosterClick,\n                ((event: CustomEvent) => {\n                    this.onPosterClick && this.onPosterClick(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onDragStart) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onDragStart,\n                ((event: CustomEvent) => {\n                    this.onDragStart && this.onDragStart(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onDragMove) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onDragMove,\n                ((event: CustomEvent) => {\n                    this.onDragMove && this.onDragMove(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onDragEnd) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onDragEnd,\n                ((event: CustomEvent) => {\n                    this.onDragEnd && this.onDragEnd(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onBeforeNextSlide) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onBeforeNextSlide,\n                ((event: CustomEvent) => {\n                    this.onBeforeNextSlide &&\n                        this.onBeforeNextSlide(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onBeforePrevSlide) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onBeforePrevSlide,\n                ((event: CustomEvent) => {\n                    this.onBeforePrevSlide &&\n                        this.onBeforePrevSlide(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onBeforeClose) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onBeforeClose,\n                ((event: CustomEvent) => {\n                    this.onBeforeClose && this.onBeforeClose(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onAfterClose) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onAfterClose,\n                ((event: CustomEvent) => {\n                    this.onAfterClose && this.onAfterClose(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onRotateLeft) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onRotateLeft,\n                ((event: CustomEvent) => {\n                    this.onRotateLeft && this.onRotateLeft(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onRotateRight) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onRotateRight,\n                ((event: CustomEvent) => {\n                    this.onRotateRight && this.onRotateRight(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onFlipHorizontal) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onFlipHorizontal,\n                ((event: CustomEvent) => {\n                    this.onFlipHorizontal &&\n                        this.onFlipHorizontal(event.detail);\n                }) as EventListener,\n            );\n        }\n        if (this.onFlipVertical) {\n            this._elementRef.nativeElement.addEventListener(\n                LgMethods.onFlipVertical,\n                ((event: CustomEvent) => {\n                    this.onFlipVertical && this.onFlipVertical(event.detail);\n                }) as EventListener,\n            );\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { LightgalleryComponent } from './lightgallery-angular.component';\n\n@NgModule({\n    declarations: [LightgalleryComponent],\n    imports: [],\n    exports: [LightgalleryComponent],\n})\nexport class LightgalleryModule {}\n"]}