@page "/tableEditor/{obor}/{SpecificTablePk:int?}"

@using HlidacStatu.Entities
@using System.Threading
@using HlidacStatu.DetectJobs
@using HlidacStatu.Repositories.Exceptions

@using System.Diagnostics
@using JobTableEditor.Data
@using Microsoft.AspNetCore.Authorization
@using Serilog

@inject JobService JobService
@inject ToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin,TableEditor")]

@if (_table == null)
{
    <p>Načítám tabulku&hellip;</p>
}
else
{
    <div class="sticky-top pt-2 col-6 row">
        <div class="col-8">
            <button class="btn btn-secondary btn-sm" @onclick="AddColumn">Přidej sloupec</button>
            <button class="btn btn-secondary btn-sm" @onclick="AddRow">Přidej řádek</button>
            <LinkToOriginal InDocTable="@_table.InDocTable"></LinkToOriginal>
        </div>
        <div class="col-4">
            <span class="badge rounded-pill bg-success">
                Hotovo: @_processedTables.ToString("#,#")
                <span class="visually-hidden">tabulek</span>
            </span>
            <span class="badge rounded-pill bg-danger">
                Zbývá: @_queuedTables.ToString("#,#")
                <span class="visually-hidden">tabulek</span>
            </span>
        </div>
    </div>
    <hr style="margin-bottom:20px;"/>
    <table class="table">
        <thead>
        <tr>
            <th></th>
            @for (int col = 0; col < _table.Cells[0].Length; col++)
            {
                int column = col;
                <th>
                    <button class="btn btn-sm btn-primary bg-opacity-25" @onclick="@(() => SetColumn(column, true))">Označit</button>
                    <button class="btn btn-sm btn-outline-info" @onclick="@(() => SetColumn(column, false))">Nic</button>
                    <span>&nbsp;&nbsp;| &nbsp;</span>
                </th>
            }
        </tr>
        </thead>
        <tbody>
        @foreach (var row in _table.Cells)
        {
            <tr>
                <th>
                    <button class="btn btn-sm btn-outline-info" @onclick="@(() => SetRow(row, false))">Nic</button>
                </th>
                @foreach (var cell in row)
                {
                    <Cell CellShell="@cell" Swapper="@Swapper" SyncSignaler="_syncIndicator"></Cell>
                }
            </tr>
        }
        </tbody>
    </table>
    
    <hr/>
    <div style="height:10px;"></div>
    <div class="fixed-bottom bg-light p-2">
        <h4 class="text-danger float-start">@_errorMessage</h4>
        <div class="float-end">
            @* <button class="btn btn-outline-success" @onclick="SaveTable">Save changes</button> *@
            <Modal Table="_table"></Modal>
            <button class="btn btn-outline-secondary" @onclick="NotItTable">Není z oblasti IT</button>
            <button class="btn btn-outline-warning" @onclick="NoPricesTable">Chybí ceny</button>
            <button class="btn btn-outline-warning" @onclick="SuperviseTable">Nevím co s tím šéfe (supervisor)</button>
            <button class="btn btn-outline-warning" @onclick="BrokenTable">Obsahuje data, ale je moc rozházená</button>
            <button class="btn btn-outline-danger" @onclick="NonsenseTable">This table is full of 💩</button>
        </div>
    </div>

    <hr/>
    
}

@code {
    
    [Parameter]
    public string Obor { get; set; }
    [Parameter]
    public int? SpecificTablePk { get; set; }
    
    private SomeTable _table;
    
    private string _errorMessage;
    private CellSwapper Swapper { get; } = new CellSwapper();
    
    private int _processedTables;
    private int _queuedTables = 0;

    private int _syncIndicator = 0;
    
    private string _userName;

    private readonly ILogger _logger = Log.ForContext<TableEditor>();

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _userName = authState?.User?.Identity?.Name;
        await LoadNewTable();
    }


    private void SetColumn(int column, bool isImportant)
    {
        foreach (var row in _table.Cells)
        {
            row[column].IsImportant = isImportant;
        }
    }
    
    private void SetRow(CellShell[] row, bool isImportant)
    {
        foreach (var column in row)
        {
            column.IsImportant = isImportant;
        }
    }
    

    private async Task LoadNewTable()
    {
        var queueTask = JobService.WaitingInQueue(Obor, CancellationToken.None);
        var sw = Stopwatch.StartNew();
        sw.Start();
        if (SpecificTablePk.HasValue && SpecificTablePk != 0) //todo: lock only for admins?
        {
            _table = await JobService.GetSpecificTable(SpecificTablePk.Value, _userName, CancellationToken.None);
        }
        else
        {
            try
            {
                _table = await JobService.GetNewTable(Obor, _userName, CancellationToken.None);
                
            }
            catch (NoDataFoundException ndfe)
            {
                await ToastService.CreateInfoToast("Fronta zpracována", "Podařilo se vám zpracovat všechny tabulky. Dobrá práce!");
            }
            catch (Exception e)
            {
                _logger.Debug(e, "Load new table problem");
                await ToastService.CreateErrorToast("Problém s načítáním", "Nepodařilo se načíst novou tabulku!");
                throw;
            }
        }
        
        _table.Author = _userName;
        _table.StartWork();
        _table.OnSave += SaveTable;

        try
        {
            _queuedTables = await queueTask;
        }
        catch (Exception e)
        {
            _logger.Debug(e, "Queue task problem");
        }

        await ToastService.CreateInfoToast("Nová tabulka", "Načtena nová tabulka.");
        
        StateHasChanged();
        
        sw.Stop();
        _logger.Debug($"Total load time: {sw.ElapsedMilliseconds}ms");
    }

    private async Task SaveTable()
    {
        var isSaved = await TrySave(InDocTables.CheckState.Done);
        if (isSaved)
        {
            await OnSaved();
        }
    }

    private async Task SuperviseTable()
    {
        var isSaved = await TrySave(InDocTables.CheckState.ForNextReview);
        if (isSaved)
        {
            await OnSaved();
        }
    }
    
    private async Task NoPricesTable()
    {
        var isSaved = await TrySave(InDocTables.CheckState.MissingPrices);
        if (isSaved)
        {
            await OnSaved();
        }
    }
    
    private async Task NotItTable()
    {
        var isSaved = await TrySave(InDocTables.CheckState.CurrentlyNotInteresting);
        if (isSaved)
        {
            await OnSaved();
        }
    }
    
    private async Task BrokenTable()
    {
        var isSaved = await TrySave(InDocTables.CheckState.BrokenFormat);
        if (isSaved)
        {
            await OnSaved();
        }
    }

    private async Task NonsenseTable()
    {
        var isSaved = await TrySave(InDocTables.CheckState.WrongTable);
        if (isSaved)
        {
            await OnSaved();
        }
    }

    private readonly string[] pochvaly = new string[]
    {
        "Dobrá práce!",
        "Šikula!",
        "Tobě to jde!",
        "Je radost s tebou spolupracovat!",
        "Boží <i class=\"fad fa-heart\"></i>"
    };
    private async Task OnSaved()
    {
        _table = null;
        _errorMessage = "";
        _processedTables++;

        MarkupString hlaska;
        try
        {
            switch (_processedTables % 100)
            {
                case 20:
                    hlaska = new MarkupString("Zasloužíš si <i class=\"fad fa-mug-hot\"></i>");
                    break;
                case 40:
                    hlaska = new MarkupString("<i class=\"fal fa-smoking\"></i> Pauzu?");
                    break;
                case 60:
                    hlaska = new MarkupString("Nemáš hlad <i class=\"fal fa-cookie\"></i>");
                    break;
                case 80:
                    hlaska = new MarkupString("<i class=\"fad fa-running\"></i> Co se takhle trochu protáhnout?");
                    break;
                case 99:
                    hlaska = new MarkupString("Tvůj dnešní výkon je na <i class=\"fad fa-medal\"></i>");
                    break;
                default:
                    hlaska = new MarkupString($"{pochvaly[_processedTables % (pochvaly.Length)]}");
                    break;
            }
        }
        catch (Exception e)
        {
            _logger.Debug(e, "Hlaska problem");
            hlaska = new MarkupString($"Nepodařilo se mi vymyslet správnou hlášku. Omlouvám se... <br/> Chyba je v {e.Message}");
        }
        
        await ToastService.CreateSuccessToast("Tabulka uložena", hlaska);
        
        StateHasChanged();

        if (SpecificTablePk.HasValue && SpecificTablePk != 0)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            await LoadNewTable();
        }

    }
    
    private async Task<bool> TrySave(InDocTables.CheckState operation)
    {
        _table.EndWork();

        try
        {
            await JobService.SaveChanges(_table, operation);
        }
        catch (Exception e)
        {
            _logger.Debug(e, "SaveChanges problem");
            _errorMessage = e.Message;
            await ToastService.CreateErrorToast("Problém s ukládáním", "Nepodařilo se uložit data!");
            return false;
        }

        return true;
    }
    

    private void AddColumn()
    {
        for (int i = 0; i < _table.Cells.Length; i++)
        {
            int currentLength = _table.Cells[i].Length;
            Array.Resize(ref _table.Cells[i], currentLength + 1);
            _table.Cells[i][currentLength] = new CellShell(new InTables.Cell(), i, currentLength);
        }
        
    }
    
    private void AddRow()
    {
        var oldArray = _table.Cells;
        _table.Cells = new CellShell[oldArray.Length + 1][];
        for (int row = 0; row < oldArray.Length; row++) {
            _table.Cells[row] = oldArray[row]; 
        }

        int columnCount = _table.Cells[0].Length;
        int lastRow = _table.Cells.Length - 1;
        _table.Cells[lastRow] = new CellShell[columnCount];
        for (int col = 0; col < columnCount; col++)
        {
            _table.Cells[lastRow][col] = new CellShell(new InTables.Cell(), lastRow, col);
        }
        
    }

}

