@using Devmasters
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using PlatyUredniku.Models
@using HlidacStatu.Repositories;
@using Microsoft.EntityFrameworkCore
@using PlatyUredniku.Services

@inject AutocompleteCategoryCacheService AutocompleteService


@section scripts
{
    <link rel="stylesheet" type="text/css" href="//cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css" />
    <script type="text/javascript" charset="utf8" src="//cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
    <script>
        function adjustDataTablesWidth() {
            $.fn.dataTable.tables({ visible: true, api: true }).columns.adjust();
        }
    </script>
    <script>
        function updateHiddenInput(hiddenId) {
            const input = document.getElementById(hiddenId+'filter');
            const hiddenInput = document.getElementById(hiddenId);
            const datalist = document.getElementById('organizace_list');
            const options = datalist.options;
            hiddenInput.value = '';
            for (let i = 0; i < options.length; i++) {
                if (options[i].value === input.value) {
                    hiddenInput.value = options[i].getAttribute('data-value');
                    break;
                }
            }
        }
    </script>
}

@section breadcrumbs
{
    <ol class="breadcrumb">
        <li>
            <a asp-action="Index">Platy úředníků</a>
        </li>
        <li>
            <a asp-action="Analyzy">Analýzy</a>
        </li>
        <li class="active">
            Porovnání vývoje výdělků
        </li>
    </ol>
}
@{
    string k1 = "";
    string k1Text = "";
    string k2 = "";
    string k2Text = "";
    if (this.Context.Request.Query.TryGetValue("k1", out var rk1))
    {
        k1 = rk1.FirstOrDefault();
    }
    if (this.Context.Request.Query.TryGetValue("k2", out var rk2))
    {
        k2 = rk2.FirstOrDefault();
    }
    bool sectionBgSwitch = false;
    using (var db = new HlidacStatu.Entities.DbEntities())
    {
        if (!string.IsNullOrWhiteSpace(k1))
        {
            k1Text = db.PuCZISCO
                .AsNoTracking()
                .Where(m => m.MameVydelky && m.Kod == k1)
                .Select(m => m.Nazev)
                .FirstOrDefault();
        }

        if (!string.IsNullOrWhiteSpace(k2))
        {
            k2Text = db.PuCZISCO
                .AsNoTracking()
                .Where(m => m.MameVydelky && m.Kod == k2)
                .Select(m => m.Nazev)
                .FirstOrDefault();
        }
    }
    
}

<section class="d-flex align-items-center justify-content-center @(sectionBgSwitch ? "alter-bg-color" : "")">
    <div class="container">


        <h2 class="pb-2 border-bottom">Porovnání kategorií zaměstnání</h2>

        <form action="/analyza/kategorie" method="get" onkeydown="if(event.key === 'Enter') {return false;}">
            <div class="row">
                <div class="col-md-6 col-sm-12">
                    <label for="k1" class="form-label">První kategorie</label>
                    @(await Html.RenderComponentAsync<PlatyUredniku.Views.Shared.Components.AutocompleteSimpleWrap>(RenderMode.ServerPrerendered, new
                    {
                        Name = "k1",
                        DefaultPlaceholder = k1Text,
                        DefaultValue = k1
                    }))
                </div>
                <div class="col-md-6 col-sm-12">
                    <label for="k2filter" class="form-label">Druhá kategorie</label>
                    <input id="k2filter" list="organizace_list" type="text" class="form-control" oninput="updateHiddenInput('k2')" placeholder="@k2Text">
                    <input type="hidden" id="k2" name="k2">
                </div>
                <div class="col"><button class="btn btn-sm btn-primary" type="submit">Porovnat vývoj platů</button></div>
            </div>
            <datalist id="organizace_list">
                @foreach (var org in AutocompleteService.LoadCzisco())
                {
                    <option value="@org.Nazev" data-value="@org.Kod"></option>    
                }
            </datalist>
        </form>


        @{
            string[] compareTo = new string[] { k1,k2}.Where(m=>!string.IsNullOrWhiteSpace(m)).ToArray();

            if (compareTo?.Length > 0)
            {
                sectionBgSwitch = !sectionBgSwitch;

                List<AreaRangePlot> data = new List<AreaRangePlot>();

                foreach (var compItem in compareTo)
                {
                    var d = await PuRepo.LoadVydelekForZamestnaniAsync(compItem, HlidacStatu.Entities.PuVydelek.VydelekSektor.StatSamosprava);
                    if (d?.Any() == true)
                    {
                        var dName = d.OrderByDescending(m => m.Rok).Select(m => m.FullNazevKategorieZamestnani()).FirstOrDefault().ShortenMe(140);
                        data.Add(AreaRangePlot.ToAreaRangePlotWithPrumer(d, dName));
                    }
                    d = await PuRepo.LoadVydelekForZamestnaniAsync(compItem, HlidacStatu.Entities.PuVydelek.VydelekSektor.Soukromy);
                    if (d?.Any() == true)
                    {
                        var dName = d.OrderByDescending(m => m.Rok).Select(m => m.FullNazevKategorieZamestnani()).FirstOrDefault().ShortenMe(140);
                        data.Add(AreaRangePlot.ToAreaRangePlotWithPrumer(d, dName));
                    }

                }

                //calculate height
                var height = 430
                + data.Count() * 12 //pul radku na jednu serii
                + (data.Count(m => m.Title.Length > 80) * 17); //dlouhe nazvy serii pocitej na cely radek

                AreaRangeCompareRenderOptions chartModel = new AreaRangeCompareRenderOptions()
                {
                    CssHeight = height.ToString(),
                    Data = data.ToArray(),
                    Title = "Porovnání s jinými oblastmi trhu"
                };


                <partial name="Graphs/_AreaRangeComparePlot" model="@chartModel" />
            }
        }

    </div>
</section>

