@using System.Threading
@using Microsoft.AspNetCore.Components.Web
@* @using HlidacStatu.Entities *@
@* @using YamlDotNet.Core *@
@typeparam TItem

<div class="hlidac-autocomplete-overlay" style="display:@(IsAnyOptionItem || ShowHelpTips ? "flex" : "none")" @onclick="CloseOptions">
</div>
<div class="hlidac-autocomplete">
    <div class="input-group bg-white rounded-2">
        <input @ref="InputBoxElement"
               id="autocompleteInputBox"
               type="text"
               autocomplete="off"
               placeholder="@InputBoxPlaceHolder"
               class="hlidac-autocomplete-input form-control border border-0"
               @bind="@InputBoxValue"
               @bind:event="oninput"
               @onkeyup="@(async (e) => await SearchAsync(e))"
               @onkeydown="OnInputKeyDown"
               @onclick="@ShowDefaultHintItems"/>

            @if (_showSpinner)
            {
                <span class="spinner-border spinner-border-sm text-light align-middle mb-1 ms-1" role="status">
                  <span class="visually-hidden">Loading...</span>
                </span>
            }
        
    </div>

    @if (ShowHelpTips && string.IsNullOrWhiteSpace(InputBoxValue))
    {
        <div class="hlidac-autocomplete-list">
            <div class="list-group">
                @if (HelpTemplate is not null)
                {
                    @foreach (RenderFragment helpTip in HelpTips)
                    {
                        @HelpTemplate(helpTip)
                    }
                }
            </div>
        </div>
    }

    @if (IsAnyOptionItem)
    {
        <div class="hlidac-autocomplete-list">
            <div class="list-group">
                @for (var index = 0; index < OptionItems.Count; index++)
                {
                    int option = index; // we have to do it like this, because index is from the outer scope
                    var item = OptionItems[index];
                    if (ItemTemplate is not null)
                    {
                        <button class="list-group-item list-group-item-action @(option == _selectedOption ? "active" : "")"
                                @onclick="@(() => SelectItemAsync(option))">
                            @ItemTemplate(item)
                        </button>
                    }
                }
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public RenderFragment<TItem>? ItemTemplate { get; set; }

    

    [Parameter]
    public RenderFragment<RenderFragment>? HelpTemplate { get; set; }

    [Parameter]
    public Func<string, CancellationToken, Task<List<TItem>>> SearchFuncAsync { get; set; } = null!;

    [Parameter]
    public Func<TItem, string> TextSelector { get; set; } = null!;

    [Parameter]
    public EventCallback<AutocompleteItem<TItem>> OnAutocompleteSubmitted { get; set; }

    [Parameter]
    public EventCallback<string> OnAutocompleteTextSelected { get; set; }

    [Parameter]
    public List<RenderFragment>? HelpTips { get; set; }

    private ElementReference InputBoxElement { get; set; }
    private string? InputBoxValue { get; set; }
    private bool IsInputboxEmpty => string.IsNullOrEmpty(InputBoxValue);
    
    private CancellationTokenSource? _cts;
    private Task<List<TItem>>? _searchTask;

    private List<TItem>? OptionItems { get; set; }
    private bool IsAnyOptionItem => OptionItems is not null && OptionItems.Count > 0;
    private bool ShowHelpTips { get; set; }

    private string GrayboxDisplay { get; set; } = "none";
    
    private bool _showSpinner = false;

    private string InputBoxPlaceHolder
    {
        get => "Začněte psát název organizace";
    }


    private int _selectedOption = -1;

        private const string ActiveTag = "border border-3 border-warning";

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (TextSelector is null)
            throw new ArgumentNullException(nameof(TextSelector));

        if (SearchFuncAsync is null)
            throw new ArgumentNullException(nameof(SearchFuncAsync));
    }

    private string GetTextFromItem(AutocompleteItem<TItem> autocompleteItem)
    {
        if (autocompleteItem.Value is null)
            return autocompleteItem.Text ?? "";

        return TextSelector(autocompleteItem.Value);
    }

    private async Task SearchAsync(KeyboardEventArgs eventArgs)
    {
    //string? query = eventArgs.Value?.ToString();
        string query = InputBoxValue;
        CancelRunningTask();

    // if query is empty, we can cleanup task and data
        if (string.IsNullOrWhiteSpace(query))
        {
            CloseOptions();
            return;
        }

        _cts = new CancellationTokenSource();

    // here we can also add delay when typing before sending a request

        try
        {
            _searchTask = SearchFuncAsync.Invoke(query, _cts.Token);

            var data = await _searchTask;

            if (_searchTask?.IsCanceled == false)
                OptionItems = data;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void CloseOptions()
    {
        OptionItems = null;
        _searchTask = null;
        _selectedOption = -1;
        HideDefaultHintItems();
    }

    private void CancelRunningTask()
    {
        if (_searchTask is not null && !_searchTask.IsCompleted && !_searchTask.IsCanceled
            && _cts is not null && !_cts.IsCancellationRequested)
            _cts.Cancel();
    }


    private void OnSelectOption(int option)
    {
        Interlocked.Exchange(ref _selectedOption, option);
    }

    private void OnDeselectOption(int option)
    {
        Interlocked.CompareExchange(ref _selectedOption, -1, option);
    }

    private async Task SelectItemAsync(int option)
    {

        if (!IsAnyOptionItem || option == -1)
        {
            CloseOptions();
            return;
        }

        if (IsAnyOptionItem && option >= 0 && option <= OptionItems.Count)
        {
            var result = new AutocompleteItem<TItem>(OptionItems[option]);
            InputBoxValue = result.Text;
            await SubmitSearch(result);
        }
        
        CloseOptions();
    }

    private async Task OnInputKeyDown(KeyboardEventArgs eventArgs)
    {
        HideDefaultHintItems();
        switch (eventArgs.Code)
        {
            case "ArrowUp" when IsAnyOptionItem:
                if (_selectedOption < 0) // selected item is at the top
                    _selectedOption = OptionItems?.Count - 1 ?? -1;
                else
                    _selectedOption--;
                break;
            case "ArrowDown" when IsAnyOptionItem:
                if (_selectedOption == OptionItems?.Count - 1) // selected item is at the bottom
                    _selectedOption = 0;
                else
                    _selectedOption++;
                break;
            case "Escape":
                CancelRunningTask();
                CloseOptions();
                break;
            case "Enter" when IsInputboxEmpty:
                break;
            case "Enter":
                await SelectItemAsync(_selectedOption);
                break;
            default:
                break;
        }
    }
    

    private async Task SubmitSearch(AutocompleteItem<TItem> selectedItem)
    {
        
        //spin it
        _showSpinner = true;
        //notify parent, that we are done
        await OnAutocompleteSubmitted.InvokeAsync(selectedItem);
    }

    private void ShowDefaultHintItems()
    {
        ShowHelpTips = true;
    }

    private void HideDefaultHintItems()
    {
        ShowHelpTips = false;
    }
    
}