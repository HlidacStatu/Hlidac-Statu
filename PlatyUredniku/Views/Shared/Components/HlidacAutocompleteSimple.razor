@using System.Threading

@typeparam TItem

<div class="hlidac-autocomplete">
    <div class="input-group bg-white rounded-2">
        <input @ref="InputBoxElement"
               type="text"
               autocomplete="off"
               placeholder="@DefaultPlaceholder"
               class="form-control"
               @bind="@InputBoxValue"
               @bind:event="oninput"
               @onkeyup="@(async (e) => await SearchAsync(e))"
               @onkeydown="OnInputKeyDown"
        />
        
        <input type="hidden" name="@Name" id="@Name" @bind="HiddenValue"/>
    </div>

    @if (IsAnyOptionItem)
    {
        <div class="hlidac-autocomplete-list">
            <div class="list-group">
                @for (var index = 0; index < OptionItems.Count; index++)
                {
                    int option = index; // we have to do it like this, because index is from the outer scope
                    var item = OptionItems[index];
                    if (ItemTemplate is not null)
                    {
                        <button type="button" class="list-group-item list-group-item-action @(option == _selectedOption ? "active" : "")"
                                @onclick="@(() => SelectItemAsync(option))">
                            @ItemTemplate(item)
                        </button>
                    }
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public RenderFragment<TItem>? ItemTemplate { get; set; }
    
    [Parameter]
    public Func<string, CancellationToken, Task<List<TItem>>> SearchFuncAsync { get; set; } = null!;
    
    [Parameter]
    public Func<TItem, string> ValueSelectorFunc { get; set; } = null!;
    [Parameter]
    public Func<TItem, string> TextSelectorFunc { get; set; } = null!;
    
    [Parameter]    
    public string DefaultPlaceholder { get; set; } = "Začněte psát...";
    
    [Parameter]
    public string DefaultValue { get; set; }

    

    private ElementReference InputBoxElement { get; set; }
    private string? InputBoxValue { get; set; }
    private string? HiddenValue { get; set; }
    private bool IsInputboxEmpty => string.IsNullOrEmpty(InputBoxValue);
    
    private CancellationTokenSource? _cts;
    private Task<List<TItem>>? _searchTask;

    private List<TItem>? OptionItems { get; set; }
    private bool IsAnyOptionItem => OptionItems is not null && OptionItems.Count > 0;
    

    private int _selectedOption = -1;
    
    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(DefaultValue))
        {
            HiddenValue = DefaultValue;
            
        }
        
        if (SearchFuncAsync is null)
            throw new ArgumentNullException(nameof(SearchFuncAsync));
        if (ValueSelectorFunc is null)
            throw new ArgumentNullException(nameof(ValueSelectorFunc));
        if (TextSelectorFunc is null)
            throw new ArgumentNullException(nameof(TextSelectorFunc));
    }

    private async Task SearchAsync(KeyboardEventArgs eventArgs)
    {
        string query = InputBoxValue;
        CancelRunningTask();

        if (string.IsNullOrWhiteSpace(query))
        {
            CloseOptions();
            return;
        }

        _cts = new CancellationTokenSource();
        
        try
        {
            _searchTask = SearchFuncAsync.Invoke(query, _cts.Token);

            var data = await _searchTask;

            if (_searchTask?.IsCanceled == false)
                OptionItems = data;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void CloseOptions()
    {
        OptionItems = null;
        _searchTask = null;
        _selectedOption = -1;
    }

    private void CancelRunningTask()
    {
        if (_searchTask is not null && !_searchTask.IsCompleted && !_searchTask.IsCanceled
            && _cts is not null && !_cts.IsCancellationRequested)
            _cts.Cancel();
    }

    private async Task SelectItemAsync(int option)
    {

        if (!IsAnyOptionItem || option == -1)
        {
            CloseOptions();
            return;
        }

        // vybraná položka existuje => vybrat
        if (IsAnyOptionItem && option >= 0 && option <= OptionItems.Count)
        {
            var selectedItem = OptionItems[option];
            InputBoxValue = TextSelectorFunc(selectedItem);
            HiddenValue = ValueSelectorFunc(selectedItem);
        }
        
        CloseOptions();
    }

    private async Task OnInputKeyDown(KeyboardEventArgs eventArgs)
    {
        switch (eventArgs.Code)
        {
            case "ArrowUp" when IsAnyOptionItem:
                if (_selectedOption < 0) // selected item is at the top
                    _selectedOption = OptionItems?.Count - 1 ?? -1;
                else
                    _selectedOption--;
                break;
            case "ArrowDown" when IsAnyOptionItem:
                if (_selectedOption == OptionItems?.Count - 1) // selected item is at the bottom
                    _selectedOption = 0;
                else
                    _selectedOption++;
                break;
            case "Escape":
                CancelRunningTask();
                CloseOptions();
                break;
            case "Enter" when IsInputboxEmpty:
                break;
            case "Enter":
                await SelectItemAsync(_selectedOption);
                break;
            default:
                break;
        }
    }
}