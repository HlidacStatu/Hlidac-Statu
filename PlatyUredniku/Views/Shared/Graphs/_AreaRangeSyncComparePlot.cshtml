@model AreaRangeCompareRenderOptions
@using PlatyUredniku.Models

@{
    string chartId = HlidacStatu.Util.Consts.Rnd.Next(999).ToString("000");

    var maxPlat = Math.Max(
        Model.Data.SelectMany(m => m.Values).Max(m => m.Value.Max) ?? 0,
        Model.Data.SelectMany(m => m.Values).Max(m => m.Value.Extra) ?? 0
    ) * 1.05d;
}

@if (Model.Data == null || Model.Data.Count() == 0)
{
    if (!string.IsNullOrEmpty(Model.TextForNoData))
    {
        <div>@Model.TextForNoData</div>
    }

    return;
}
<figure>
    <div id="chart-container-@(chartId)">
        @for (int i = 0; i < Model.Data.Length; i++)
        {
        <div id="chart-container-@(chartId)-@(i)">
        </div>
        }
    </div>

</figure>

<script>

            @for (int i = 0; i < Model.Data.Length; i++)
            {
                var s = Model.Data[i];
                <text>
                    Highcharts.chart('chart-container-@(chartId)-@(i)', {
                        chart: {
                            height: '@Model.CssHeight', // 16:6 ratio
                            width: null // 16:6 ratio
                        },
                        legend: { enabled: false },
                        title: {
                            text: '@Html.Raw(Model.Data.First().Title)',
                            align: 'left'
                        },
                        subtitle: {
                            text: '@Html.Raw(Model.Data.First().Subtitle)',
                            align: 'left'
                        },
                        xAxis: {
                            type: 'datetime'
                        },
                        yAxis: {
                            title: {
                                text: 'Výše platu'
                            },
                            labels: {
                                format: '{value:,.0f} Kč'
                            },
                            max: @(maxPlat.ToString(HlidacStatu.Util.Consts.enCulture)),
                            tickAmount: 4
                        },
                        tooltip: {
                            crosshairs: true,
                            shared: true,
                            valueSuffix: ' Kč'
                        },
                        plotOptions: {
                            series: {
                                pointStart: Date.UTC(@Model.Data.First().FirstYear, 1, 1),
                                pointIntervalUnit: 'year'
                            }
                        },
                        series: [
                            {
                                name: '@Html.Raw(s.ExtraTitle)',
                                color: Highcharts.getOptions().colors[@(i*1)],
                                data: @s.DrawExtras(),
                                zIndex: 1
                            }, {
                                name: '@Html.Raw(s.MinMaxTitle)',
                                data: @s.DrawMinMaxes(),
                                type: 'arearange',
                                lineWidth: 0,
                                linkedTo: ':previous',
                                color: Highcharts.getOptions().colors[@(i*1)],
                                fillOpacity: 0.3,
                                zIndex: 0,
                                marker: {
                                    enabled: false
                                }
                            }
                        ]
                    });
                </text>
            }


    /**
    * In order to synchronize tooltips and crosshairs, override the
    * built-in events with handlers defined on the parent element.
    */
    ['mousemove', 'touchmove', 'touchstart'].forEach(function (eventType) {
        document.getElementById('chart-container-@(chartId)').addEventListener(
            eventType,
            function (e) {
                let chart,
                    point,
                    i,
                    event;

                for (i = 0; i < Highcharts.charts.length; i = i + 1) {
                    chart = Highcharts.charts[i];
                    // Find coordinates within the chart
                    event = chart.pointer.normalize(e);
                    // Get the hovered point
                    point = chart.series[0].searchPoint(event, true);

                    if (point) {
                        point.highlight(e);
                    }
                }
            }
        );
    });

    /**
     * Override the reset function, we don't need to hide the tooltips and
     * crosshairs.
     */
    Highcharts.Pointer.prototype.reset = function () {
        return undefined;
    };

    /**
     * Highlight a point by showing tooltip, setting hover state and draw crosshair
     */
    Highcharts.Point.prototype.highlight = function (event) {
        event = this.series.chart.pointer.normalize(event);
        this.onMouseOver(); // Show the hover marker
        //this.series.chart.tooltip.refresh(this); // Show the tooltip
        this.series.chart.xAxis[0].drawCrosshair(event, this); // Show the crosshair
    };

    /**
     * Synchronize zooming through the setExtremes event handler.
     */
    function syncExtremes(e) {
        const thisChart = this.chart;

        if (e.trigger !== 'syncExtremes') { // Prevent feedback loop
            Highcharts.each(Highcharts.charts, function (chart) {
                if (chart !== thisChart) {
                    if (chart.xAxis[0].setExtremes) { // It is null while updating
                        chart.xAxis[0].setExtremes(
                            e.min,
                            e.max,
                            undefined,
                            false,
                            { trigger: 'syncExtremes' }
                        );
                    }
                }
            });
        }
    }
</script>

