{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.1 (2024-04-04)\n *\n * Highcharts\n *\n * (c) 2010-2024 Highsoft AS\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/data-tools', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Data/Modifiers/DataModifier.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - GÃ¸ran Slettemark\n         *\n         * */\n        var addEvent = U.addEvent, fireEvent = U.fireEvent, merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class to provide an interface for modifying a table.\n         *\n         * @private\n         */\n        var DataModifier = /** @class */ (function () {\n            function DataModifier() {\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Runs a timed execution of the modifier on the given datatable.\n             * Can be configured to run multiple times.\n             *\n             * @param {DataTable} dataTable\n             * The datatable to execute\n             *\n             * @param {DataModifier.BenchmarkOptions} options\n             * Options. Currently supports `iterations` for number of iterations.\n             *\n             * @return {Array<number>}\n             * An array of times in milliseconds\n             *\n             */\n            DataModifier.prototype.benchmark = function (dataTable, options) {\n                var results = [];\n                var modifier = this;\n                var execute = function () {\n                    modifier.modifyTable(dataTable);\n                    modifier.emit({\n                        type: 'afterBenchmarkIteration'\n                    });\n                };\n                var defaultOptions = {\n                    iterations: 1\n                };\n                var iterations = merge(defaultOptions, options).iterations;\n                modifier.on('afterBenchmarkIteration', function () {\n                    if (results.length === iterations) {\n                        modifier.emit({\n                            type: 'afterBenchmark',\n                            results: results\n                        });\n                        return;\n                    }\n                    // Run again\n                    execute();\n                });\n                var times = {\n                    startTime: 0,\n                    endTime: 0\n                };\n                // Add timers\n                modifier.on('modify', function () {\n                    times.startTime = window.performance.now();\n                });\n                modifier.on('afterModify', function () {\n                    times.endTime = window.performance.now();\n                    results.push(times.endTime - times.startTime);\n                });\n                // Initial run\n                execute();\n                return results;\n            };\n            /**\n             * Emits an event on the modifier to all registered callbacks of this event.\n             *\n             * @param {DataModifier.Event} [e]\n             * Event object containing additonal event information.\n             */\n            DataModifier.prototype.emit = function (e) {\n                fireEvent(this, e.type, e);\n            };\n            /**\n             * Returns a modified copy of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            DataModifier.prototype.modify = function (table, eventDetail) {\n                var modifier = this;\n                return new Promise(function (resolve, reject) {\n                    if (table.modified === table) {\n                        table.modified = table.clone(false, eventDetail);\n                    }\n                    try {\n                        resolve(modifier.modifyTable(table, eventDetail));\n                    }\n                    catch (e) {\n                        modifier.emit({\n                            type: 'error',\n                            detail: eventDetail,\n                            table: table\n                        });\n                        reject(e);\n                    }\n                });\n            };\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            DataModifier.prototype.modifyCell = function (table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columnName, rowIndex, cellValue, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            };\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            DataModifier.prototype.modifyColumns = function (table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columns, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            };\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            DataModifier.prototype.modifyRows = function (table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            rows, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            };\n            /**\n             * Registers a callback for a specific modifier event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            DataModifier.prototype.on = function (type, callback) {\n                return addEvent(this, type, callback);\n            };\n            return DataModifier;\n        }());\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for modifier events and options.\n         * @private\n         */\n        (function (DataModifier) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with modifier names and their class\n             * constructor.\n             */\n            DataModifier.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a modifier class to the registry. The modifier class has to provide\n             * the `DataModifier.options` property and the `DataModifier.modifyTable`\n             * method to modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the modifier class.\n             *\n             * @param {DataModifierType} DataModifierClass\n             * Modifier class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a modifier registered with this key.\n             */\n            function registerType(key, DataModifierClass) {\n                return (!!key &&\n                    !DataModifier.types[key] &&\n                    !!(DataModifier.types[key] = DataModifierClass));\n            }\n            DataModifier.registerType = registerType;\n        })(DataModifier || (DataModifier = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataModifier;\n    });\n    _registerModule(_modules, 'Data/DataTable.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - GÃ¸ran Slettemark\n         *\n         * */\n        var addEvent = U.addEvent, fireEvent = U.fireEvent, uniqueKey = U.uniqueKey;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class to manage columns and rows in a table structure. It provides methods\n         * to add, remove, and manipulate columns and rows, as well as to retrieve data\n         * from specific cells.\n         *\n         * @class\n         * @name Highcharts.DataTable\n         *\n         * @param {Highcharts.DataTableOptions} [options]\n         * Options to initialize the new DataTable instance.\n         */\n        var DataTable = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataTable class.\n             *\n             * @param {Highcharts.DataTableOptions} [options]\n             * Options to initialize the new DataTable instance.\n             */\n            function DataTable(options) {\n                if (options === void 0) { options = {}; }\n                /**\n                 * Dictionary of all column aliases and their mapped column. If a column\n                 * for one of the get-methods matches an column alias, this column will\n                 * be replaced with the mapped column by the column alias.\n                 *\n                 * @name Highcharts.DataTable#aliases\n                 * @type {Highcharts.Dictionary<string>}\n                 */\n                this.aliases = (options.aliases ?\n                    JSON.parse(JSON.stringify(options.aliases)) :\n                    {});\n                /**\n                 * Whether the ID was automatic generated or given in the constructor.\n                 *\n                 * @name Highcharts.DataTable#autoId\n                 * @type {boolean}\n                 */\n                this.autoId = !options.id;\n                this.columns = {};\n                /**\n                 * ID of the table for indentification purposes.\n                 *\n                 * @name Highcharts.DataTable#id\n                 * @type {string}\n                 */\n                this.id = (options.id || uniqueKey());\n                this.modified = this;\n                this.rowCount = 0;\n                this.versionTag = uniqueKey();\n                var columns = options.columns || {}, columnNames = Object.keys(columns), thisColumns = this.columns;\n                var rowCount = 0;\n                for (var i = 0, iEnd = columnNames.length, column = void 0, columnName = void 0; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName].slice();\n                    thisColumns[columnName] = column;\n                    rowCount = Math.max(rowCount, column.length);\n                }\n                for (var i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    thisColumns[columnNames[i]].length = rowCount;\n                }\n                this.rowCount = rowCount;\n                var aliases = options.aliases || {}, aliasKeys = Object.keys(aliases), thisAliases = this.aliases;\n                for (var i = 0, iEnd = aliasKeys.length, alias = void 0; i < iEnd; ++i) {\n                    alias = aliasKeys[i];\n                    thisAliases[alias] = aliases[alias];\n                }\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Tests whether a row contains only `null` values or is equal to\n             * DataTable.NULL. If all columns have `null` values, the function returns\n             * `true`. Otherwise, it returns `false` to indicate that the row contains\n             * at least one non-null value.\n             *\n             * @function Highcharts.DataTable.isNull\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Row to test.\n             *\n             * @return {boolean}\n             * Returns `true`, if the row contains only null, otherwise `false`.\n             *\n             * @example\n             * if (DataTable.isNull(row)) {\n             *   // handle null row\n             * }\n             */\n            DataTable.isNull = function (row) {\n                if (row === DataTable.NULL) {\n                    return true;\n                }\n                if (row instanceof Array) {\n                    if (!row.length) {\n                        return false;\n                    }\n                    for (var i = 0, iEnd = row.length; i < iEnd; ++i) {\n                        if (row[i] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                else {\n                    var columnNames = Object.keys(row);\n                    if (!columnNames.length) {\n                        return false;\n                    }\n                    for (var i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (row[columnNames[i]] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns a clone of this table. The cloned table is completely independent\n             * of the original, and any changes made to the clone will not affect\n             * the original table.\n             *\n             * @function Highcharts.DataTable#clone\n             *\n             * @param {boolean} [skipColumns]\n             * Whether to clone columns or not.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Clone of this data table.\n             *\n             * @emits #cloneTable\n             * @emits #afterCloneTable\n             */\n            DataTable.prototype.clone = function (skipColumns, eventDetail) {\n                var table = this, tableOptions = {};\n                table.emit({ type: 'cloneTable', detail: eventDetail });\n                if (!skipColumns) {\n                    tableOptions.aliases = table.aliases;\n                    tableOptions.columns = table.columns;\n                }\n                if (!table.autoId) {\n                    tableOptions.id = table.id;\n                }\n                var tableClone = new DataTable(tableOptions);\n                if (!skipColumns) {\n                    tableClone.versionTag = table.versionTag;\n                }\n                table.emit({\n                    type: 'afterCloneTable',\n                    detail: eventDetail,\n                    tableClone: tableClone\n                });\n                return tableClone;\n            };\n            /**\n             * Deletes a column alias and returns the original column name. If the alias\n             * is not found, the method returns `undefined`. Deleting an alias does not\n             * affect the data in the table, only the way columns are accessed.\n             *\n             * @function Highcharts.DataTable#deleteColumnAlias\n             *\n             * @param {string} alias\n             * The alias to delete.\n             *\n             * @return {string|undefined}\n             * Returns the original column name, if found.\n             */\n            DataTable.prototype.deleteColumnAlias = function (alias) {\n                var _a;\n                var table = this, aliases = table.aliases, deletedAlias = aliases[alias], modifier = table.modifier;\n                if (deletedAlias) {\n                    delete table.aliases[alias];\n                    if (modifier) {\n                        modifier.modifyColumns(table, (_a = {}, _a[deletedAlias] = new Array(table.rowCount), _a), 0);\n                    }\n                }\n                return deletedAlias;\n            };\n            /**\n             * Deletes columns from the table.\n             *\n             * @function Highcharts.DataTable#deleteColumns\n             *\n             * @param {Array<string>} [columnNames]\n             * Names (no alias) of columns to delete. If no array is provided, all\n             * columns will be deleted.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTableColumnCollection|undefined}\n             * Returns the deleted columns, if found.\n             *\n             * @emits #deleteColumns\n             * @emits #afterDeleteColumns\n             */\n            DataTable.prototype.deleteColumns = function (columnNames, eventDetail) {\n                var table = this, columns = table.columns, deletedColumns = {}, modifiedColumns = {}, modifier = table.modifier, rowCount = table.rowCount;\n                columnNames = (columnNames || Object.keys(columns));\n                if (columnNames.length) {\n                    table.emit({\n                        type: 'deleteColumns',\n                        columnNames: columnNames,\n                        detail: eventDetail\n                    });\n                    for (var i = 0, iEnd = columnNames.length, column = void 0, columnName = void 0; i < iEnd; ++i) {\n                        columnName = columnNames[i];\n                        column = columns[columnName];\n                        if (column) {\n                            deletedColumns[columnName] = column;\n                            modifiedColumns[columnName] = new Array(rowCount);\n                        }\n                        delete columns[columnName];\n                    }\n                    if (!Object.keys(columns).length) {\n                        table.rowCount = 0;\n                    }\n                    if (modifier) {\n                        modifier.modifyColumns(table, modifiedColumns, 0, eventDetail);\n                    }\n                    table.emit({\n                        type: 'afterDeleteColumns',\n                        columns: deletedColumns,\n                        columnNames: columnNames,\n                        detail: eventDetail\n                    });\n                    return deletedColumns;\n                }\n            };\n            /**\n             * Deletes rows in this table.\n             *\n             * @function Highcharts.DataTable#deleteRows\n             *\n             * @param {number} [rowIndex]\n             * Index to start delete of rows. If not specified, all rows will be\n             * deleted.\n             *\n             * @param {number} [rowCount=1]\n             * Number of rows to delete.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Array<Highcharts.DataTableRow>}\n             * Returns the deleted rows, if found.\n             *\n             * @emits #deleteRows\n             * @emits #afterDeleteRows\n             */\n            DataTable.prototype.deleteRows = function (rowIndex, rowCount, eventDetail) {\n                if (rowCount === void 0) { rowCount = 1; }\n                var table = this, deletedRows = [], modifiedRows = [], modifier = table.modifier;\n                table.emit({\n                    type: 'deleteRows',\n                    detail: eventDetail,\n                    rowCount: rowCount,\n                    rowIndex: (rowIndex || 0)\n                });\n                if (typeof rowIndex === 'undefined') {\n                    rowIndex = 0;\n                    rowCount = table.rowCount;\n                }\n                if (rowCount > 0 && rowIndex < table.rowCount) {\n                    var columns = table.columns, columnNames = Object.keys(columns);\n                    for (var i = 0, iEnd = columnNames.length, column = void 0, deletedCells = void 0; i < iEnd; ++i) {\n                        column = columns[columnNames[i]];\n                        deletedCells = column.splice(rowIndex, rowCount);\n                        if (!i) {\n                            table.rowCount = column.length;\n                        }\n                        for (var j = 0, jEnd = deletedCells.length; j < jEnd; ++j) {\n                            deletedRows[j] = (deletedRows[j] || []);\n                            deletedRows[j][i] = deletedCells[j];\n                        }\n                        modifiedRows.push(new Array(iEnd));\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, modifiedRows, (rowIndex || 0), eventDetail);\n                }\n                table.emit({\n                    type: 'afterDeleteRows',\n                    detail: eventDetail,\n                    rowCount: rowCount,\n                    rowIndex: (rowIndex || 0),\n                    rows: deletedRows\n                });\n                return deletedRows;\n            };\n            /**\n             * Emits an event on this table to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            DataTable.prototype.emit = function (e) {\n                var table = this;\n                switch (e.type) {\n                    case 'afterDeleteColumns':\n                    case 'afterDeleteRows':\n                    case 'afterSetCell':\n                    case 'afterSetColumns':\n                    case 'afterSetRows':\n                        table.versionTag = uniqueKey();\n                        break;\n                    default:\n                }\n                fireEvent(table, e.type, e);\n            };\n            /**\n             * Fetches a single cell value.\n             *\n             * @function Highcharts.DataTable#getCell\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias of the cell to retrieve.\n             *\n             * @param {number} rowIndex\n             * Row index of the cell to retrieve.\n             *\n             * @return {Highcharts.DataTableCellType|undefined}\n             * Returns the cell value or `undefined`.\n             */\n            DataTable.prototype.getCell = function (columnNameOrAlias, rowIndex) {\n                var table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                var column = table.columns[columnNameOrAlias];\n                if (column) {\n                    return column[rowIndex];\n                }\n            };\n            /**\n             * Fetches a cell value for the given row as a boolean.\n             *\n             * @function Highcharts.DataTable#getCellAsBoolean\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {boolean}\n             * Returns the cell value of the row as a boolean.\n             */\n            DataTable.prototype.getCellAsBoolean = function (columnNameOrAlias, rowIndex) {\n                var table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                var column = table.columns[columnNameOrAlias];\n                return !!(column && column[rowIndex]);\n            };\n            /**\n             * Fetches a cell value for the given row as a number.\n             *\n             * @function Highcharts.DataTable#getCellAsNumber\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to return NaN instead of `null` and `undefined`.\n             *\n             * @return {number|null}\n             * Returns the cell value of the row as a number.\n             */\n            DataTable.prototype.getCellAsNumber = function (columnNameOrAlias, rowIndex, useNaN) {\n                var table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                var column = table.columns[columnNameOrAlias];\n                var cellValue = (column && column[rowIndex]);\n                switch (typeof cellValue) {\n                    case 'boolean':\n                        return (cellValue ? 1 : 0);\n                    case 'number':\n                        return (isNaN(cellValue) && !useNaN ? null : cellValue);\n                }\n                cellValue = parseFloat(\"\".concat(cellValue));\n                return (isNaN(cellValue) && !useNaN ? null : cellValue);\n            };\n            /**\n             * Fetches a cell value for the given row as a string.\n             *\n             * @function Highcharts.DataTable#getCellAsString\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {string}\n             * Returns the cell value of the row as a string.\n             */\n            DataTable.prototype.getCellAsString = function (columnNameOrAlias, rowIndex) {\n                var table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                var column = table.columns[columnNameOrAlias];\n                return \"\".concat((column && column[rowIndex]));\n            };\n            /**\n             * Fetches the given column by the canonical column name or by an alias.\n             * This function is a simplified wrap of {@link getColumns}.\n             *\n             * @function Highcharts.DataTable#getColumn\n             *\n             * @param {string} columnNameOrAlias\n             * Name or alias of the column to get, alias takes precedence.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return the column as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumn|undefined}\n             * A copy of the column, or `undefined` if not found.\n             */\n            DataTable.prototype.getColumn = function (columnNameOrAlias, asReference) {\n                return this.getColumns([columnNameOrAlias], asReference)[columnNameOrAlias];\n            };\n            /**\n             * Fetches the given column by the canonical column name or by an alias, and\n             * validates the type of the first few cells. If the first defined cell is\n             * of type number, it assumes for performance reasons, that all cells are of\n             * type number or `null`. Otherwise it will convert all cells to number\n             * type, except `null`.\n             *\n             * @function Highcharts.DataTable#getColumnAsNumbers\n             *\n             * @param {string} columnNameOrAlias\n             * Name or alias of the column to get, alias takes precedence.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to use NaN instead of `null` and `undefined`.\n             *\n             * @return {Array<(number|null)>}\n             * A copy of the column, or an empty array if not found.\n             */\n            DataTable.prototype.getColumnAsNumbers = function (columnNameOrAlias, useNaN) {\n                var table = this, columns = table.columns;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                var column = columns[columnNameOrAlias], columnAsNumber = [];\n                if (column) {\n                    var columnLength = column.length;\n                    if (useNaN) {\n                        for (var i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnNameOrAlias, i, true));\n                        }\n                    }\n                    else {\n                        for (var i = 0, cellValue = void 0; i < columnLength; ++i) {\n                            cellValue = column[i];\n                            if (typeof cellValue === 'number') {\n                                // Assume unmixed data for performance reasons\n                                return column.slice();\n                            }\n                            if (cellValue !== null &&\n                                typeof cellValue !== 'undefined') {\n                                break;\n                            }\n                        }\n                        for (var i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnNameOrAlias, i));\n                        }\n                    }\n                }\n                return columnAsNumber;\n            };\n            /**\n             * Fetches all column names.\n             *\n             * @function Highcharts.DataTable#getColumnNames\n             *\n             * @return {Array<string>}\n             * Returns all column names.\n             */\n            DataTable.prototype.getColumnNames = function () {\n                var table = this, columnNames = Object.keys(table.columns);\n                return columnNames;\n            };\n            /**\n             * Retrieves all or the given columns.\n             *\n             * @function Highcharts.DataTable#getColumns\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases to retrieve. Aliases taking precedence.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return columns as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * Collection of columns. If a requested column was not found, it is\n             * `undefined`.\n             */\n            DataTable.prototype.getColumns = function (columnNamesOrAliases, asReference) {\n                var table = this, tableAliasMap = table.aliases, tableColumns = table.columns, columns = {};\n                columnNamesOrAliases = (columnNamesOrAliases || Object.keys(tableColumns));\n                for (var i = 0, iEnd = columnNamesOrAliases.length, column = void 0, columnName = void 0; i < iEnd; ++i) {\n                    columnName = columnNamesOrAliases[i];\n                    column = tableColumns[(tableAliasMap[columnName] || columnName)];\n                    if (column) {\n                        columns[columnName] = (asReference ? column : column.slice());\n                    }\n                }\n                return columns;\n            };\n            /**\n             * Retrieves the modifier for the table.\n             * @private\n             *\n             * @return {Highcharts.DataModifier|undefined}\n             * Returns the modifier or `undefined`.\n             */\n            DataTable.prototype.getModifier = function () {\n                return this.modifier;\n            };\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRows}.\n             *\n             * @function Highcharts.DataTable#getRow\n             *\n             * @param {number} rowIndex\n             * Row index to retrieve. First row has index 0.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases in order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns the row values, or `undefined` if not found.\n             */\n            DataTable.prototype.getRow = function (rowIndex, columnNamesOrAliases) {\n                return this.getRows(rowIndex, 1, columnNamesOrAliases)[0];\n            };\n            /**\n             * Returns the number of rows in this table.\n             *\n             * @function Highcharts.DataTable#getRowCount\n             *\n             * @return {number}\n             * Number of rows in this table.\n             */\n            DataTable.prototype.getRowCount = function () {\n                // @todo Implement via property getter `.length` browsers supported\n                return this.rowCount;\n            };\n            /**\n             * Retrieves the index of the first row matching a specific cell value.\n             *\n             * @function Highcharts.DataTable#getRowIndexBy\n             *\n             * @param {string} columnNameOrAlias\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @param {number} [rowIndexOffset]\n             * Index offset to start searching.\n             *\n             * @return {number|undefined}\n             * Index of the first row matching the cell value.\n             */\n            DataTable.prototype.getRowIndexBy = function (columnNameOrAlias, cellValue, rowIndexOffset) {\n                var table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                var column = table.columns[columnNameOrAlias];\n                if (column) {\n                    var rowIndex = column.indexOf(cellValue, rowIndexOffset);\n                    if (rowIndex !== -1) {\n                        return rowIndex;\n                    }\n                }\n            };\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRowObjects}.\n             *\n             * @function Highcharts.DataTable#getRowObject\n             *\n             * @param {number} rowIndex\n             * Row index.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns the row values, or `undefined` if not found.\n             */\n            DataTable.prototype.getRowObject = function (rowIndex, columnNamesOrAliases) {\n                return this.getRowObjects(rowIndex, 1, columnNamesOrAliases)[0];\n            };\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRowObjects\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns retrieved rows.\n             */\n            DataTable.prototype.getRowObjects = function (rowIndex, rowCount, columnNamesOrAliases) {\n                if (rowIndex === void 0) { rowIndex = 0; }\n                if (rowCount === void 0) { rowCount = (this.rowCount - rowIndex); }\n                var table = this, aliases = table.aliases, columns = table.columns, rows = new Array(rowCount);\n                columnNamesOrAliases = (columnNamesOrAliases || Object.keys(columns));\n                for (var i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column = void 0, row = void 0; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = {};\n                    for (var _i = 0, columnNamesOrAliases_1 = columnNamesOrAliases; _i < columnNamesOrAliases_1.length; _i++) {\n                        var columnName = columnNamesOrAliases_1[_i];\n                        column = columns[(aliases[columnName] || columnName)];\n                        row[columnName] = (column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            };\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRows\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns retrieved rows.\n             */\n            DataTable.prototype.getRows = function (rowIndex, rowCount, columnNamesOrAliases) {\n                if (rowIndex === void 0) { rowIndex = 0; }\n                if (rowCount === void 0) { rowCount = (this.rowCount - rowIndex); }\n                var table = this, aliases = table.aliases, columns = table.columns, rows = new Array(rowCount);\n                columnNamesOrAliases = (columnNamesOrAliases || Object.keys(columns));\n                for (var i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column = void 0, row = void 0; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = [];\n                    for (var _i = 0, columnNamesOrAliases_2 = columnNamesOrAliases; _i < columnNamesOrAliases_2.length; _i++) {\n                        var columnName = columnNamesOrAliases_2[_i];\n                        column = columns[(aliases[columnName] || columnName)];\n                        row.push(column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            };\n            /**\n             * Returns the unique version tag of the current state of the table.\n             *\n             * @function Highcharts.DataTable#getVersionTag\n             *\n             * @return {string}\n             * Unique version tag.\n             */\n            DataTable.prototype.getVersionTag = function () {\n                return this.versionTag;\n            };\n            /**\n             * Checks for given column names or aliases.\n             *\n             * @function Highcharts.DataTable#hasColumns\n             *\n             * @param {Array<string>} columnNamesOrAliases\n             * Column names of aliases to check.\n             *\n             * @return {boolean}\n             * Returns `true` if all columns have been found, otherwise `false`.\n             */\n            DataTable.prototype.hasColumns = function (columnNamesOrAliases) {\n                var table = this, aliases = table.aliases, columns = table.columns;\n                for (var i = 0, iEnd = columnNamesOrAliases.length, columnName = void 0; i < iEnd; ++i) {\n                    columnName = columnNamesOrAliases[i];\n                    if (!columns[columnName] && !aliases[columnName]) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            /**\n             * Searches for a specific cell value.\n             *\n             * @function Highcharts.DataTable#hasRowWith\n             *\n             * @param {string} columnNameOrAlias\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @return {boolean}\n             * True, if a row has been found, otherwise false.\n             */\n            DataTable.prototype.hasRowWith = function (columnNameOrAlias, cellValue) {\n                var table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                var column = table.columns[columnNameOrAlias];\n                if (column) {\n                    return (column.indexOf(cellValue) !== -1);\n                }\n                return false;\n            };\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataTable#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataTable>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            DataTable.prototype.on = function (type, callback) {\n                return addEvent(this, type, callback);\n            };\n            /**\n             * Renames a column of cell values.\n             *\n             * @function Highcharts.DataTable#renameColumn\n             *\n             * @param {string} columnName\n             * Name of the column to be renamed.\n             *\n             * @param {string} newColumnName\n             * New name of the column. An existing column with the same name will be\n             * replaced.\n             *\n             * @return {boolean}\n             * Returns `true` if successful, `false` if the column was not found.\n             */\n            DataTable.prototype.renameColumn = function (columnName, newColumnName) {\n                var table = this, columns = table.columns;\n                if (columns[columnName]) {\n                    if (columnName !== newColumnName) {\n                        var aliases = table.aliases;\n                        if (aliases[newColumnName]) {\n                            delete aliases[newColumnName];\n                        }\n                        columns[newColumnName] = columns[columnName];\n                        delete columns[columnName];\n                    }\n                    return true;\n                }\n                return false;\n            };\n            /**\n             * Sets a cell value based on the row index and column name or alias.  Will\n             * insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setCell\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to set.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index to set.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to set.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setCell\n             * @emits #afterSetCell\n             */\n            DataTable.prototype.setCell = function (columnNameOrAlias, rowIndex, cellValue, eventDetail) {\n                var table = this, columns = table.columns, modifier = table.modifier;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                var column = columns[columnNameOrAlias];\n                if (column && column[rowIndex] === cellValue) {\n                    return;\n                }\n                table.emit({\n                    type: 'setCell',\n                    cellValue: cellValue,\n                    columnName: columnNameOrAlias,\n                    detail: eventDetail,\n                    rowIndex: rowIndex\n                });\n                if (!column) {\n                    column = columns[columnNameOrAlias] = new Array(table.rowCount);\n                }\n                if (rowIndex >= table.rowCount) {\n                    table.rowCount = (rowIndex + 1);\n                }\n                column[rowIndex] = cellValue;\n                if (modifier) {\n                    modifier.modifyCell(table, columnNameOrAlias, rowIndex, cellValue);\n                }\n                table.emit({\n                    type: 'afterSetCell',\n                    cellValue: cellValue,\n                    columnName: columnNameOrAlias,\n                    detail: eventDetail,\n                    rowIndex: rowIndex\n                });\n            };\n            /**\n             * Sets cell values for a column. Will insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setColumn\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to set.\n             *\n             * @param {Highcharts.DataTableColumn} [column]\n             * Values to set in the column.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first row to change. (Default: 0)\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            DataTable.prototype.setColumn = function (columnNameOrAlias, column, rowIndex, eventDetail) {\n                var _a;\n                if (column === void 0) { column = []; }\n                if (rowIndex === void 0) { rowIndex = 0; }\n                this.setColumns((_a = {}, _a[columnNameOrAlias] = column, _a), rowIndex, eventDetail);\n            };\n            /**\n             * Sets cell values for multiple columns. Will insert new columns, if not\n             * found.\n             *\n             * @function Highcharts.DataTable#setColumns\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Columns as a collection, where the keys are the column names or aliases.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to change. Keep undefined to reset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            DataTable.prototype.setColumns = function (columns, rowIndex, eventDetail) {\n                var table = this, tableColumns = table.columns, tableModifier = table.modifier, reset = (typeof rowIndex === 'undefined'), columnNames = Object.keys(columns);\n                table.emit({\n                    type: 'setColumns',\n                    columns: columns,\n                    columnNames: columnNames,\n                    detail: eventDetail,\n                    rowIndex: rowIndex\n                });\n                for (var i = 0, iEnd = columnNames.length, column = void 0, columnName = void 0; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    columnName = (table.aliases[columnName] ||\n                        columnName);\n                    if (reset) {\n                        tableColumns[columnName] = column.slice();\n                        table.rowCount = column.length;\n                    }\n                    else {\n                        var tableColumn = (tableColumns[columnName] ?\n                            tableColumns[columnName] :\n                            tableColumns[columnName] = new Array(table.rowCount));\n                        for (var i_1 = (rowIndex || 0), iEnd_1 = column.length; i_1 < iEnd_1; ++i_1) {\n                            tableColumn[i_1] = column[i_1];\n                        }\n                        table.rowCount = Math.max(table.rowCount, tableColumn.length);\n                    }\n                }\n                var tableColumnNames = Object.keys(tableColumns);\n                for (var i = 0, iEnd = tableColumnNames.length; i < iEnd; ++i) {\n                    tableColumns[tableColumnNames[i]].length = table.rowCount;\n                }\n                if (tableModifier) {\n                    tableModifier.modifyColumns(table, columns, (rowIndex || 0));\n                }\n                table.emit({\n                    type: 'afterSetColumns',\n                    columns: columns,\n                    columnNames: columnNames,\n                    detail: eventDetail,\n                    rowIndex: rowIndex\n                });\n            };\n            /**\n             * Sets or unsets the modifier for the table.\n             * @private\n             *\n             * @param {Highcharts.DataModifier} [modifier]\n             * Modifier to set, or `undefined` to unset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Resolves to this table if successfull, or rejects on failure.\n             *\n             * @emits #setModifier\n             * @emits #afterSetModifier\n             */\n            DataTable.prototype.setModifier = function (modifier, eventDetail) {\n                var table = this;\n                var promise;\n                table.emit({\n                    type: 'setModifier',\n                    detail: eventDetail,\n                    modifier: modifier,\n                    modified: table.modified\n                });\n                table.modified = table;\n                table.modifier = modifier;\n                if (modifier) {\n                    promise = modifier.modify(table);\n                }\n                else {\n                    promise = Promise.resolve(table);\n                }\n                return promise\n                    .then(function (table) {\n                    table.emit({\n                        type: 'afterSetModifier',\n                        detail: eventDetail,\n                        modifier: modifier,\n                        modified: table.modified\n                    });\n                    return table;\n                })['catch'](function (error) {\n                    table.emit({\n                        type: 'setModifierError',\n                        error: error,\n                        modifier: modifier,\n                        modified: table.modified\n                    });\n                    throw error;\n                });\n            };\n            /**\n             * Sets cell values of a row. Will insert a new row, if no index was\n             * provided, or if the index is higher than the total number of table rows.\n             *\n             * Note: This function is just a simplified wrap of\n             * {@link Highcharts.DataTable#setRows}.\n             *\n             * @function Highcharts.DataTable#setRow\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Cell values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the row to set. Leave `undefind` to add as a new row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            DataTable.prototype.setRow = function (row, rowIndex, eventDetail) {\n                this.setRows([row], rowIndex, eventDetail);\n            };\n            /**\n             * Sets cell values for multiple rows. Will insert new rows, if no index was\n             * was provided, or if the index is higher than the total number of table\n             * rows.\n             *\n             * @function Highcharts.DataTable#setRows\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Row values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to set. Leave `undefind` to add as new rows.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            DataTable.prototype.setRows = function (rows, rowIndex, eventDetail) {\n                if (rowIndex === void 0) { rowIndex = this.rowCount; }\n                var table = this, aliases = table.aliases, columns = table.columns, columnNames = Object.keys(columns), modifier = table.modifier, rowCount = rows.length;\n                table.emit({\n                    type: 'setRows',\n                    detail: eventDetail,\n                    rowCount: rowCount,\n                    rowIndex: rowIndex,\n                    rows: rows\n                });\n                for (var i = 0, i2 = rowIndex, row = void 0; i < rowCount; ++i, ++i2) {\n                    row = rows[i];\n                    if (row === DataTable.NULL) {\n                        for (var j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = null;\n                        }\n                    }\n                    else if (row instanceof Array) {\n                        for (var j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = row[j];\n                        }\n                    }\n                    else {\n                        var rowColumnNames = Object.keys(row);\n                        for (var j = 0, jEnd = rowColumnNames.length, rowColumnName = void 0; j < jEnd; ++j) {\n                            rowColumnName = rowColumnNames[j];\n                            rowColumnName = (aliases[rowColumnName] || rowColumnName);\n                            if (!columns[rowColumnName]) {\n                                columns[rowColumnName] = new Array(i2 + 1);\n                            }\n                            columns[rowColumnName][i2] = row[rowColumnName];\n                        }\n                    }\n                }\n                var indexRowCount = (rowIndex + rowCount);\n                if (indexRowCount > table.rowCount) {\n                    table.rowCount = indexRowCount;\n                    for (var i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        columns[columnNames[i]].length = indexRowCount;\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, rows, rowIndex);\n                }\n                table.emit({\n                    type: 'afterSetRows',\n                    detail: eventDetail,\n                    rowCount: rowCount,\n                    rowIndex: rowIndex,\n                    rows: rows\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Null state for a row record. In some cases, a row in a table may not\n             * contain any data or may be invalid. In these cases, a null state can be\n             * used to indicate that the row record is empty or invalid.\n             *\n             * @name Highcharts.DataTable.NULL\n             * @type {Highcharts.DataTableRowObject}\n             *\n             * @see {@link Highcharts.DataTable.isNull} for a null test.\n             *\n             * @example\n             * table.setRows([DataTable.NULL, DataTable.NULL], 10);\n             */\n            DataTable.NULL = {};\n            /**\n             * Semantic version string of the DataTable class.\n             * @internal\n             */\n            DataTable.version = '1.0.0';\n            return DataTable;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataTable;\n    });\n    _registerModule(_modules, 'Data/Connectors/DataConnector.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *\n         * */\n        var addEvent = U.addEvent, fireEvent = U.fireEvent, merge = U.merge, pick = U.pick;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class providing an interface for managing a DataConnector.\n         *\n         * @private\n         */\n        var DataConnector = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructor for the connector class.\n             *\n             * @param {DataConnector.UserOptions} [options]\n             * Options to use in the connector.\n             */\n            function DataConnector(options) {\n                if (options === void 0) { options = {}; }\n                this.table = new DataTable(options.dataTable);\n                this.metadata = options.metadata || { columns: {} };\n            }\n            Object.defineProperty(DataConnector.prototype, \"polling\", {\n                /**\n                 * Poll timer ID, if active.\n                 */\n                get: function () {\n                    return !!this.polling;\n                },\n                enumerable: false,\n                configurable: true\n            });\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method for adding metadata for a single column.\n             *\n             * @param {string} name\n             * The name of the column to be described.\n             *\n             * @param {DataConnector.MetaColumn} columnMeta\n             * The metadata to apply to the column.\n             */\n            DataConnector.prototype.describeColumn = function (name, columnMeta) {\n                var connector = this, columns = connector.metadata.columns;\n                columns[name] = merge(columns[name] || {}, columnMeta);\n            };\n            /**\n             * Method for applying columns meta information to the whole DataConnector.\n             *\n             * @param {Highcharts.Dictionary<DataConnector.MetaColumn>} columns\n             * Pairs of column names and MetaColumn objects.\n             */\n            DataConnector.prototype.describeColumns = function (columns) {\n                var connector = this, columnNames = Object.keys(columns);\n                var columnName;\n                while (typeof (columnName = columnNames.pop()) === 'string') {\n                    connector.describeColumn(columnName, columns[columnName]);\n                }\n            };\n            /**\n             * Emits an event on the connector to all registered callbacks of this\n             * event.\n             *\n             * @param {DataConnector.Event} [e]\n             * Event object containing additional event information.\n             */\n            DataConnector.prototype.emit = function (e) {\n                fireEvent(this, e.type, e);\n            };\n            /**\n             * Returns the order of columns.\n             *\n             * @param {boolean} [usePresentationState]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Array<string>|undefined}\n             * Order of columns.\n             */\n            DataConnector.prototype.getColumnOrder = function (\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            usePresentationState) {\n                var connector = this, columns = connector.metadata.columns, names = Object.keys(columns || {});\n                if (names.length) {\n                    return names.sort(function (a, b) { return (pick(columns[a].index, 0) - pick(columns[b].index, 0)); });\n                }\n            };\n            /**\n             * Retrieves the columns of the dataTable,\n             * applies column order from meta.\n             *\n             * @param {boolean} [usePresentationOrder]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * An object with the properties `columnNames` and `columnValues`\n             */\n            DataConnector.prototype.getSortedColumns = function (usePresentationOrder) {\n                return this.table.getColumns(this.getColumnOrder(usePresentationOrder));\n            };\n            /**\n             * The default load method, which fires the `afterLoad` event\n             *\n             * @return {Promise<DataConnector>}\n             * The loaded connector.\n             *\n             * @emits DataConnector#afterLoad\n             */\n            DataConnector.prototype.load = function () {\n                fireEvent(this, 'afterLoad', { table: this.table });\n                return Promise.resolve(this);\n            };\n            /**\n             * Registers a callback for a specific connector event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for the connector callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the connector event.\n             */\n            DataConnector.prototype.on = function (type, callback) {\n                return addEvent(this, type, callback);\n            };\n            /**\n             * The default save method, which fires the `afterSave` event.\n             *\n             * @return {Promise<DataConnector>}\n             * The saved connector.\n             *\n             * @emits DataConnector#afterSave\n             * @emits DataConnector#saveError\n             */\n            DataConnector.prototype.save = function () {\n                fireEvent(this, 'saveError', { table: this.table });\n                return Promise.reject(new Error('Not implemented'));\n            };\n            /**\n             * Sets the index and order of columns.\n             *\n             * @param {Array<string>} columnNames\n             * Order of columns.\n             */\n            DataConnector.prototype.setColumnOrder = function (columnNames) {\n                var connector = this;\n                for (var i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    connector.describeColumn(columnNames[i], { index: i });\n                }\n            };\n            DataConnector.prototype.setModifierOptions = function (modifierOptions) {\n                var _this = this;\n                var ModifierClass = (modifierOptions &&\n                    DataModifier.types[modifierOptions.type]);\n                return this.table\n                    .setModifier(ModifierClass ?\n                    new ModifierClass(modifierOptions) :\n                    void 0)\n                    .then(function () { return _this; });\n            };\n            /**\n             * Starts polling new data after the specific time span in milliseconds.\n             *\n             * @param {number} refreshTime\n             * Refresh time in milliseconds between polls.\n             */\n            DataConnector.prototype.startPolling = function (refreshTime) {\n                if (refreshTime === void 0) { refreshTime = 1000; }\n                var connector = this;\n                window.clearTimeout(connector._polling);\n                connector._polling = window.setTimeout(function () { return connector\n                    .load()['catch'](function (error) { return connector.emit({\n                    type: 'loadError',\n                    error: error,\n                    table: connector.table\n                }); })\n                    .then(function () {\n                    if (connector._polling) {\n                        connector.startPolling(refreshTime);\n                    }\n                }); }, refreshTime);\n            };\n            /**\n             * Stops polling data.\n             */\n            DataConnector.prototype.stopPolling = function () {\n                var connector = this;\n                window.clearTimeout(connector._polling);\n                delete connector._polling;\n            };\n            /**\n             * Retrieves metadata from a single column.\n             *\n             * @param {string} name\n             * The identifier for the column that should be described\n             *\n             * @return {DataConnector.MetaColumn|undefined}\n             * Returns a MetaColumn object if found.\n             */\n            DataConnector.prototype.whatIs = function (name) {\n                return this.metadata.columns[name];\n            };\n            return DataConnector;\n        }());\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (DataConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with connector names and their class.\n             */\n            DataConnector.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a connector class to the registry. The connector has to provide the\n             * `DataConnector.options` property and the `DataConnector.load` method to\n             * modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the connector class.\n             *\n             * @param {DataConnectorType} DataConnectorClass\n             * Connector class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a connector registered with this key.\n             */\n            function registerType(key, DataConnectorClass) {\n                return (!!key &&\n                    !DataConnector.types[key] &&\n                    !!(DataConnector.types[key] = DataConnectorClass));\n            }\n            DataConnector.registerType = registerType;\n        })(DataConnector || (DataConnector = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/DataConverter.js', [_modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Sebastian Bochan\n         *  - GÃ¸ran Slettemark\n         *  - Torstein HÃ¸nsi\n         *  - Wojciech Chmiel\n         *\n         * */\n        var addEvent = U.addEvent, fireEvent = U.fireEvent, isNumber = U.isNumber, merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Base class providing an interface and basic methods for a DataConverter\n         *\n         * @private\n         */\n        var DataConverter = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataConverter.\n             *\n             * @param {DataConverter.UserOptions} [options]\n             * Options for the DataConverter.\n             */\n            function DataConverter(options) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                /**\n                 * A collection of available date formats.\n                 */\n                this.dateFormats = {\n                    'YYYY/mm/dd': {\n                        regex: /^([0-9]{4})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{1,2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[1], match[3] - 1, +match[4]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YYYY': {\n                        regex: /^([0-9]{1,2})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[3] - 1, +match[1]) :\n                                NaN);\n                        },\n                        alternative: 'mm/dd/YYYY' // Different format with the same regex\n                    },\n                    'mm/dd/YYYY': {\n                        regex: /^([0-9]{1,2})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YY': {\n                        regex: /^([0-9]{1,2})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{2})$/,\n                        parser: function (match) {\n                            var d = new Date();\n                            if (!match) {\n                                return NaN;\n                            }\n                            var year = +match[4];\n                            if (year > (d.getFullYear() - 2000)) {\n                                year += 1900;\n                            }\n                            else {\n                                year += 2000;\n                            }\n                            return Date.UTC(year, match[3] - 1, +match[1]);\n                        },\n                        alternative: 'mm/dd/YY' // Different format with the same regex\n                    },\n                    'mm/dd/YY': {\n                        regex: /^([0-9]{1,2})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4] + 2000, match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    }\n                };\n                var mergedOptions = merge(DataConverter.defaultOptions, options);\n                var regExpPoint = mergedOptions.decimalPoint;\n                if (regExpPoint === '.' || regExpPoint === ',') {\n                    regExpPoint = regExpPoint === '.' ? '\\\\.' : ',';\n                    this.decimalRegExp =\n                        new RegExp('^(-?[0-9]+)' + regExpPoint + '([0-9]+)$');\n                }\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts a value to a boolean.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {boolean}\n             * Converted value as a boolean.\n             */\n            DataConverter.prototype.asBoolean = function (value) {\n                if (typeof value === 'boolean') {\n                    return value;\n                }\n                if (typeof value === 'string') {\n                    return value !== '' && value !== '0' && value !== 'false';\n                }\n                return !!this.asNumber(value);\n            };\n            /**\n             * Converts a value to a Date.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {globalThis.Date}\n             * Converted value as a Date.\n             */\n            DataConverter.prototype.asDate = function (value) {\n                var timestamp;\n                if (typeof value === 'string') {\n                    timestamp = this.parseDate(value);\n                }\n                else if (typeof value === 'number') {\n                    timestamp = value;\n                }\n                else if (value instanceof Date) {\n                    return value;\n                }\n                else {\n                    timestamp = this.parseDate(this.asString(value));\n                }\n                return new Date(timestamp);\n            };\n            /**\n             * Casts a string value to it's guessed type\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {number|string|Date}\n             * The converted value.\n             */\n            DataConverter.prototype.asGuessedType = function (value) {\n                var converter = this, typeMap = {\n                    'number': converter.asNumber,\n                    'Date': converter.asDate,\n                    'string': converter.asString\n                };\n                return typeMap[converter.guessType(value)].call(converter, value);\n            };\n            /**\n             * Converts a value to a number.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {number}\n             * Converted value as a number.\n             */\n            DataConverter.prototype.asNumber = function (value) {\n                if (typeof value === 'number') {\n                    return value;\n                }\n                if (typeof value === 'boolean') {\n                    return value ? 1 : 0;\n                }\n                if (typeof value === 'string') {\n                    var decimalRegex = this.decimalRegExp;\n                    if (value.indexOf(' ') > -1) {\n                        value = value.replace(/\\s+/g, '');\n                    }\n                    if (decimalRegex) {\n                        if (!decimalRegex.test(value)) {\n                            return NaN;\n                        }\n                        value = value.replace(decimalRegex, '$1.$2');\n                    }\n                    return parseFloat(value);\n                }\n                if (value instanceof Date) {\n                    return value.getDate();\n                }\n                if (value) {\n                    return value.getRowCount();\n                }\n                return NaN;\n            };\n            /**\n             * Converts a value to a string.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {string}\n             * Converted value as a string.\n             */\n            DataConverter.prototype.asString = function (value) {\n                return '' + value;\n            };\n            /**\n             * Tries to guess the date format\n             *  - Check if either month candidate exceeds 12\n             *  - Check if year is missing (use current year)\n             *  - Check if a shortened year format is used (e.g. 1/1/99)\n             *  - If no guess can be made, the user must be prompted\n             * data is the data to deduce a format based on\n             * @private\n             *\n             * @param {Array<string>} data\n             * Data to check the format.\n             *\n             * @param {number} limit\n             * Max data to check the format.\n             *\n             * @param {boolean} save\n             * Whether to save the date format in the converter options.\n             */\n            DataConverter.prototype.deduceDateFormat = function (data, limit, save) {\n                var parser = this, stable = [], max = [];\n                var format = 'YYYY/mm/dd', thing, guessedFormat = [], i = 0, madeDeduction = false, \n                /// candidates = {},\n                elem, j;\n                if (!limit || limit > data.length) {\n                    limit = data.length;\n                }\n                for (; i < limit; i++) {\n                    if (typeof data[i] !== 'undefined' &&\n                        data[i] && data[i].length) {\n                        thing = data[i]\n                            .trim()\n                            .replace(/[-\\.\\/]/g, ' ')\n                            .split(' ');\n                        guessedFormat = [\n                            '',\n                            '',\n                            ''\n                        ];\n                        for (j = 0; j < thing.length; j++) {\n                            if (j < guessedFormat.length) {\n                                elem = parseInt(thing[j], 10);\n                                if (elem) {\n                                    max[j] = (!max[j] || max[j] < elem) ? elem : max[j];\n                                    if (typeof stable[j] !== 'undefined') {\n                                        if (stable[j] !== elem) {\n                                            stable[j] = false;\n                                        }\n                                    }\n                                    else {\n                                        stable[j] = elem;\n                                    }\n                                    if (elem > 31) {\n                                        if (elem < 100) {\n                                            guessedFormat[j] = 'YY';\n                                        }\n                                        else {\n                                            guessedFormat[j] = 'YYYY';\n                                        }\n                                        /// madeDeduction = true;\n                                    }\n                                    else if (elem > 12 &&\n                                        elem <= 31) {\n                                        guessedFormat[j] = 'dd';\n                                        madeDeduction = true;\n                                    }\n                                    else if (!guessedFormat[j].length) {\n                                        guessedFormat[j] = 'mm';\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (madeDeduction) {\n                    // This handles a few edge cases with hard to guess dates\n                    for (j = 0; j < stable.length; j++) {\n                        if (stable[j] !== false) {\n                            if (max[j] > 12 &&\n                                guessedFormat[j] !== 'YY' &&\n                                guessedFormat[j] !== 'YYYY') {\n                                guessedFormat[j] = 'YY';\n                            }\n                        }\n                        else if (max[j] > 12 && guessedFormat[j] === 'mm') {\n                            guessedFormat[j] = 'dd';\n                        }\n                    }\n                    // If the middle one is dd, and the last one is dd,\n                    // the last should likely be year.\n                    if (guessedFormat.length === 3 &&\n                        guessedFormat[1] === 'dd' &&\n                        guessedFormat[2] === 'dd') {\n                        guessedFormat[2] = 'YY';\n                    }\n                    format = guessedFormat.join('/');\n                    // If the caculated format is not valid, we need to present an\n                    // error.\n                }\n                // Save the deduced format in the converter options.\n                if (save) {\n                    parser.options.dateFormat = format;\n                }\n                return format;\n            };\n            /**\n             * Emits an event on the DataConverter instance.\n             *\n             * @param {DataConverter.Event} [e]\n             * Event object containing additional event data\n             */\n            DataConverter.prototype.emit = function (e) {\n                fireEvent(this, e.type, e);\n            };\n            /**\n             * Initiates the data exporting. Should emit `exportError` on failure.\n             *\n             * @param {DataConnector} connector\n             * Connector to export from.\n             *\n             * @param {DataConverter.Options} [options]\n             * Options for the export.\n             */\n            DataConverter.prototype.export = function (\n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            connector, options\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                this.emit({\n                    type: 'exportError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            };\n            /**\n             * Getter for the data table.\n             *\n             * @return {DataTable}\n             * Table of parsed data.\n             */\n            DataConverter.prototype.getTable = function () {\n                throw new Error('Not implemented');\n            };\n            /**\n             * Guesses the potential type of a string value for parsing CSV etc.\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {'number'|'string'|'Date'}\n             * Type string, either `string`, `Date`, or `number`.\n             */\n            DataConverter.prototype.guessType = function (value) {\n                var converter = this;\n                var result = 'string';\n                if (typeof value === 'string') {\n                    var trimedValue = converter.trim(\"\".concat(value)), decimalRegExp = converter.decimalRegExp;\n                    var innerTrimedValue = converter.trim(trimedValue, true);\n                    if (decimalRegExp) {\n                        innerTrimedValue = (decimalRegExp.test(innerTrimedValue) ?\n                            innerTrimedValue.replace(decimalRegExp, '$1.$2') :\n                            '');\n                    }\n                    var floatValue = parseFloat(innerTrimedValue);\n                    if (+innerTrimedValue === floatValue) {\n                        // String is numeric\n                        value = floatValue;\n                    }\n                    else {\n                        // Determine if a date string\n                        var dateValue = converter.parseDate(value);\n                        result = isNumber(dateValue) ? 'Date' : 'string';\n                    }\n                }\n                if (typeof value === 'number') {\n                    // Greater than milliseconds in a year assumed timestamp\n                    result = value > 365 * 24 * 3600 * 1000 ? 'Date' : 'number';\n                }\n                return result;\n            };\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            DataConverter.prototype.on = function (type, callback) {\n                return addEvent(this, type, callback);\n            };\n            /**\n             * Initiates the data parsing. Should emit `parseError` on failure.\n             *\n             * @param {DataConverter.UserOptions} options\n             * Options of the DataConverter.\n             */\n            DataConverter.prototype.parse = function (\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            options) {\n                this.emit({\n                    type: 'parseError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            };\n            /**\n             * Parse a date and return it as a number.\n             *\n             * @function Highcharts.Data#parseDate\n             *\n             * @param {string} value\n             * Value to parse.\n             *\n             * @param {string} dateFormatProp\n             * Which of the predefined date formats\n             * to use to parse date values.\n             */\n            DataConverter.prototype.parseDate = function (value, dateFormatProp) {\n                var converter = this, options = converter.options;\n                var dateFormat = dateFormatProp || options.dateFormat, result = NaN, key, format, match;\n                if (options.parseDate) {\n                    result = options.parseDate(value);\n                }\n                else {\n                    // Auto-detect the date format the first time\n                    if (!dateFormat) {\n                        for (key in converter.dateFormats) { // eslint-disable-line guard-for-in\n                            format = converter.dateFormats[key];\n                            match = value.match(format.regex);\n                            if (match) {\n                                // `converter.options.dateFormat` = dateFormat = key;\n                                dateFormat = key;\n                                // `converter.options.alternativeFormat` =\n                                // format.alternative || '';\n                                result = format.parser(match);\n                                break;\n                            }\n                        }\n                        // Next time, use the one previously found\n                    }\n                    else {\n                        format = converter.dateFormats[dateFormat];\n                        if (!format) {\n                            // The selected format is invalid\n                            format = converter.dateFormats['YYYY/mm/dd'];\n                        }\n                        match = value.match(format.regex);\n                        if (match) {\n                            result = format.parser(match);\n                        }\n                    }\n                    // Fall back to Date.parse\n                    if (!match) {\n                        match = Date.parse(value);\n                        // External tools like Date.js and MooTools extend Date object\n                        // and returns a date.\n                        if (typeof match === 'object' &&\n                            match !== null &&\n                            match.getTime) {\n                            result = (match.getTime() -\n                                match.getTimezoneOffset() *\n                                    60000);\n                            // Timestamp\n                        }\n                        else if (isNumber(match)) {\n                            result = match - (new Date(match)).getTimezoneOffset() * 60000;\n                            if ( // Reset dates without year in Chrome\n                            value.indexOf('2001') === -1 &&\n                                (new Date(result)).getFullYear() === 2001) {\n                                result = NaN;\n                            }\n                        }\n                    }\n                }\n                return result;\n            };\n            /**\n             * Trim a string from whitespaces.\n             *\n             * @param {string} str\n             * String to trim.\n             *\n             * @param {boolean} [inside=false]\n             * Remove all spaces between numbers.\n             *\n             * @return {string}\n             * Trimed string\n             */\n            DataConverter.prototype.trim = function (str, inside) {\n                if (typeof str === 'string') {\n                    str = str.replace(/^\\s+|\\s+$/g, '');\n                    // Clear white space insdie the string, like thousands separators\n                    if (inside && /^[0-9\\s]+$/.test(str)) {\n                        str = str.replace(/\\s/g, '');\n                    }\n                }\n                return str;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options\n             */\n            DataConverter.defaultOptions = {\n                dateFormat: '',\n                alternativeFormat: '',\n                startColumn: 0,\n                endColumn: Number.MAX_VALUE,\n                startRow: 0,\n                endRow: Number.MAX_VALUE,\n                firstRowAsNames: true,\n                switchRowsAndColumns: false\n            };\n            return DataConverter;\n        }());\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for events and conversion.\n         */\n        (function (DataConverter) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts an array of columns to a table instance. Second dimension of the\n             * array are the row cells.\n             *\n             * @param {Array<DataTable.Column>} [columns]\n             * Array to convert.\n             *\n             * @param {Array<string>} [headers]\n             * Column names to use.\n             *\n             * @return {DataTable}\n             * Table instance from the arrays.\n             */\n            function getTableFromColumns(columns, headers) {\n                if (columns === void 0) { columns = []; }\n                if (headers === void 0) { headers = []; }\n                var table = new DataTable();\n                for (var i = 0, iEnd = Math.max(headers.length, columns.length); i < iEnd; ++i) {\n                    table.setColumn(headers[i] || \"\".concat(i), columns[i]);\n                }\n                return table;\n            }\n            DataConverter.getTableFromColumns = getTableFromColumns;\n        })(DataConverter || (DataConverter = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConverter;\n    });\n    _registerModule(_modules, 'Data/DataCursor.js', [], function () {\n        /* *\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * This class manages state cursors pointing on {@link Data.DataTable}. It\n         * creates a relation between states of the user interface and the table cells,\n         * columns, or rows.\n         *\n         * @class\n         * @name Data.DataCursor\n         */\n        var DataCursor = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            function DataCursor(stateMap) {\n                if (stateMap === void 0) { stateMap = {}; }\n                this.emittingRegister = [];\n                this.listenerMap = {};\n                this.stateMap = stateMap;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * This function registers a listener for a specific state and table.\n             *\n             * @example\n             * ```TypeScript\n             * dataCursor.addListener(myTable.id, 'hover', (e: DataCursor.Event) => {\n             *     if (e.cursor.type === 'position') {\n             *         console.log(`Hover over row #${e.cursor.row}.`);\n             *     }\n             * });\n             * ```\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table to listen to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table to listen to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to register.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            DataCursor.prototype.addListener = function (tableId, state, listener) {\n                var listenerMap = this.listenerMap[tableId] = (this.listenerMap[tableId] ||\n                    {});\n                var listeners = listenerMap[state] = (listenerMap[state] ||\n                    []);\n                listeners.push(listener);\n                return this;\n            };\n            /**\n             * @private\n             */\n            DataCursor.prototype.buildEmittingTag = function (e) {\n                return (e.cursor.type === 'position' ?\n                    [\n                        e.table.id,\n                        e.cursor.column,\n                        e.cursor.row,\n                        e.cursor.state,\n                        e.cursor.type\n                    ] :\n                    [\n                        e.table.id,\n                        e.cursor.columns,\n                        e.cursor.firstRow,\n                        e.cursor.lastRow,\n                        e.cursor.state,\n                        e.cursor.type\n                    ]).join('\\0');\n            };\n            // Implementation\n            DataCursor.prototype.emitCursor = function (table, groupOrCursor, cursorOrEvent, eventOrLasting, lasting) {\n                var cursor = (typeof groupOrCursor === 'object' ?\n                    groupOrCursor :\n                    cursorOrEvent), event = (typeof eventOrLasting === 'object' ?\n                    eventOrLasting :\n                    cursorOrEvent), group = (typeof groupOrCursor === 'string' ?\n                    groupOrCursor :\n                    void 0), tableId = table.id, state = cursor.state, listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                lasting = (lasting || eventOrLasting === true);\n                if (listeners) {\n                    var stateMap = this.stateMap[tableId] = (this.stateMap[tableId] ||\n                        {});\n                    var cursors = stateMap[cursor.state] || [];\n                    if (lasting) {\n                        if (!cursors.length) {\n                            stateMap[cursor.state] = cursors;\n                        }\n                        if (DataCursor.getIndex(cursor, cursors) === -1) {\n                            cursors.push(cursor);\n                        }\n                    }\n                    var e = {\n                        cursor: cursor,\n                        cursors: cursors,\n                        table: table\n                    };\n                    if (event) {\n                        e.event = event;\n                    }\n                    if (group) {\n                        e.group = group;\n                    }\n                    var emittingRegister = this.emittingRegister, emittingTag = this.buildEmittingTag(e);\n                    if (emittingRegister.indexOf(emittingTag) >= 0) {\n                        // Break call stack loops\n                        return this;\n                    }\n                    try {\n                        this.emittingRegister.push(emittingTag);\n                        for (var i = 0, iEnd = listeners.length; i < iEnd; ++i) {\n                            listeners[i].call(this, e);\n                        }\n                    }\n                    finally {\n                        var index = this.emittingRegister.indexOf(emittingTag);\n                        if (index >= 0) {\n                            this.emittingRegister.splice(index, 1);\n                        }\n                    }\n                }\n                return this;\n            };\n            /**\n             * Removes a lasting state cursor.\n             *\n             * @function #remitCursor\n             *\n             * @param {string} tableId\n             * ID of the related cursor table.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * Copy or reference of the cursor.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            DataCursor.prototype.remitCursor = function (tableId, cursor) {\n                var cursors = (this.stateMap[tableId] &&\n                    this.stateMap[tableId][cursor.state]);\n                if (cursors) {\n                    var index = DataCursor.getIndex(cursor, cursors);\n                    if (index >= 0) {\n                        cursors.splice(index, 1);\n                    }\n                }\n                return this;\n            };\n            /**\n             * This function removes a listener.\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table the listener is connected to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table the listener is listening to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to deregister.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            DataCursor.prototype.removeListener = function (tableId, state, listener) {\n                var listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    var index = listeners.indexOf(listener);\n                    if (index) {\n                        listeners.splice(index, 1);\n                    }\n                }\n                return this;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Semantic version string of the DataCursor class.\n             * @internal\n             */\n            DataCursor.version = '1.0.0';\n            return DataCursor;\n        }());\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * @class Data.DataCursor\n         */\n        (function (DataCursor) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Finds the index of an cursor in an array.\n             * @private\n             */\n            function getIndex(needle, cursors) {\n                if (needle.type === 'position') {\n                    for (var cursor = void 0, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'position' &&\n                            cursor.state === needle.state &&\n                            cursor.column === needle.column &&\n                            cursor.row === needle.row) {\n                            return i;\n                        }\n                    }\n                }\n                else {\n                    var columnNeedle = JSON.stringify(needle.columns);\n                    for (var cursor = void 0, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'range' &&\n                            cursor.state === needle.state &&\n                            cursor.firstRow === needle.firstRow &&\n                            cursor.lastRow === needle.lastRow &&\n                            JSON.stringify(cursor.columns) === columnNeedle) {\n                            return i;\n                        }\n                    }\n                }\n                return -1;\n            }\n            DataCursor.getIndex = getIndex;\n            /**\n             * Checks whether two cursor share the same properties.\n             * @private\n             */\n            function isEqual(cursorA, cursorB) {\n                if (cursorA.type === 'position' && cursorB.type === 'position') {\n                    return (cursorA.column === cursorB.column &&\n                        cursorA.row === cursorB.row &&\n                        cursorA.state === cursorB.state);\n                }\n                if (cursorA.type === 'range' && cursorB.type === 'range') {\n                    return (cursorA.firstRow === cursorB.firstRow &&\n                        cursorA.lastRow === cursorB.lastRow &&\n                        (JSON.stringify(cursorA.columns) ===\n                            JSON.stringify(cursorB.columns)));\n                }\n                return false;\n            }\n            DataCursor.isEqual = isEqual;\n            /**\n             * Checks whether a cursor is in a range.\n             * @private\n             */\n            function isInRange(needle, range) {\n                if (range.type === 'position') {\n                    range = toRange(range);\n                }\n                if (needle.type === 'position') {\n                    needle = toRange(needle, range);\n                }\n                var needleColumns = needle.columns;\n                var rangeColumns = range.columns;\n                return (needle.firstRow >= range.firstRow &&\n                    needle.lastRow <= range.lastRow &&\n                    (!needleColumns ||\n                        !rangeColumns ||\n                        needleColumns.every(function (column) { return rangeColumns.indexOf(column) >= 0; })));\n            }\n            DataCursor.isInRange = isInRange;\n            /**\n             * @private\n             */\n            function toPositions(cursor) {\n                if (cursor.type === 'position') {\n                    return [cursor];\n                }\n                var columns = (cursor.columns || []);\n                var positions = [];\n                var state = cursor.state;\n                for (var row = cursor.firstRow, rowEnd = cursor.lastRow; row < rowEnd; ++row) {\n                    if (!columns.length) {\n                        positions.push({\n                            type: 'position',\n                            row: row,\n                            state: state\n                        });\n                        continue;\n                    }\n                    for (var column = 0, columnEnd = columns.length; column < columnEnd; ++column) {\n                        positions.push({\n                            type: 'position',\n                            column: columns[column],\n                            row: row,\n                            state: state\n                        });\n                    }\n                }\n                return positions;\n            }\n            DataCursor.toPositions = toPositions;\n            /**\n             * @private\n             */\n            function toRange(cursor, defaultRange) {\n                var _a, _b, _c, _d;\n                if (cursor.type === 'range') {\n                    return cursor;\n                }\n                var range = {\n                    type: 'range',\n                    firstRow: ((_b = (_a = cursor.row) !== null && _a !== void 0 ? _a : (defaultRange && defaultRange.firstRow)) !== null && _b !== void 0 ? _b : 0),\n                    lastRow: ((_d = (_c = cursor.row) !== null && _c !== void 0 ? _c : (defaultRange && defaultRange.lastRow)) !== null && _d !== void 0 ? _d : Number.MAX_VALUE),\n                    state: cursor.state\n                };\n                if (typeof cursor.column !== 'undefined') {\n                    range.columns = [cursor.column];\n                }\n                return range;\n            }\n            DataCursor.toRange = toRange;\n        })(DataCursor || (DataCursor = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataCursor;\n    });\n    _registerModule(_modules, 'Data/DataPoolDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        var DataPoolDefaults = {\n            connectors: []\n        };\n        /* *\n         *\n         *  Export Defaults\n         *\n         * */\n\n        return DataPoolDefaults;\n    });\n    _registerModule(_modules, 'Data/DataPool.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/DataPoolDefaults.js'], _modules['Core/Utilities.js']], function (DataConnector, DataPoolDefaults, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Data pool to load connectors on-demand.\n         *\n         * @class\n         * @name Data.DataPool\n         *\n         * @param {Data.DataPoolOptions} options\n         * Pool options with all connectors.\n         */\n        var DataPool = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            function DataPool(options) {\n                if (options === void 0) { options = DataPoolDefaults; }\n                options.connectors = (options.connectors || []);\n                this.connectors = {};\n                this.options = options;\n                this.waiting = {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Emits an event on this data pool to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            DataPool.prototype.emit = function (e) {\n                U.fireEvent(this, e.type, e);\n            };\n            /**\n             * Loads the connector.\n             *\n             * @function Data.DataPool#getConnector\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            DataPool.prototype.getConnector = function (connectorId) {\n                var _this = this;\n                var connector = this.connectors[connectorId];\n                // Already loaded\n                if (connector) {\n                    return Promise.resolve(connector);\n                }\n                var waitingList = this.waiting[connectorId];\n                // Start loading\n                if (!waitingList) {\n                    waitingList = this.waiting[connectorId] = [];\n                    var connectorOptions = this.getConnectorOptions(connectorId);\n                    if (!connectorOptions) {\n                        throw new Error(\"Connector not found. (\".concat(connectorId, \")\"));\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    this\n                        .loadConnector(connectorOptions)\n                        .then(function (connector) {\n                        delete _this.waiting[connectorId];\n                        for (var i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][0](connector);\n                        }\n                    })['catch'](function (error) {\n                        delete _this.waiting[connectorId];\n                        for (var i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][1](error);\n                        }\n                    });\n                }\n                // Add request to waiting list\n                return new Promise(function (resolve, reject) {\n                    waitingList.push([resolve, reject]);\n                });\n            };\n            /**\n             * Returns the IDs of all connectors.\n             *\n             * @private\n             *\n             * @return {Array<string>}\n             * Names of all connectors.\n             */\n            DataPool.prototype.getConnectorIds = function () {\n                var connectors = this.options.connectors, connectorIds = [];\n                for (var i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    connectorIds.push(connectors[i].id);\n                }\n                return connectorIds;\n            };\n            /**\n             * Loads the options of the connector.\n             *\n             * @private\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {DataPoolConnectorOptions|undefined}\n             * Returns the options of the connector, or `undefined` if not found.\n             */\n            DataPool.prototype.getConnectorOptions = function (connectorId) {\n                var connectors = this.options.connectors;\n                for (var i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === connectorId) {\n                        return connectors[i];\n                    }\n                }\n            };\n            /**\n             * Loads the connector table.\n             *\n             * @function Data.DataPool#getConnectorTable\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataTable>}\n             * Returns the connector table.\n             */\n            DataPool.prototype.getConnectorTable = function (connectorId) {\n                return this\n                    .getConnector(connectorId)\n                    .then(function (connector) { return connector.table; });\n            };\n            /**\n             * Tests whether the connector has never been requested.\n             *\n             * @param {string} connectorId\n             * Name of the connector.\n             *\n             * @return {boolean}\n             * Returns `true`, if the connector has never been requested, otherwise\n             * `false`.\n             */\n            DataPool.prototype.isNewConnector = function (connectorId) {\n                return !this.connectors[connectorId];\n            };\n            /**\n             * Creates and loads the connector.\n             *\n             * @private\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Options of connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            DataPool.prototype.loadConnector = function (options) {\n                var _this = this;\n                return new Promise(function (resolve, reject) {\n                    _this.emit({\n                        type: 'load',\n                        options: options\n                    });\n                    var ConnectorClass = DataConnector.types[options.type];\n                    if (!ConnectorClass) {\n                        throw new Error(\"Connector type not found. (\".concat(options.type, \")\"));\n                    }\n                    var connector = new ConnectorClass(options.options);\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    connector\n                        .load()\n                        .then(function (connector) {\n                        _this.connectors[options.id] = connector;\n                        _this.emit({\n                            type: 'afterLoad',\n                            options: options\n                        });\n                        resolve(connector);\n                    })['catch'](reject);\n                });\n            };\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataPool#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataPool>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            DataPool.prototype.on = function (type, callback) {\n                return U.addEvent(this, type, callback);\n            };\n            /**\n             * Sets connector options under the specified `options.id`.\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Connector options to set.\n             */\n            DataPool.prototype.setConnectorOptions = function (options) {\n                var connectors = this.options.connectors, instances = this.connectors;\n                this.emit({\n                    type: 'setConnectorOptions',\n                    options: options\n                });\n                for (var i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === options.id) {\n                        connectors.splice(i, 1);\n                        break;\n                    }\n                }\n                if (instances[options.id]) {\n                    instances[options.id].stopPolling();\n                    delete instances[options.id];\n                }\n                connectors.push(options);\n                this.emit({\n                    type: 'afterSetConnectorOptions',\n                    options: options\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Semantic version string of the DataPool class.\n             * @internal\n             */\n            DataPool.version = '1.0.0';\n            return DataPool;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataPool;\n    });\n    _registerModule(_modules, 'Data/Formula/FormulaParser.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * @private\n         */\n        var booleanRegExp = /^(?:FALSE|TRUE)/;\n        /**\n         * `.`-separated decimal.\n         * @private\n         */\n        var decimal1RegExp = /^[+-]?\\d+(?:\\.\\d+)?(?:e[+-]\\d+)?/;\n        /**\n         * `,`-separated decimal.\n         * @private\n         */\n        var decimal2RegExp = /^[+-]?\\d+(?:,\\d+)?(?:e[+-]\\d+)?/;\n        /**\n         * - Group 1: Function name\n         * @private\n         */\n        var functionRegExp = /^([A-Z][A-Z\\d\\.]*)\\(/;\n        /**\n         * @private\n         */\n        var operatorRegExp = /^(?:[+\\-*\\/^<=>]|<=|=>)/;\n        /**\n         * - Group 1: Start column\n         * - Group 2: Start row\n         * - Group 3: End column\n         * - Group 4: End row\n         * @private\n         */\n        var rangeA1RegExp = /^(\\$?[A-Z]+)(\\$?\\d+)\\:(\\$?[A-Z]+)(\\$?\\d+)/;\n        /**\n         * - Group 1: Start row\n         * - Group 2: Start column\n         * - Group 3: End row\n         * - Group 4: End column\n         * @private\n         */\n        var rangeR1C1RegExp = /^R(\\d*|\\[\\d+\\])C(\\d*|\\[\\d+\\])\\:R(\\d*|\\[\\d+\\])C(\\d*|\\[\\d+\\])/;\n        /**\n         * - Group 1: Column\n         * - Group 2: Row\n         * @private\n         */\n        var referenceA1RegExp = /^(\\$?[A-Z]+)(\\$?\\d+)(?![\\:C])/;\n        /**\n         * - Group 1: Row\n         * - Group 2: Column\n         * @private\n         */\n        var referenceR1C1RegExp = /^R(\\d*|\\[\\d+\\])C(\\d*|\\[\\d+\\])(?!\\:)/;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Extracts the inner string of the most outer parantheses.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Text string to extract from.\n         *\n         * @return {string}\n         * Extracted parantheses. If not found an exception will be thrown.\n         */\n        function extractParantheses(text) {\n            var parantheseLevel = 0;\n            for (var i = 0, iEnd = text.length, char = void 0, parantheseStart = 1; i < iEnd; ++i) {\n                char = text[i];\n                if (char === '(') {\n                    if (!parantheseLevel) {\n                        parantheseStart = i + 1;\n                    }\n                    ++parantheseLevel;\n                    continue;\n                }\n                if (char === ')') {\n                    --parantheseLevel;\n                    if (!parantheseLevel) {\n                        return text.substring(parantheseStart, i);\n                    }\n                }\n            }\n            if (parantheseLevel > 0) {\n                var error = new Error('Incomplete parantheses.');\n                error.name = 'FormulaParseError';\n                throw error;\n            }\n            return '';\n        }\n        /**\n         * Extracts the inner string value.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Text string to extract from.\n         *\n         * @return {string}\n         * Extracted string. If not found an exception will be thrown.\n         */\n        function extractString(text) {\n            var start = -1;\n            for (var i = 0, iEnd = text.length, char = void 0, escaping = false; i < iEnd; ++i) {\n                char = text[i];\n                if (char === '\\\\') {\n                    escaping = !escaping;\n                    continue;\n                }\n                if (escaping) {\n                    escaping = false;\n                    continue;\n                }\n                if (char === '\"') {\n                    if (start < 0) {\n                        start = i;\n                    }\n                    else {\n                        return text.substring(start + 1, i); // `Ã¬` is excluding\n                    }\n                }\n            }\n            var error = new Error('Incomplete string.');\n            error.name = 'FormulaParseError';\n            throw error;\n        }\n        /**\n         * Parses an argument string. Formula arrays with a single term will be\n         * simplified to the term.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Argument string to parse.\n         *\n         * @param {boolean} alternativeSeparators\n         * Whether to expect `;` as argument separator and `,` as decimal separator.\n         *\n         * @return {Formula|Function|Range|Reference|Value}\n         * The recognized term structure.\n         */\n        function parseArgument(text, alternativeSeparators) {\n            var match;\n            // Check for a R1C1:R1C1 range notation\n            match = text.match(rangeR1C1RegExp);\n            if (match) {\n                var beginColumnRelative = (match[2] === '' || match[2][0] === '[');\n                var beginRowRelative = (match[1] === '' || match[1][0] === '[');\n                var endColumnRelative = (match[4] === '' || match[4][0] === '[');\n                var endRowRelative = (match[3] === '' || match[3][0] === '[');\n                var range = {\n                    type: 'range',\n                    beginColumn: (beginColumnRelative ?\n                        parseInt(match[2].substring(1, -1) || '0', 10) :\n                        parseInt(match[2], 10) - 1),\n                    beginRow: (beginRowRelative ?\n                        parseInt(match[1].substring(1, -1) || '0', 10) :\n                        parseInt(match[1], 10) - 1),\n                    endColumn: (endColumnRelative ?\n                        parseInt(match[4].substring(1, -1) || '0', 10) :\n                        parseInt(match[4], 10) - 1),\n                    endRow: (endRowRelative ?\n                        parseInt(match[3].substring(1, -1) || '0', 10) :\n                        parseInt(match[3], 10) - 1)\n                };\n                if (beginColumnRelative) {\n                    range.beginColumnRelative = true;\n                }\n                if (beginRowRelative) {\n                    range.beginRowRelative = true;\n                }\n                if (endColumnRelative) {\n                    range.endColumnRelative = true;\n                }\n                if (endRowRelative) {\n                    range.endRowRelative = true;\n                }\n                return range;\n            }\n            // Check for a A1:A1 range notation\n            match = text.match(rangeA1RegExp);\n            if (match) {\n                var beginColumnRelative = match[1][0] !== '$';\n                var beginRowRelative = match[2][0] !== '$';\n                var endColumnRelative = match[3][0] !== '$';\n                var endRowRelative = match[4][0] !== '$';\n                var range = {\n                    type: 'range',\n                    beginColumn: parseReferenceColumn(beginColumnRelative ?\n                        match[1] :\n                        match[1].substring(1)) - 1,\n                    beginRow: parseInt(beginRowRelative ?\n                        match[2] :\n                        match[2].substring(1), 10) - 1,\n                    endColumn: parseReferenceColumn(endColumnRelative ?\n                        match[3] :\n                        match[3].substring(1)) - 1,\n                    endRow: parseInt(endRowRelative ?\n                        match[4] :\n                        match[4].substring(1), 10) - 1\n                };\n                if (beginColumnRelative) {\n                    range.beginColumnRelative = true;\n                }\n                if (beginRowRelative) {\n                    range.beginRowRelative = true;\n                }\n                if (endColumnRelative) {\n                    range.endColumnRelative = true;\n                }\n                if (endRowRelative) {\n                    range.endRowRelative = true;\n                }\n                return range;\n            }\n            // Fallback to formula processing for other pattern types\n            var formula = parseFormula(text, alternativeSeparators);\n            return (formula.length === 1 && typeof formula[0] !== 'string' ?\n                formula[0] :\n                formula);\n        }\n        /**\n         * Parse arguments string inside function parantheses.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Parantheses string of the function.\n         *\n         * @param {boolean} alternativeSeparators\n         * Whether to expect `;` as argument separator and `,` as decimal separator.\n         *\n         * @return {Highcharts.FormulaArguments}\n         * Parsed arguments array.\n         */\n        function parseArguments(text, alternativeSeparators) {\n            var args = [], argumentsSeparator = (alternativeSeparators ? ';' : ',');\n            var parantheseLevel = 0, term = '';\n            for (var i = 0, iEnd = text.length, char = void 0; i < iEnd; ++i) {\n                char = text[i];\n                // Check for separator\n                if (char === argumentsSeparator &&\n                    !parantheseLevel &&\n                    term) {\n                    args.push(parseArgument(term, alternativeSeparators));\n                    term = '';\n                    // Check for a quoted string before skip logic\n                }\n                else if (char === '\"' &&\n                    !parantheseLevel &&\n                    !term) {\n                    var string = extractString(text.substring(i));\n                    args.push(string);\n                    i += string.length + 1; // Only +1 to cover ++i in for-loop\n                    // Skip space and check paranthesis nesting\n                }\n                else if (char !== ' ') {\n                    term += char;\n                    if (char === '(') {\n                        ++parantheseLevel;\n                    }\n                    else if (char === ')') {\n                        --parantheseLevel;\n                    }\n                }\n            }\n            // Look for left-overs from last argument\n            if (!parantheseLevel && term) {\n                args.push(parseArgument(term, alternativeSeparators));\n            }\n            return args;\n        }\n        /**\n         * Converts a spreadsheet formula string into a formula array. Throws a\n         * `FormulaParserError` when the string can not be parsed.\n         *\n         * @private\n         * @function Formula.parseFormula\n         *\n         * @param {string} text\n         * Spreadsheet formula string, without the leading `=`.\n         *\n         * @param {boolean} alternativeSeparators\n         * * `false` to expect `,` between arguments and `.` in decimals.\n         * * `true` to expect `;` between arguments and `,` in decimals.\n         *\n         * @return {Formula.Formula}\n         * Formula array representing the string.\n         */\n        function parseFormula(text, alternativeSeparators) {\n            var decimalRegExp = (alternativeSeparators ?\n                decimal2RegExp :\n                decimal1RegExp), formula = [];\n            var match, next = (text[0] === '=' ? text.substring(1) : text).trim();\n            while (next) {\n                // Check for an R1C1 reference notation\n                match = next.match(referenceR1C1RegExp);\n                if (match) {\n                    var columnRelative = (match[2] === '' || match[2][0] === '[');\n                    var rowRelative = (match[1] === '' || match[1][0] === '[');\n                    var reference = {\n                        type: 'reference',\n                        column: (columnRelative ?\n                            parseInt(match[2].substring(1, -1) || '0', 10) :\n                            parseInt(match[2], 10) - 1),\n                        row: (rowRelative ?\n                            parseInt(match[1].substring(1, -1) || '0', 10) :\n                            parseInt(match[1], 10) - 1)\n                    };\n                    if (columnRelative) {\n                        reference.columnRelative = true;\n                    }\n                    if (rowRelative) {\n                        reference.rowRelative = true;\n                    }\n                    formula.push(reference);\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for an A1 reference notation\n                match = next.match(referenceA1RegExp);\n                if (match) {\n                    var columnRelative = match[1][0] !== '$';\n                    var rowRelative = match[2][0] !== '$';\n                    var reference = {\n                        type: 'reference',\n                        column: parseReferenceColumn(columnRelative ?\n                            match[1] :\n                            match[1].substring(1)) - 1,\n                        row: parseInt(rowRelative ?\n                            match[2] :\n                            match[2].substring(1), 10) - 1\n                    };\n                    if (columnRelative) {\n                        reference.columnRelative = true;\n                    }\n                    if (rowRelative) {\n                        reference.rowRelative = true;\n                    }\n                    formula.push(reference);\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a formula operator\n                match = next.match(operatorRegExp);\n                if (match) {\n                    formula.push(match[0]);\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a boolean value\n                match = next.match(booleanRegExp);\n                if (match) {\n                    formula.push(match[0] === 'TRUE');\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a number value\n                match = next.match(decimalRegExp);\n                if (match) {\n                    formula.push(parseFloat(match[0]));\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a quoted string\n                if (next[0] === '\"') {\n                    var string = extractString(next);\n                    formula.push(string.substring(1, -1));\n                    next = next.substring(string.length + 2).trim();\n                    continue;\n                }\n                // Check for a function\n                match = next.match(functionRegExp);\n                if (match) {\n                    next = next.substring(match[1].length).trim();\n                    var parantheses = extractParantheses(next);\n                    formula.push({\n                        type: 'function',\n                        name: match[1],\n                        args: parseArguments(parantheses, alternativeSeparators)\n                    });\n                    next = next.substring(parantheses.length + 2).trim();\n                    continue;\n                }\n                // Check for a formula in parantheses\n                if (next[0] === '(') {\n                    var paranteses = extractParantheses(next);\n                    if (paranteses) {\n                        formula\n                            .push(parseFormula(paranteses, alternativeSeparators));\n                        next = next.substring(paranteses.length + 2).trim();\n                        continue;\n                    }\n                }\n                // Something is not right\n                var position = text.length - next.length, error = new Error('Unexpected character `' +\n                    text.substring(position, position + 1) +\n                    '` at position ' + (position + 1) +\n                    '. (`...' + text.substring(position - 5, position + 6) + '...`)');\n                error.name = 'FormulaParseError';\n                throw error;\n            }\n            return formula;\n        }\n        /**\n         * Converts a reference column `A` of `A1` into a number. Supports endless sizes\n         * `ZZZ...`, just limited by integer precision.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Column string to convert.\n         *\n         * @return {number}\n         * Converted column index.\n         */\n        function parseReferenceColumn(text) {\n            var column = 0;\n            for (var i = 0, iEnd = text.length, code = void 0, factor = text.length - 1; i < iEnd; ++i) {\n                code = text.charCodeAt(i);\n                if (code >= 65 && code <= 90) {\n                    column += (code - 64) * Math.pow(26, factor);\n                }\n                --factor;\n            }\n            return column;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var FormulaParser = {\n            parseFormula: parseFormula\n        };\n\n        return FormulaParser;\n    });\n    _registerModule(_modules, 'Data/Formula/FormulaTypes.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Array of all possible operators.\n         * @private\n         */\n        var operators = ['+', '-', '*', '/', '^', '=', '<', '<=', '>', '>='];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Tests an item for a Formula array.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a formula (or argument) array.\n         */\n        function isFormula(item) {\n            return item instanceof Array;\n        }\n        /**\n         * Tests an item for a Function structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a formula function.\n         */\n        function isFunction(item) {\n            return (typeof item === 'object' &&\n                !(item instanceof Array) &&\n                item.type === 'function');\n        }\n        /**\n         * Tests an item for an Operator string.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is an operator string.\n         */\n        function isOperator(item) {\n            return (typeof item === 'string' &&\n                operators.indexOf(item) >= 0);\n        }\n        /**\n         * Tests an item for a Range structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a range.\n         */\n        function isRange(item) {\n            return (typeof item === 'object' &&\n                !(item instanceof Array) &&\n                item.type === 'range');\n        }\n        /**\n         * Tests an item for a Reference structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a reference.\n         */\n        function isReference(item) {\n            return (typeof item === 'object' &&\n                !(item instanceof Array) &&\n                item.type === 'reference');\n        }\n        /**\n         * Tests an item for a Value structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem|null|undefined} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a value.\n         */\n        function isValue(item) {\n            return (typeof item === 'boolean' ||\n                typeof item === 'number' ||\n                typeof item === 'string');\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var MathFormula = {\n            isFormula: isFormula,\n            isFunction: isFunction,\n            isOperator: isOperator,\n            isRange: isRange,\n            isReference: isReference,\n            isValue: isValue\n        };\n\n        return MathFormula;\n    });\n    _registerModule(_modules, 'Data/Formula/FormulaProcessor.js', [_modules['Data/Formula/FormulaTypes.js']], function (FormulaTypes) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var isFormula = FormulaTypes.isFormula, isFunction = FormulaTypes.isFunction, isOperator = FormulaTypes.isOperator, isRange = FormulaTypes.isRange, isReference = FormulaTypes.isReference, isValue = FormulaTypes.isValue;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var asLogicalStringRegExp = / */;\n        var MAX_FALSE = Number.MAX_VALUE / 1.000000000001;\n        var MAX_STRING = Number.MAX_VALUE / 1.000000000002;\n        var MAX_TRUE = Number.MAX_VALUE;\n        var operatorPriority = {\n            '^': 3,\n            '*': 2,\n            '/': 2,\n            '+': 1,\n            '-': 1,\n            '=': 0,\n            '<': 0,\n            '<=': 0,\n            '>': 0,\n            '>=': 0\n        };\n        var processorFunctions = {};\n        var processorFunctionNameRegExp = /^[A-Z][A-Z\\.]*$/;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Converts non-number types to logical numbers.\n         *\n         * @param {Highcharts.FormulaValue} value\n         * Value to convert.\n         *\n         * @return {number}\n         * Logical number value. `NaN` if not convertable.\n         */\n        function asLogicalNumber(value) {\n            switch (typeof value) {\n                case 'boolean':\n                    return value ? MAX_TRUE : MAX_FALSE;\n                case 'string':\n                    return MAX_STRING;\n                case 'number':\n                    return value;\n                default:\n                    return NaN;\n            }\n        }\n        /**\n         * Converts strings to logical strings, while other types get passed through. In\n         * logical strings the space character is the lowest value and letters are case\n         * insensitive.\n         *\n         * @param {Highcharts.FormulaValue} value\n         * Value to convert.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Logical string value or passed through value.\n         */\n        function asLogicalString(value) {\n            if (typeof value === 'string') {\n                return value.toLowerCase().replace(asLogicalStringRegExp, '\\0');\n            }\n            return value;\n        }\n        /**\n         * Converts non-number types to a logic number.\n         *\n         * @param {Highcharts.FormulaValue} value\n         * Value to convert.\n         *\n         * @return {number}\n         * Number value. `NaN` if not convertable.\n         */\n        function asNumber(value) {\n            switch (typeof value) {\n                case 'boolean':\n                    return value ? 1 : 0;\n                case 'string':\n                    return parseFloat(value.replace(',', '.'));\n                case 'number':\n                    return value;\n                default:\n                    return NaN;\n            }\n        }\n        /**\n         * Process a basic operation of two given values.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaOperator} operator\n         * Operator between values.\n         *\n         * @param {Highcharts.FormulaValue} x\n         * First value for operation.\n         *\n         * @param {Highcharts.FormulaValue} y\n         * Second value for operation.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Operation result. `NaN` if operation is not support.\n         */\n        function basicOperation(operator, x, y) {\n            switch (operator) {\n                case '=':\n                    return asLogicalString(x) === asLogicalString(y);\n                case '<':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) < asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) < asLogicalNumber(y);\n                case '<=':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) <= asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) <= asLogicalNumber(y);\n                case '>':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) > asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) > asLogicalNumber(y);\n                case '>=':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) >= asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) >= asLogicalNumber(y);\n            }\n            x = asNumber(x);\n            y = asNumber(y);\n            var result;\n            switch (operator) {\n                case '+':\n                    result = x + y;\n                    break;\n                case '-':\n                    result = x - y;\n                    break;\n                case '*':\n                    result = x * y;\n                    break;\n                case '/':\n                    result = x / y;\n                    break;\n                case '^':\n                    result = Math.pow(x, y);\n                    break;\n                default:\n                    return NaN;\n            }\n            // Limit decimal to 9 digits\n            return (result % 1 ?\n                Math.round(result * 1000000000) / 1000000000 :\n                result);\n        }\n        /**\n         * Converts an argument to Value and in case of a range to an array of Values.\n         *\n         * @function Highcharts.Formula.getArgumentValue\n         *\n         * @param {Highcharts.FormulaRange|Highcharts.FormulaTerm} arg\n         * Formula range or term to convert.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Highcharts.FormulaValue|Array<Highcharts.FormulaValue>}\n         * Converted value.\n         */\n        function getArgumentValue(arg, table) {\n            // Add value\n            if (isValue(arg)) {\n                return arg;\n            }\n            // Add values of a range\n            if (isRange(arg)) {\n                return (table && getRangeValues(arg, table) || []);\n            }\n            // Add values of a function\n            if (isFunction(arg)) {\n                return processFunction(arg, table);\n            }\n            // Process functions, operations, references with formula processor\n            return processFormula((isFormula(arg) ? arg : [arg]), table);\n        }\n        /**\n         * Converts all arguments to Values and in case of ranges to arrays of Values.\n         *\n         * @function Highcharts.Formula.getArgumentsValues\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Formula arguments to convert.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Array<(Highcharts.FormulaValue|Array<Highcharts.FormulaValue>)>}\n         * Converted values.\n         */\n        function getArgumentsValues(args, table) {\n            var values = [];\n            for (var i = 0, iEnd = args.length; i < iEnd; ++i) {\n                values.push(getArgumentValue(args[i], table));\n            }\n            return values;\n        }\n        /**\n         * Extracts cell values from a table for a given range.\n         *\n         * @function Highcharts.Formula.getRangeValues\n         *\n         * @param {Highcharts.FormulaRange} range\n         * Formula range to use.\n         *\n         * @param {Highcharts.DataTable} table\n         * Table to extract from.\n         *\n         * @return {Array<Highcharts.FormulaValue>}\n         * Extracted values.\n         */\n        function getRangeValues(range, table) {\n            var columnNames = table\n                .getColumnNames()\n                .slice(range.beginColumn, range.endColumn + 1), values = [];\n            for (var i = 0, iEnd = columnNames.length, cell = void 0; i < iEnd; ++i) {\n                var cells = table.getColumn(columnNames[i], true) || [];\n                for (var j = range.beginRow, jEnd = range.endRow + 1; j < jEnd; ++j) {\n                    cell = cells[j];\n                    if (typeof cell === 'string' &&\n                        cell[0] === '=' &&\n                        table !== table.modified) {\n                        // Look in the modified table for formula result\n                        cell = table.modified.getCell(columnNames[i], j);\n                    }\n                    values.push(isValue(cell) ? cell : NaN);\n                }\n            }\n            return values;\n        }\n        /**\n         * Extracts the cell value from a table for a given reference.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaReference} reference\n         * Formula reference to use.\n         *\n         * @param {Highcharts.DataTable} table\n         * Table to extract from.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Extracted value. 'undefined' might also indicate that the cell was not found.\n         */\n        function getReferenceValue(reference, table) {\n            var columnName = table.getColumnNames()[reference.column];\n            if (columnName) {\n                var cell = table.getCell(columnName, reference.row);\n                if (typeof cell === 'string' &&\n                    cell[0] === '=' &&\n                    table !== table.modified) {\n                    // Look in the modified table for formula result\n                    var result = table.modified.getCell(columnName, reference.row);\n                    return isValue(result) ? result : NaN;\n                }\n                return isValue(cell) ? cell : NaN;\n            }\n            return NaN;\n        }\n        /**\n         * Processes a formula array on the given table. If the formula does not contain\n         * references or ranges, then no table has to be provided.\n         *\n         * @private\n         * @function Highcharts.processFormula\n         *\n         * @param {Highcharts.Formula} formula\n         * Formula array to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Result value of the process. `NaN` indicates an error.\n         */\n        function processFormula(formula, table) {\n            var x;\n            for (var i = 0, iEnd = formula.length, item = void 0, operator = void 0, result = void 0, y = void 0; i < iEnd; ++i) {\n                item = formula[i];\n                // Remember operator for operation on next item\n                if (isOperator(item)) {\n                    operator = item;\n                    continue;\n                }\n                // Next item is a value\n                if (isValue(item)) {\n                    y = item;\n                    // Next item is a formula and needs to get processed first\n                }\n                else if (isFormula(item)) {\n                    y = processFormula(formula, table);\n                    // Next item is a function call and needs to get processed first\n                }\n                else if (isFunction(item)) {\n                    result = processFunction(item, table);\n                    y = (isValue(result) ? result : NaN); // Arrays are not allowed here\n                    // Next item is a reference and needs to get resolved\n                }\n                else if (isReference(item)) {\n                    y = (table && getReferenceValue(item, table));\n                }\n                // If we have a next value, lets do the operation\n                if (typeof y !== 'undefined') {\n                    // Next value is our first value\n                    if (typeof x === 'undefined') {\n                        if (operator) {\n                            x = basicOperation(operator, 0, y);\n                        }\n                        else {\n                            x = y;\n                        }\n                        // Fail fast if no operator available\n                    }\n                    else if (!operator) {\n                        return NaN;\n                        // Regular next value\n                    }\n                    else {\n                        var operator2 = formula[i + 1];\n                        if (isOperator(operator2) &&\n                            operatorPriority[operator2] > operatorPriority[operator]) {\n                            y = basicOperation(operator2, y, processFormula(formula.slice(i + 2)));\n                            i = iEnd;\n                        }\n                        x = basicOperation(operator, x, y);\n                    }\n                    operator = void 0;\n                    y = void 0;\n                }\n            }\n            return isValue(x) ? x : NaN;\n        }\n        /**\n         * Process a function on the given table. If the arguments do not contain\n         * references or ranges, then no table has to be provided.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaFunction} formulaFunction\n         * Formula function to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @param {Highcharts.FormulaReference} [reference]\n         * Table cell reference to use for relative references and ranges.\n         *\n         * @return {Highcharts.FormulaValue|Array<Highcharts.FormulaValue>}\n         * Result value (or values) of the process. `NaN` indicates an error.\n         */\n        function processFunction(formulaFunction, table, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        reference // @todo\n        ) {\n            var processor = processorFunctions[formulaFunction.name];\n            if (processor) {\n                try {\n                    return processor(formulaFunction.args, table);\n                }\n                catch (_a) {\n                    return NaN;\n                }\n            }\n            var error = new Error(\"Function \\\"\".concat(formulaFunction.name, \"\\\" not found.\"));\n            error.name = 'FormulaProcessError';\n            throw error;\n        }\n        /**\n         * Registers a function for the FormulaProcessor.\n         *\n         * @param {string} name\n         * Name of the function in spreadsheets notation with upper case.\n         *\n         * @param {Highcharts.FormulaFunction} processorFunction\n         * ProcessorFunction for the FormulaProcessor. This is an object so that it\n         * can take additional parameter for future validation routines.\n         *\n         * @return {boolean}\n         * Return true, if the ProcessorFunction has been registered.\n         */\n        function registerProcessorFunction(name, processorFunction) {\n            return (processorFunctionNameRegExp.test(name) &&\n                !processorFunctions[name] &&\n                !!(processorFunctions[name] = processorFunction));\n        }\n        /**\n         * Translates relative references and ranges in-place.\n         *\n         * @param {Highcharts.Formula} formula\n         * Formula to translate references and ranges in.\n         *\n         * @param {number} [columnDelta=0]\n         * Column delta to translate to. Negative translate back.\n         *\n         * @param {number} [rowDelta=0]\n         * Row delta to translate to. Negative numbers translate back.\n         *\n         * @return {Highcharts.Formula}\n         * Formula with translated reference and ranges. This formula is equal to the\n         * first argument.\n         */\n        function translateReferences(formula, columnDelta, rowDelta) {\n            if (columnDelta === void 0) { columnDelta = 0; }\n            if (rowDelta === void 0) { rowDelta = 0; }\n            for (var i = 0, iEnd = formula.length, item = void 0; i < iEnd; ++i) {\n                item = formula[i];\n                if (item instanceof Array) {\n                    translateReferences(item, columnDelta, rowDelta);\n                }\n                else if (isFunction(item)) {\n                    translateReferences(item.args, columnDelta, rowDelta);\n                }\n                else if (isRange(item)) {\n                    if (item.beginColumnRelative) {\n                        item.beginColumn += columnDelta;\n                    }\n                    if (item.beginRowRelative) {\n                        item.beginRow += rowDelta;\n                    }\n                    if (item.endColumnRelative) {\n                        item.endColumn += columnDelta;\n                    }\n                    if (item.endRowRelative) {\n                        item.endRow += rowDelta;\n                    }\n                }\n                else if (isReference(item)) {\n                    if (item.columnRelative) {\n                        item.column += columnDelta;\n                    }\n                    if (item.rowRelative) {\n                        item.row += rowDelta;\n                    }\n                }\n            }\n            return formula;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var FormulaProcessor = {\n            asNumber: asNumber,\n            getArgumentValue: getArgumentValue,\n            getArgumentsValues: getArgumentsValues,\n            getRangeValues: getRangeValues,\n            getReferenceValue: getReferenceValue,\n            processFormula: processFormula,\n            processorFunctions: processorFunctions,\n            registerProcessorFunction: registerProcessorFunction,\n            translateReferences: translateReferences\n        };\n\n        return FormulaProcessor;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/ABS.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `ABS(value)` implementation. Returns positive numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Array<number>}\n         * Result value of the process.\n         */\n        function ABS(args, table) {\n            var value = getArgumentValue(args[0], table);\n            switch (typeof value) {\n                case 'number':\n                    return Math.abs(value);\n                case 'object': {\n                    var values = [];\n                    for (var i = 0, iEnd = value.length, value2 = void 0; i < iEnd; ++i) {\n                        value2 = value[i];\n                        if (typeof value2 !== 'number') {\n                            return NaN;\n                        }\n                        values.push(Math.abs(value2));\n                    }\n                    return values;\n                }\n                default:\n                    return NaN;\n            }\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('ABS', ABS);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ABS;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/AND.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `AND(...tests)` implementation. Returns `TRUE`, if all test\n         * results are not `0` or `FALSE`.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean}\n         * Result value of the process.\n         */\n        function AND(args, table) {\n            for (var i = 0, iEnd = args.length, value = void 0; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                if (!value ||\n                    (typeof value === 'object' &&\n                        !AND(value, table))) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('AND', AND);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AND;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/AVERAGE.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentsValues = FormulaProcessor.getArgumentsValues;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `AVERAGE(...values)` implementation. Calculates the average\n         * of the given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.AVERAGE\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function AVERAGE(args, table) {\n            var values = getArgumentsValues(args, table);\n            var count = 0, result = 0;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            ++count;\n                            result += value;\n                        }\n                        break;\n                    case 'object':\n                        for (var j = 0, jEnd = value.length, value2 = void 0; j < jEnd; ++j) {\n                            value2 = value[j];\n                            if (typeof value2 === 'number' &&\n                                !isNaN(value2)) {\n                                ++count;\n                                result += value2;\n                            }\n                        }\n                        break;\n                }\n            }\n            return (count ? (result / count) : 0);\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('AVERAGE', AVERAGE);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AVERAGE;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/AVERAGEA.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `AVERAGEA(...values)` implementation. Calculates the\n         * average of the given values. Strings and FALSE are calculated as 0.\n         *\n         * @private\n         * @function Formula.processorFunctions.AVERAGEA\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function AVERAGEA(args, table) {\n            var count = 0, result = 0;\n            for (var i = 0, iEnd = args.length, value = void 0; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                switch (typeof value) {\n                    case 'boolean':\n                        ++count;\n                        result += (value ? 1 : 0);\n                        continue;\n                    case 'number':\n                        if (!isNaN(value)) {\n                            ++count;\n                            result += value;\n                        }\n                        continue;\n                    case 'string':\n                        ++count;\n                        continue;\n                    default:\n                        for (var j = 0, jEnd = value.length, value2 = void 0; j < jEnd; ++j) {\n                            value2 = value[j];\n                            switch (typeof value2) {\n                                case 'boolean':\n                                    ++count;\n                                    result += (value2 ? 1 : 0);\n                                    continue;\n                                case 'number':\n                                    if (!isNaN(value2)) {\n                                        ++count;\n                                        result += value2;\n                                    }\n                                    continue;\n                                case 'string':\n                                    ++count;\n                                    continue;\n                            }\n                        }\n                        continue;\n                }\n            }\n            return (count ? (result / count) : 0);\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('AVERAGEA', AVERAGEA);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AVERAGEA;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/COUNT.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `COUNT(...values)` implementation. Returns the count of\n         * given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.COUNT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function COUNT(args, table) {\n            var values = FormulaProcessor.getArgumentsValues(args, table);\n            var count = 0;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            ++count;\n                        }\n                        break;\n                    case 'object':\n                        count += COUNT(value, table);\n                        break;\n                }\n            }\n            return count;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('COUNT', COUNT);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return COUNT;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/COUNTA.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `COUNTA(...values)` implementation. Returns the count of\n         * given values that are not empty.\n         *\n         * @private\n         * @function Formula.processorFunctions.COUNT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function COUNTA(args, table) {\n            var values = FormulaProcessor.getArgumentsValues(args, table);\n            var count = 0;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (isNaN(value)) {\n                            continue;\n                        }\n                        break;\n                    case 'object':\n                        count += COUNTA(value, table);\n                        continue;\n                    case 'string':\n                        if (!value) {\n                            continue;\n                        }\n                        break;\n                }\n                ++count;\n            }\n            return count;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('COUNTA', COUNTA);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return COUNTA;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/IF.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `IF(test, value1, value2)` implementation. Returns one of\n         * the values based on the test result. `value1` will be returned, if the test\n         * result is not `0` or `FALSE`.\n         *\n         * @private\n         * @function Formula.processorFunctions.IF\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Highcharts.FormulaValue|Array<Highcharts.FormulaValue>}\n         * Result value of the process.\n         */\n        function IF(args, table) {\n            return (getArgumentValue(args[0], table) ?\n                getArgumentValue(args[1], table) :\n                getArgumentValue(args[2], table));\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('IF', IF);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return IF;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/ISNA.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `ISNA(value)` implementation. Returns TRUE if value is not\n         * a number.\n         *\n         * @private\n         * @function Formula.processorFunctions.ISNA\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean}\n         * Result value of the process.\n         */\n        function ISNA(args, table) {\n            var value = getArgumentValue(args[0], table);\n            return (typeof value !== 'number' || isNaN(value));\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('ISNA', ISNA);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ISNA;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MAX.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentsValues = FormulaProcessor.getArgumentsValues;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MAX(...values)` implementation. Calculates the largest\n         * of the given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.MAX\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MAX(args, table) {\n            var values = getArgumentsValues(args, table);\n            var result = Number.NEGATIVE_INFINITY;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (value > result) {\n                            result = value;\n                        }\n                        break;\n                    case 'object':\n                        value = MAX(value);\n                        if (value > result) {\n                            result = value;\n                        }\n                        break;\n                }\n            }\n            return isFinite(result) ? result : 0;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MAX', MAX);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MAX;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MEDIAN.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MEDIAN(...values)` implementation. Calculates the median\n         * average of the given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.MEDIAN\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MEDIAN(args, table) {\n            var median = [], values = FormulaProcessor.getArgumentsValues(args, table);\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            median.push(value);\n                        }\n                        break;\n                    case 'object':\n                        for (var j = 0, jEnd = value.length, value2 = void 0; j < jEnd; ++j) {\n                            value2 = value[j];\n                            if (typeof value2 === 'number' &&\n                                !isNaN(value2)) {\n                                median.push(value2);\n                            }\n                        }\n                        break;\n                }\n            }\n            var count = median.length;\n            if (!count) {\n                return NaN;\n            }\n            var half = Math.floor(count / 2); // Floor because index starts at 0\n            return (count % 2 ?\n                median[half] : // Odd\n                (median[half - 1] + median[half]) / 2 // Even\n            );\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MEDIAN', MEDIAN);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MEDIAN;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MIN.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentsValues = FormulaProcessor.getArgumentsValues;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MIN(...values)` implementation. Calculates the lowest\n         * of the given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.MIN\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MIN(args, table) {\n            var values = getArgumentsValues(args, table);\n            var result = Number.POSITIVE_INFINITY;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (value < result) {\n                            result = value;\n                        }\n                        break;\n                    case 'object':\n                        value = MIN(value);\n                        if (value < result) {\n                            result = value;\n                        }\n                        break;\n                }\n            }\n            return isFinite(result) ? result : 0;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MIN', MIN);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MIN;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MOD.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MOD(value1, value2)` implementation. Calculates the rest\n         * of the division with the given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.MOD\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MOD(args, table) {\n            var value1 = getArgumentValue(args[0], table), value2 = getArgumentValue(args[1], table);\n            if (typeof value1 === 'object') {\n                value1 = value1[0];\n            }\n            if (typeof value2 === 'object') {\n                value2 = value2[0];\n            }\n            if (typeof value1 !== 'number' ||\n                typeof value2 !== 'number' ||\n                value2 === 0) {\n                return NaN;\n            }\n            return value1 % value2;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MOD', MOD);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MOD;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MODE.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Creates the mode map of the given arguments.\n         *\n         * @private\n         * @function Formula.processorFunctions.MULT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function getModeMap(args, table) {\n            var modeMap = {}, values = FormulaProcessor.getArgumentsValues(args, table);\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            modeMap[value] = (modeMap[value] || 0) + 1;\n                        }\n                        break;\n                    case 'object':\n                        for (var j = 0, jEnd = value.length, value2 = void 0; j < jEnd; ++j) {\n                            value2 = value[j];\n                            if (typeof value2 === 'number' &&\n                                !isNaN(value2)) {\n                                modeMap[value2] = (modeMap[value2] || 0) + 1;\n                            }\n                        }\n                        break;\n                }\n            }\n            return modeMap;\n        }\n        /**\n         * Processor for the `MODE.MULT(...values)` implementation. Calculates the most\n         * frequent values of the give values.\n         *\n         * @private\n         * @function Formula.processorFunctions.MULT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number|Array<number>}\n         * Result value of the process.\n         */\n        function MULT(args, table) {\n            var modeMap = getModeMap(args, table), keys = Object.keys(modeMap);\n            if (!keys.length) {\n                return NaN;\n            }\n            var modeKeys = [parseFloat(keys[0])], modeCount = modeMap[keys[0]];\n            for (var i = 1, iEnd = keys.length, key = void 0, count = void 0; i < iEnd; ++i) {\n                key = keys[i];\n                count = modeMap[key];\n                if (modeCount < count) {\n                    modeKeys = [parseFloat(key)];\n                    modeCount = count;\n                }\n                else if (modeCount === count) {\n                    modeKeys.push(parseFloat(key));\n                }\n            }\n            return modeCount > 1 ? modeKeys : NaN;\n        }\n        /**\n         * Processor for the `MODE.SNGL(...values)` implementation. Calculates the\n         * lowest most frequent value of the give values.\n         *\n         * @private\n         * @function Formula.processorFunctions['MODE.SNGL']\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function SNGL(args, table) {\n            var modeMap = getModeMap(args, table), keys = Object.keys(modeMap);\n            if (!keys.length) {\n                return NaN;\n            }\n            var modeKey = parseFloat(keys[0]), modeCount = modeMap[keys[0]];\n            for (var i = 1, iEnd = keys.length, key = void 0, keyValue = void 0, count = void 0; i < iEnd; ++i) {\n                key = keys[i];\n                count = modeMap[key];\n                if (modeCount < count) {\n                    modeKey = parseFloat(key);\n                    modeCount = count;\n                }\n                else if (modeCount === count) {\n                    keyValue = parseFloat(key);\n                    if (modeKey > keyValue) {\n                        modeKey = keyValue;\n                        modeCount = count;\n                    }\n                }\n            }\n            return modeCount > 1 ? modeKey : NaN;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MODE', SNGL);\n        FormulaProcessor.registerProcessorFunction('MODE.MULT', MULT);\n        FormulaProcessor.registerProcessorFunction('MODE.SNGL', SNGL);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var MODE = {\n            MULT: MULT,\n            SNGL: SNGL\n        };\n\n        return MODE;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/NOT.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `NOT(value)` implementation. Returns the opposite test\n         * result.\n         *\n         * @private\n         * @function Formula.processorFunctions.NOT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean|number}\n         * Result value of the process.\n         */\n        function NOT(args, table) {\n            var value = getArgumentValue(args[0], table);\n            if (typeof value === 'object') {\n                value = value[0];\n            }\n            switch (typeof value) {\n                case 'boolean':\n                case 'number':\n                    return !value;\n            }\n            return NaN;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('NOT', NOT);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NOT;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/OR.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `OR(...tests)` implementation. Returns `TRUE`, if one test\n         * result is not `0` or `FALSE`.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean}\n         * Result value of the process.\n         */\n        function OR(args, table) {\n            for (var i = 0, iEnd = args.length, value = void 0; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                if (typeof value === 'object') {\n                    if (OR(value, table)) {\n                        return true;\n                    }\n                }\n                else if (value) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('OR', OR);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OR;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/PRODUCT.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentsValues = FormulaProcessor.getArgumentsValues;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `PRODUCT(...values)` implementation. Calculates the product\n         * of the given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.PRODUCT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function PRODUCT(args, table) {\n            var values = getArgumentsValues(args, table);\n            var result = 1, calculated = false;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            calculated = true;\n                            result *= value;\n                        }\n                        break;\n                    case 'object':\n                        calculated = true;\n                        result *= PRODUCT(value, table);\n                        break;\n                }\n            }\n            return (calculated ? result : 0);\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('PRODUCT', PRODUCT);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PRODUCT;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/SUM.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `SUM(...values)` implementation. Calculates the sum of the\n         * given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.SUM\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function SUM(args, table) {\n            var values = FormulaProcessor.getArgumentsValues(args, table);\n            var result = 0;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            result += value;\n                        }\n                        break;\n                    case 'object':\n                        result += SUM(value, table);\n                        break;\n                }\n            }\n            return result;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('SUM', SUM); // ð\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SUM;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/XOR.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `XOR(...tests)` implementation. Returns `TRUE`, if at least\n         * one of the given tests differs in result of other tests.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean|number}\n         * Result value of the process.\n         */\n        function XOR(args, table) {\n            for (var i = 0, iEnd = args.length, lastValue = void 0, value = void 0; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                switch (typeof value) {\n                    case 'boolean':\n                    case 'number':\n                        if (typeof lastValue === 'undefined') {\n                            lastValue = !!value;\n                        }\n                        else if (!!value !== lastValue) {\n                            return true;\n                        }\n                        break;\n                    case 'object':\n                        for (var j = 0, jEnd = value.length, value2 = void 0; j < jEnd; ++j) {\n                            value2 = value[j];\n                            switch (typeof value2) {\n                                case 'boolean':\n                                case 'number':\n                                    if (typeof lastValue === 'undefined') {\n                                        lastValue = !!value2;\n                                    }\n                                    else if (!!value2 !== lastValue) {\n                                        return true;\n                                    }\n                                    break;\n                            }\n                        }\n                        break;\n                }\n            }\n            return false;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('XOR', XOR);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return XOR;\n    });\n    _registerModule(_modules, 'Data/Formula/Formula.js', [_modules['Data/Formula/FormulaParser.js'], _modules['Data/Formula/FormulaProcessor.js'], _modules['Data/Formula/FormulaTypes.js']], function (FormulaParser, FormulaProcessor, FormulaType) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * Formula engine to make use of spreadsheet formula strings.\n         * @internal\n         */\n        var Formula = __assign(__assign(__assign({}, FormulaParser), FormulaProcessor), FormulaType);\n\n        return Formula;\n    });\n    _registerModule(_modules, 'Data/Converters/CSVConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - Christer Vasseng\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming CSV to a table.\n         *\n         * @private\n         */\n        var CSVConverter = /** @class */ (function (_super) {\n            __extends(CSVConverter, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the CSV parser.\n             *\n             * @param {CSVConverter.UserOptions} [options]\n             * Options for the CSV parser.\n             */\n            function CSVConverter(options) {\n                var _this = this;\n                var mergedOptions = merge(CSVConverter.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.columns = [];\n                _this.headers = [];\n                _this.dataTypes = [];\n                _this.options = mergedOptions;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates a CSV string from the datatable on the connector instance.\n             *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {CSVConverter.Options} [options]\n             * Options used for the export.\n             *\n             * @return {string}\n             * CSV string from the connector table.\n             */\n            CSVConverter.prototype.export = function (connector, options) {\n                if (options === void 0) { options = this.options; }\n                var useLocalDecimalPoint = options.useLocalDecimalPoint, lineDelimiter = options.lineDelimiter, exportNames = (this.options.firstRowAsNames !== false);\n                var decimalPoint = options.decimalPoint, itemDelimiter = options.itemDelimiter;\n                if (!decimalPoint) {\n                    decimalPoint = (itemDelimiter !== ',' && useLocalDecimalPoint ?\n                        (1.1).toLocaleString()[1] :\n                        '.');\n                }\n                if (!itemDelimiter) {\n                    itemDelimiter = (decimalPoint === ',' ? ';' : ',');\n                }\n                var columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), csvRows = [], columnsCount = columnNames.length;\n                var rowArray = [];\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    csvRows.push(columnNames.map(function (columnName) { return \"\\\"\".concat(columnName, \"\\\"\"); }).join(itemDelimiter));\n                }\n                for (var columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    var columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    var columnMeta = connector.whatIs(columnName);\n                    var columnDataType = void 0;\n                    if (columnMeta) {\n                        columnDataType = columnMeta.dataType;\n                    }\n                    for (var rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        var cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Prefer datatype from metadata\n                        if (columnDataType === 'string') {\n                            cellValue = '\"' + cellValue + '\"';\n                        }\n                        else if (typeof cellValue === 'number') {\n                            cellValue = String(cellValue).replace('.', decimalPoint);\n                        }\n                        else if (typeof cellValue === 'string') {\n                            cellValue = \"\\\"\".concat(cellValue, \"\\\"\");\n                        }\n                        rowArray[rowIndex][columnIndex] = cellValue;\n                        // On the final column, push the row to the CSV\n                        if (columnIndex === columnsCount - 1) {\n                            // Trim repeated undefined values starting at the end\n                            // Currently, we export the first \"comma\" even if the\n                            // second value is undefined\n                            var i = columnIndex;\n                            while (rowArray[rowIndex].length > 2) {\n                                var cellVal = rowArray[rowIndex][i];\n                                if (cellVal !== void 0) {\n                                    break;\n                                }\n                                rowArray[rowIndex].pop();\n                                i--;\n                            }\n                            csvRows.push(rowArray[rowIndex].join(itemDelimiter));\n                        }\n                    }\n                }\n                return csvRows.join(lineDelimiter);\n            };\n            /**\n             * Initiates parsing of CSV\n             *\n             * @param {CSVConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             */\n            CSVConverter.prototype.parse = function (options, eventDetail) {\n                var converter = this, dataTypes = converter.dataTypes, parserOptions = merge(this.options, options), beforeParse = parserOptions.beforeParse, lineDelimiter = parserOptions.lineDelimiter, firstRowAsNames = parserOptions.firstRowAsNames, itemDelimiter = parserOptions.itemDelimiter;\n                var lines, rowIt = 0, csv = parserOptions.csv, startRow = parserOptions.startRow, endRow = parserOptions.endRow, column;\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (csv && beforeParse) {\n                    csv = beforeParse(csv);\n                }\n                if (csv) {\n                    lines = csv\n                        .replace(/\\r\\n|\\r/g, '\\n') // Windows | Mac\n                        .split(lineDelimiter || '\\n');\n                    if (!startRow || startRow < 0) {\n                        startRow = 0;\n                    }\n                    if (!endRow || endRow >= lines.length) {\n                        endRow = lines.length - 1;\n                    }\n                    if (!itemDelimiter) {\n                        converter.guessedItemDelimiter =\n                            converter.guessDelimiter(lines);\n                    }\n                    // If the first row contain names, add them to the\n                    // headers array and skip the row.\n                    if (firstRowAsNames) {\n                        var headers = lines[0].split(itemDelimiter || converter.guessedItemDelimiter || ',');\n                        // Remove \"\"s from the headers\n                        for (var i = 0; i < headers.length; i++) {\n                            headers[i] = headers[i].trim().replace(/^[\"']|[\"']$/g, '');\n                        }\n                        converter.headers = headers;\n                        startRow++;\n                    }\n                    var offset = 0;\n                    for (rowIt = startRow; rowIt <= endRow; rowIt++) {\n                        if (lines[rowIt][0] === '#') {\n                            offset++;\n                        }\n                        else {\n                            converter\n                                .parseCSVRow(lines[rowIt], rowIt - startRow - offset);\n                        }\n                    }\n                    if (dataTypes.length &&\n                        dataTypes[0].length &&\n                        dataTypes[0][1] === 'date' && // Format is a string date\n                        !converter.options.dateFormat) {\n                        converter.deduceDateFormat(converter.columns[0], null, true);\n                    }\n                    // Guess types.\n                    for (var i = 0, iEnd = converter.columns.length; i < iEnd; ++i) {\n                        column = converter.columns[i];\n                        for (var j = 0, jEnd = column.length; j < jEnd; ++j) {\n                            if (column[j] && typeof column[j] === 'string') {\n                                var cellValue = converter.asGuessedType(column[j]);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                converter.columns[i][j] = cellValue;\n                            }\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            };\n            /**\n             * Internal method that parses a single CSV row\n             */\n            CSVConverter.prototype.parseCSVRow = function (columnStr, rowNumber) {\n                var converter = this, columns = converter.columns || [], dataTypes = converter.dataTypes, _a = converter.options, startColumn = _a.startColumn, endColumn = _a.endColumn, itemDelimiter = (converter.options.itemDelimiter ||\n                    converter.guessedItemDelimiter);\n                var decimalPoint = converter.options.decimalPoint;\n                if (!decimalPoint || decimalPoint === itemDelimiter) {\n                    decimalPoint = converter.guessedDecimalPoint || '.';\n                }\n                var i = 0, c = '', token = '', actualColumn = 0, column = 0;\n                var read = function (j) {\n                    c = columnStr[j];\n                };\n                var pushType = function (type) {\n                    if (dataTypes.length < column + 1) {\n                        dataTypes.push([type]);\n                    }\n                    if (dataTypes[column][dataTypes[column].length - 1] !== type) {\n                        dataTypes[column].push(type);\n                    }\n                };\n                var push = function () {\n                    if (startColumn > actualColumn || actualColumn > endColumn) {\n                        // Skip this column, but increment the column count (#7272)\n                        ++actualColumn;\n                        token = '';\n                        return;\n                    }\n                    // Save the type of the token.\n                    if (typeof token === 'string') {\n                        if (!isNaN(parseFloat(token)) && isFinite(token)) {\n                            token = parseFloat(token);\n                            pushType('number');\n                        }\n                        else if (!isNaN(Date.parse(token))) {\n                            token = token.replace(/\\//g, '-');\n                            pushType('date');\n                        }\n                        else {\n                            pushType('string');\n                        }\n                    }\n                    else {\n                        pushType('number');\n                    }\n                    if (columns.length < column + 1) {\n                        columns.push([]);\n                    }\n                    // Try to apply the decimal point, and check if the token then is a\n                    // number. If not, reapply the initial value\n                    if (typeof token !== 'number' &&\n                        converter.guessType(token) !== 'number' &&\n                        decimalPoint) {\n                        var initialValue = token;\n                        token = token.replace(decimalPoint, '.');\n                        if (converter.guessType(token) !== 'number') {\n                            token = initialValue;\n                        }\n                    }\n                    columns[column][rowNumber] = token;\n                    token = '';\n                    ++column;\n                    ++actualColumn;\n                };\n                if (!columnStr.trim().length) {\n                    return;\n                }\n                if (columnStr.trim()[0] === '#') {\n                    return;\n                }\n                for (; i < columnStr.length; i++) {\n                    read(i);\n                    if (c === '#') {\n                        // If there are hexvalues remaining (#13283)\n                        if (!/^#[0-F]{3,3}|[0-F]{6,6}/i.test(columnStr.substring(i))) {\n                            // The rest of the row is a comment\n                            push();\n                            return;\n                        }\n                    }\n                    // Quoted string\n                    if (c === '\"') {\n                        read(++i);\n                        while (i < columnStr.length) {\n                            if (c === '\"') {\n                                break;\n                            }\n                            token += c;\n                            read(++i);\n                        }\n                    }\n                    else if (c === itemDelimiter) {\n                        push();\n                        // Actual column data\n                    }\n                    else {\n                        token += c;\n                    }\n                }\n                push();\n            };\n            /**\n             * Internal method that guesses the delimiter from the first\n             * 13 lines of the CSV\n             * @param {Array<string>} lines\n             * The CSV, split into lines\n             */\n            CSVConverter.prototype.guessDelimiter = function (lines) {\n                var points = 0, commas = 0, guessed;\n                var potDelimiters = {\n                    ',': 0,\n                    ';': 0,\n                    '\\t': 0\n                }, linesCount = lines.length;\n                for (var i = 0; i < linesCount; i++) {\n                    var inStr = false, c = void 0, cn = void 0, cl = void 0, token = '';\n                    // We should be able to detect dateformats within 13 rows\n                    if (i > 13) {\n                        break;\n                    }\n                    var columnStr = lines[i];\n                    for (var j = 0; j < columnStr.length; j++) {\n                        c = columnStr[j];\n                        cn = columnStr[j + 1];\n                        cl = columnStr[j - 1];\n                        if (c === '#') {\n                            // Skip the rest of the line - it's a comment\n                            break;\n                        }\n                        if (c === '\"') {\n                            if (inStr) {\n                                if (cl !== '\"' && cn !== '\"') {\n                                    while (cn === ' ' && j < columnStr.length) {\n                                        cn = columnStr[++j];\n                                    }\n                                    // After parsing a string, the next non-blank\n                                    // should be a delimiter if the CSV is properly\n                                    // formed.\n                                    if (typeof potDelimiters[cn] !== 'undefined') {\n                                        potDelimiters[cn]++;\n                                    }\n                                    inStr = false;\n                                }\n                            }\n                            else {\n                                inStr = true;\n                            }\n                        }\n                        else if (typeof potDelimiters[c] !== 'undefined') {\n                            token = token.trim();\n                            if (!isNaN(Date.parse(token))) {\n                                potDelimiters[c]++;\n                            }\n                            else if (isNaN(Number(token)) ||\n                                !isFinite(Number(token))) {\n                                potDelimiters[c]++;\n                            }\n                            token = '';\n                        }\n                        else {\n                            token += c;\n                        }\n                        if (c === ',') {\n                            commas++;\n                        }\n                        if (c === '.') {\n                            points++;\n                        }\n                    }\n                }\n                // Count the potential delimiters.\n                // This could be improved by checking if the number of delimiters\n                // equals the number of columns - 1\n                if (potDelimiters[';'] > potDelimiters[',']) {\n                    guessed = ';';\n                }\n                else if (potDelimiters[','] > potDelimiters[';']) {\n                    guessed = ',';\n                }\n                else {\n                    // No good guess could be made..\n                    guessed = ',';\n                }\n                // Try to deduce the decimal point if it's not explicitly set.\n                // If both commas or points is > 0 there is likely an issue\n                if (points > commas) {\n                    this.guessedDecimalPoint = '.';\n                }\n                else {\n                    this.guessedDecimalPoint = ',';\n                }\n                return guessed;\n            };\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            CSVConverter.prototype.getTable = function () {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options\n             */\n            CSVConverter.defaultOptions = __assign(__assign({}, DataConverter.defaultOptions), { lineDelimiter: '\\n' });\n            return CSVConverter;\n        }(DataConverter));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/CSVConnector.js', [_modules['Data/Converters/CSVConverter.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js']], function (CSVConverter, DataConnector, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - Christer Vasseng\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from CSV\n         *\n         * @private\n         */\n        var CSVConnector = /** @class */ (function (_super) {\n            __extends(CSVConnector, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of CSVConnector.\n             *\n             * @param {CSVConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            function CSVConnector(options) {\n                var _this = this;\n                var mergedOptions = merge(CSVConnector.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                _this.converter = new CSVConverter(mergedOptions);\n                _this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    _this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the CSV source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVConnector#load\n             * @emits CSVConnector#afterLoad\n             */\n            CSVConnector.prototype.load = function (eventDetail) {\n                var connector = this, converter = connector.converter, table = connector.table, _a = connector.options, csv = _a.csv, csvURL = _a.csvURL, dataModifier = _a.dataModifier;\n                connector.emit({\n                    type: 'load',\n                    csv: csv,\n                    detail: eventDetail,\n                    table: table\n                });\n                return Promise\n                    .resolve(csvURL ?\n                    fetch(csvURL).then(function (response) { return response.text(); }) :\n                    csv || '')\n                    .then(function (csv) {\n                    if (csv) {\n                        // If already loaded, clear the current rows\n                        table.deleteColumns();\n                        converter.parse({ csv: csv });\n                        table.setColumns(converter.getTable().getColumns());\n                    }\n                    return connector\n                        .setModifierOptions(dataModifier)\n                        .then(function () { return csv; });\n                })\n                    .then(function (csv) {\n                    connector.emit({\n                        type: 'afterLoad',\n                        csv: csv,\n                        detail: eventDetail,\n                        table: table\n                    });\n                    return connector;\n                })['catch'](function (error) {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error: error,\n                        table: table\n                    });\n                    throw error;\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            CSVConnector.defaultOptions = {\n                csv: '',\n                csvURL: '',\n                enablePolling: false,\n                dataRefreshRate: 1,\n                firstRowAsNames: true\n            };\n            return CSVConnector;\n        }(DataConnector));\n        DataConnector.registerType('CSV', CSVConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/JSONConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataConverter, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        var error = U.error, isArray = U.isArray, merge = U.merge, objectEach = U.objectEach;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming JSON to a table.\n         *\n         * @private\n         */\n        var JSONConverter = /** @class */ (function (_super) {\n            __extends(JSONConverter, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the JSON parser.\n             *\n             * @param {JSONConverter.UserOptions} [options]\n             * Options for the JSON parser.\n             */\n            function JSONConverter(options) {\n                var _this = this;\n                var mergedOptions = merge(JSONConverter.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.columns = [];\n                _this.headers = [];\n                _this.options = mergedOptions;\n                _this.table = new DataTable();\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates parsing of JSON structure.\n             *\n             * @param {JSONConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConverter#parse\n             * @emits JSONConverter#afterParse\n             */\n            JSONConverter.prototype.parse = function (options, eventDetail) {\n                var converter = this;\n                options = merge(converter.options, options);\n                var beforeParse = options.beforeParse, orientation = options.orientation, firstRowAsNames = options.firstRowAsNames, columnNames = options.columnNames;\n                var data = options.data;\n                if (!data) {\n                    return;\n                }\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (beforeParse) {\n                    data = beforeParse(data);\n                }\n                data = data.slice();\n                if (orientation === 'columns') {\n                    for (var i = 0, iEnd = data.length; i < iEnd; i++) {\n                        var item = data[i];\n                        if (!(item instanceof Array)) {\n                            return;\n                        }\n                        if (converter.headers instanceof Array) {\n                            if (firstRowAsNames) {\n                                converter.headers.push(\"\".concat(item.shift()));\n                            }\n                            else if (columnNames && columnNames instanceof Array) {\n                                converter.headers.push(columnNames[i]);\n                            }\n                            converter.table.setColumn(converter.headers[i] || i.toString(), item);\n                        }\n                        else {\n                            error('JSONConverter: Invalid `columnNames` option.', false);\n                        }\n                    }\n                }\n                else if (orientation === 'rows') {\n                    if (firstRowAsNames) {\n                        converter.headers = data.shift();\n                    }\n                    else if (columnNames) {\n                        converter.headers = columnNames;\n                    }\n                    var _loop_1 = function (rowIndex, iEnd) {\n                        var row = data[rowIndex];\n                        if (isArray(row)) {\n                            for (var columnIndex = 0, jEnd = row.length; columnIndex < jEnd; columnIndex++) {\n                                if (converter.columns.length < columnIndex + 1) {\n                                    converter.columns.push([]);\n                                }\n                                converter.columns[columnIndex].push(row[columnIndex]);\n                                if (converter.headers instanceof Array) {\n                                    this_1.table.setColumn(converter.headers[columnIndex] ||\n                                        columnIndex.toString(), converter.columns[columnIndex]);\n                                }\n                                else {\n                                    error('JSONConverter: Invalid `columnNames` option.', false);\n                                }\n                            }\n                        }\n                        else {\n                            var columnNames_1 = converter.headers;\n                            if (columnNames_1 && !(columnNames_1 instanceof Array)) {\n                                var newRow_1 = {};\n                                objectEach(columnNames_1, function (arrayWithPath, name) {\n                                    newRow_1[name] = arrayWithPath.reduce(function (acc, key) {\n                                        return acc[key];\n                                    }, row);\n                                });\n                                row = newRow_1;\n                            }\n                            this_1.table.setRows([row], rowIndex);\n                        }\n                    };\n                    var this_1 = this;\n                    for (var rowIndex = 0, iEnd = data.length; rowIndex < iEnd; rowIndex++) {\n                        _loop_1(rowIndex, iEnd);\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            };\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            JSONConverter.prototype.getTable = function () {\n                return this.table;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options\n             */\n            JSONConverter.defaultOptions = __assign(__assign({}, DataConverter.defaultOptions), { data: [], orientation: 'rows' });\n            return JSONConverter;\n        }(DataConverter));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/JSONConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js'], _modules['Data/Converters/JSONConverter.js']], function (DataConnector, U, JSONConverter) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from JSON structure\n         *\n         * @private\n         */\n        var JSONConnector = /** @class */ (function (_super) {\n            __extends(JSONConnector, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of JSONConnector.\n             *\n             * @param {JSONConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            function JSONConnector(options) {\n                var _this = this;\n                var mergedOptions = merge(JSONConnector.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                _this.converter = new JSONConverter(mergedOptions);\n                _this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    _this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the JSON source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConnector#load\n             * @emits JSONConnector#afterLoad\n             */\n            JSONConnector.prototype.load = function (eventDetail) {\n                var connector = this, converter = connector.converter, table = connector.table, _a = connector.options, data = _a.data, dataUrl = _a.dataUrl, dataModifier = _a.dataModifier;\n                connector.emit({\n                    type: 'load',\n                    data: data,\n                    detail: eventDetail,\n                    table: table\n                });\n                return Promise\n                    .resolve(dataUrl ?\n                    fetch(dataUrl).then(function (json) { return json.json(); }) :\n                    data || [])\n                    .then(function (data) {\n                    if (data) {\n                        // If already loaded, clear the current rows\n                        table.deleteColumns();\n                        converter.parse({ data: data });\n                        table.setColumns(converter.getTable().getColumns());\n                    }\n                    return connector.setModifierOptions(dataModifier).then(function () { return data; });\n                })\n                    .then(function (data) {\n                    connector.emit({\n                        type: 'afterLoad',\n                        data: data,\n                        detail: eventDetail,\n                        table: table\n                    });\n                    return connector;\n                })['catch'](function (error) {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error: error,\n                        table: table\n                    });\n                    throw error;\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            JSONConnector.defaultOptions = {\n                data: [],\n                enablePolling: false,\n                dataRefreshRate: 0,\n                firstRowAsNames: true,\n                orientation: 'rows'\n            };\n            return JSONConnector;\n        }(DataConnector));\n        DataConnector.registerType('JSON', JSONConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/GoogleSheetsConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        var merge = U.merge, uniqueKey = U.uniqueKey;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an Google Sheets to a table.\n         *\n         * @private\n         */\n        var GoogleSheetsConverter = /** @class */ (function (_super) {\n            __extends(GoogleSheetsConverter, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the GoogleSheetsConverter.\n             *\n             * @param {GoogleSheetsConverter.UserOptions} [options]\n             * Options for the GoogleSheetsConverter.\n             */\n            function GoogleSheetsConverter(options) {\n                var _this = this;\n                var mergedOptions = merge(GoogleSheetsConverter.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                _this.columns = [];\n                _this.header = [];\n                _this.options = mergedOptions;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the parsing of the Google Sheet\n             *\n             * @param {GoogleSheetsConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits GoogleSheetsParser#parse\n             * @emits GoogleSheetsParser#afterParse\n             */\n            GoogleSheetsConverter.prototype.parse = function (options, eventDetail) {\n                var converter = this, parseOptions = merge(converter.options, options), columns = ((parseOptions.json &&\n                    parseOptions.json.values) || []).map(function (column) { return column.slice(); });\n                if (columns.length === 0) {\n                    return false;\n                }\n                converter.header = [];\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n                converter.columns = columns;\n                var column;\n                for (var i = 0, iEnd = columns.length; i < iEnd; i++) {\n                    column = columns[i];\n                    converter.header[i] = (parseOptions.firstRowAsNames ?\n                        \"\".concat(column.shift()) :\n                        uniqueKey());\n                    for (var j = 0, jEnd = column.length; j < jEnd; ++j) {\n                        if (column[j] && typeof column[j] === 'string') {\n                            var cellValue = converter.asGuessedType(column[j]);\n                            if (cellValue instanceof Date) {\n                                cellValue = cellValue.getTime();\n                            }\n                            converter.columns[i][j] = cellValue;\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n            };\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed Google Sheet\n             */\n            GoogleSheetsConverter.prototype.getTable = function () {\n                return DataConverter.getTableFromColumns(this.columns, this.header);\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options\n             */\n            GoogleSheetsConverter.defaultOptions = __assign({}, DataConverter.defaultOptions);\n            return GoogleSheetsConverter;\n        }(DataConverter));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/GoogleSheetsConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/GoogleSheetsConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, GoogleSheetsConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge, pick = U.pick;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Tests Google's response for error.\n         * @private\n         */\n        function isGoogleError(json) {\n            return (typeof json === 'object' && json &&\n                typeof json.error === 'object' && json.error &&\n                typeof json.error.code === 'number' &&\n                typeof json.error.message === 'string' &&\n                typeof json.error.status === 'string');\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @todo implement save, requires oauth2\n         */\n        var GoogleSheetsConnector = /** @class */ (function (_super) {\n            __extends(GoogleSheetsConnector, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of GoogleSheetsConnector\n             *\n             * @param {GoogleSheetsConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            function GoogleSheetsConnector(options) {\n                var _this = this;\n                var mergedOptions = merge(GoogleSheetsConnector.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                _this.converter = new GoogleSheetsConverter(mergedOptions);\n                _this.options = mergedOptions;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Loads data from a Google Spreadsheet.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<this>}\n             * Same connector instance with modified table.\n             */\n            GoogleSheetsConnector.prototype.load = function (eventDetail) {\n                var connector = this, converter = connector.converter, table = connector.table, _a = connector.options, dataModifier = _a.dataModifier, dataRefreshRate = _a.dataRefreshRate, enablePolling = _a.enablePolling, firstRowAsNames = _a.firstRowAsNames, googleAPIKey = _a.googleAPIKey, googleSpreadsheetKey = _a.googleSpreadsheetKey, url = GoogleSheetsConnector.buildFetchURL(googleAPIKey, googleSpreadsheetKey, connector.options);\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table: table,\n                    url: url\n                });\n                return fetch(url)\n                    .then(function (response) { return (response.json()); })\n                    .then(function (json) {\n                    if (isGoogleError(json)) {\n                        throw new Error(json.error.message);\n                    }\n                    converter.parse({\n                        firstRowAsNames: firstRowAsNames,\n                        json: json\n                    });\n                    // If already loaded, clear the current table\n                    table.deleteColumns();\n                    table.setColumns(converter.getTable().getColumns());\n                    return connector.setModifierOptions(dataModifier);\n                })\n                    .then(function () {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table: table,\n                        url: url\n                    });\n                    // Polling\n                    if (enablePolling) {\n                        setTimeout(function () { return connector.load(); }, Math.max(dataRefreshRate || 0, 1) * 1000);\n                    }\n                    return connector;\n                })['catch'](function (error) {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error: error,\n                        table: table\n                    });\n                    throw error;\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            GoogleSheetsConnector.defaultOptions = {\n                googleAPIKey: '',\n                googleSpreadsheetKey: '',\n                worksheet: 1,\n                enablePolling: false,\n                dataRefreshRate: 2,\n                firstRowAsNames: true\n            };\n            return GoogleSheetsConnector;\n        }(DataConnector));\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (GoogleSheetsConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates GoogleSheets API v4 URL.\n             * @private\n             */\n            function buildFetchURL(apiKey, sheetKey, options) {\n                if (options === void 0) { options = {}; }\n                return (\"https://sheets.googleapis.com/v4/spreadsheets/\".concat(sheetKey, \"/values/\") +\n                    (options.onlyColumnNames ?\n                        'A1:Z1' :\n                        buildQueryRange(options)) +\n                    '?alt=json' +\n                    (options.onlyColumnNames ?\n                        '' :\n                        '&dateTimeRenderOption=FORMATTED_STRING' +\n                            '&majorDimension=COLUMNS' +\n                            '&valueRenderOption=UNFORMATTED_VALUE') +\n                    '&prettyPrint=false' +\n                    \"&key=\".concat(apiKey));\n            }\n            GoogleSheetsConnector.buildFetchURL = buildFetchURL;\n            /**\n             * Creates sheets range.\n             * @private\n             */\n            function buildQueryRange(options) {\n                if (options === void 0) { options = {}; }\n                var endColumn = options.endColumn, endRow = options.endRow, googleSpreadsheetRange = options.googleSpreadsheetRange, startColumn = options.startColumn, startRow = options.startRow;\n                return googleSpreadsheetRange || ((alphabet[startColumn || 0] || 'A') +\n                    (Math.max((startRow || 0), 0) + 1) +\n                    ':' +\n                    (alphabet[pick(endColumn, 25)] || 'Z') +\n                    (endRow ?\n                        Math.max(endRow, 0) :\n                        'Z'));\n            }\n            GoogleSheetsConnector.buildQueryRange = buildQueryRange;\n        })(GoogleSheetsConnector || (GoogleSheetsConnector = {}));\n        DataConnector.registerType('GoogleSheets', GoogleSheetsConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/HTMLTableConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        var merge = U.merge;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Row equal\n         */\n        function isRowEqual(row1, row2) {\n            var i = row1.length;\n            if (row2.length === i) {\n                while (--i) {\n                    if (row1[i] !== row2[i]) {\n                        return false;\n                    }\n                }\n            }\n            else {\n                return false;\n            }\n            return true;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an HTML table to a table.\n         *\n         * @private\n         */\n        var HTMLTableConverter = /** @class */ (function (_super) {\n            __extends(HTMLTableConverter, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the HTMLTableConverter.\n             *\n             * @param {HTMLTableConverter.UserOptions} [options]\n             * Options for the HTMLTableConverter.\n             */\n            function HTMLTableConverter(options) {\n                var _this = this;\n                var mergedOptions = merge(HTMLTableConverter.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                _this.columns = [];\n                _this.headers = [];\n                _this.options = mergedOptions;\n                if (mergedOptions.tableElement) {\n                    _this.tableElement = mergedOptions.tableElement;\n                    _this.tableElementID = mergedOptions.tableElement.id;\n                }\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Exports the dataconnector as an HTML string, using the options\n             * provided on      *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {HTMLTableConnector.ExportOptions} [options]\n             * Options that override default or existing export options.\n             *\n             * @return {string}\n             * HTML from the current dataTable.\n             */\n            HTMLTableConverter.prototype.export = function (connector, options) {\n                if (options === void 0) { options = this.options; }\n                var exportNames = (options.firstRowAsNames !== false), useMultiLevelHeaders = options.useMultiLevelHeaders;\n                var columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), htmlRows = [], columnsCount = columnNames.length;\n                var rowArray = [];\n                var tableHead = '';\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    var subcategories = [];\n                    // If using multilevel headers, the first value\n                    // of each column is a subcategory\n                    if (useMultiLevelHeaders) {\n                        for (var _i = 0, columnNames_1 = columnNames; _i < columnNames_1.length; _i++) {\n                            var name_1 = columnNames_1[_i];\n                            var subhead = (columns[name_1].shift() || '').toString();\n                            subcategories.push(subhead);\n                        }\n                        tableHead = this.getTableHeaderHTML(columnNames, subcategories, options);\n                    }\n                    else {\n                        tableHead = this.getTableHeaderHTML(void 0, columnNames, options);\n                    }\n                }\n                for (var columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    var columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    for (var rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        var cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Alternative: Datatype from HTML attribute with\n                        // connector.whatIs(columnName)\n                        if (!(typeof cellValue === 'string' ||\n                            typeof cellValue === 'number' ||\n                            typeof cellValue === 'undefined')) {\n                            cellValue = (cellValue || '').toString();\n                        }\n                        rowArray[rowIndex][columnIndex] = this.getCellHTMLFromValue(columnIndex ? 'td' : 'th', null, columnIndex ? '' : 'scope=\"row\"', cellValue);\n                        // On the final column, push the row to the array\n                        if (columnIndex === columnsCount - 1) {\n                            htmlRows.push('<tr>' +\n                                rowArray[rowIndex].join('') +\n                                '</tr>');\n                        }\n                    }\n                }\n                var caption = '';\n                // Add table caption\n                // Current exportdata falls back to chart title\n                // but that should probably be handled elsewhere?\n                if (options.tableCaption) {\n                    caption = '<caption class=\"highcharts-table-caption\">' +\n                        options.tableCaption +\n                        '</caption>';\n                }\n                return ('<table>' +\n                    caption +\n                    tableHead +\n                    '<tbody>' +\n                    htmlRows.join('') +\n                    '</tbody>' +\n                    '</table>');\n            };\n            /**\n             * Get table cell markup from row data.\n             */\n            HTMLTableConverter.prototype.getCellHTMLFromValue = function (tag, classes, attrs, value, decimalPoint) {\n                var val = value, className = 'text' + (classes ? ' ' + classes : '');\n                // Convert to string if number\n                if (typeof val === 'number') {\n                    val = val.toString();\n                    if (decimalPoint === ',') {\n                        val = val.replace('.', decimalPoint);\n                    }\n                    className = 'number';\n                }\n                else if (!value) {\n                    val = '';\n                    className = 'empty';\n                }\n                return '<' + tag + (attrs ? ' ' + attrs : '') +\n                    ' class=\"' + className + '\">' +\n                    val + '</' + tag + '>';\n            };\n            /**\n             * Get table header markup from row data.\n             */\n            HTMLTableConverter.prototype.getTableHeaderHTML = function (topheaders, subheaders, options) {\n                if (topheaders === void 0) { topheaders = []; }\n                if (subheaders === void 0) { subheaders = []; }\n                if (options === void 0) { options = this.options; }\n                var useMultiLevelHeaders = options.useMultiLevelHeaders, useRowspanHeaders = options.useRowspanHeaders;\n                var html = '<thead>', i = 0, len = subheaders && subheaders.length, next, cur, curColspan = 0, rowspan;\n                // Clean up multiple table headers. Chart.getDataRows() returns two\n                // levels of headers when using multilevel, not merged. We need to\n                // merge identical headers, remove redundant headers, and keep it\n                // all marked up nicely.\n                if (useMultiLevelHeaders &&\n                    topheaders &&\n                    subheaders &&\n                    !isRowEqual(topheaders, subheaders)) {\n                    html += '<tr>';\n                    for (; i < len; ++i) {\n                        cur = topheaders[i];\n                        next = topheaders[i + 1];\n                        if (cur === next) {\n                            ++curColspan;\n                        }\n                        else if (curColspan) {\n                            // Ended colspan\n                            // Add cur to HTML with colspan.\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\" ' +\n                                'colspan=\"' + (curColspan + 1) + '\"', cur);\n                            curColspan = 0;\n                        }\n                        else {\n                            // Cur is standalone. If it is same as sublevel,\n                            // remove sublevel and add just toplevel.\n                            if (cur === subheaders[i]) {\n                                if (useRowspanHeaders) {\n                                    rowspan = 2;\n                                    delete subheaders[i];\n                                }\n                                else {\n                                    rowspan = 1;\n                                    subheaders[i] = '';\n                                }\n                            }\n                            else {\n                                rowspan = 1;\n                            }\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\"' +\n                                (rowspan > 1 ?\n                                    ' valign=\"top\" rowspan=\"' + rowspan + '\"' :\n                                    ''), cur);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                // Add the subheaders (the only headers if not using multilevels)\n                if (subheaders) {\n                    html += '<tr>';\n                    for (i = 0, len = subheaders.length; i < len; ++i) {\n                        if (typeof subheaders[i] !== 'undefined') {\n                            html += this.getCellHTMLFromValue('th', null, 'scope=\"col\"', subheaders[i]);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                html += '</thead>';\n                return html;\n            };\n            /**\n             * Initiates the parsing of the HTML table\n             *\n             * @param {HTMLTableConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             * @emits HTMLTableParser#parseError\n             */\n            HTMLTableConverter.prototype.parse = function (options, eventDetail) {\n                var converter = this, columns = [], headers = [], parseOptions = merge(converter.options, options), endRow = parseOptions.endRow, startColumn = parseOptions.startColumn, endColumn = parseOptions.endColumn, firstRowAsNames = parseOptions.firstRowAsNames, tableHTML = parseOptions.tableElement || this.tableElement;\n                if (!(tableHTML instanceof HTMLElement)) {\n                    converter.emit({\n                        type: 'parseError',\n                        columns: columns,\n                        detail: eventDetail,\n                        headers: headers,\n                        error: 'Not a valid HTML Table'\n                    });\n                    return;\n                }\n                converter.tableElement = tableHTML;\n                converter.tableElementID = tableHTML.id;\n                this.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                var rows = tableHTML.getElementsByTagName('tr'), rowsCount = rows.length;\n                var rowIndex = 0, item, startRow = parseOptions.startRow;\n                // Insert headers from the first row\n                if (firstRowAsNames && rowsCount) {\n                    var items = rows[0].children, itemsLength = items.length;\n                    for (var i = startColumn; i < itemsLength; i++) {\n                        if (i > endColumn) {\n                            break;\n                        }\n                        item = items[i];\n                        if (item.tagName === 'TD' ||\n                            item.tagName === 'TH') {\n                            headers.push(item.innerHTML);\n                        }\n                    }\n                    startRow++;\n                }\n                while (rowIndex < rowsCount) {\n                    if (rowIndex >= startRow && rowIndex <= endRow) {\n                        var columnsInRow = rows[rowIndex].children, columnsInRowLength = columnsInRow.length;\n                        var columnIndex = 0;\n                        while (columnIndex < columnsInRowLength) {\n                            var relativeColumnIndex = columnIndex - startColumn, row = columns[relativeColumnIndex];\n                            item = columnsInRow[columnIndex];\n                            if ((item.tagName === 'TD' ||\n                                item.tagName === 'TH') &&\n                                (columnIndex >= startColumn &&\n                                    columnIndex <= endColumn)) {\n                                if (!columns[relativeColumnIndex]) {\n                                    columns[relativeColumnIndex] = [];\n                                }\n                                var cellValue = converter.asGuessedType(item.innerHTML);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                columns[relativeColumnIndex][rowIndex - startRow] = cellValue;\n                                // Loop over all previous indices and make sure\n                                // they are nulls, not undefined.\n                                var i = 1;\n                                while (rowIndex - startRow >= i &&\n                                    row[rowIndex - startRow - i] === void 0) {\n                                    row[rowIndex - startRow - i] = null;\n                                    i++;\n                                }\n                            }\n                            columnIndex++;\n                        }\n                    }\n                    rowIndex++;\n                }\n                this.columns = columns;\n                this.headers = headers;\n                this.emit({\n                    type: 'afterParse',\n                    columns: columns,\n                    detail: eventDetail,\n                    headers: headers\n                });\n            };\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed HTML table\n             */\n            HTMLTableConverter.prototype.getTable = function () {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options\n             */\n            HTMLTableConverter.defaultOptions = __assign(__assign({}, DataConverter.defaultOptions), { useRowspanHeaders: true, useMultiLevelHeaders: true });\n            return HTMLTableConverter;\n        }(DataConverter));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/HTMLTableConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Globals.js'], _modules['Data/Converters/HTMLTableConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, H, HTMLTableConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var win = H.win;\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a data connector from an HTML table.\n         *\n         * @private\n         */\n        var HTMLTableConnector = /** @class */ (function (_super) {\n            __extends(HTMLTableConnector, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of HTMLTableConnector.\n             *\n             * @param {HTMLTableConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            function HTMLTableConnector(options) {\n                var _this = this;\n                var mergedOptions = merge(HTMLTableConnector.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                _this.converter = new HTMLTableConverter(mergedOptions);\n                _this.options = mergedOptions;\n                return _this;\n            }\n            /**\n             * Initiates creating the dataconnector from the HTML table\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits HTMLTableConnector#load\n             * @emits HTMLTableConnector#afterLoad\n             * @emits HTMLTableConnector#loadError\n             */\n            HTMLTableConnector.prototype.load = function (eventDetail) {\n                var connector = this, converter = connector.converter, table = connector.table, _a = connector.options, dataModifier = _a.dataModifier, tableHTML = _a.table;\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table: table,\n                    tableElement: connector.tableElement\n                });\n                var tableElement;\n                if (typeof tableHTML === 'string') {\n                    connector.tableID = tableHTML;\n                    tableElement = win.document.getElementById(tableHTML);\n                }\n                else {\n                    tableElement = tableHTML;\n                    connector.tableID = tableElement.id;\n                }\n                connector.tableElement = tableElement || void 0;\n                if (!connector.tableElement) {\n                    var error = 'HTML table not provided, or element with ID not found';\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error: error,\n                        table: table\n                    });\n                    return Promise.reject(new Error(error));\n                }\n                converter.parse(merge({ tableElement: connector.tableElement }, connector.options), eventDetail);\n                // If already loaded, clear the current rows\n                table.deleteColumns();\n                table.setColumns(converter.getTable().getColumns());\n                return connector\n                    .setModifierOptions(dataModifier)\n                    .then(function () {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table: table,\n                        tableElement: connector.tableElement\n                    });\n                    return connector;\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            HTMLTableConnector.defaultOptions = {\n                table: ''\n            };\n            return HTMLTableConnector;\n        }(DataConnector));\n        DataConnector.registerType('HTMLTable', HTMLTableConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConnector;\n    });\n    _registerModule(_modules, 'Data/Modifiers/ChainModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Modifies a table with the help of modifiers in an ordered chain.\n         *\n         * @private\n         */\n        var ChainModifier = /** @class */ (function (_super) {\n            __extends(ChainModifier, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the modifier chain.\n             *\n             * @param {Partial<ChainModifier.Options>} [options]\n             * Options to configure the modifier chain.\n             *\n             * @param {...DataModifier} [chain]\n             * Ordered chain of modifiers.\n             */\n            function ChainModifier(options) {\n                var chain = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    chain[_i - 1] = arguments[_i];\n                }\n                var _this = _super.call(this) || this;\n                _this.chain = chain;\n                _this.options = merge(ChainModifier.defaultOptions, options);\n                var optionsChain = _this.options.chain || [];\n                for (var i = 0, iEnd = optionsChain.length, modifierOptions = void 0, ModifierClass = void 0; i < iEnd; ++i) {\n                    modifierOptions = optionsChain[i];\n                    if (!modifierOptions.type) {\n                        continue;\n                    }\n                    ModifierClass = DataModifier.types[modifierOptions.type];\n                    if (ModifierClass) {\n                        chain.push(new ModifierClass(modifierOptions));\n                    }\n                }\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a configured modifier to the end of the modifier chain. Please note,\n             * that the modifier can be added multiple times.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to add.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            ChainModifier.prototype.add = function (modifier, eventDetail) {\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier: modifier\n                });\n                this.chain.push(modifier);\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier: modifier\n                });\n            };\n            /**\n             * Clears all modifiers from the chain.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            ChainModifier.prototype.clear = function (eventDetail) {\n                this.emit({\n                    type: 'clearChain',\n                    detail: eventDetail\n                });\n                this.chain.length = 0;\n                this.emit({\n                    type: 'afterClearChain',\n                    detail: eventDetail\n                });\n            };\n            /**\n             * Applies several modifications to the table and returns a modified copy of\n             * the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            ChainModifier.prototype.modify = function (table, eventDetail) {\n                var _this = this;\n                var modifiers = (this.options.reverse ?\n                    this.chain.slice().reverse() :\n                    this.chain.slice());\n                if (table.modified === table) {\n                    table.modified = table.clone(false, eventDetail);\n                }\n                var promiseChain = Promise.resolve(table);\n                var _loop_1 = function (i, iEnd) {\n                    var modifier = modifiers[i];\n                    promiseChain = promiseChain.then(function (chainTable) {\n                        return modifier.modify(chainTable.modified, eventDetail);\n                    });\n                };\n                for (var i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                    _loop_1(i, iEnd);\n                }\n                promiseChain = promiseChain.then(function (chainTable) {\n                    table.modified.deleteColumns();\n                    table.modified.setColumns(chainTable.modified.getColumns());\n                    return table;\n                });\n                promiseChain = promiseChain['catch'](function (error) {\n                    _this.emit({\n                        type: 'error',\n                        detail: eventDetail,\n                        table: table\n                    });\n                    throw error;\n                });\n                return promiseChain;\n            };\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            ChainModifier.prototype.modifyCell = function (table, columnName, rowIndex, cellValue, eventDetail) {\n                var modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain);\n                if (modifiers.length) {\n                    var clone = table.clone();\n                    for (var i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyCell(clone, columnName, rowIndex, cellValue, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            };\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            ChainModifier.prototype.modifyColumns = function (table, columns, rowIndex, eventDetail) {\n                var modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    var clone = table.clone();\n                    for (var i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyColumns(clone, columns, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            };\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            ChainModifier.prototype.modifyRows = function (table, rows, rowIndex, eventDetail) {\n                var modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    var clone = table.clone();\n                    for (var i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyRows(clone, rows, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            };\n            /**\n             * Applies several modifications to the table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table as a reference.\n             *\n             * @emits ChainDataModifier#execute\n             * @emits ChainDataModifier#afterExecute\n             */\n            ChainModifier.prototype.modifyTable = function (table, eventDetail) {\n                var chain = this;\n                chain.emit({\n                    type: 'modify',\n                    detail: eventDetail,\n                    table: table\n                });\n                var modifiers = (chain.options.reverse ?\n                    chain.chain.reverse() :\n                    chain.chain.slice());\n                var modified = table.modified;\n                for (var i = 0, iEnd = modifiers.length, modifier = void 0; i < iEnd; ++i) {\n                    modifier = modifiers[i];\n                    modified = modifier.modifyTable(modified, eventDetail).modified;\n                }\n                table.modified = modified;\n                chain.emit({\n                    type: 'afterModify',\n                    detail: eventDetail,\n                    table: table\n                });\n                return table;\n            };\n            /**\n             * Removes a configured modifier from all positions in the modifier chain.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to remove.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            ChainModifier.prototype.remove = function (modifier, eventDetail) {\n                var modifiers = this.chain;\n                this.emit({\n                    type: 'removeModifier',\n                    detail: eventDetail,\n                    modifier: modifier\n                });\n                modifiers.splice(modifiers.indexOf(modifier), 1);\n                this.emit({\n                    type: 'afterRemoveModifier',\n                    detail: eventDetail,\n                    modifier: modifier\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default option for the ordered modifier chain.\n             */\n            ChainModifier.defaultOptions = {\n                type: 'Chain'\n            };\n            return ChainModifier;\n        }(DataModifier));\n        DataModifier.registerType('Chain', ChainModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChainModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/InvertModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Inverts columns and rows in a table.\n         *\n         * @private\n         */\n        var InvertModifier = /** @class */ (function (_super) {\n            __extends(InvertModifier, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the invert modifier.\n             *\n             * @param {Partial<InvertModifier.Options>} [options]\n             * Options to configure the invert modifier.\n             */\n            function InvertModifier(options) {\n                var _this = _super.call(this) || this;\n                _this.options = merge(InvertModifier.defaultOptions, options);\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            InvertModifier.prototype.modifyCell = function (table, columnName, rowIndex, cellValue, eventDetail) {\n                var modified = table.modified, modifiedRowIndex = modified.getRowIndexBy('columnNames', columnName);\n                if (typeof modifiedRowIndex === 'undefined') {\n                    modified.setColumns(this.modifyTable(table.clone()).getColumns(), void 0, eventDetail);\n                }\n                else {\n                    modified.setCell(\"\".concat(rowIndex), modifiedRowIndex, cellValue, eventDetail);\n                }\n                return table;\n            };\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            InvertModifier.prototype.modifyColumns = function (table, columns, rowIndex, eventDetail) {\n                var modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                var columnNames = table.getColumnNames(), reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (var i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                columnNames = Object.keys(columns);\n                for (var i = 0, iEnd = columnNames.length, column = void 0, columnName = void 0, modifiedRowIndex = void 0; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    modifiedRowIndex = (modified.getRowIndexBy('columnNames', columnName) ||\n                        modified.getRowCount());\n                    for (var j = 0, j2 = rowIndex, jEnd = column.length; j < jEnd; ++j, ++j2) {\n                        modified.setCell(\"\".concat(j2), modifiedRowIndex, column[j], eventDetail);\n                    }\n                }\n                return table;\n            };\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            InvertModifier.prototype.modifyRows = function (table, rows, rowIndex, eventDetail) {\n                var columnNames = table.getColumnNames(), modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                var reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (var i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                for (var i = 0, i2 = rowIndex, iEnd = rows.length, row = void 0; i < iEnd; ++i, ++i2) {\n                    row = rows[i];\n                    if (row instanceof Array) {\n                        modified.setColumn(\"\".concat(i2), row);\n                    }\n                    else {\n                        for (var j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            modified.setCell(\"\".concat(i2), j, row[columnNames[j]], eventDetail);\n                        }\n                    }\n                }\n                return table;\n            };\n            /**\n             * Inverts rows and columns in the table.\n             *\n             * @param {DataTable} table\n             * Table to invert.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with inverted `modified` property as a reference.\n             */\n            InvertModifier.prototype.modifyTable = function (table, eventDetail) {\n                var modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table: table });\n                var modified = table.modified;\n                if (table.hasColumns(['columnNames'])) { // Inverted table\n                    var columnNames = ((table.deleteColumns(['columnNames']) || {})\n                        .columnNames || []).map(function (column) { return \"\".concat(column); }), columns = {};\n                    for (var i = 0, iEnd = table.getRowCount(), row = void 0; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[columnNames[i]] = row;\n                        }\n                    }\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                else { // Regular table\n                    var columns = {};\n                    for (var i = 0, iEnd = table.getRowCount(), row = void 0; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[\"\".concat(i)] = row;\n                        }\n                    }\n                    columns.columnNames = table.getColumnNames();\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table: table });\n                return table;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options for the invert modifier.\n             */\n            InvertModifier.defaultOptions = {\n                type: 'Invert'\n            };\n            return InvertModifier;\n        }(DataModifier));\n        DataModifier.registerType('Invert', InvertModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return InvertModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/MathModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/Formula/FormulaParser.js'], _modules['Data/Formula/FormulaProcessor.js']], function (DataModifier, FormulaParser, FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Replaces formula strings in a table with calculated values.\n         *\n         * @private\n         * @class\n         * @name Highcharts.DataModifier.types.MathModifier\n         * @augments Highcharts.DataModifier\n         */\n        var MathModifier = /** @class */ (function (_super) {\n            __extends(MathModifier, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            function MathModifier(options) {\n                var _this = _super.call(this) || this;\n                _this.options = __assign(__assign({}, MathModifier.defaultOptions), options);\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            MathModifier.prototype.modifyTable = function (table, eventDetail) {\n                var modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table: table });\n                var alternativeSeparators = modifier.options.alternativeSeparators, formulaColumns = (modifier.options.formulaColumns ||\n                    table.getColumnNames()), modified = table.modified;\n                for (var i = 0, iEnd = formulaColumns.length, columnName = void 0; i < iEnd; ++i) {\n                    columnName = formulaColumns[i];\n                    if (formulaColumns.indexOf(columnName) >= 0) {\n                        modified.setColumn(columnName, modifier.processColumn(table, columnName));\n                    }\n                }\n                var columnFormulas = (modifier.options.columnFormulas || []);\n                for (var i = 0, iEnd = columnFormulas.length, columnFormula = void 0, formula = void 0; i < iEnd; ++i) {\n                    columnFormula = columnFormulas[i];\n                    formula = FormulaParser.parseFormula(columnFormula.formula, alternativeSeparators);\n                    modified.setColumn(columnFormula.column, modifier.processColumnFormula(formula, table, columnFormula.rowStart, columnFormula.rowEnd));\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table: table });\n                return table;\n            };\n            /**\n             * Process a column by replacing formula strings with calculated values.\n             *\n             * @private\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to extract column from and use as reference.\n             *\n             * @param {string} columnNameOrAlias\n             * Name or alias of column to process.\n             *\n             * @param {number} rowIndex\n             * Row index to start the replacing process from.\n             *\n             * @return {Highcharts.DataTableColumn}\n             * Returns the processed table column.\n             */\n            MathModifier.prototype.processColumn = function (table, columnNameOrAlias, rowIndex) {\n                if (rowIndex === void 0) { rowIndex = 0; }\n                var alternativeSeparators = this.options.alternativeSeparators, column = (table.getColumn(columnNameOrAlias, true) || [])\n                    .slice(rowIndex > 0 ? rowIndex : 0);\n                for (var i = 0, iEnd = column.length, cacheFormula = [], cacheString = '', cell = void 0; i < iEnd; ++i) {\n                    cell = column[i];\n                    if (typeof cell === 'string' &&\n                        cell[0] === '=') {\n                        try {\n                            // Use cache while formula string is repetitive\n                            cacheFormula = (cacheString === cell ?\n                                cacheFormula :\n                                FormulaParser.parseFormula(cell.substring(1), alternativeSeparators));\n                            // Process parsed formula string\n                            column[i] =\n                                FormulaProcessor.processFormula(cacheFormula, table);\n                        }\n                        catch (_a) {\n                            column[i] = NaN;\n                        }\n                    }\n                }\n                return column;\n            };\n            /**\n             * Process a column by replacing cell values with calculated values from a\n             * given formula.\n             *\n             * @private\n             *\n             * @param {Highcharts.Formula} formula\n             * Formula to use for processing.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to extract column from and use as reference.\n             *\n             * @param {number} rowStart\n             * Row index to start the replacing process from.\n             *\n             * @param {number} rowEnd\n             * Row index to end the replacing process.\n             *\n             * @return {Highcharts.DataTableColumn}\n             * Returns the processed table column.\n             */\n            MathModifier.prototype.processColumnFormula = function (formula, table, rowStart, rowEnd) {\n                if (rowStart === void 0) { rowStart = 0; }\n                if (rowEnd === void 0) { rowEnd = table.getRowCount(); }\n                rowStart = rowStart >= 0 ? rowStart : 0;\n                rowEnd = rowEnd >= 0 ? rowEnd : table.getRowCount() + rowEnd;\n                var column = [], modified = table.modified;\n                for (var i = 0, iEnd = (rowEnd - rowStart); i < iEnd; ++i) {\n                    try {\n                        column[i] = FormulaProcessor.processFormula(formula, modified);\n                    }\n                    catch (_a) {\n                        column[i] = NaN;\n                    }\n                    finally {\n                        formula = FormulaProcessor.translateReferences(formula, 0, 1);\n                    }\n                }\n                return column;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options of MathModifier.\n             * @private\n             */\n            MathModifier.defaultOptions = {\n                type: 'Math',\n                alternativeSeparators: false\n            };\n            return MathModifier;\n        }(DataModifier));\n        DataModifier.registerType('Math', MathModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MathModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/RangeModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Filters out table rows with a specific value range.\n         *\n         * @private\n         */\n        var RangeModifier = /** @class */ (function (_super) {\n            __extends(RangeModifier, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            function RangeModifier(options) {\n                var _this = _super.call(this) || this;\n                _this.options = merge(RangeModifier.defaultOptions, options);\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Replaces table rows with filtered rows.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            RangeModifier.prototype.modifyTable = function (table, eventDetail) {\n                var modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table: table });\n                var _a = modifier.options, additive = _a.additive, ranges = _a.ranges, strict = _a.strict;\n                if (ranges.length) {\n                    var modified = table.modified;\n                    var columns = table.getColumns(), rows = [];\n                    for (var i = 0, iEnd = ranges.length, range = void 0, rangeColumn = void 0; i < iEnd; ++i) {\n                        range = ranges[i];\n                        if (strict &&\n                            typeof range.minValue !== typeof range.maxValue) {\n                            continue;\n                        }\n                        if (i > 0 && !additive) {\n                            modified.deleteRows();\n                            modified.setRows(rows);\n                            columns = modified.getColumns();\n                            rows = [];\n                        }\n                        rangeColumn = (columns[range.column] || []);\n                        for (var j = 0, jEnd = rangeColumn.length, cell = void 0, row = void 0; j < jEnd; ++j) {\n                            cell = rangeColumn[j];\n                            switch (typeof cell) {\n                                default:\n                                    continue;\n                                case 'boolean':\n                                case 'number':\n                                case 'string':\n                                    break;\n                            }\n                            if (strict &&\n                                typeof cell !== typeof range.minValue) {\n                                continue;\n                            }\n                            if (cell >= range.minValue &&\n                                cell <= range.maxValue) {\n                                row = (additive ?\n                                    table.getRow(j) :\n                                    modified.getRow(j));\n                                if (row) {\n                                    rows.push(row);\n                                }\n                            }\n                        }\n                    }\n                    modified.deleteRows();\n                    modified.setRows(rows);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table: table });\n                return table;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options for the range modifier.\n             */\n            RangeModifier.defaultOptions = {\n                type: 'Range',\n                ranges: []\n            };\n            return RangeModifier;\n        }(DataModifier));\n        DataModifier.registerType('Range', RangeModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return RangeModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/SortModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Sort table rows according to values of a column.\n         *\n         * @private\n         */\n        var SortModifier = /** @class */ (function (_super) {\n            __extends(SortModifier, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeDataModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            function SortModifier(options) {\n                var _this = _super.call(this) || this;\n                _this.options = merge(SortModifier.defaultOptions, options);\n                return _this;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            SortModifier.ascending = function (a, b) {\n                return ((a || 0) < (b || 0) ? -1 :\n                    (a || 0) > (b || 0) ? 1 :\n                        0);\n            };\n            SortModifier.descending = function (a, b) {\n                return ((b || 0) < (a || 0) ? -1 :\n                    (b || 0) > (a || 0) ? 1 :\n                        0);\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns index and row for sort reference.\n             *\n             * @private\n             *\n             * @param {Highcharts.DataTable} table\n             * Table with rows to reference.\n             *\n             * @return {Array<SortModifier.RowReference>}\n             * Array of row references.\n             */\n            SortModifier.prototype.getRowReferences = function (table) {\n                var rows = table.getRows(), rowReferences = [];\n                for (var i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    rowReferences.push({\n                        index: i,\n                        row: rows[i]\n                    });\n                }\n                return rowReferences;\n            };\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            SortModifier.prototype.modifyCell = function (table, columnName, rowIndex, cellValue, eventDetail) {\n                var modifier = this, _a = modifier.options, orderByColumn = _a.orderByColumn, orderInColumn = _a.orderInColumn;\n                if (columnName === orderByColumn) {\n                    if (orderInColumn) {\n                        table.modified.setCell(columnName, rowIndex, cellValue);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            };\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            SortModifier.prototype.modifyColumns = function (table, columns, rowIndex, eventDetail) {\n                var modifier = this, _a = modifier.options, orderByColumn = _a.orderByColumn, orderInColumn = _a.orderInColumn, columnNames = Object.keys(columns);\n                if (columnNames.indexOf(orderByColumn) > -1) {\n                    if (orderInColumn &&\n                        columns[columnNames[0]].length) {\n                        table.modified.setColumns(columns, rowIndex);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            };\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            SortModifier.prototype.modifyRows = function (table, rows, rowIndex, eventDetail) {\n                var modifier = this, _a = modifier.options, orderByColumn = _a.orderByColumn, orderInColumn = _a.orderInColumn;\n                if (orderInColumn &&\n                    rows.length) {\n                    table.modified.setRows(rows, rowIndex);\n                    table.modified.setColumn(orderInColumn, modifier\n                        .modifyTable(new DataTable({\n                        columns: table\n                            .getColumns([orderByColumn, orderInColumn])\n                    }))\n                        .modified\n                        .getColumn(orderInColumn));\n                }\n                else {\n                    modifier.modifyTable(table, eventDetail);\n                }\n                return table;\n            };\n            /**\n             * Sorts rows in the table.\n             *\n             * @param {DataTable} table\n             * Table to sort in.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            SortModifier.prototype.modifyTable = function (table, eventDetail) {\n                var _a;\n                var modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table: table });\n                var columnNames = table.getColumnNames(), rowCount = table.getRowCount(), rowReferences = this.getRowReferences(table), _b = modifier.options, direction = _b.direction, orderByColumn = _b.orderByColumn, orderInColumn = _b.orderInColumn, compare = (direction === 'asc' ?\n                    SortModifier.ascending :\n                    SortModifier.descending), orderByColumnIndex = columnNames.indexOf(orderByColumn), modified = table.modified;\n                if (orderByColumnIndex !== -1) {\n                    rowReferences.sort(function (a, b) { return compare(a.row[orderByColumnIndex], b.row[orderByColumnIndex]); });\n                }\n                if (orderInColumn) {\n                    var column = [];\n                    for (var i = 0; i < rowCount; ++i) {\n                        column[rowReferences[i].index] = i;\n                    }\n                    modified.setColumns((_a = {}, _a[orderInColumn] = column, _a));\n                }\n                else {\n                    var rows = [];\n                    for (var i = 0; i < rowCount; ++i) {\n                        rows.push(rowReferences[i].row);\n                    }\n                    modified.setRows(rows, 0);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table: table });\n                return table;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options to group table rows.\n             */\n            SortModifier.defaultOptions = {\n                type: 'Sort',\n                direction: 'desc',\n                orderByColumn: 'y'\n            };\n            return SortModifier;\n        }(DataModifier));\n        DataModifier.registerType('Sort', SortModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SortModifier;\n    });\n    _registerModule(_modules, 'masters/modules/data-tools.src.js', [_modules['Core/Globals.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/DataConverter.js'], _modules['Data/DataCursor.js'], _modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataPool.js'], _modules['Data/DataTable.js'], _modules['Data/Formula/Formula.js']], function (Highcharts, DataConnector, DataConverter, DataCursor, DataModifier, DataPool, DataTable, Formula) {\n\n        var G = Highcharts;\n        G.DataConnector = G.DataConnector || DataConnector;\n        G.DataConverter = G.DataConverter || DataConverter;\n        G.DataCursor = G.DataCursor || DataCursor;\n        G.DataModifier = G.DataModifier || DataModifier;\n        G.DataPool = G.DataPool || DataPool;\n        G.DataTable = G.DataTable || DataTable;\n        G.Formula = G.Formula || Formula;\n\n        return Highcharts;\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","U","DataModifier","addEvent","fireEvent","merge","prototype","benchmark","dataTable","options","results","modifier","execute","modifyTable","emit","type","iterations","on","length","times","startTime","endTime","performance","now","push","e","modify","table","eventDetail","Promise","resolve","reject","modified","clone","modifyCell","columnName","rowIndex","cellValue","modifyColumns","columns","modifyRows","rows","callback","types","registerType","key","DataModifierClass","uniqueKey","DataTable","aliases","JSON","parse","stringify","autoId","id","rowCount","versionTag","columnNames","Object","keys","thisColumns","i","iEnd","column","slice","Math","max","aliasKeys","thisAliases","alias","isNull","row","NULL","Array","skipColumns","tableOptions","tableClone","deleteColumnAlias","_a","deletedAlias","deleteColumns","deletedColumns","modifiedColumns","deleteRows","deletedRows","modifiedRows","deletedCells","splice","j","jEnd","getCell","columnNameOrAlias","getCellAsBoolean","getCellAsNumber","useNaN","isNaN","parseFloat","concat","getCellAsString","getColumn","asReference","getColumns","getColumnAsNumbers","columnAsNumber","columnLength","getColumnNames","columnNamesOrAliases","tableAliasMap","tableColumns","getModifier","getRow","getRows","getRowCount","getRowIndexBy","rowIndexOffset","indexOf","getRowObject","getRowObjects","i2","min","_i","columnNamesOrAliases_1","columnNamesOrAliases_2","getVersionTag","hasColumns","hasRowWith","renameColumn","newColumnName","setCell","setColumn","setColumns","tableModifier","reset","tableColumn","i_1","iEnd_1","tableColumnNames","setModifier","promise","then","error","setRow","setRows","rowColumnNames","rowColumnName","indexRowCount","version","DataConnector","pick","metadata","defineProperty","get","polling","enumerable","configurable","describeColumn","name","columnMeta","connector","describeColumns","pop","getColumnOrder","usePresentationState","names","sort","a","b","index","getSortedColumns","usePresentationOrder","load","save","Error","setColumnOrder","setModifierOptions","modifierOptions","_this","ModifierClass","startPolling","refreshTime","clearTimeout","_polling","setTimeout","stopPolling","whatIs","DataConnectorClass","isNumber","DataConverter","dateFormats","regex","parser","match","Date","UTC","NaN","alternative","d","year","getFullYear","mergedOptions","defaultOptions","regExpPoint","decimalPoint","decimalRegExp","RegExp","asBoolean","value","asNumber","asDate","timestamp","parseDate","asString","asGuessedType","typeMap","converter","guessType","call","decimalRegex","replace","test","getDate","deduceDateFormat","data","limit","thing","elem","stable","format","guessedFormat","madeDeduction","trim","split","parseInt","join","dateFormat","export","headers","getTable","result","trimedValue","innerTrimedValue","floatValue","dateFormatProp","getTime","getTimezoneOffset","str","inside","alternativeFormat","startColumn","endColumn","Number","MAX_VALUE","startRow","endRow","firstRowAsNames","switchRowsAndColumns","getTableFromColumns","DataCursor","stateMap","emittingRegister","listenerMap","addListener","tableId","state","listener","listeners","buildEmittingTag","cursor","firstRow","lastRow","emitCursor","groupOrCursor","cursorOrEvent","eventOrLasting","lasting","event","group","cursors","getIndex","emittingTag","remitCursor","removeListener","toRange","defaultRange","_b","_c","_d","range","needle","columnNeedle","isEqual","cursorA","cursorB","isInRange","needleColumns","rangeColumns","every","toPositions","positions","rowEnd","columnEnd","connectors","DataPoolDefaults","DataPool","waiting","getConnector","connectorId","waitingList","connectorOptions","getConnectorOptions","loadConnector","getConnectorIds","connectorIds","getConnectorTable","isNewConnector","ConnectorClass","setConnectorOptions","instances","booleanRegExp","decimal1RegExp","decimal2RegExp","functionRegExp","operatorRegExp","rangeA1RegExp","rangeR1C1RegExp","referenceA1RegExp","referenceR1C1RegExp","extractParantheses","text","parantheseLevel","char","parantheseStart","substring","extractString","start","escaping","parseArgument","alternativeSeparators","beginColumnRelative","beginRowRelative","endColumnRelative","endRowRelative","beginColumn","beginRow","parseReferenceColumn","formula","parseFormula","next","columnRelative","rowRelative","reference","string","parantheses","parseArguments","argumentsSeparator","term","paranteses","position","code","factor","charCodeAt","pow","operators","isFormula","item","isFunction","isOperator","isRange","isReference","isValue","FormulaTypes","asLogicalStringRegExp","MAX_FALSE","MAX_STRING","MAX_TRUE","operatorPriority","processorFunctions","processorFunctionNameRegExp","asLogicalNumber","asLogicalString","toLowerCase","basicOperation","operator","x","y","round","getArgumentValue","arg","getRangeValues","processFunction","processFormula","values","cell","cells","getReferenceValue","operator2","formulaFunction","processor","getArgumentsValues","registerProcessorFunction","processorFunction","translateReferences","columnDelta","rowDelta","FormulaProcessor","ABS","abs","value2","AND","AVERAGE","count","AVERAGEA","COUNT","COUNTA","IF","ISNA","MAX","NEGATIVE_INFINITY","isFinite","MEDIAN","median","half","floor","MIN","POSITIVE_INFINITY","MOD","value1","getModeMap","modeMap","MULT","modeKeys","modeCount","SNGL","modeKey","keyValue","NOT","OR","PRODUCT","calculated","SUM","XOR","lastValue","FormulaParser","FormulaType","__assign","assign","t","s","n","arguments","p","extendStatics","__extends","setPrototypeOf","__proto__","TypeError","String","__","constructor","create","_super","CSVConverter","dataTypes","useLocalDecimalPoint","lineDelimiter","exportNames","itemDelimiter","toLocaleString","csvRows","columnsCount","rowArray","map","columnIndex","columnDataType","dataType","cellVal","lines","parserOptions","beforeParse","rowIt","csv","guessedItemDelimiter","guessDelimiter","offset","parseCSVRow","columnStr","rowNumber","guessedDecimalPoint","c","token","actualColumn","read","pushType","initialValue","guessed","points","commas","potDelimiters","linesCount","inStr","cn","cl","CSVConnector","enablePolling","dataRefreshRate","csvURL","dataModifier","fetch","response","isArray","objectEach","JSONConverter","orientation","shift","toString","this_1","_loop_1","columnNames_1","newRow_1","arrayWithPath","reduce","acc","JSONConnector","dataUrl","json","GoogleSheetsConverter","header","parseOptions","GoogleSheetsConnector","googleAPIKey","googleSpreadsheetKey","url","buildFetchURL","message","status","worksheet","alphabet","buildQueryRange","googleSpreadsheetRange","apiKey","sheetKey","onlyColumnNames","HTMLTableConverter","tableElement","tableElementID","useMultiLevelHeaders","htmlRows","tableHead","subcategories","subhead","getTableHeaderHTML","getCellHTMLFromValue","caption","tableCaption","tag","classes","attrs","val","className","topheaders","subheaders","cur","rowspan","useRowspanHeaders","html","len","curColspan","isRowEqual","row1","row2","tableHTML","HTMLElement","getElementsByTagName","rowsCount","items","children","itemsLength","tagName","innerHTML","columnsInRow","columnsInRowLength","relativeColumnIndex","H","win","HTMLTableConnector","tableID","document","getElementById","ChainModifier","chain","optionsChain","add","clear","modifiers","reverse","promiseChain","chainTable","remove","InvertModifier","modifiedRowIndex","modifiedColumnNames","j2","MathModifier","formulaColumns","processColumn","columnFormulas","columnFormula","processColumnFormula","rowStart","cacheFormula","cacheString","RangeModifier","additive","ranges","strict","rangeColumn","minValue","maxValue","SortModifier","ascending","descending","getRowReferences","rowReferences","orderByColumn","orderInColumn","direction","compare","orderByColumnIndex","Formula","G"],"mappings":"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"}