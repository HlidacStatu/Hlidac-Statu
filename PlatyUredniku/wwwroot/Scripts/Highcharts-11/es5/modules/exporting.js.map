{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.1 (2024-04-04)\n *\n * Exporting module\n *\n * (c) 2010-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/exporting', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Chart/ChartNavigationComposition.js', [], function () {\n        /**\n         *\n         *  (c) 2010-2024 Pawe≈Ç Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ChartNavigationComposition;\n        (function (ChartNavigationComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(chart) {\n                if (!chart.navigation) {\n                    chart.navigation = new Additions(chart);\n                }\n                return chart;\n            }\n            ChartNavigationComposition.compose = compose;\n            /* *\n             *\n             *  Class\n             *\n             * */\n            /**\n             * Initializes `chart.navigation` object which delegates `update()` methods\n             * to all other common classes (used in exporting and navigationBindings).\n             * @private\n             */\n            var Additions = /** @class */ (function () {\n                /* *\n                 *\n                 *  Constructor\n                 *\n                 * */\n                function Additions(chart) {\n                    this.updates = [];\n                    this.chart = chart;\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Registers an `update()` method in the `chart.navigation` object.\n                 *\n                 * @private\n                 * @param {UpdateFunction} updateFn\n                 * The `update()` method that will be called in `chart.update()`.\n                 */\n                Additions.prototype.addUpdate = function (updateFn) {\n                    this.chart.navigation.updates.push(updateFn);\n                };\n                /**\n                 * @private\n                 */\n                Additions.prototype.update = function (options, redraw) {\n                    var _this = this;\n                    this.updates.forEach(function (updateFn) {\n                        updateFn.call(_this.chart, options, redraw);\n                    });\n                };\n                return Additions;\n            }());\n            ChartNavigationComposition.Additions = Additions;\n        })(ChartNavigationComposition || (ChartNavigationComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChartNavigationComposition;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/ExportingDefaults.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var isTouchDevice = H.isTouchDevice;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        // Add the export related options\n        /**\n         * Options for the exporting module. For an overview on the matter, see\n         * [the docs](https://www.highcharts.com/docs/export-module/export-module-overview).\n         *\n         * @requires     modules/exporting\n         * @optionparent exporting\n         */\n        var exporting = {\n            /**\n             * Experimental setting to allow HTML inside the chart (added through\n             * the `useHTML` options), directly in the exported image. This allows\n             * you to preserve complicated HTML structures like tables or bi-directional\n             * text in exported charts.\n             *\n             * Disclaimer: The HTML is rendered in a `foreignObject` tag in the\n             * generated SVG. The official export server is based on PhantomJS,\n             * which supports this, but other SVG clients, like Batik, does not\n             * support it. This also applies to downloaded SVG that you want to\n             * open in a desktop client.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     4.1.8\n             * @apioption exporting.allowHTML\n             */\n            /**\n             * Allows the end user to sort the data table by clicking on column headers.\n             *\n             * @since 10.3.3\n             * @apioption exporting.allowTableSorting\n             */\n            allowTableSorting: true,\n            /**\n             * Additional chart options to be merged into the chart before exporting to\n             * an image format. This does not apply to printing the chart via the export\n             * menu.\n             *\n             * For example, a common use case is to add data labels to improve\n             * readability of the exported chart, or to add a printer-friendly color\n             * scheme to exported PDFs.\n             *\n             * @sample {highcharts} highcharts/exporting/chartoptions-data-labels/\n             *         Added data labels\n             * @sample {highstock} highcharts/exporting/chartoptions-data-labels/\n             *         Added data labels\n             *\n             * @type      {Highcharts.Options}\n             * @apioption exporting.chartOptions\n             */\n            /**\n             * Whether to enable the exporting module. Disabling the module will\n             * hide the context button, but API methods will still be available.\n             *\n             * @sample {highcharts} highcharts/exporting/enabled-false/\n             *         Exporting module is loaded but disabled\n             * @sample {highstock} highcharts/exporting/enabled-false/\n             *         Exporting module is loaded but disabled\n             *\n             * @type      {boolean}\n             * @default   true\n             * @since     2.0\n             * @apioption exporting.enabled\n             */\n            /**\n             * Function to call if the offline-exporting module fails to export\n             * a chart on the client side, and [fallbackToExportServer](\n             * #exporting.fallbackToExportServer) is disabled. If left undefined, an\n             * exception is thrown instead. Receives two parameters, the exporting\n             * options, and the error from the module.\n             *\n             * @see [fallbackToExportServer](#exporting.fallbackToExportServer)\n             *\n             * @type      {Highcharts.ExportingErrorCallbackFunction}\n             * @since     5.0.0\n             * @requires  modules/exporting\n             * @requires  modules/offline-exporting\n             * @apioption exporting.error\n             */\n            /**\n             * Whether or not to fall back to the export server if the offline-exporting\n             * module is unable to export the chart on the client side. This happens for\n             * certain browsers, and certain features (e.g.\n             * [allowHTML](#exporting.allowHTML)), depending on the image type exporting\n             * to. For very complex charts, it is possible that export can fail in\n             * browsers that don't support Blob objects, due to data URL length limits.\n             * It is recommended to define the [exporting.error](#exporting.error)\n             * handler if disabling fallback, in order to notify users in case export\n             * fails.\n             *\n             * @type      {boolean}\n             * @default   true\n             * @since     4.1.8\n             * @requires  modules/exporting\n             * @requires  modules/offline-exporting\n             * @apioption exporting.fallbackToExportServer\n             */\n            /**\n             * The filename, without extension, to use for the exported chart.\n             *\n             * @sample {highcharts} highcharts/exporting/filename/\n             *         Custom file name\n             * @sample {highstock} highcharts/exporting/filename/\n             *         Custom file name\n             *\n             * @type      {string}\n             * @default   chart\n             * @since     2.0\n             * @apioption exporting.filename\n             */\n            /**\n             * Highcharts v11.2.0 and older. An object containing additional key value\n             * data for the POST form that sends the SVG to the export server. For\n             * example, a `target` can be set to make sure the generated image is\n             * received in another frame, or a custom `enctype` or `encoding` can be\n             * set.\n             *\n             * With Highcharts v11.3.0, the `fetch` API replaced the old HTML form. To\n             * modify the request, now use [fetchOptions](#exporting.fetchOptions)\n             * instead.\n             *\n             * @deprecated\n             * @type      {Highcharts.HTMLAttributes}\n             * @since     3.0.8\n             * @apioption exporting.formAttributes\n             */\n            /**\n             * Options for the fetch request used when sending the SVG to the export\n             * server.\n             *\n             * See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/fetch)\n             * for more information\n             *\n             * @type {Object}\n             * @since 11.3.0\n             * @apioption exporting.fetchOptions\n             */\n            /**\n             * Path where Highcharts will look for export module dependencies to\n             * load on demand if they don't already exist on `window`. Should currently\n             * point to location of [CanVG](https://github.com/canvg/canvg) library,\n             * [jsPDF](https://github.com/parallax/jsPDF) and\n             * [svg2pdf.js](https://github.com/yWorks/svg2pdf.js), required for client\n             * side export in certain browsers.\n             *\n             * @type      {string}\n             * @default   https://code.highcharts.com/{version}/lib\n             * @since     5.0.0\n             * @apioption exporting.libURL\n             */\n            /**\n             * Analogous to [sourceWidth](#exporting.sourceWidth).\n             *\n             * @type      {number}\n             * @since     3.0\n             * @apioption exporting.sourceHeight\n             */\n            /**\n             * The width of the original chart when exported, unless an explicit\n             * [chart.width](#chart.width) is set, or a pixel width is set on the\n             * container. The width exported raster image is then multiplied by\n             * [scale](#exporting.scale).\n             *\n             * @sample {highcharts} highcharts/exporting/sourcewidth/\n             *         Source size demo\n             * @sample {highstock} highcharts/exporting/sourcewidth/\n             *         Source size demo\n             * @sample {highmaps} maps/exporting/sourcewidth/\n             *         Source size demo\n             *\n             * @type      {number}\n             * @since     3.0\n             * @apioption exporting.sourceWidth\n             */\n            /**\n             * The pixel width of charts exported to PNG or JPG. As of Highcharts\n             * 3.0, the default pixel width is a function of the [chart.width](\n             * #chart.width) or [exporting.sourceWidth](#exporting.sourceWidth) and the\n             * [exporting.scale](#exporting.scale).\n             *\n             * @sample {highcharts} highcharts/exporting/width/\n             *         Export to 200px wide images\n             * @sample {highstock} highcharts/exporting/width/\n             *         Export to 200px wide images\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption exporting.width\n             */\n            /**\n             * Default MIME type for exporting if `chart.exportChart()` is called\n             * without specifying a `type` option. Possible values are `image/png`,\n             *  `image/jpeg`, `application/pdf` and `image/svg+xml`.\n             *\n             * @type  {Highcharts.ExportingMimeTypeValue}\n             * @since 2.0\n             */\n            type: 'image/png',\n            /**\n             * The URL for the server module converting the SVG string to an image\n             * format. By default this points to Highchart's free web service.\n             *\n             * @since 2.0\n             */\n            url: 'https://export.highcharts.com/',\n            /**\n             * Settings for a custom font for the exported PDF, when using the\n             * `offline-exporting` module. This is used for languages containing\n             * non-ASCII characters, like Chinese, Russian, Japanese etc.\n             *\n             * As described in the [jsPDF\n             * docs](https://github.com/parallax/jsPDF#use-of-unicode-characters--utf-8),\n             * the 14 standard fonts in PDF are limited to the ASCII-codepage.\n             * Therefore, in order to support other text in the exported PDF, one or\n             * more TTF font files have to be passed on to the exporting module.\n             *\n             * See more in [the\n             * docs](https://www.highcharts.com/docs/export-module/client-side-export).\n             *\n             * @sample {highcharts} highcharts/exporting/offline-download-pdffont/\n             *         Download PDF in a language containing non-Latin characters.\n             *\n             * @since 10.0.0\n             * @requires modules/offline-exporting\n             */\n            pdfFont: {\n                /**\n                 * The TTF font file for normal `font-style`. If font variations like\n                 * `bold` or `italic` are not defined, the `normal` font will be used\n                 * for those too.\n                 *\n                 * @type string|undefined\n                 */\n                normal: void 0,\n                /**\n                 * The TTF font file for bold text.\n                 *\n                 * @type string|undefined\n                 */\n                bold: void 0,\n                /**\n                 * The TTF font file for bold and italic text.\n                 *\n                 * @type string|undefined\n                 */\n                bolditalic: void 0,\n                /**\n                 * The TTF font file for italic text.\n                 *\n                 * @type string|undefined\n                 */\n                italic: void 0\n            },\n            /**\n             * When printing the chart from the menu item in the burger menu, if\n             * the on-screen chart exceeds this width, it is resized. After printing\n             * or cancelled, it is restored. The default width makes the chart\n             * fit into typical paper format. Note that this does not affect the\n             * chart when printing the web page as a whole.\n             *\n             * @since 4.2.5\n             */\n            printMaxWidth: 780,\n            /**\n             * Defines the scale or zoom factor for the exported image compared\n             * to the on-screen display. While for instance a 600px wide chart\n             * may look good on a website, it will look bad in print. The default\n             * scale of 2 makes this chart export to a 1200px PNG or JPG.\n             *\n             * @see [chart.width](#chart.width)\n             * @see [exporting.sourceWidth](#exporting.sourceWidth)\n             *\n             * @sample {highcharts} highcharts/exporting/scale/\n             *         Scale demonstrated\n             * @sample {highstock} highcharts/exporting/scale/\n             *         Scale demonstrated\n             * @sample {highmaps} maps/exporting/scale/\n             *         Scale demonstrated\n             *\n             * @since 3.0\n             */\n            scale: 2,\n            /**\n             * Options for the export related buttons, print and export. In addition\n             * to the default buttons listed here, custom buttons can be added.\n             * See [navigation.buttonOptions](#navigation.buttonOptions) for general\n             * options.\n             *\n             * @type     {Highcharts.Dictionary<*>}\n             * @requires modules/exporting\n             */\n            buttons: {\n                /**\n                 * Options for the export button.\n                 *\n                 * In styled mode, export button styles can be applied with the\n                 * `.highcharts-contextbutton` class.\n                 *\n                 * @declare  Highcharts.ExportingButtonsOptionsObject\n                 * @extends  navigation.buttonOptions\n                 * @requires modules/exporting\n                 */\n                contextButton: {\n                    /**\n                     * A click handler callback to use on the button directly instead of\n                     * the popup menu.\n                     *\n                     * @sample highcharts/exporting/buttons-contextbutton-onclick/\n                     *         Skip the menu and export the chart directly\n                     *\n                     * @type      {Function}\n                     * @since     2.0\n                     * @apioption exporting.buttons.contextButton.onclick\n                     */\n                    /**\n                     * See [navigation.buttonOptions.symbolFill](\n                     * #navigation.buttonOptions.symbolFill).\n                     *\n                     * @type      {Highcharts.ColorString}\n                     * @default   #666666\n                     * @since     2.0\n                     * @apioption exporting.buttons.contextButton.symbolFill\n                     */\n                    /**\n                     * The horizontal position of the button relative to the `align`\n                     * option.\n                     *\n                     * @type      {number}\n                     * @default   -10\n                     * @since     2.0\n                     * @apioption exporting.buttons.contextButton.x\n                     */\n                    /**\n                     * The class name of the context button.\n                     */\n                    className: 'highcharts-contextbutton',\n                    /**\n                     * The class name of the menu appearing from the button.\n                     */\n                    menuClassName: 'highcharts-contextmenu',\n                    /**\n                     * The symbol for the button. Points to a definition function in\n                     * the `Highcharts.Renderer.symbols` collection. The default\n                     * `menu` function is part of the exporting module. Possible\n                     * values are \"circle\", \"square\", \"diamond\", \"triangle\",\n                     * \"triangle-down\", \"menu\", \"menuball\" or custom shape.\n                     *\n                     * @sample highcharts/exporting/buttons-contextbutton-symbol/\n                     *         Use a circle for symbol\n                     * @sample highcharts/exporting/buttons-contextbutton-symbol-custom/\n                     *         Custom shape as symbol\n                     *\n                     * @type  {Highcharts.SymbolKeyValue|\"menu\"|\"menuball\"|string}\n                     * @since 2.0\n                     */\n                    symbol: 'menu',\n                    /**\n                     * The key to a [lang](#lang) option setting that is used for the\n                     * button's title tooltip. When the key is `contextButtonTitle`, it\n                     * refers to [lang.contextButtonTitle](#lang.contextButtonTitle)\n                     * that defaults to \"Chart context menu\".\n                     *\n                     * @since 6.1.4\n                     */\n                    titleKey: 'contextButtonTitle',\n                    /**\n                     * This option is deprecated, use\n                     * [titleKey](#exporting.buttons.contextButton.titleKey) instead.\n                     *\n                     * @deprecated\n                     * @type      {string}\n                     * @apioption exporting.buttons.contextButton._titleKey\n                     */\n                    /**\n                     * A collection of strings pointing to config options for the menu\n                     * items. The config options are defined in the\n                     * `menuItemDefinitions` option.\n                     *\n                     * By default, there is the \"View in full screen\" and \"Print\" menu\n                     * items, plus one menu item for each of the available export types.\n                     *\n                     * @sample {highcharts} highcharts/exporting/menuitemdefinitions/\n                     *         Menu item definitions\n                     * @sample {highstock} highcharts/exporting/menuitemdefinitions/\n                     *         Menu item definitions\n                     * @sample {highmaps} highcharts/exporting/menuitemdefinitions/\n                     *         Menu item definitions\n                     *\n                     * @type    {Array<string>}\n                     * @default [\"viewFullscreen\", \"printChart\", \"separator\", \"downloadPNG\", \"downloadJPEG\", \"downloadPDF\", \"downloadSVG\"]\n                     * @since   2.0\n                     */\n                    menuItems: [\n                        'viewFullscreen',\n                        'printChart',\n                        'separator',\n                        'downloadPNG',\n                        'downloadJPEG',\n                        'downloadPDF',\n                        'downloadSVG'\n                    ]\n                }\n            },\n            /**\n             * An object consisting of definitions for the menu items in the context\n             * menu. Each key value pair has a `key` that is referenced in the\n             * [menuItems](#exporting.buttons.contextButton.menuItems) setting,\n             * and a `value`, which is an object with the following properties:\n             *\n             * - **onclick:** The click handler for the menu item\n             *\n             * - **text:** The text for the menu item\n             *\n             * - **textKey:** If internationalization is required, the key to a language\n             *   string\n             *\n             * Custom text for the \"exitFullScreen\" can be set only in lang options\n             * (it is not a separate button).\n             *\n             * @sample {highcharts} highcharts/exporting/menuitemdefinitions/\n             *         Menu item definitions\n             * @sample {highstock} highcharts/exporting/menuitemdefinitions/\n             *         Menu item definitions\n             * @sample {highmaps} highcharts/exporting/menuitemdefinitions/\n             *         Menu item definitions\n             *\n             *\n             * @type    {Highcharts.Dictionary<Highcharts.ExportingMenuObject>}\n             * @default {\"viewFullscreen\": {}, \"printChart\": {}, \"separator\": {}, \"downloadPNG\": {}, \"downloadJPEG\": {}, \"downloadPDF\": {}, \"downloadSVG\": {}}\n             * @since   5.0.13\n             */\n            menuItemDefinitions: {\n                /**\n                 * @ignore\n                 */\n                viewFullscreen: {\n                    textKey: 'viewFullscreen',\n                    onclick: function () {\n                        if (this.fullscreen) {\n                            this.fullscreen.toggle();\n                        }\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                printChart: {\n                    textKey: 'printChart',\n                    onclick: function () {\n                        this.print();\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                separator: {\n                    separator: true\n                },\n                /**\n                 * @ignore\n                 */\n                downloadPNG: {\n                    textKey: 'downloadPNG',\n                    onclick: function () {\n                        this.exportChart();\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                downloadJPEG: {\n                    textKey: 'downloadJPEG',\n                    onclick: function () {\n                        this.exportChart({\n                            type: 'image/jpeg'\n                        });\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                downloadPDF: {\n                    textKey: 'downloadPDF',\n                    onclick: function () {\n                        this.exportChart({\n                            type: 'application/pdf'\n                        });\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                downloadSVG: {\n                    textKey: 'downloadSVG',\n                    onclick: function () {\n                        this.exportChart({\n                            type: 'image/svg+xml'\n                        });\n                    }\n                }\n            }\n        };\n        // Add language\n        /**\n         * @optionparent lang\n         */\n        var lang = {\n            /**\n             * Exporting module only. The text for the menu item to view the chart\n             * in full screen.\n             *\n             * @since 8.0.1\n             */\n            viewFullscreen: 'View in full screen',\n            /**\n             * Exporting module only. The text for the menu item to exit the chart\n             * from full screen.\n             *\n             * @since 8.0.1\n             */\n            exitFullscreen: 'Exit from full screen',\n            /**\n             * Exporting module only. The text for the menu item to print the chart.\n             *\n             * @since    3.0.1\n             * @requires modules/exporting\n             */\n            printChart: 'Print chart',\n            /**\n             * Exporting module only. The text for the PNG download menu item.\n             *\n             * @since    2.0\n             * @requires modules/exporting\n             */\n            downloadPNG: 'Download PNG image',\n            /**\n             * Exporting module only. The text for the JPEG download menu item.\n             *\n             * @since    2.0\n             * @requires modules/exporting\n             */\n            downloadJPEG: 'Download JPEG image',\n            /**\n             * Exporting module only. The text for the PDF download menu item.\n             *\n             * @since    2.0\n             * @requires modules/exporting\n             */\n            downloadPDF: 'Download PDF document',\n            /**\n             * Exporting module only. The text for the SVG download menu item.\n             *\n             * @since    2.0\n             * @requires modules/exporting\n             */\n            downloadSVG: 'Download SVG vector image',\n            /**\n             * Exporting module menu. The tooltip title for the context menu holding\n             * print and export menu items.\n             *\n             * @since    3.0\n             * @requires modules/exporting\n             */\n            contextButtonTitle: 'Chart context menu'\n        };\n        /**\n         * A collection of options for buttons and menus appearing in the exporting\n         * module or in Stock Tools.\n         *\n         * @requires     modules/exporting\n         * @optionparent navigation\n         */\n        var navigation = {\n            /**\n             * A collection of options for buttons appearing in the exporting\n             * module.\n             *\n             * In styled mode, the buttons are styled with the\n             * `.highcharts-contextbutton` and `.highcharts-button-symbol` classes.\n             *\n             * @requires modules/exporting\n             */\n            buttonOptions: {\n                /**\n                 * Whether to enable buttons.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-enabled/\n                 *         Exporting module loaded but buttons disabled\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @since     2.0\n                 * @apioption navigation.buttonOptions.enabled\n                 */\n                /**\n                 * The pixel size of the symbol on the button.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-height/\n                 *         Bigger buttons\n                 *\n                 * @since 2.0\n                 */\n                symbolSize: 14,\n                /**\n                 * The x position of the center of the symbol inside the button.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-height/\n                 *         Bigger buttons\n                 *\n                 * @since 2.0\n                 */\n                symbolX: 14.5,\n                /**\n                 * The y position of the center of the symbol inside the button.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-height/\n                 *         Bigger buttons\n                 *\n                 * @since 2.0\n                 */\n                symbolY: 13.5,\n                /**\n                 * Alignment for the buttons.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-align/\n                 *         Center aligned\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'right',\n                /**\n                 * The pixel spacing between buttons.\n                 *\n                 * @since 2.0\n                 */\n                buttonSpacing: 3,\n                /**\n                 * Pixel height of the buttons.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-height/\n                 *         Bigger buttons\n                 *\n                 * @since 2.0\n                 */\n                height: 28,\n                /**\n                 * A text string to add to the individual button.\n                 *\n                 * @sample highcharts/exporting/buttons-text/\n                 *         Full text button\n                 * @sample highcharts/exporting/buttons-text-usehtml/\n                 *         Icon using CSS font in text\n                 * @sample highcharts/exporting/buttons-text-symbol/\n                 *         Combined symbol and text\n                 *\n                 * @type      {string}\n                 * @default   null\n                 * @since     3.0\n                 * @apioption navigation.buttonOptions.text\n                 */\n                /**\n                 * Whether to use HTML for rendering the button. HTML allows for things\n                 * like inline CSS or image-based icons.\n                 *\n                 * @sample highcharts/exporting/buttons-text-usehtml/\n                 *         Icon using CSS font in text\n                 *\n                 * @type      boolean\n                 * @default   false\n                 * @since 10.3.0\n                 * @apioption navigation.buttonOptions.useHTML\n                 */\n                /**\n                 * The vertical offset of the button's position relative to its\n                 * `verticalAlign`.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-verticalalign/\n                 *         Buttons at lower right\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption navigation.buttonOptions.y\n                 */\n                /**\n                 * The vertical alignment of the buttons. Can be one of `\"top\"`,\n                 * `\"middle\"` or `\"bottom\"`.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-verticalalign/\n                 *         Buttons at lower right\n                 *\n                 * @type  {Highcharts.VerticalAlignValue}\n                 * @since 2.0\n                 */\n                verticalAlign: 'top',\n                /**\n                 * The pixel width of the button.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-height/\n                 *         Bigger buttons\n                 *\n                 * @since 2.0\n                 */\n                width: 28,\n                /**\n                 * Fill color for the symbol within the button.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-symbolfill/\n                 *         Blue symbol stroke for one of the buttons\n                 *\n                 * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @since 2.0\n                 */\n                symbolFill: \"#666666\" /* Palette.neutralColor60 */,\n                /**\n                 * The color of the symbol's stroke or line.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-symbolstroke/\n                 *         Blue symbol stroke\n                 *\n                 * @type  {Highcharts.ColorString}\n                 * @since 2.0\n                 */\n                symbolStroke: \"#666666\" /* Palette.neutralColor60 */,\n                /**\n                 * The pixel stroke width of the symbol on the button.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-height/\n                 *         Bigger buttons\n                 *\n                 * @since 2.0\n                 */\n                symbolStrokeWidth: 3,\n                /**\n                 * A configuration object for the button theme. The object accepts\n                 * SVG properties like `stroke-width`, `stroke` and `fill`.\n                 * Tri-state button styles are supported by the `states.hover` and\n                 * `states.select` objects.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-theme/\n                 *         Theming the buttons\n                 *\n                 * @requires modules/exporting\n                 *\n                 * @since 3.0\n                 */\n                theme: {\n                    /**\n                     * The default fill exists only to capture hover events.\n                     *\n                     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @default   #ffffff\n                     * @apioption navigation.buttonOptions.theme.fill\n                     */\n                    /**\n                     * Default stroke for the buttons.\n                     *\n                     * @type      {Highcharts.ColorString}\n                     * @default   none\n                     * @apioption navigation.buttonOptions.theme.stroke\n                     */\n                    /**\n                     * Padding for the button.\n                     */\n                    padding: 5\n                }\n            },\n            /**\n             * CSS styles for the popup menu appearing by default when the export\n             * icon is clicked. This menu is rendered in HTML.\n             *\n             * @see In styled mode, the menu is styled with the `.highcharts-menu`\n             *      class.\n             *\n             * @sample highcharts/navigation/menustyle/\n             *         Light gray menu background\n             *\n             * @type    {Highcharts.CSSObject}\n             * @default {\"background\": \"#ffffff\", \"borderRadius\": \"3px\", \"padding\": \"0.5em\"}\n             * @since   2.0\n             */\n            menuStyle: {\n                /** @ignore-option */\n                border: 'none',\n                /** @ignore-option */\n                borderRadius: '3px',\n                /** @ignore-option */\n                background: \"#ffffff\" /* Palette.backgroundColor */,\n                /** @ignore-option */\n                padding: '0.5em'\n            },\n            /**\n             * CSS styles for the individual items within the popup menu appearing\n             * by default when the export icon is clicked. The menu items are\n             * rendered in HTML. Font size defaults to `11px` on desktop and `14px`\n             * on touch devices.\n             *\n             * @see In styled mode, the menu items are styled with the\n             *      `.highcharts-menu-item` class.\n             *\n             * @sample {highcharts} highcharts/navigation/menuitemstyle/\n             *         Add a grey stripe to the left\n             *\n             * @type    {Highcharts.CSSObject}\n             * @default {\"padding\": \"0.5em\", \"color\": \"#333333\", \"background\": \"none\", \"borderRadius\": \"3px\", \"fontSize\": \"0.8em\", \"transition\": \"background 250ms, color 250ms\"}\n             * @since   2.0\n             */\n            menuItemStyle: {\n                /** @ignore-option */\n                background: 'none',\n                /** @ignore-option */\n                borderRadius: '3px',\n                /** @ignore-option */\n                color: \"#333333\" /* Palette.neutralColor80 */,\n                /** @ignore-option */\n                padding: '0.5em',\n                /** @ignore-option */\n                fontSize: isTouchDevice ? '0.9em' : '0.8em',\n                /** @ignore-option */\n                transition: 'background 250ms, color 250ms'\n            },\n            /**\n             * CSS styles for the hover state of the individual items within the\n             * popup menu appearing by default when the export icon is clicked. The\n             * menu items are rendered in HTML.\n             *\n             * @see In styled mode, the menu items are styled with the\n             *      `.highcharts-menu-item` class.\n             *\n             * @sample highcharts/navigation/menuitemhoverstyle/\n             *         Bold text on hover\n             *\n             * @type    {Highcharts.CSSObject}\n             * @default {\"background\": \"#f2f2f2\" }\n             * @since   2.0\n             */\n            menuItemHoverStyle: {\n                /** @ignore-option */\n                background: \"#f2f2f2\" /* Palette.neutralColor5 */\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var ExportingDefaults = {\n            exporting: exporting,\n            lang: lang,\n            navigation: navigation\n        };\n\n        return ExportingDefaults;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/ExportingSymbols.js', [], function () {\n        /* *\n         *\n         *  Exporting module\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ExportingSymbols;\n        (function (ExportingSymbols) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            var modifiedClasses = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(SVGRendererClass) {\n                if (modifiedClasses.indexOf(SVGRendererClass) === -1) {\n                    modifiedClasses.push(SVGRendererClass);\n                    var symbols = SVGRendererClass.prototype.symbols;\n                    symbols.menu = menu;\n                    symbols.menuball = menuball.bind(symbols);\n                }\n            }\n            ExportingSymbols.compose = compose;\n            /**\n             * @private\n             */\n            function menu(x, y, width, height) {\n                var arr = [\n                    ['M', x, y + 2.5],\n                    ['L', x + width, y + 2.5],\n                    ['M', x, y + height / 2 + 0.5],\n                    ['L', x + width, y + height / 2 + 0.5],\n                    ['M', x, y + height - 1.5],\n                    ['L', x + width, y + height - 1.5]\n                ];\n                return arr;\n            }\n            /**\n             * @private\n             */\n            function menuball(x, y, width, height) {\n                var h = (height / 3) - 2;\n                var path = [];\n                path = path.concat(this.circle(width - h, y, h, h), this.circle(width - h, y + h + 4, h, h), this.circle(width - h, y + 2 * (h + 4), h, h));\n                return path;\n            }\n        })(ExportingSymbols || (ExportingSymbols = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ExportingSymbols;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/Fullscreen.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (AST, H, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Rafal Sebestjanski\n         *\n         *  Full screen for Highcharts\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /**\n         * The module allows user to enable display chart in full screen mode.\n         * Used in StockTools too.\n         * Based on default solutions in browsers.\n         */\n        var composed = H.composed;\n        var addEvent = U.addEvent, fireEvent = U.fireEvent, pushUnique = U.pushUnique;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onChartBeforeRender() {\n            /**\n             * @name Highcharts.Chart#fullscreen\n             * @type {Highcharts.Fullscreen}\n             * @requires modules/full-screen\n             */\n            this.fullscreen = new Fullscreen(this);\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles displaying chart's container in the fullscreen mode.\n         *\n         * **Note**: Fullscreen is not supported on iPhone due to iOS limitations.\n         *\n         * @class\n         * @name Highcharts.Fullscreen\n         *\n         * @requires modules/exporting\n         */\n        var Fullscreen = /** @class */ (function () {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            function Fullscreen(chart) {\n                /**\n                 * Chart managed by the fullscreen controller.\n                 * @name Highcharts.Fullscreen#chart\n                 * @type {Highcharts.Chart}\n                 */\n                this.chart = chart;\n                /**\n                 * The flag is set to `true` when the chart is displayed in\n                 * the fullscreen mode.\n                 *\n                 * @name Highcharts.Fullscreen#isOpen\n                 * @type {boolean|undefined}\n                 * @since 8.0.1\n                 */\n                this.isOpen = false;\n                var container = chart.renderTo;\n                // Hold event and methods available only for a current browser.\n                if (!this.browserProps) {\n                    if (typeof container.requestFullscreen === 'function') {\n                        this.browserProps = {\n                            fullscreenChange: 'fullscreenchange',\n                            requestFullscreen: 'requestFullscreen',\n                            exitFullscreen: 'exitFullscreen'\n                        };\n                    }\n                    else if (container.mozRequestFullScreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'mozfullscreenchange',\n                            requestFullscreen: 'mozRequestFullScreen',\n                            exitFullscreen: 'mozCancelFullScreen'\n                        };\n                    }\n                    else if (container.webkitRequestFullScreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'webkitfullscreenchange',\n                            requestFullscreen: 'webkitRequestFullScreen',\n                            exitFullscreen: 'webkitExitFullscreen'\n                        };\n                    }\n                    else if (container.msRequestFullscreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'MSFullscreenChange',\n                            requestFullscreen: 'msRequestFullscreen',\n                            exitFullscreen: 'msExitFullscreen'\n                        };\n                    }\n                }\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Prepares the chart class to support fullscreen.\n             *\n             * @param {typeof_Highcharts.Chart} ChartClass\n             * The chart class to decorate with fullscreen support.\n             */\n            Fullscreen.compose = function (ChartClass) {\n                if (pushUnique(composed, 'Fullscreen')) {\n                    // Initialize fullscreen\n                    addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                }\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Stops displaying the chart in fullscreen mode.\n             * Exporting module required.\n             *\n             * @since       8.0.1\n             *\n             * @function    Highcharts.Fullscreen#close\n             * @return      {void}\n             * @requires    modules/full-screen\n             */\n            Fullscreen.prototype.close = function () {\n                var fullscreen = this, chart = fullscreen.chart, optionsChart = chart.options.chart;\n                fireEvent(chart, 'fullscreenClose', null, function () {\n                    // Don't fire exitFullscreen() when user exited\n                    // using 'Escape' button.\n                    if (fullscreen.isOpen &&\n                        fullscreen.browserProps &&\n                        chart.container.ownerDocument instanceof Document) {\n                        chart.container.ownerDocument[fullscreen.browserProps.exitFullscreen]();\n                    }\n                    // Unbind event as it's necessary only before exiting\n                    // from fullscreen.\n                    if (fullscreen.unbindFullscreenEvent) {\n                        fullscreen.unbindFullscreenEvent = fullscreen\n                            .unbindFullscreenEvent();\n                    }\n                    chart.setSize(fullscreen.origWidth, fullscreen.origHeight, false);\n                    fullscreen.origWidth = void 0;\n                    fullscreen.origHeight = void 0;\n                    optionsChart.width = fullscreen.origWidthOption;\n                    optionsChart.height = fullscreen.origHeightOption;\n                    fullscreen.origWidthOption = void 0;\n                    fullscreen.origHeightOption = void 0;\n                    fullscreen.isOpen = false;\n                    fullscreen.setButtonText();\n                });\n            };\n            /**\n             * Displays the chart in fullscreen mode.\n             * When fired customly by user before exporting context button is created,\n             * button's text will not be replaced - it's on the user side.\n             * Exporting module required.\n             *\n             * @since       8.0.1\n             *\n             * @function Highcharts.Fullscreen#open\n             * @return      {void}\n             * @requires    modules/full-screen\n             */\n            Fullscreen.prototype.open = function () {\n                var fullscreen = this, chart = fullscreen.chart, optionsChart = chart.options.chart;\n                fireEvent(chart, 'fullscreenOpen', null, function () {\n                    if (optionsChart) {\n                        fullscreen.origWidthOption = optionsChart.width;\n                        fullscreen.origHeightOption = optionsChart.height;\n                    }\n                    fullscreen.origWidth = chart.chartWidth;\n                    fullscreen.origHeight = chart.chartHeight;\n                    // Handle exitFullscreen() method when user clicks 'Escape' button.\n                    if (fullscreen.browserProps) {\n                        var unbindChange_1 = addEvent(chart.container.ownerDocument, // Chart's document\n                        fullscreen.browserProps.fullscreenChange, function () {\n                            // Handle lack of async of browser's\n                            // fullScreenChange event.\n                            if (fullscreen.isOpen) {\n                                fullscreen.isOpen = false;\n                                fullscreen.close();\n                            }\n                            else {\n                                chart.setSize(null, null, false);\n                                fullscreen.isOpen = true;\n                                fullscreen.setButtonText();\n                            }\n                        });\n                        var unbindDestroy_1 = addEvent(chart, 'destroy', unbindChange_1);\n                        fullscreen.unbindFullscreenEvent = function () {\n                            unbindChange_1();\n                            unbindDestroy_1();\n                        };\n                        var promise = chart.renderTo[fullscreen.browserProps.requestFullscreen]();\n                        if (promise) {\n                            promise['catch'](function () {\n                                alert(// eslint-disable-line no-alert\n                                'Full screen is not supported inside a frame.');\n                            });\n                        }\n                    }\n                });\n            };\n            /**\n             * Replaces the exporting context button's text when toogling the\n             * fullscreen mode.\n             *\n             * @private\n             *\n             * @since 8.0.1\n             *\n             * @requires modules/full-screen\n             */\n            Fullscreen.prototype.setButtonText = function () {\n                var chart = this.chart, exportDivElements = chart.exportDivElements, exportingOptions = chart.options.exporting, menuItems = (exportingOptions &&\n                    exportingOptions.buttons &&\n                    exportingOptions.buttons.contextButton.menuItems), lang = chart.options.lang;\n                if (exportingOptions &&\n                    exportingOptions.menuItemDefinitions &&\n                    lang &&\n                    lang.exitFullscreen &&\n                    lang.viewFullscreen &&\n                    menuItems &&\n                    exportDivElements) {\n                    var exportDivElement = exportDivElements[menuItems.indexOf('viewFullscreen')];\n                    if (exportDivElement) {\n                        AST.setElementHTML(exportDivElement, !this.isOpen ?\n                            (exportingOptions.menuItemDefinitions.viewFullscreen\n                                .text ||\n                                lang.viewFullscreen) : lang.exitFullscreen);\n                    }\n                }\n            };\n            /**\n             * Toggles displaying the chart in fullscreen mode.\n             * By default, when the exporting module is enabled, a context button with\n             * a drop down menu in the upper right corner accesses this function.\n             * Exporting module required.\n             *\n             * @since 8.0.1\n             *\n             * @sample      highcharts/members/chart-togglefullscreen/\n             *              Toggle fullscreen mode from a HTML button\n             *\n             * @function Highcharts.Fullscreen#toggle\n             * @requires    modules/full-screen\n             */\n            Fullscreen.prototype.toggle = function () {\n                var fullscreen = this;\n                if (!fullscreen.isOpen) {\n                    fullscreen.open();\n                }\n                else {\n                    fullscreen.close();\n                }\n            };\n            return Fullscreen;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Gets fired when closing the fullscreen\n         *\n         * @callback Highcharts.FullScreenfullscreenCloseCallbackFunction\n         *\n         * @param {Highcharts.Chart} chart\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Gets fired when opening the fullscreen\n         *\n         * @callback Highcharts.FullScreenfullscreenOpenCallbackFunction\n         *\n         * @param {Highcharts.Chart} chart\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        (''); // Keeps doclets above separated from following code\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Fires when a fullscreen is closed through the context menu item,\n         * or a fullscreen is closed on the `Escape` button click,\n         * or the `Chart.fullscreen.close` method.\n         *\n         * @sample highcharts/chart/events-fullscreen\n         *         Title size change on fullscreen open\n         *\n         * @type      {Highcharts.FullScreenfullscreenCloseCallbackFunction}\n         * @since     10.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/full-screen\n         * @apioption chart.events.fullscreenClose\n         */\n        /**\n         * Fires when a fullscreen is opened through the context menu item,\n         * or the `Chart.fullscreen.open` method.\n         *\n         * @sample highcharts/chart/events-fullscreen\n         *         Title size change on fullscreen open\n         *\n         * @type      {Highcharts.FullScreenfullscreenOpenCallbackFunction}\n         * @since     10.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/full-screen\n         * @apioption chart.events.fullscreenOpen\n         */\n        (''); // Keeps doclets above in transpiled file\n\n        return Fullscreen;\n    });\n    _registerModule(_modules, 'Core/HttpUtilities.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (G, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Christer Vasseng, Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        var win = G.win;\n        var discardElement = U.discardElement, objectEach = U.objectEach;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Perform an Ajax call.\n         *\n         * @function Highcharts.ajax\n         *\n         * @param {Highcharts.AjaxSettingsObject} settings\n         *        The Ajax settings to use.\n         *\n         * @return {false|undefined}\n         *         Returns false, if error occurred.\n         */\n        function ajax(settings) {\n            var headers = {\n                json: 'application/json',\n                xml: 'application/xml',\n                text: 'text/plain',\n                octet: 'application/octet-stream'\n            }, r = new XMLHttpRequest();\n            /**\n             * Private error handler.\n             * @private\n             * @param {XMLHttpRequest} xhr\n             * Internal request object.\n             * @param {string|Error} err\n             * Occurred error.\n             */\n            function handleError(xhr, err) {\n                if (settings.error) {\n                    settings.error(xhr, err);\n                }\n                else {\n                    // @todo Maybe emit a highcharts error event here\n                }\n            }\n            if (!settings.url) {\n                return false;\n            }\n            r.open((settings.type || 'get').toUpperCase(), settings.url, true);\n            if (!settings.headers || !settings.headers['Content-Type']) {\n                r.setRequestHeader('Content-Type', headers[settings.dataType || 'json'] || headers.text);\n            }\n            objectEach(settings.headers, function (val, key) {\n                r.setRequestHeader(key, val);\n            });\n            if (settings.responseType) {\n                r.responseType = settings.responseType;\n            }\n            // @todo lacking timeout handling\n            r.onreadystatechange = function () {\n                var res;\n                if (r.readyState === 4) {\n                    if (r.status === 200) {\n                        if (settings.responseType !== 'blob') {\n                            res = r.responseText;\n                            if (settings.dataType === 'json') {\n                                try {\n                                    res = JSON.parse(res);\n                                }\n                                catch (e) {\n                                    if (e instanceof Error) {\n                                        return handleError(r, e);\n                                    }\n                                }\n                            }\n                        }\n                        return settings.success && settings.success(res, r);\n                    }\n                    handleError(r, r.responseText);\n                }\n            };\n            if (settings.data && typeof settings.data !== 'string') {\n                settings.data = JSON.stringify(settings.data);\n            }\n            r.send(settings.data);\n        }\n        /**\n         * Get a JSON resource over XHR, also supporting CORS without preflight.\n         *\n         * @function Highcharts.getJSON\n         * @param {string} url\n         *        The URL to load.\n         * @param {Function} success\n         *        The success callback. For error handling, use the `Highcharts.ajax`\n         *        function instead.\n         */\n        function getJSON(url, success) {\n            HttpUtilities.ajax({\n                url: url,\n                success: success,\n                dataType: 'json',\n                headers: {\n                    // Override the Content-Type to avoid preflight problems with CORS\n                    // in the Highcharts demos\n                    'Content-Type': 'text/plain'\n                }\n            });\n        }\n        /**\n         * The post utility\n         *\n         * @private\n         * @function Highcharts.post\n         *\n         * @param {string} url\n         * Post URL\n         *\n         * @param {Object} data\n         * Post data\n         *\n         * @param {RequestInit} [fetchOptions]\n         * Additional attributes for the post request\n         */\n        /**\n         *\n         */\n        function post(url, data, fetchOptions) {\n            var formData = new win.FormData();\n            // Add the data\n            objectEach(data, function (val, name) {\n                formData.append(name, val);\n            });\n            formData.append('b64', 'true');\n            var filename = data.filename, type = data.type;\n            return win.fetch(url, __assign({ method: 'POST', body: formData }, fetchOptions)).then(function (res) {\n                if (res.ok) {\n                    res.text().then(function (text) {\n                        var link = document.createElement('a');\n                        link.href = \"data:\".concat(type, \";base64,\").concat(text);\n                        link.download = filename;\n                        link.click();\n                        discardElement(link);\n                    });\n                }\n            });\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var HttpUtilities = {\n            ajax: ajax,\n            getJSON: getJSON,\n            post: post\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @interface Highcharts.AjaxSettingsObject\n         */ /**\n        * The payload to send.\n        *\n        * @name Highcharts.AjaxSettingsObject#data\n        * @type {string|Highcharts.Dictionary<any>|undefined}\n        */ /**\n        * The data type expected.\n        * @name Highcharts.AjaxSettingsObject#dataType\n        * @type {\"json\"|\"xml\"|\"text\"|\"octet\"|undefined}\n        */ /**\n        * Function to call on error.\n        * @name Highcharts.AjaxSettingsObject#error\n        * @type {Function|undefined}\n        */ /**\n        * The headers; keyed on header name.\n        * @name Highcharts.AjaxSettingsObject#headers\n        * @type {Highcharts.Dictionary<string>|undefined}\n        */ /**\n        * Function to call on success.\n        * @name Highcharts.AjaxSettingsObject#success\n        * @type {Function|undefined}\n        */ /**\n        * The HTTP method to use. For example GET or POST.\n        * @name Highcharts.AjaxSettingsObject#type\n        * @type {string|undefined}\n        */ /**\n        * The URL to call.\n        * @name Highcharts.AjaxSettingsObject#url\n        * @type {string}\n        */\n        (''); // Keeps doclets above in JS file\n\n        return HttpUtilities;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/Exporting.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Chart/Chart.js'], _modules['Core/Chart/ChartNavigationComposition.js'], _modules['Core/Defaults.js'], _modules['Extensions/Exporting/ExportingDefaults.js'], _modules['Extensions/Exporting/ExportingSymbols.js'], _modules['Extensions/Exporting/Fullscreen.js'], _modules['Core/Globals.js'], _modules['Core/HttpUtilities.js'], _modules['Core/Utilities.js']], function (AST, Chart, ChartNavigationComposition, D, ExportingDefaults, ExportingSymbols, Fullscreen, G, HU, U) {\n        /* *\n         *\n         *  Exporting module\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        var defaultOptions = D.defaultOptions;\n        var doc = G.doc, SVG_NS = G.SVG_NS, win = G.win;\n        var addEvent = U.addEvent, css = U.css, createElement = U.createElement, discardElement = U.discardElement, extend = U.extend, find = U.find, fireEvent = U.fireEvent, isObject = U.isObject, merge = U.merge, objectEach = U.objectEach, pick = U.pick, removeEvent = U.removeEvent, uniqueKey = U.uniqueKey;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var Exporting;\n        (function (Exporting) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            // These CSS properties are not inlined. Remember camelCase.\n            var inlineDenylist = [\n                /-/,\n                /^(clipPath|cssText|d|height|width)$/,\n                /^font$/,\n                /[lL]ogical(Width|Height)$/,\n                /^parentRule$/,\n                /^(cssRules|ownerRules)$/,\n                /perspective/,\n                /TapHighlightColor/,\n                /^transition/,\n                /^length$/,\n                /^[0-9]+$/ // #17538\n            ];\n            // These ones are translated to attributes rather than styles\n            var inlineToAttributes = [\n                'fill',\n                'stroke',\n                'strokeLinecap',\n                'strokeLinejoin',\n                'strokeWidth',\n                'textAnchor',\n                'x',\n                'y'\n            ];\n            Exporting.inlineAllowlist = [];\n            var unstyledElements = [\n                'clipPath',\n                'defs',\n                'desc'\n            ];\n            /* *\n             *\n             *  Variables\n             *\n             * */\n            var printingChart;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Add the export button to the chart, with options.\n             *\n             * @private\n             * @function Highcharts.Chart#addButton\n             * @param {Highcharts.NavigationButtonOptions} options\n             * @requires modules/exporting\n             */\n            function addButton(options) {\n                var chart = this, renderer = chart.renderer, btnOptions = merge(chart.options.navigation.buttonOptions, options), onclick = btnOptions.onclick, menuItems = btnOptions.menuItems, symbolSize = btnOptions.symbolSize || 12;\n                var symbol;\n                if (!chart.btnCount) {\n                    chart.btnCount = 0;\n                }\n                // Keeps references to the button elements\n                if (!chart.exportDivElements) {\n                    chart.exportDivElements = [];\n                    chart.exportSVGElements = [];\n                }\n                if (btnOptions.enabled === false || !btnOptions.theme) {\n                    return;\n                }\n                var attr = btnOptions.theme;\n                var callback;\n                if (!chart.styledMode) {\n                    attr.fill = pick(attr.fill, \"#ffffff\" /* Palette.backgroundColor */);\n                    attr.stroke = pick(attr.stroke, 'none');\n                }\n                if (onclick) {\n                    callback = function (e) {\n                        if (e) {\n                            e.stopPropagation();\n                        }\n                        onclick.call(chart, e);\n                    };\n                }\n                else if (menuItems) {\n                    callback = function (e) {\n                        // Consistent with onclick call (#3495)\n                        if (e) {\n                            e.stopPropagation();\n                        }\n                        chart.contextMenu(button.menuClassName, menuItems, button.translateX || 0, button.translateY || 0, button.width || 0, button.height || 0, button);\n                        button.setState(2);\n                    };\n                }\n                if (btnOptions.text && btnOptions.symbol) {\n                    attr.paddingLeft = pick(attr.paddingLeft, 30);\n                }\n                else if (!btnOptions.text) {\n                    extend(attr, {\n                        width: btnOptions.width,\n                        height: btnOptions.height,\n                        padding: 0\n                    });\n                }\n                if (!chart.styledMode) {\n                    attr['stroke-linecap'] = 'round';\n                    attr.fill = pick(attr.fill, \"#ffffff\" /* Palette.backgroundColor */);\n                    attr.stroke = pick(attr.stroke, 'none');\n                }\n                var button = renderer\n                    .button(btnOptions.text, 0, 0, callback, attr, void 0, void 0, void 0, void 0, btnOptions.useHTML)\n                    .addClass(options.className)\n                    .attr({\n                    title: pick(chart.options.lang[btnOptions._titleKey || btnOptions.titleKey], '')\n                });\n                button.menuClassName = (options.menuClassName ||\n                    'highcharts-menu-' + chart.btnCount++);\n                if (btnOptions.symbol) {\n                    symbol = renderer\n                        .symbol(btnOptions.symbol, btnOptions.symbolX - (symbolSize / 2), btnOptions.symbolY - (symbolSize / 2), symbolSize, symbolSize\n                    // If symbol is an image, scale it (#7957)\n                    , {\n                        width: symbolSize,\n                        height: symbolSize\n                    })\n                        .addClass('highcharts-button-symbol')\n                        .attr({\n                        zIndex: 1\n                    })\n                        .add(button);\n                    if (!chart.styledMode) {\n                        symbol.attr({\n                            stroke: btnOptions.symbolStroke,\n                            fill: btnOptions.symbolFill,\n                            'stroke-width': btnOptions.symbolStrokeWidth || 1\n                        });\n                    }\n                }\n                button\n                    .add(chart.exportingGroup)\n                    .align(extend(btnOptions, {\n                    width: button.width,\n                    x: pick(btnOptions.x, chart.buttonOffset) // #1654\n                }), true, 'spacingBox');\n                chart.buttonOffset += (((button.width || 0) + btnOptions.buttonSpacing) *\n                    (btnOptions.align === 'right' ? -1 : 1));\n                chart.exportSVGElements.push(button, symbol);\n            }\n            /**\n             * Clean up after printing a chart.\n             *\n             * @function Highcharts#afterPrint\n             *\n             * @private\n             *\n             * @param {Highcharts.Chart} chart\n             *        Chart that was (or suppose to be) printed\n             *\n             * @emits Highcharts.Chart#event:afterPrint\n             */\n            function afterPrint() {\n                var chart = this;\n                if (!chart.printReverseInfo) {\n                    return void 0;\n                }\n                var _a = chart.printReverseInfo, childNodes = _a.childNodes, origDisplay = _a.origDisplay, resetParams = _a.resetParams;\n                // Put the chart back in\n                chart.moveContainers(chart.renderTo);\n                // Restore all body content\n                [].forEach.call(childNodes, function (node, i) {\n                    if (node.nodeType === 1) {\n                        node.style.display = (origDisplay[i] || '');\n                    }\n                });\n                chart.isPrinting = false;\n                // Reset printMaxWidth\n                if (resetParams) {\n                    chart.setSize.apply(chart, resetParams);\n                }\n                delete chart.printReverseInfo;\n                printingChart = void 0;\n                fireEvent(chart, 'afterPrint');\n            }\n            /**\n             * Prepare chart and document before printing a chart.\n             *\n             * @function Highcharts#beforePrint\n             *\n             * @private\n             *\n             *\n             * @emits Highcharts.Chart#event:beforePrint\n             */\n            function beforePrint() {\n                var _a;\n                var chart = this, body = doc.body, printMaxWidth = chart.options.exporting.printMaxWidth, printReverseInfo = {\n                    childNodes: body.childNodes,\n                    origDisplay: [],\n                    resetParams: void 0\n                };\n                chart.isPrinting = true;\n                (_a = chart.pointer) === null || _a === void 0 ? void 0 : _a.reset(void 0, 0);\n                fireEvent(chart, 'beforePrint');\n                // Handle printMaxWidth\n                var handleMaxWidth = printMaxWidth &&\n                    chart.chartWidth > printMaxWidth;\n                if (handleMaxWidth) {\n                    printReverseInfo.resetParams = [\n                        chart.options.chart.width,\n                        void 0,\n                        false\n                    ];\n                    chart.setSize(printMaxWidth, void 0, false);\n                }\n                // Hide all body content\n                [].forEach.call(printReverseInfo.childNodes, function (node, i) {\n                    if (node.nodeType === 1) {\n                        printReverseInfo.origDisplay[i] = node.style.display;\n                        node.style.display = 'none';\n                    }\n                });\n                // Pull out the chart\n                chart.moveContainers(body);\n                // Storage details for undo action after printing\n                chart.printReverseInfo = printReverseInfo;\n            }\n            /**\n             * @private\n             */\n            function chartCallback(chart) {\n                var composition = chart;\n                composition.renderExporting();\n                addEvent(chart, 'redraw', composition.renderExporting);\n                // Destroy the export elements at chart destroy\n                addEvent(chart, 'destroy', composition.destroyExport);\n                // Uncomment this to see a button directly below the chart, for quick\n                // testing of export\n                /*\n                let button, viewImage, viewSource;\n                if (!chart.renderer.forExport) {\n                    viewImage = function () {\n                        let div = doc.createElement('div');\n                        div.innerHTML = chart.getSVGForExport();\n                        chart.renderTo.parentNode.appendChild(div);\n                    };\n\n                    viewSource = function () {\n                        let pre = doc.createElement('pre');\n                        pre.innerHTML = chart.getSVGForExport()\n                            .replace(/</g, '\\n&lt;')\n                            .replace(/>/g, '&gt;');\n                        chart.renderTo.parentNode.appendChild(pre);\n                    };\n\n                    viewImage();\n\n                    // View SVG Image\n                    button = doc.createElement('button');\n                    button.innerHTML = 'View SVG Image';\n                    chart.renderTo.parentNode.appendChild(button);\n                    button.onclick = viewImage;\n\n                    // View SVG Source\n                    button = doc.createElement('button');\n                    button.innerHTML = 'View SVG Source';\n                    chart.renderTo.parentNode.appendChild(button);\n                    button.onclick = viewSource;\n                }\n                //*/\n            }\n            /**\n             * @private\n             */\n            function compose(ChartClass, SVGRendererClass) {\n                ExportingSymbols.compose(SVGRendererClass);\n                Fullscreen.compose(ChartClass);\n                var chartProto = ChartClass.prototype;\n                if (!chartProto.exportChart) {\n                    chartProto.afterPrint = afterPrint;\n                    chartProto.exportChart = exportChart;\n                    chartProto.inlineStyles = inlineStyles;\n                    chartProto.print = print;\n                    chartProto.sanitizeSVG = sanitizeSVG;\n                    chartProto.getChartHTML = getChartHTML;\n                    chartProto.getSVG = getSVG;\n                    chartProto.getSVGForExport = getSVGForExport;\n                    chartProto.getFilename = getFilename;\n                    chartProto.moveContainers = moveContainers;\n                    chartProto.beforePrint = beforePrint;\n                    chartProto.contextMenu = contextMenu;\n                    chartProto.addButton = addButton;\n                    chartProto.destroyExport = destroyExport;\n                    chartProto.renderExporting = renderExporting;\n                    chartProto.callbacks.push(chartCallback);\n                    addEvent(ChartClass, 'init', onChartInit);\n                    if (G.isSafari) {\n                        win.matchMedia('print').addListener(function (mqlEvent) {\n                            if (!printingChart) {\n                                return void 0;\n                            }\n                            if (mqlEvent.matches) {\n                                printingChart.beforePrint();\n                            }\n                            else {\n                                printingChart.afterPrint();\n                            }\n                        });\n                    }\n                    defaultOptions.exporting = merge(ExportingDefaults.exporting, defaultOptions.exporting);\n                    defaultOptions.lang = merge(ExportingDefaults.lang, defaultOptions.lang);\n                    // Buttons and menus are collected in a separate config option set\n                    // called 'navigation'. This can be extended later to add control\n                    // buttons like zoom and pan right click menus.\n                    defaultOptions.navigation = merge(ExportingDefaults.navigation, defaultOptions.navigation);\n                }\n            }\n            Exporting.compose = compose;\n            /**\n             * Display a popup menu for choosing the export type.\n             *\n             * @private\n             * @function Highcharts.Chart#contextMenu\n             * @param {string} className\n             *        An identifier for the menu.\n             * @param {Array<string|Highcharts.ExportingMenuObject>} items\n             *        A collection with text and onclicks for the items.\n             * @param {number} x\n             *        The x position of the opener button\n             * @param {number} y\n             *        The y position of the opener button\n             * @param {number} width\n             *        The width of the opener button\n             * @param {number} height\n             *        The height of the opener button\n             * @requires modules/exporting\n             */\n            function contextMenu(className, items, x, y, width, height, button) {\n                var _a;\n                var chart = this, navOptions = chart.options.navigation, chartWidth = chart.chartWidth, chartHeight = chart.chartHeight, cacheName = 'cache-' + className, \n                // For mouse leave detection\n                menuPadding = Math.max(width, height);\n                var innerMenu, menu = chart[cacheName];\n                // Create the menu only the first time\n                if (!menu) {\n                    // Create a HTML element above the SVG\n                    chart.exportContextMenu = chart[cacheName] = menu =\n                        createElement('div', {\n                            className: className\n                        }, __assign({ position: 'absolute', zIndex: 1000, padding: menuPadding + 'px', pointerEvents: 'auto' }, chart.renderer.style), ((_a = chart.scrollablePlotArea) === null || _a === void 0 ? void 0 : _a.fixedDiv) || chart.container);\n                    innerMenu = createElement('ul', { className: 'highcharts-menu' }, chart.styledMode ? {} : {\n                        listStyle: 'none',\n                        margin: 0,\n                        padding: 0\n                    }, menu);\n                    // Presentational CSS\n                    if (!chart.styledMode) {\n                        css(innerMenu, extend({\n                            MozBoxShadow: '3px 3px 10px #888',\n                            WebkitBoxShadow: '3px 3px 10px #888',\n                            boxShadow: '3px 3px 10px #888'\n                        }, navOptions.menuStyle));\n                    }\n                    // Hide on mouse out\n                    menu.hideMenu = function () {\n                        css(menu, { display: 'none' });\n                        if (button) {\n                            button.setState(0);\n                        }\n                        chart.openMenu = false;\n                        // #10361, #9998\n                        css(chart.renderTo, { overflow: 'hidden' });\n                        css(chart.container, { overflow: 'hidden' });\n                        U.clearTimeout(menu.hideTimer);\n                        fireEvent(chart, 'exportMenuHidden');\n                    };\n                    // Hide the menu some time after mouse leave (#1357)\n                    chart.exportEvents.push(addEvent(menu, 'mouseleave', function () {\n                        menu.hideTimer = win.setTimeout(menu.hideMenu, 500);\n                    }), addEvent(menu, 'mouseenter', function () {\n                        U.clearTimeout(menu.hideTimer);\n                    }), \n                    // Hide it on clicking or touching outside the menu (#2258,\n                    // #2335, #2407)\n                    addEvent(doc, 'mouseup', function (e) {\n                        var _a;\n                        if (!((_a = chart.pointer) === null || _a === void 0 ? void 0 : _a.inClass(e.target, className))) {\n                            menu.hideMenu();\n                        }\n                    }), addEvent(menu, 'click', function () {\n                        if (chart.openMenu) {\n                            menu.hideMenu();\n                        }\n                    }));\n                    // Create the items\n                    items.forEach(function (item) {\n                        if (typeof item === 'string') {\n                            item = chart.options.exporting\n                                .menuItemDefinitions[item];\n                        }\n                        if (isObject(item, true)) {\n                            var element = void 0;\n                            if (item.separator) {\n                                element = createElement('hr', void 0, void 0, innerMenu);\n                            }\n                            else {\n                                // When chart initialized with the table, wrong button\n                                // text displayed, #14352.\n                                if (item.textKey === 'viewData' &&\n                                    chart.isDataTableVisible) {\n                                    item.textKey = 'hideData';\n                                }\n                                element = createElement('li', {\n                                    className: 'highcharts-menu-item',\n                                    onclick: function (e) {\n                                        if (e) { // IE7\n                                            e.stopPropagation();\n                                        }\n                                        menu.hideMenu();\n                                        if (typeof item !== 'string' && item.onclick) {\n                                            item.onclick.apply(chart, arguments);\n                                        }\n                                    }\n                                }, void 0, innerMenu);\n                                AST.setElementHTML(element, item.text ||\n                                    chart.options.lang[item.textKey]);\n                                if (!chart.styledMode) {\n                                    element.onmouseover = function () {\n                                        css(this, navOptions.menuItemHoverStyle);\n                                    };\n                                    element.onmouseout = function () {\n                                        css(this, navOptions.menuItemStyle);\n                                    };\n                                    css(element, extend({\n                                        cursor: 'pointer'\n                                    }, navOptions.menuItemStyle || {}));\n                                }\n                            }\n                            // Keep references to menu divs to be able to destroy them\n                            chart.exportDivElements.push(element);\n                        }\n                    });\n                    // Keep references to menu and innerMenu div to be able to destroy\n                    // them\n                    chart.exportDivElements.push(innerMenu, menu);\n                    chart.exportMenuWidth = menu.offsetWidth;\n                    chart.exportMenuHeight = menu.offsetHeight;\n                }\n                var menuStyle = { display: 'block' };\n                // If outside right, right align it\n                if (x + chart.exportMenuWidth > chartWidth) {\n                    menuStyle.right = (chartWidth - x - width - menuPadding) + 'px';\n                }\n                else {\n                    menuStyle.left = (x - menuPadding) + 'px';\n                }\n                // If outside bottom, bottom align it\n                if (y + height + chart.exportMenuHeight > chartHeight &&\n                    button.alignOptions.verticalAlign !== 'top') {\n                    menuStyle.bottom = (chartHeight - y - menuPadding) + 'px';\n                }\n                else {\n                    menuStyle.top = (y + height - menuPadding) + 'px';\n                }\n                css(menu, menuStyle);\n                // #10361, #9998\n                css(chart.renderTo, { overflow: '' });\n                css(chart.container, { overflow: '' });\n                chart.openMenu = true;\n                fireEvent(chart, 'exportMenuShown');\n            }\n            /**\n             * Destroy the export buttons.\n             * @private\n             * @function Highcharts.Chart#destroyExport\n             * @param {global.Event} [e]\n             * @requires modules/exporting\n             */\n            function destroyExport(e) {\n                var chart = e ? e.target : this, exportSVGElements = chart.exportSVGElements, exportDivElements = chart.exportDivElements, exportEvents = chart.exportEvents;\n                var cacheName;\n                // Destroy the extra buttons added\n                if (exportSVGElements) {\n                    exportSVGElements.forEach(function (elem, i) {\n                        // Destroy and null the svg elements\n                        if (elem) { // #1822\n                            elem.onclick = elem.ontouchstart = null;\n                            cacheName = 'cache-' + elem.menuClassName;\n                            if (chart[cacheName]) {\n                                delete chart[cacheName];\n                            }\n                            exportSVGElements[i] = elem.destroy();\n                        }\n                    });\n                    exportSVGElements.length = 0;\n                }\n                // Destroy the exporting group\n                if (chart.exportingGroup) {\n                    chart.exportingGroup.destroy();\n                    delete chart.exportingGroup;\n                }\n                // Destroy the divs for the menu\n                if (exportDivElements) {\n                    exportDivElements.forEach(function (elem, i) {\n                        if (elem) {\n                            // Remove the event handler\n                            U.clearTimeout(elem.hideTimer); // #5427\n                            removeEvent(elem, 'mouseleave');\n                            // Remove inline events\n                            // (chart.exportDivElements as any)[i] =\n                            exportDivElements[i] =\n                                elem.onmouseout =\n                                    elem.onmouseover =\n                                        elem.ontouchstart =\n                                            elem.onclick = null;\n                            // Destroy the div by moving to garbage bin\n                            discardElement(elem);\n                        }\n                    });\n                    exportDivElements.length = 0;\n                }\n                if (exportEvents) {\n                    exportEvents.forEach(function (unbind) {\n                        unbind();\n                    });\n                    exportEvents.length = 0;\n                }\n            }\n            /**\n             * Exporting module required. Submit an SVG version of the chart to a server\n             * along with some parameters for conversion.\n             *\n             * @sample highcharts/members/chart-exportchart/\n             *         Export with no options\n             * @sample highcharts/members/chart-exportchart-filename/\n             *         PDF type and custom filename\n             * @sample highcharts/members/chart-exportchart-custom-background/\n             *         Different chart background in export\n             * @sample stock/members/chart-exportchart/\n             *         Export with Highcharts Stock\n             *\n             * @function Highcharts.Chart#exportChart\n             *\n             * @param {Highcharts.ExportingOptions} exportingOptions\n             *        Exporting options in addition to those defined in\n             *        [exporting](https://api.highcharts.com/highcharts/exporting).\n             *\n             * @param {Highcharts.Options} chartOptions\n             *        Additional chart options for the exported chart. For example a\n             *        different background color can be added here, or `dataLabels` for\n             *        export only.\n             *\n             * @requires modules/exporting\n             */\n            function exportChart(exportingOptions, chartOptions) {\n                var svg = this.getSVGForExport(exportingOptions, chartOptions);\n                // Merge the options\n                exportingOptions = merge(this.options.exporting, exportingOptions);\n                // Do the post\n                HU.post(exportingOptions.url, {\n                    filename: exportingOptions.filename ?\n                        exportingOptions.filename.replace(/\\//g, '-') :\n                        this.getFilename(),\n                    type: exportingOptions.type,\n                    width: exportingOptions.width,\n                    scale: exportingOptions.scale,\n                    svg: svg\n                }, exportingOptions.fetchOptions);\n            }\n            /**\n             * Return the unfiltered innerHTML of the chart container. Used as hook for\n             * plugins. In styled mode, it also takes care of inlining CSS style rules.\n             *\n             * @see Chart#getSVG\n             *\n             * @function Highcharts.Chart#getChartHTML\n             *\n             * @return {string}\n             * The unfiltered SVG of the chart.\n             *\n             * @requires modules/exporting\n             */\n            function getChartHTML() {\n                if (this.styledMode) {\n                    this.inlineStyles();\n                }\n                return this.container.innerHTML;\n            }\n            /**\n             * Get the default file name used for exported charts. By default it creates\n             * a file name based on the chart title.\n             *\n             * @function Highcharts.Chart#getFilename\n             *\n             * @return {string} A file name without extension.\n             *\n             * @requires modules/exporting\n             */\n            function getFilename() {\n                var s = this.userOptions.title && this.userOptions.title.text;\n                var filename = this.options.exporting.filename;\n                if (filename) {\n                    return filename.replace(/\\//g, '-');\n                }\n                if (typeof s === 'string') {\n                    filename = s\n                        .toLowerCase()\n                        .replace(/<\\/?[^>]+(>|$)/g, '') // Strip HTML tags\n                        .replace(/[\\s_]+/g, '-')\n                        .replace(/[^a-z0-9\\-]/g, '') // Preserve only latin\n                        .replace(/^[\\-]+/g, '') // Dashes in the start\n                        .replace(/[\\-]+/g, '-') // Dashes in a row\n                        .substr(0, 24)\n                        .replace(/[\\-]+$/g, ''); // Dashes in the end;\n                }\n                if (!filename || filename.length < 5) {\n                    filename = 'chart';\n                }\n                return filename;\n            }\n            /**\n             * Return an SVG representation of the chart.\n             *\n             * @sample highcharts/members/chart-getsvg/\n             *         View the SVG from a button\n             *\n             * @function Highcharts.Chart#getSVG\n             *\n             * @param {Highcharts.Options} [chartOptions]\n             *        Additional chart options for the generated SVG representation. For\n             *        collections like `xAxis`, `yAxis` or `series`, the additional\n             *        options is either merged in to the original item of the same\n             *        `id`, or to the first item if a common id is not found.\n             *\n             * @return {string}\n             *         The SVG representation of the rendered chart.\n             *\n             * @emits Highcharts.Chart#event:getSVG\n             *\n             * @requires modules/exporting\n             */\n            function getSVG(chartOptions) {\n                var chart = this;\n                var svg, seriesOptions, \n                // Copy the options and add extra options\n                options = merge(chart.options, chartOptions);\n                // Use userOptions to make the options chain in series right (#3881)\n                options.plotOptions = merge(chart.userOptions.plotOptions, chartOptions && chartOptions.plotOptions);\n                // ... and likewise with time, avoid that undefined time properties are\n                // merged over legacy global time options\n                options.time = merge(chart.userOptions.time, chartOptions && chartOptions.time);\n                // Create a sandbox where a new chart will be generated\n                var sandbox = createElement('div', null, {\n                    position: 'absolute',\n                    top: '-9999em',\n                    width: chart.chartWidth + 'px',\n                    height: chart.chartHeight + 'px'\n                }, doc.body);\n                // Get the source size\n                var cssWidth = chart.renderTo.style.width, cssHeight = chart.renderTo.style.height, sourceWidth = options.exporting.sourceWidth ||\n                    options.chart.width ||\n                    (/px$/.test(cssWidth) && parseInt(cssWidth, 10)) ||\n                    (options.isGantt ? 800 : 600), sourceHeight = options.exporting.sourceHeight ||\n                    options.chart.height ||\n                    (/px$/.test(cssHeight) && parseInt(cssHeight, 10)) ||\n                    400;\n                // Override some options\n                extend(options.chart, {\n                    animation: false,\n                    renderTo: sandbox,\n                    forExport: true,\n                    renderer: 'SVGRenderer',\n                    width: sourceWidth,\n                    height: sourceHeight\n                });\n                options.exporting.enabled = false; // Hide buttons in print\n                delete options.data; // #3004\n                // prepare for replicating the chart\n                options.series = [];\n                chart.series.forEach(function (serie) {\n                    seriesOptions = merge(serie.userOptions, {\n                        animation: false,\n                        enableMouseTracking: false,\n                        showCheckbox: false,\n                        visible: serie.visible\n                    });\n                    // Used for the navigator series that has its own option set\n                    if (!seriesOptions.isInternal) {\n                        options.series.push(seriesOptions);\n                    }\n                });\n                var colls = {};\n                chart.axes.forEach(function (axis) {\n                    // Assign an internal key to ensure a one-to-one mapping (#5924)\n                    if (!axis.userOptions.internalKey) { // #6444\n                        axis.userOptions.internalKey = uniqueKey();\n                    }\n                    if (!axis.options.isInternal) {\n                        if (!colls[axis.coll]) {\n                            colls[axis.coll] = true;\n                            options[axis.coll] = [];\n                        }\n                        options[axis.coll].push(merge(axis.userOptions, {\n                            visible: axis.visible\n                        }));\n                    }\n                });\n                // Make sure the `colorAxis` object of the `defaultOptions` isn't used\n                // in the chart copy's user options, because a color axis should only be\n                // added when the user actually applies it.\n                options.colorAxis = chart.userOptions.colorAxis;\n                // Generate the chart copy\n                var chartCopy = new chart.constructor(options, chart.callback);\n                // Axis options and series options  (#2022, #3900, #5982)\n                if (chartOptions) {\n                    ['xAxis', 'yAxis', 'series'].forEach(function (coll) {\n                        var collOptions = {};\n                        if (chartOptions[coll]) {\n                            collOptions[coll] = chartOptions[coll];\n                            chartCopy.update(collOptions);\n                        }\n                    });\n                }\n                // Reflect axis extremes in the export (#5924)\n                chart.axes.forEach(function (axis) {\n                    var axisCopy = find(chartCopy.axes, function (copy) {\n                        return copy.options.internalKey ===\n                            axis.userOptions.internalKey;\n                    }), extremes = axis.getExtremes(), userMin = extremes.userMin, userMax = extremes.userMax;\n                    if (axisCopy &&\n                        ((typeof userMin !== 'undefined' &&\n                            userMin !== axisCopy.min) || (typeof userMax !== 'undefined' &&\n                            userMax !== axisCopy.max))) {\n                        axisCopy.setExtremes(userMin, userMax, true, false);\n                    }\n                });\n                // Get the SVG from the container's innerHTML\n                svg = chartCopy.getChartHTML();\n                fireEvent(this, 'getSVG', { chartCopy: chartCopy });\n                svg = chart.sanitizeSVG(svg, options);\n                // Free up memory\n                options = null;\n                chartCopy.destroy();\n                discardElement(sandbox);\n                return svg;\n            }\n            /**\n             * @private\n             * @function Highcharts.Chart#getSVGForExport\n             */\n            function getSVGForExport(options, chartOptions) {\n                var chartExportingOptions = this.options.exporting;\n                return this.getSVG(merge({ chart: { borderRadius: 0 } }, chartExportingOptions.chartOptions, chartOptions, {\n                    exporting: {\n                        sourceWidth: ((options && options.sourceWidth) ||\n                            chartExportingOptions.sourceWidth),\n                        sourceHeight: ((options && options.sourceHeight) ||\n                            chartExportingOptions.sourceHeight)\n                    }\n                }));\n            }\n            /**\n             * Make hyphenated property names out of camelCase\n             * @private\n             * @param {string} prop\n             * Property name in camelCase\n             * @return {string}\n             * Hyphenated property name\n             */\n            function hyphenate(prop) {\n                return prop.replace(/([A-Z])/g, function (a, b) {\n                    return '-' + b.toLowerCase();\n                });\n            }\n            /**\n             * Analyze inherited styles from stylesheets and add them inline\n             *\n             * @private\n             * @function Highcharts.Chart#inlineStyles\n             *\n             * @todo What are the border styles for text about? In general, text has a\n             *       lot of properties.\n             *\n             * @todo Make it work with IE9 and IE10.\n             *\n             * @requires modules/exporting\n             */\n            function inlineStyles() {\n                var denylist = inlineDenylist, allowlist = Exporting.inlineAllowlist, // For IE\n                defaultStyles = {};\n                var dummySVG;\n                // Create an iframe where we read default styles without pollution from\n                // this body\n                var iframe = doc.createElement('iframe');\n                css(iframe, {\n                    width: '1px',\n                    height: '1px',\n                    visibility: 'hidden'\n                });\n                doc.body.appendChild(iframe);\n                var iframeDoc = (iframe.contentWindow && iframe.contentWindow.document);\n                if (iframeDoc) {\n                    iframeDoc.body.appendChild(iframeDoc.createElementNS(SVG_NS, 'svg'));\n                }\n                /**\n                 * Call this on all elements and recurse to children\n                 * @private\n                 * @param {Highcharts.HTMLDOMElement} node\n                 *        Element child\n                     */\n                function recurse(node) {\n                    var filteredStyles = {};\n                    var styles, parentStyles, dummy, denylisted, allowlisted, i;\n                    /**\n                     * Check computed styles and whether they are in the allow/denylist\n                     * for styles or attributes.\n                     * @private\n                     * @param {string} val\n                     *        Style value\n                     * @param {string} prop\n                     *        Style property name\n                             */\n                    function filterStyles(val, prop) {\n                        // Check against allowlist & denylist\n                        denylisted = allowlisted = false;\n                        if (allowlist.length) {\n                            // Styled mode in IE has a allowlist instead. Exclude all\n                            // props not in this list.\n                            i = allowlist.length;\n                            while (i-- && !allowlisted) {\n                                allowlisted = allowlist[i].test(prop);\n                            }\n                            denylisted = !allowlisted;\n                        }\n                        // Explicitly remove empty transforms\n                        if (prop === 'transform' && val === 'none') {\n                            denylisted = true;\n                        }\n                        i = denylist.length;\n                        while (i-- && !denylisted) {\n                            denylisted = (denylist[i].test(prop) ||\n                                typeof val === 'function');\n                        }\n                        if (!denylisted) {\n                            // If parent node has the same style, it gets inherited, no\n                            // need to inline it. Top-level props should be diffed\n                            // against parent (#7687).\n                            if ((parentStyles[prop] !== val ||\n                                node.nodeName === 'svg') &&\n                                defaultStyles[node.nodeName][prop] !== val) {\n                                // Attributes\n                                if (!inlineToAttributes ||\n                                    inlineToAttributes.indexOf(prop) !== -1) {\n                                    if (val) {\n                                        node.setAttribute(hyphenate(prop), val);\n                                    }\n                                    // Styles\n                                }\n                                else {\n                                    filteredStyles[prop] = val;\n                                }\n                            }\n                        }\n                    }\n                    if (iframeDoc &&\n                        node.nodeType === 1 &&\n                        unstyledElements.indexOf(node.nodeName) === -1) {\n                        styles = win.getComputedStyle(node, null);\n                        parentStyles = node.nodeName === 'svg' ?\n                            {} :\n                            win.getComputedStyle(node.parentNode, null);\n                        // Get default styles from the browser so that we don't have to\n                        // add these\n                        if (!defaultStyles[node.nodeName]) {\n                            /*\n                            If (!dummySVG) {\n                                dummySVG = doc.createElementNS(H.SVG_NS, 'svg');\n                                dummySVG.setAttribute('version', '1.1');\n                                doc.body.appendChild(dummySVG);\n                            }\n                            */\n                            dummySVG = iframeDoc.getElementsByTagName('svg')[0];\n                            dummy = iframeDoc.createElementNS(node.namespaceURI, node.nodeName);\n                            dummySVG.appendChild(dummy);\n                            // Get the defaults into a standard object (simple merge\n                            // won't do)\n                            var s = win.getComputedStyle(dummy, null), defaults = {};\n                            for (var key in s) {\n                                if (typeof s[key] === 'string' &&\n                                    !/^[0-9]+$/.test(key)) {\n                                    defaults[key] = s[key];\n                                }\n                            }\n                            defaultStyles[node.nodeName] = defaults;\n                            // Remove default fill, otherwise text disappears when\n                            // exported\n                            if (node.nodeName === 'text') {\n                                delete defaultStyles.text.fill;\n                            }\n                            dummySVG.removeChild(dummy);\n                        }\n                        // Loop through all styles and add them inline if they are ok\n                        for (var p in styles) {\n                            if (\n                            // Some browsers put lots of styles on the prototype...\n                            G.isFirefox ||\n                                G.isMS ||\n                                G.isSafari || // #16902\n                                // ... Chrome puts them on the instance\n                                Object.hasOwnProperty.call(styles, p)) {\n                                filterStyles(styles[p], p);\n                            }\n                        }\n                        // Apply styles\n                        css(node, filteredStyles);\n                        // Set default stroke width (needed at least for IE)\n                        if (node.nodeName === 'svg') {\n                            node.setAttribute('stroke-width', '1px');\n                        }\n                        if (node.nodeName === 'text') {\n                            return;\n                        }\n                        // Recurse\n                        [].forEach.call(node.children || node.childNodes, recurse);\n                    }\n                }\n                /**\n                 * Remove the dummy objects used to get defaults\n                 * @private\n                 */\n                function tearDown() {\n                    dummySVG.parentNode.removeChild(dummySVG);\n                    // Remove trash from DOM that stayed after each exporting\n                    iframe.parentNode.removeChild(iframe);\n                }\n                recurse(this.container.querySelector('svg'));\n                tearDown();\n            }\n            /**\n             * Move the chart container(s) to another div.\n             *\n             * @function Highcharts#moveContainers\n             *\n             * @private\n             *\n             * @param {Highcharts.HTMLDOMElement} moveTo\n             *        Move target\n             */\n            function moveContainers(moveTo) {\n                var scrollablePlotArea = this.scrollablePlotArea;\n                (\n                // When scrollablePlotArea is active (#9533)\n                scrollablePlotArea ?\n                    [\n                        scrollablePlotArea.fixedDiv,\n                        scrollablePlotArea.scrollingContainer\n                    ] :\n                    [this.container]).forEach(function (div) {\n                    moveTo.appendChild(div);\n                });\n            }\n            /**\n             * Add update methods to handle chart.update and chart.exporting.update and\n             * chart.navigation.update. These must be added to the chart instance rather\n             * than the Chart prototype in order to use the chart instance inside the\n             * update function.\n             * @private\n             */\n            function onChartInit() {\n                var chart = this, \n                /**\n                 * @private\n                 * @param {\"exporting\"|\"navigation\"} prop\n                 *        Property name in option root\n                 * @param {Highcharts.ExportingOptions|Highcharts.NavigationOptions} options\n                 *        Options to update\n                 * @param {boolean} [redraw=true]\n                 *        Whether to redraw\n                         */\n                update = function (prop, options, redraw) {\n                    chart.isDirtyExporting = true;\n                    merge(true, chart.options[prop], options);\n                    if (pick(redraw, true)) {\n                        chart.redraw();\n                    }\n                };\n                chart.exporting = {\n                    update: function (options, redraw) {\n                        update('exporting', options, redraw);\n                    }\n                };\n                // Register update() method for navigation. Cannot be set the same way\n                // as for exporting, because navigation options are shared with bindings\n                // which has separate update() logic.\n                ChartNavigationComposition\n                    .compose(chart).navigation\n                    .addUpdate(function (options, redraw) {\n                    update('navigation', options, redraw);\n                });\n            }\n            /**\n             * Exporting module required. Clears away other elements in the page and\n             * prints the chart as it is displayed. By default, when the exporting\n             * module is enabled, a context button with a drop down menu in the upper\n             * right corner accesses this function.\n             *\n             * @sample highcharts/members/chart-print/\n             *         Print from a HTML button\n             *\n             * @function Highcharts.Chart#print\n             *\n             *\n             * @emits Highcharts.Chart#event:beforePrint\n             * @emits Highcharts.Chart#event:afterPrint\n             *\n             * @requires modules/exporting\n             */\n            function print() {\n                var chart = this;\n                if (chart.isPrinting) { // Block the button while in printing mode\n                    return;\n                }\n                printingChart = chart;\n                if (!G.isSafari) {\n                    chart.beforePrint();\n                }\n                // Give the browser time to draw WebGL content, an issue that randomly\n                // appears (at least) in Chrome ~67 on the Mac (#8708).\n                setTimeout(function () {\n                    win.focus(); // #1510\n                    win.print();\n                    // Allow the browser to prepare before reverting\n                    if (!G.isSafari) {\n                        setTimeout(function () {\n                            chart.afterPrint();\n                        }, 1000);\n                    }\n                }, 1);\n            }\n            /**\n             * Add the buttons on chart load\n             * @private\n             * @function Highcharts.Chart#renderExporting\n             * @requires modules/exporting\n             */\n            function renderExporting() {\n                var chart = this, exportingOptions = chart.options.exporting, buttons = exportingOptions.buttons, isDirty = chart.isDirtyExporting || !chart.exportSVGElements;\n                chart.buttonOffset = 0;\n                if (chart.isDirtyExporting) {\n                    chart.destroyExport();\n                }\n                if (isDirty && exportingOptions.enabled !== false) {\n                    chart.exportEvents = [];\n                    chart.exportingGroup = chart.exportingGroup ||\n                        chart.renderer.g('exporting-group').attr({\n                            zIndex: 3 // #4955, // #8392\n                        }).add();\n                    objectEach(buttons, function (button) {\n                        chart.addButton(button);\n                    });\n                    chart.isDirtyExporting = false;\n                }\n            }\n            /**\n             * Exporting module only. A collection of fixes on the produced SVG to\n             * account for expand properties, browser bugs.\n             * Returns a cleaned SVG.\n             *\n             * @private\n             * @function Highcharts.Chart#sanitizeSVG\n             * @param {string} svg\n             *        SVG code to sanitize\n             * @param {Highcharts.Options} options\n             *        Chart options to apply\n             * @return {string}\n             *         Sanitized SVG code\n             * @requires modules/exporting\n             */\n            function sanitizeSVG(svg, options) {\n                var split = svg.indexOf('</svg>') + 6;\n                var html = svg.substr(split);\n                // Remove any HTML added to the container after the SVG (#894, #9087)\n                svg = svg.substr(0, split);\n                // Move HTML into a foreignObject\n                if (options && options.exporting && options.exporting.allowHTML) {\n                    if (html) {\n                        html = '<foreignObject x=\"0\" y=\"0\" ' +\n                            'width=\"' + options.chart.width + '\" ' +\n                            'height=\"' + options.chart.height + '\">' +\n                            '<body xmlns=\"http://www.w3.org/1999/xhtml\">' +\n                            // Some tags needs to be closed in xhtml (#13726)\n                            html.replace(/(<(?:img|br).*?(?=\\>))>/g, '$1 />') +\n                            '</body>' +\n                            '</foreignObject>';\n                        svg = svg.replace('</svg>', html + '</svg>');\n                    }\n                }\n                svg = svg\n                    .replace(/zIndex=\"[^\"]+\"/g, '')\n                    .replace(/symbolName=\"[^\"]+\"/g, '')\n                    .replace(/jQuery[0-9]+=\"[^\"]+\"/g, '')\n                    .replace(/url\\((\"|&quot;)(.*?)(\"|&quot;)\\;?\\)/g, 'url($2)')\n                    .replace(/url\\([^#]+#/g, 'url(#')\n                    .replace(/<svg /, '<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" ')\n                    .replace(/ (|NS[0-9]+\\:)href=/g, ' xlink:href=') // #3567\n                    .replace(/\\n+/g, ' ')\n                    // Batik doesn't support rgba fills and strokes (#3095)\n                    .replace(/(fill|stroke)=\"rgba\\(([ 0-9]+,[ 0-9]+,[ 0-9]+),([ 0-9\\.]+)\\)\"/g, // eslint-disable-line max-len\n                '$1=\"rgb($2)\" $1-opacity=\"$3\"')\n                    // Replace HTML entities, issue #347\n                    .replace(/&nbsp;/g, '\\u00A0') // No-break space\n                    .replace(/&shy;/g, '\\u00AD'); // Soft hyphen\n                return svg;\n            }\n        })(Exporting || (Exporting = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Gets fired after a chart is printed through the context menu item or the\n         * Chart.print method.\n         *\n         * @callback Highcharts.ExportingAfterPrintCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Gets fired before a chart is printed through the context menu item or the\n         * Chart.print method.\n         *\n         * @callback Highcharts.ExportingBeforePrintCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Function to call if the offline-exporting module fails to export a chart on\n         * the client side.\n         *\n         * @callback Highcharts.ExportingErrorCallbackFunction\n         *\n         * @param {Highcharts.ExportingOptions} options\n         *        The exporting options.\n         *\n         * @param {global.Error} err\n         *        The error from the module.\n         */\n        /**\n         * Definition for a menu item in the context menu.\n         *\n         * @interface Highcharts.ExportingMenuObject\n         */ /**\n        * The text for the menu item.\n        *\n        * @name Highcharts.ExportingMenuObject#text\n        * @type {string|undefined}\n        */ /**\n        * If internationalization is required, the key to a language string.\n        *\n        * @name Highcharts.ExportingMenuObject#textKey\n        * @type {string|undefined}\n        */ /**\n        * The click handler for the menu item.\n        *\n        * @name Highcharts.ExportingMenuObject#onclick\n        * @type {Highcharts.EventCallbackFunction<Highcharts.Chart>|undefined}\n        */ /**\n        * Indicates a separator line instead of an item.\n        *\n        * @name Highcharts.ExportingMenuObject#separator\n        * @type {boolean|undefined}\n        */\n        /**\n         * Possible MIME types for exporting.\n         *\n         * @typedef {\"image/png\"|\"image/jpeg\"|\"application/pdf\"|\"image/svg+xml\"} Highcharts.ExportingMimeTypeValue\n         */\n        (''); // Keeps doclets above in transpiled file\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Fires after a chart is printed through the context menu item or the\n         * `Chart.print` method.\n         *\n         * @sample highcharts/chart/events-beforeprint-afterprint/\n         *         Rescale the chart to print\n         *\n         * @type      {Highcharts.ExportingAfterPrintCallbackFunction}\n         * @since     4.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/exporting\n         * @apioption chart.events.afterPrint\n         */\n        /**\n         * Fires before a chart is printed through the context menu item or\n         * the `Chart.print` method.\n         *\n         * @sample highcharts/chart/events-beforeprint-afterprint/\n         *         Rescale the chart to print\n         *\n         * @type      {Highcharts.ExportingBeforePrintCallbackFunction}\n         * @since     4.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/exporting\n         * @apioption chart.events.beforePrint\n         */\n        (''); // Keeps doclets above in transpiled file\n\n        return Exporting;\n    });\n    _registerModule(_modules, 'masters/modules/exporting.src.js', [_modules['Core/Globals.js'], _modules['Extensions/Exporting/Exporting.js'], _modules['Core/HttpUtilities.js']], function (Highcharts, Exporting, HttpUtilities) {\n\n        var G = Highcharts;\n        G.HttpUtilities = G.HttpUtilities || HttpUtilities;\n        G.ajax = G.HttpUtilities.ajax;\n        G.getJSON = G.HttpUtilities.getJSON;\n        G.post = G.HttpUtilities.post;\n        Exporting.compose(G.Chart, G.Renderer);\n\n        return Highcharts;\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","ChartNavigationComposition","Additions","compose","chart","navigation","updates","prototype","addUpdate","updateFn","push","update","options","redraw","_this","forEach","call","H","exporting","allowTableSorting","type","url","pdfFont","normal","bold","bolditalic","italic","printMaxWidth","scale","buttons","contextButton","className","menuClassName","symbol","titleKey","menuItems","menuItemDefinitions","viewFullscreen","textKey","onclick","fullscreen","toggle","printChart","print","separator","downloadPNG","exportChart","downloadJPEG","downloadPDF","downloadSVG","lang","exitFullscreen","contextButtonTitle","buttonOptions","symbolSize","symbolX","symbolY","align","buttonSpacing","height","verticalAlign","width","symbolFill","symbolStroke","symbolStrokeWidth","theme","padding","menuStyle","border","borderRadius","background","menuItemStyle","color","fontSize","isTouchDevice","transition","menuItemHoverStyle","ExportingSymbols","modifiedClasses","menu","x","y","menuball","h","concat","circle","SVGRendererClass","indexOf","symbols","bind","AST","U","composed","addEvent","fireEvent","pushUnique","onChartBeforeRender","Fullscreen","isOpen","container","renderTo","browserProps","requestFullscreen","fullscreenChange","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","ChartClass","close","optionsChart","ownerDocument","Document","unbindFullscreenEvent","setSize","origWidth","origHeight","origWidthOption","origHeightOption","setButtonText","open","chartWidth","chartHeight","unbindChange_1","unbindDestroy_1","promise","alert","exportDivElements","exportingOptions","exportDivElement","setElementHTML","text","G","__assign","Object","assign","t","s","i","n","arguments","length","p","win","discardElement","objectEach","HttpUtilities","ajax","settings","headers","json","xml","octet","r","XMLHttpRequest","handleError","xhr","err","error","toUpperCase","setRequestHeader","dataType","val","key","responseType","onreadystatechange","res","readyState","status","responseText","JSON","parse","e","Error","success","data","stringify","send","getJSON","post","fetchOptions","formData","FormData","name","append","filename","fetch","method","body","then","ok","link","document","createElement","href","download","click","Chart","D","ExportingDefaults","HU","Exporting","defaultOptions","doc","SVG_NS","css","extend","find","isObject","merge","pick","removeEvent","uniqueKey","printingChart","inlineDenylist","inlineToAttributes","inlineAllowlist","unstyledElements","addButton","callback","renderer","btnOptions","btnCount","exportSVGElements","enabled","attr","styledMode","fill","stroke","stopPropagation","contextMenu","button","translateX","translateY","setState","paddingLeft","useHTML","addClass","title","_titleKey","zIndex","add","exportingGroup","buttonOffset","afterPrint","printReverseInfo","_a","childNodes","origDisplay","resetParams","moveContainers","node","nodeType","style","display","isPrinting","beforePrint","pointer","reset","chartCallback","composition","renderExporting","destroyExport","items","innerMenu","navOptions","cacheName","menuPadding","Math","max","exportContextMenu","position","pointerEvents","scrollablePlotArea","fixedDiv","listStyle","margin","MozBoxShadow","WebkitBoxShadow","boxShadow","hideMenu","openMenu","overflow","clearTimeout","hideTimer","exportEvents","setTimeout","inClass","target","item","element","isDataTableVisible","onmouseover","onmouseout","cursor","exportMenuWidth","offsetWidth","exportMenuHeight","offsetHeight","right","left","alignOptions","bottom","top","elem","ontouchstart","destroy","unbind","chartOptions","svg","getSVGForExport","replace","getFilename","getChartHTML","inlineStyles","innerHTML","userOptions","toLowerCase","substr","getSVG","seriesOptions","plotOptions","time","sandbox","cssWidth","cssHeight","sourceWidth","test","parseInt","isGantt","sourceHeight","animation","forExport","series","serie","enableMouseTracking","showCheckbox","visible","isInternal","colls","axes","axis","internalKey","coll","colorAxis","chartCopy","constructor","collOptions","axisCopy","copy","extremes","getExtremes","userMin","userMax","min","setExtremes","sanitizeSVG","chartExportingOptions","dummySVG","allowlist","defaultStyles","iframe","visibility","appendChild","iframeDoc","contentWindow","createElementNS","recurse","styles","parentStyles","dummy","denylisted","allowlisted","filteredStyles","nodeName","getComputedStyle","parentNode","getElementsByTagName","namespaceURI","defaults","removeChild","isFirefox","isMS","isSafari","filterStyles","prop","denylist","setAttribute","a","b","children","querySelector","moveTo","scrollingContainer","div","onChartInit","isDirtyExporting","focus","isDirty","g","split","html","allowHTML","chartProto","callbacks","matchMedia","addListener","mqlEvent","matches","Renderer"],"mappings":"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"}