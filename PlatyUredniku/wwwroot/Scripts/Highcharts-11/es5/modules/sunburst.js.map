{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.1 (2024-04-04)\n *\n * (c) 2016-2024 Highsoft AS\n * Authors: Jon Arild Nygard\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/sunburst', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/Breadcrumbs/BreadcrumbsDefaults.js', [], function () {\n        /* *\n         *\n         *  Highcharts Breadcrumbs module\n         *\n         *  Authors: Grzegorz Blachlinski, Karol Kolodziej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * @optionparent lang\n         */\n        var lang = {\n            /**\n             * @since   10.0.0\n             * @product highcharts\n             *\n             * @private\n             */\n            mainBreadcrumb: 'Main'\n        };\n        /**\n         * Options for breadcrumbs. Breadcrumbs general options are defined in\n         * `navigation.breadcrumbs`. Specific options for drilldown are set in\n         * `drilldown.breadcrumbs` and for tree-like series traversing, in\n         * `plotOptions[series].breadcrumbs`.\n         *\n         * @since        10.0.0\n         * @product      highcharts\n         * @optionparent navigation.breadcrumbs\n         */\n        var options = {\n            /**\n             * A collection of attributes for the buttons. The object takes SVG\n             * attributes like `fill`, `stroke`, `stroke-width`, as well as `style`,\n             * a collection of CSS properties for the text.\n             *\n             * The object can also be extended with states, so you can set\n             * presentational options for `hover`, `select` or `disabled` button\n             * states.\n             *\n             * @sample {highcharts} highcharts/breadcrumbs/single-button\n             *         Themed, single button\n             *\n             * @type    {Highcharts.SVGAttributes}\n             * @since   10.0.0\n             * @product highcharts\n             */\n            buttonTheme: {\n                /** @ignore */\n                fill: 'none',\n                /** @ignore */\n                height: 18,\n                /** @ignore */\n                padding: 2,\n                /** @ignore */\n                'stroke-width': 0,\n                /** @ignore */\n                zIndex: 7,\n                /** @ignore */\n                states: {\n                    select: {\n                        fill: 'none'\n                    }\n                },\n                style: {\n                    color: \"#334eff\" /* Palette.highlightColor80 */\n                }\n            },\n            /**\n             * The default padding for each button and separator in each direction.\n             *\n             * @type  {number}\n             * @since 10.0.0\n             */\n            buttonSpacing: 5,\n            /**\n             * Fires when clicking on the breadcrumbs button. Two arguments are\n             * passed to the function. First breadcrumb button as an SVG element.\n             * Second is the breadcrumbs class, containing reference to the chart,\n             * series etc.\n             *\n             * ```js\n             * click: function(button, breadcrumbs) {\n             *   console.log(button);\n             * }\n             * ```\n             *\n             * Return false to stop default buttons click action.\n             *\n             * @type      {Highcharts.BreadcrumbsClickCallbackFunction}\n             * @since     10.0.0\n             * @apioption navigation.breadcrumbs.events.click\n             */\n            /**\n             * When the breadcrumbs are floating, the plot area will not move to\n             * make space for it. By default, the chart will not make space for the\n             * buttons. This property won't work when positioned in the middle.\n             *\n             * @sample highcharts/breadcrumbs/single-button\n             *         Floating button\n             *\n             * @type  {boolean}\n             * @since 10.0.0\n             */\n            floating: false,\n            /**\n             * A format string for the breadcrumbs button. Variables are enclosed by\n             * curly brackets. Available values are passed in the declared point\n             * options.\n             *\n             * @type      {string|undefined}\n             * @since 10.0.0\n             * @default   undefined\n             * @sample {highcharts} highcharts/breadcrumbs/format Display custom\n             *          values in breadcrumb button.\n             */\n            format: void 0,\n            /**\n             * Callback function to format the breadcrumb text from scratch.\n             *\n             * @type      {Highcharts.BreadcrumbsFormatterCallbackFunction}\n             * @since     10.0.0\n             * @default   undefined\n             * @apioption navigation.breadcrumbs.formatter\n             */\n            /**\n             * What box to align the button to. Can be either `plotBox` or\n             * `spacingBox`.\n             *\n             * @type    {Highcharts.ButtonRelativeToValue}\n             * @default plotBox\n             * @since   10.0.0\n             * @product highcharts highmaps\n             */\n            relativeTo: 'plotBox',\n            /**\n             * Whether to reverse the order of buttons. This is common in Arabic\n             * and Hebrew.\n             *\n             * @sample {highcharts} highcharts/breadcrumbs/rtl\n             *         Breadcrumbs in RTL\n             *\n             * @type  {boolean}\n             * @since 10.2.0\n             */\n            rtl: false,\n            /**\n             * Positioning for the button row. The breadcrumbs buttons will be\n             * aligned properly for the default chart layout (title,  subtitle,\n             * legend, range selector) for the custom chart layout set the position\n             * properties.\n             *\n             * @sample  {highcharts} highcharts/breadcrumbs/single-button\n             *          Single, right aligned button\n             *\n             * @type    {Highcharts.BreadcrumbsAlignOptions}\n             * @since   10.0.0\n             * @product highcharts highmaps\n             */\n            position: {\n                /**\n                 * Horizontal alignment of the breadcrumbs buttons.\n                 *\n                 * @type {Highcharts.AlignValue}\n                 */\n                align: 'left',\n                /**\n                 * Vertical alignment of the breadcrumbs buttons.\n                 *\n                 * @type {Highcharts.VerticalAlignValue}\n                 */\n                verticalAlign: 'top',\n                /**\n                 * The X offset of the breadcrumbs button group.\n                 *\n                 * @type {number}\n                 */\n                x: 0,\n                /**\n                 * The Y offset of the breadcrumbs button group. When `undefined`,\n                 * and `floating` is `false`, the `y` position is adapted so that\n                 * the breadcrumbs are rendered outside the target area.\n                 *\n                 * @type {number|undefined}\n                 */\n                y: void 0\n            },\n            /**\n             * Options object for Breadcrumbs separator.\n             *\n             * @since 10.0.0\n             */\n            separator: {\n                /**\n                 * @type    {string}\n                 * @since   10.0.0\n                 * @product highcharts\n                 */\n                text: '/',\n                /**\n                 * CSS styles for the breadcrumbs separator.\n                 *\n                 * In styled mode, the breadcrumbs separators are styled by the\n                 * `.highcharts-separator` rule with its different states.\n                 *  @type  {Highcharts.CSSObject}\n                 *  @since 10.0.0\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    fontSize: '0.8em'\n                }\n            },\n            /**\n             * Show full path or only a single button.\n             *\n             * @sample {highcharts} highcharts/breadcrumbs/single-button\n             *         Single, styled button\n             *\n             * @type  {boolean}\n             * @since 10.0.0\n             */\n            showFullPath: true,\n            /**\n             * CSS styles for all breadcrumbs.\n             *\n             * In styled mode, the breadcrumbs buttons are styled by the\n             * `.highcharts-breadcrumbs-buttons .highcharts-button` rule with its\n             * different states.\n             *\n             * @type  {Highcharts.SVGAttributes}\n             * @since 10.0.0\n             */\n            style: {},\n            /**\n             * Whether to use HTML to render the breadcrumbs items texts.\n             *\n             * @type  {boolean}\n             * @since 10.0.0\n             */\n            useHTML: false,\n            /**\n             * The z index of the breadcrumbs group.\n             *\n             * @type  {number}\n             * @since 10.0.0\n             */\n            zIndex: 7\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var BreadcrumbsDefaults = {\n            lang: lang,\n            options: options\n        };\n\n        return BreadcrumbsDefaults;\n    });\n    _registerModule(_modules, 'Extensions/Breadcrumbs/Breadcrumbs.js', [_modules['Extensions/Breadcrumbs/BreadcrumbsDefaults.js'], _modules['Core/Templating.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (BreadcrumbsDefaults, F, H, U) {\n        /* *\n         *\n         *  Highcharts Breadcrumbs module\n         *\n         *  Authors: Grzegorz Blachlinski, Karol Kolodziej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var format = F.format;\n        var composed = H.composed;\n        var addEvent = U.addEvent, defined = U.defined, extend = U.extend, fireEvent = U.fireEvent, isString = U.isString, merge = U.merge, objectEach = U.objectEach, pick = U.pick, pushUnique = U.pushUnique;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Shift the drillUpButton to make the space for resetZoomButton, #8095.\n         * @private\n         */\n        function onChartAfterShowResetZoom() {\n            var chart = this;\n            if (chart.breadcrumbs) {\n                var bbox = chart.resetZoomButton &&\n                    chart.resetZoomButton.getBBox(), breadcrumbsOptions = chart.breadcrumbs.options;\n                if (bbox &&\n                    breadcrumbsOptions.position.align === 'right' &&\n                    breadcrumbsOptions.relativeTo === 'plotBox') {\n                    chart.breadcrumbs.alignBreadcrumbsGroup(-bbox.width - breadcrumbsOptions.buttonSpacing);\n                }\n            }\n        }\n        /**\n         * Remove resize/afterSetExtremes at chart destroy.\n         * @private\n         */\n        function onChartDestroy() {\n            if (this.breadcrumbs) {\n                this.breadcrumbs.destroy();\n                this.breadcrumbs = void 0;\n            }\n        }\n        /**\n         * Logic for making space for the buttons above the plot area\n         * @private\n         */\n        function onChartGetMargins() {\n            var breadcrumbs = this.breadcrumbs;\n            if (breadcrumbs &&\n                !breadcrumbs.options.floating &&\n                breadcrumbs.level) {\n                var breadcrumbsOptions = breadcrumbs.options, buttonTheme = breadcrumbsOptions.buttonTheme, breadcrumbsHeight = ((buttonTheme.height || 0) +\n                    2 * (buttonTheme.padding || 0) +\n                    breadcrumbsOptions.buttonSpacing), verticalAlign = breadcrumbsOptions.position.verticalAlign;\n                if (verticalAlign === 'bottom') {\n                    this.marginBottom = (this.marginBottom || 0) + breadcrumbsHeight;\n                    breadcrumbs.yOffset = breadcrumbsHeight;\n                }\n                else if (verticalAlign !== 'middle') {\n                    this.plotTop += breadcrumbsHeight;\n                    breadcrumbs.yOffset = -breadcrumbsHeight;\n                }\n                else {\n                    breadcrumbs.yOffset = void 0;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartRedraw() {\n            this.breadcrumbs && this.breadcrumbs.redraw();\n        }\n        /**\n         * After zooming out, shift the drillUpButton to the previous position, #8095.\n         * @private\n         */\n        function onChartSelection(event) {\n            if (event.resetSelection === true &&\n                this.breadcrumbs) {\n                this.breadcrumbs.alignBreadcrumbsGroup();\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Breadcrumbs class\n         *\n         * @private\n         * @class\n         * @name Highcharts.Breadcrumbs\n         *\n         * @param {Highcharts.Chart} chart\n         *        Chart object\n         * @param {Highcharts.Options} userOptions\n         *        User options\n         */\n        var Breadcrumbs = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            function Breadcrumbs(chart, userOptions) {\n                this.elementList = {};\n                this.isDirty = true;\n                this.level = 0;\n                this.list = [];\n                var chartOptions = merge(chart.options.drilldown &&\n                    chart.options.drilldown.drillUpButton, Breadcrumbs.defaultOptions, chart.options.navigation && chart.options.navigation.breadcrumbs, userOptions);\n                this.chart = chart;\n                this.options = chartOptions || {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            Breadcrumbs.compose = function (ChartClass, highchartsDefaultOptions) {\n                if (pushUnique(composed, 'Breadcrumbs')) {\n                    addEvent(ChartClass, 'destroy', onChartDestroy);\n                    addEvent(ChartClass, 'afterShowResetZoom', onChartAfterShowResetZoom);\n                    addEvent(ChartClass, 'getMargins', onChartGetMargins);\n                    addEvent(ChartClass, 'redraw', onChartRedraw);\n                    addEvent(ChartClass, 'selection', onChartSelection);\n                    // Add language support.\n                    extend(highchartsDefaultOptions.lang, BreadcrumbsDefaults.lang);\n                }\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Update Breadcrumbs properties, like level and list.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#updateProperties\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.updateProperties = function (list) {\n                this.setList(list);\n                this.setLevel();\n                this.isDirty = true;\n            };\n            /**\n             * Set breadcrumbs list.\n             * @function Highcharts.Breadcrumbs#setList\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.BreadcrumbsOptions} list\n             *        Breadcrumbs list.\n             */\n            Breadcrumbs.prototype.setList = function (list) {\n                this.list = list;\n            };\n            /**\n             * Calculate level on which chart currently is.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#setLevel\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.setLevel = function () {\n                this.level = this.list.length && this.list.length - 1;\n            };\n            /**\n             * Get Breadcrumbs level\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#getLevel\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.getLevel = function () {\n                return this.level;\n            };\n            /**\n             * Default button text formatter.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#getButtonText\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.Breadcrumbs} breadcrumb\n             *        Breadcrumb.\n             * @return {string}\n             *         Formatted text.\n             */\n            Breadcrumbs.prototype.getButtonText = function (breadcrumb) {\n                var breadcrumbs = this, chart = breadcrumbs.chart, breadcrumbsOptions = breadcrumbs.options, lang = chart.options.lang, textFormat = pick(breadcrumbsOptions.format, breadcrumbsOptions.showFullPath ?\n                    '{level.name}' : '← {level.name}'), defaultText = lang && pick(lang.drillUpText, lang.mainBreadcrumb);\n                var returnText = breadcrumbsOptions.formatter &&\n                    breadcrumbsOptions.formatter(breadcrumb) ||\n                    format(textFormat, { level: breadcrumb.levelOptions }, chart) || '';\n                if (((isString(returnText) &&\n                    !returnText.length) ||\n                    returnText === '← ') &&\n                    defined(defaultText)) {\n                    returnText = !breadcrumbsOptions.showFullPath ?\n                        '← ' + defaultText :\n                        defaultText;\n                }\n                return returnText;\n            };\n            /**\n             * Redraw.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#redraw\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.redraw = function () {\n                if (this.isDirty) {\n                    this.render();\n                }\n                if (this.group) {\n                    this.group.align();\n                }\n                this.isDirty = false;\n            };\n            /**\n             * Create a group, then draw breadcrumbs together with the separators.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#render\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.render = function () {\n                var breadcrumbs = this, chart = breadcrumbs.chart, breadcrumbsOptions = breadcrumbs.options;\n                // A main group for the breadcrumbs.\n                if (!breadcrumbs.group && breadcrumbsOptions) {\n                    breadcrumbs.group = chart.renderer\n                        .g('breadcrumbs-group')\n                        .addClass('highcharts-no-tooltip highcharts-breadcrumbs')\n                        .attr({\n                        zIndex: breadcrumbsOptions.zIndex\n                    })\n                        .add();\n                }\n                // Draw breadcrumbs.\n                if (breadcrumbsOptions.showFullPath) {\n                    this.renderFullPathButtons();\n                }\n                else {\n                    this.renderSingleButton();\n                }\n                this.alignBreadcrumbsGroup();\n            };\n            /**\n             * Draw breadcrumbs together with the separators.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderFullPathButtons\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.renderFullPathButtons = function () {\n                // Make sure that only one type of button is visible.\n                this.destroySingleButton();\n                this.resetElementListState();\n                this.updateListElements();\n                this.destroyListElements();\n            };\n            /**\n             * Render Single button - when showFullPath is not used. The button is\n             * similar to the old drillUpButton\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderSingleButton\n             * @param {Highcharts.Breadcrumbs} this Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.renderSingleButton = function () {\n                var breadcrumbs = this, chart = breadcrumbs.chart, list = breadcrumbs.list, breadcrumbsOptions = breadcrumbs.options, buttonSpacing = breadcrumbsOptions.buttonSpacing;\n                // Make sure that only one type of button is visible.\n                this.destroyListElements();\n                // Draw breadcrumbs. Initial position for calculating the breadcrumbs\n                // group.\n                var posX = breadcrumbs.group ?\n                    breadcrumbs.group.getBBox().width :\n                    buttonSpacing, posY = buttonSpacing;\n                var previousBreadcrumb = list[list.length - 2];\n                if (!chart.drillUpButton && (this.level > 0)) {\n                    chart.drillUpButton = breadcrumbs.renderButton(previousBreadcrumb, posX, posY);\n                }\n                else if (chart.drillUpButton) {\n                    if (this.level > 0) {\n                        // Update button.\n                        this.updateSingleButton();\n                    }\n                    else {\n                        this.destroySingleButton();\n                    }\n                }\n            };\n            /**\n             * Update group position based on align and it's width.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderSingleButton\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.alignBreadcrumbsGroup = function (xOffset) {\n                var breadcrumbs = this;\n                if (breadcrumbs.group) {\n                    var breadcrumbsOptions = breadcrumbs.options, buttonTheme = breadcrumbsOptions.buttonTheme, positionOptions = breadcrumbsOptions.position, alignTo = (breadcrumbsOptions.relativeTo === 'chart' ||\n                        breadcrumbsOptions.relativeTo === 'spacingBox' ?\n                        void 0 :\n                        'plotBox'), bBox = breadcrumbs.group.getBBox(), additionalSpace = 2 * (buttonTheme.padding || 0) +\n                        breadcrumbsOptions.buttonSpacing;\n                    // Store positionOptions\n                    positionOptions.width = bBox.width + additionalSpace;\n                    positionOptions.height = bBox.height + additionalSpace;\n                    var newPositions = merge(positionOptions);\n                    // Add x offset if specified.\n                    if (xOffset) {\n                        newPositions.x += xOffset;\n                    }\n                    if (breadcrumbs.options.rtl) {\n                        newPositions.x += positionOptions.width;\n                    }\n                    newPositions.y = pick(newPositions.y, this.yOffset, 0);\n                    breadcrumbs.group.align(newPositions, true, alignTo);\n                }\n            };\n            /**\n             * Render a button.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderButton\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.Breadcrumbs} breadcrumb\n             *        Current breadcrumb\n             * @param {Highcharts.Breadcrumbs} posX\n             *        Initial horizontal position\n             * @param {Highcharts.Breadcrumbs} posY\n             *        Initial vertical position\n             * @return {SVGElement|void}\n             *        Returns the SVG button\n             */\n            Breadcrumbs.prototype.renderButton = function (breadcrumb, posX, posY) {\n                var breadcrumbs = this, chart = this.chart, breadcrumbsOptions = breadcrumbs.options, buttonTheme = merge(breadcrumbsOptions.buttonTheme);\n                var button = chart.renderer\n                    .button(breadcrumbs.getButtonText(breadcrumb), posX, posY, function (e) {\n                    // Extract events from button object and call\n                    var buttonEvents = breadcrumbsOptions.events &&\n                        breadcrumbsOptions.events.click;\n                    var callDefaultEvent;\n                    if (buttonEvents) {\n                        callDefaultEvent = buttonEvents.call(breadcrumbs, e, breadcrumb);\n                    }\n                    // (difference in behaviour of showFullPath and drillUp)\n                    if (callDefaultEvent !== false) {\n                        // For single button we are not going to the button\n                        // level, but the one level up\n                        if (!breadcrumbsOptions.showFullPath) {\n                            e.newLevel = breadcrumbs.level - 1;\n                        }\n                        else {\n                            e.newLevel = breadcrumb.level;\n                        }\n                        fireEvent(breadcrumbs, 'up', e);\n                    }\n                }, buttonTheme)\n                    .addClass('highcharts-breadcrumbs-button')\n                    .add(breadcrumbs.group);\n                if (!chart.styledMode) {\n                    button.attr(breadcrumbsOptions.style);\n                }\n                return button;\n            };\n            /**\n             * Render a separator.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderSeparator\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.Breadcrumbs} posX\n             *        Initial horizontal position\n             * @param {Highcharts.Breadcrumbs} posY\n             *        Initial vertical position\n             * @return {Highcharts.SVGElement}\n             *        Returns the SVG button\n             */\n            Breadcrumbs.prototype.renderSeparator = function (posX, posY) {\n                var breadcrumbs = this, chart = this.chart, breadcrumbsOptions = breadcrumbs.options, separatorOptions = breadcrumbsOptions.separator;\n                var separator = chart.renderer\n                    .label(separatorOptions.text, posX, posY, void 0, void 0, void 0, false)\n                    .addClass('highcharts-breadcrumbs-separator')\n                    .add(breadcrumbs.group);\n                if (!chart.styledMode) {\n                    separator.css(separatorOptions.style);\n                }\n                return separator;\n            };\n            /**\n             * Update.\n             * @function Highcharts.Breadcrumbs#update\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.BreadcrumbsOptions} options\n             *        Breadcrumbs class.\n             * @param {boolean} redraw\n             *        Redraw flag\n             */\n            Breadcrumbs.prototype.update = function (options) {\n                merge(true, this.options, options);\n                this.destroy();\n                this.isDirty = true;\n            };\n            /**\n             * Update button text when the showFullPath set to false.\n             * @function Highcharts.Breadcrumbs#updateSingleButton\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.updateSingleButton = function () {\n                var chart = this.chart, currentBreadcrumb = this.list[this.level - 1];\n                if (chart.drillUpButton) {\n                    chart.drillUpButton.attr({\n                        text: this.getButtonText(currentBreadcrumb)\n                    });\n                }\n            };\n            /**\n             * Destroy the chosen breadcrumbs group\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#destroy\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.destroy = function () {\n                this.destroySingleButton();\n                // Destroy elements one by one. It's necessary because\n                // g().destroy() does not remove added HTML\n                this.destroyListElements(true);\n                // Then, destroy the group itself.\n                if (this.group) {\n                    this.group.destroy();\n                }\n                this.group = void 0;\n            };\n            /**\n             * Destroy the elements' buttons and separators.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#destroyListElements\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.destroyListElements = function (force) {\n                var elementList = this.elementList;\n                objectEach(elementList, function (element, level) {\n                    if (force ||\n                        !elementList[level].updated) {\n                        element = elementList[level];\n                        element.button && element.button.destroy();\n                        element.separator && element.separator.destroy();\n                        delete element.button;\n                        delete element.separator;\n                        delete elementList[level];\n                    }\n                });\n                if (force) {\n                    this.elementList = {};\n                }\n            };\n            /**\n             * Destroy the single button if exists.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#destroySingleButton\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.destroySingleButton = function () {\n                if (this.chart.drillUpButton) {\n                    this.chart.drillUpButton.destroy();\n                    this.chart.drillUpButton = void 0;\n                }\n            };\n            /**\n             * Reset state for all buttons in elementList.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#resetElementListState\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.resetElementListState = function () {\n                objectEach(this.elementList, function (element) {\n                    element.updated = false;\n                });\n            };\n            /**\n             * Update rendered elements inside the elementList.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#updateListElements\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.updateListElements = function () {\n                var breadcrumbs = this, elementList = breadcrumbs.elementList, buttonSpacing = breadcrumbs.options.buttonSpacing, posY = buttonSpacing, list = breadcrumbs.list, rtl = breadcrumbs.options.rtl, rtlFactor = rtl ? -1 : 1, updateXPosition = function (element, spacing) {\n                    return rtlFactor * element.getBBox().width +\n                        rtlFactor * spacing;\n                }, adjustToRTL = function (element, posX, posY) {\n                    element.translate(posX - element.getBBox().width, posY);\n                };\n                // Initial position for calculating the breadcrumbs group.\n                var posX = breadcrumbs.group ?\n                    updateXPosition(breadcrumbs.group, buttonSpacing) :\n                    buttonSpacing, currentBreadcrumb, breadcrumb;\n                for (var i = 0, iEnd = list.length; i < iEnd; ++i) {\n                    var isLast = i === iEnd - 1;\n                    var button = void 0, separator = void 0;\n                    breadcrumb = list[i];\n                    if (elementList[breadcrumb.level]) {\n                        currentBreadcrumb = elementList[breadcrumb.level];\n                        button = currentBreadcrumb.button;\n                        // Render a separator if it was not created before.\n                        if (!currentBreadcrumb.separator &&\n                            !isLast) {\n                            // Add spacing for the next separator\n                            posX += rtlFactor * buttonSpacing;\n                            currentBreadcrumb.separator =\n                                breadcrumbs.renderSeparator(posX, posY);\n                            if (rtl) {\n                                adjustToRTL(currentBreadcrumb.separator, posX, posY);\n                            }\n                            posX += updateXPosition(currentBreadcrumb.separator, buttonSpacing);\n                        }\n                        else if (currentBreadcrumb.separator &&\n                            isLast) {\n                            currentBreadcrumb.separator.destroy();\n                            delete currentBreadcrumb.separator;\n                        }\n                        elementList[breadcrumb.level].updated = true;\n                    }\n                    else {\n                        // Render a button.\n                        button = breadcrumbs.renderButton(breadcrumb, posX, posY);\n                        if (rtl) {\n                            adjustToRTL(button, posX, posY);\n                        }\n                        posX += updateXPosition(button, buttonSpacing);\n                        // Render a separator.\n                        if (!isLast) {\n                            separator = breadcrumbs.renderSeparator(posX, posY);\n                            if (rtl) {\n                                adjustToRTL(separator, posX, posY);\n                            }\n                            posX += updateXPosition(separator, buttonSpacing);\n                        }\n                        elementList[breadcrumb.level] = {\n                            button: button,\n                            separator: separator,\n                            updated: true\n                        };\n                    }\n                    if (button) {\n                        button.setState(isLast ? 2 : 0);\n                    }\n                }\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            Breadcrumbs.defaultOptions = BreadcrumbsDefaults.options;\n            return Breadcrumbs;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Callback function to react on button clicks.\n         *\n         * @callback Highcharts.BreadcrumbsClickCallbackFunction\n         *\n         * @param {Highcharts.Event} event\n         * Event.\n         *\n         * @param {Highcharts.BreadcrumbOptions} options\n         * Breadcrumb options.\n         *\n         * @param {global.Event} e\n         * Event arguments.\n         */\n        /**\n         * Callback function to format the breadcrumb text from scratch.\n         *\n         * @callback Highcharts.BreadcrumbsFormatterCallbackFunction\n         *\n         * @param {Highcharts.Event} event\n         * Event.\n         *\n         * @param {Highcharts.BreadcrumbOptions} options\n         * Breadcrumb options.\n         *\n         * @return {string}\n         * Formatted text or false\n         */\n        /**\n         * Options for the one breadcrumb.\n         *\n         * @interface Highcharts.BreadcrumbOptions\n         */\n        /**\n         * Level connected to a specific breadcrumb.\n         * @name Highcharts.BreadcrumbOptions#level\n         * @type {number}\n         */\n        /**\n         * Options for series or point connected to a specific breadcrumb.\n         * @name Highcharts.BreadcrumbOptions#levelOptions\n         * @type {SeriesOptions|PointOptionsObject}\n         */\n        /**\n         * Options for aligning breadcrumbs group.\n         *\n         * @interface Highcharts.BreadcrumbsAlignOptions\n         */\n        /**\n         * Align of a Breadcrumb group.\n         * @default right\n         * @name Highcharts.BreadcrumbsAlignOptions#align\n         * @type {AlignValue}\n         */\n        /**\n         * Vertical align of a Breadcrumb group.\n         * @default top\n         * @name Highcharts.BreadcrumbsAlignOptions#verticalAlign\n         * @type {VerticalAlignValue}\n         */\n        /**\n         * X offset of a Breadcrumbs group.\n         * @name Highcharts.BreadcrumbsAlignOptions#x\n         * @type {number}\n         */\n        /**\n         * Y offset of a Breadcrumbs group.\n         * @name Highcharts.BreadcrumbsAlignOptions#y\n         * @type {number}\n         */\n        /**\n         * Options for all breadcrumbs.\n         *\n         * @interface Highcharts.BreadcrumbsOptions\n         */\n        /**\n         * Button theme.\n         * @name Highcharts.BreadcrumbsOptions#buttonTheme\n         * @type { SVGAttributes | undefined }\n         */\n        (''); // Keeps doclets above in JS file\n\n        return Breadcrumbs;\n    });\n    _registerModule(_modules, 'Series/ColorMapComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var columnProto = SeriesRegistry.seriesTypes.column.prototype;\n        var addEvent = U.addEvent, defined = U.defined;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ColorMapComposition;\n        (function (ColorMapComposition) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            ColorMapComposition.pointMembers = {\n                dataLabelOnNull: true,\n                moveToTopOnHover: true,\n                isValid: pointIsValid\n            };\n            ColorMapComposition.seriesMembers = {\n                colorKey: 'value',\n                axisTypes: ['xAxis', 'yAxis', 'colorAxis'],\n                parallelArrays: ['x', 'y', 'value'],\n                pointArrayMap: ['value'],\n                trackerGroups: ['group', 'markerGroup', 'dataLabelsGroup'],\n                colorAttribs: seriesColorAttribs,\n                pointAttribs: columnProto.pointAttribs\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function compose(SeriesClass) {\n                var PointClass = SeriesClass.prototype.pointClass;\n                addEvent(PointClass, 'afterSetState', onPointAfterSetState);\n                return SeriesClass;\n            }\n            ColorMapComposition.compose = compose;\n            /**\n             * Move points to the top of the z-index order when hovered.\n             * @private\n             */\n            function onPointAfterSetState(e) {\n                var point = this;\n                if (point.moveToTopOnHover && point.graphic) {\n                    point.graphic.attr({\n                        zIndex: e && e.state === 'hover' ? 1 : 0\n                    });\n                }\n            }\n            /**\n             * Color points have a value option that determines whether or not it is\n             * a null point\n             * @private\n             */\n            function pointIsValid() {\n                return (this.value !== null &&\n                    this.value !== Infinity &&\n                    this.value !== -Infinity &&\n                    // Undefined is allowed, but NaN is not (#17279)\n                    (this.value === void 0 || !isNaN(this.value)));\n            }\n            /**\n             * Get the color attributes to apply on the graphic\n             * @private\n             * @function Highcharts.colorMapSeriesMixin.colorAttribs\n             * @param {Highcharts.Point} point\n             * @return {Highcharts.SVGAttributes}\n             *         The SVG attributes\n             */\n            function seriesColorAttribs(point) {\n                var ret = {};\n                if (defined(point.color) &&\n                    (!point.state || point.state === 'normal') // #15746\n                ) {\n                    ret[this.colorProp || 'fill'] = point.color;\n                }\n                return ret;\n            }\n        })(ColorMapComposition || (ColorMapComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColorMapComposition;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapAlgorithmGroup.js', [], function () {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var TreemapAlgorithmGroup = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            function TreemapAlgorithmGroup(h, w, d, p) {\n                this.height = h;\n                this.width = w;\n                this.plot = p;\n                this.direction = d;\n                this.startDirection = d;\n                this.total = 0;\n                this.nW = 0;\n                this.lW = 0;\n                this.nH = 0;\n                this.lH = 0;\n                this.elArr = [];\n                this.lP = {\n                    total: 0,\n                    lH: 0,\n                    nH: 0,\n                    lW: 0,\n                    nW: 0,\n                    nR: 0,\n                    lR: 0,\n                    aspectRatio: function (w, h) {\n                        return Math.max((w / h), (h / w));\n                    }\n                };\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            TreemapAlgorithmGroup.prototype.addElement = function (el) {\n                this.lP.total = this.elArr[this.elArr.length - 1];\n                this.total = this.total + el;\n                if (this.direction === 0) {\n                    // Calculate last point old aspect ratio\n                    this.lW = this.nW;\n                    this.lP.lH = this.lP.total / this.lW;\n                    this.lP.lR = this.lP.aspectRatio(this.lW, this.lP.lH);\n                    // Calculate last point new aspect ratio\n                    this.nW = this.total / this.height;\n                    this.lP.nH = this.lP.total / this.nW;\n                    this.lP.nR = this.lP.aspectRatio(this.nW, this.lP.nH);\n                }\n                else {\n                    // Calculate last point old aspect ratio\n                    this.lH = this.nH;\n                    this.lP.lW = this.lP.total / this.lH;\n                    this.lP.lR = this.lP.aspectRatio(this.lP.lW, this.lH);\n                    // Calculate last point new aspect ratio\n                    this.nH = this.total / this.width;\n                    this.lP.nW = this.lP.total / this.nH;\n                    this.lP.nR = this.lP.aspectRatio(this.lP.nW, this.nH);\n                }\n                this.elArr.push(el);\n            };\n            TreemapAlgorithmGroup.prototype.reset = function () {\n                this.nW = 0;\n                this.lW = 0;\n                this.elArr = [];\n                this.total = 0;\n            };\n            return TreemapAlgorithmGroup;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapAlgorithmGroup;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapNode.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var TreemapNode = /** @class */ (function () {\n            function TreemapNode() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.childrenTotal = 0;\n                this.visible = false;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            TreemapNode.prototype.init = function (id, i, children, height, level, series, parent) {\n                this.id = id;\n                this.i = i;\n                this.children = children;\n                this.height = height;\n                this.level = level;\n                this.series = series;\n                this.parent = parent;\n                return this;\n            };\n            return TreemapNode;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapNode;\n    });\n    _registerModule(_modules, 'Series/DrawPointUtilities.js', [], function () {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Handles the drawing of a component.\n         * Can be used for any type of component that reserves the graphic property,\n         * and provides a shouldDraw on its context.\n         *\n         * @private\n         *\n         * @todo add type checking.\n         * @todo export this function to enable usage\n         */\n        function draw(point, params) {\n            var animatableAttribs = params.animatableAttribs, onComplete = params.onComplete, css = params.css, renderer = params.renderer;\n            var animation = (point.series && point.series.chart.hasRendered) ?\n                // Chart-level animation on updates\n                void 0 :\n                // Series-level animation on new points\n                (point.series &&\n                    point.series.options.animation);\n            var graphic = point.graphic;\n            params.attribs = __assign(__assign({}, params.attribs), { 'class': point.getClassName() }) || {};\n            if ((point.shouldDraw())) {\n                if (!graphic) {\n                    if (params.shapeType === 'text') {\n                        graphic = renderer.text();\n                    }\n                    else if (params.shapeType === 'image') {\n                        graphic = renderer.image(params.imageUrl || '')\n                            .attr(params.shapeArgs || {});\n                    }\n                    else {\n                        graphic = renderer[params.shapeType](params.shapeArgs || {});\n                    }\n                    point.graphic = graphic;\n                    graphic.add(params.group);\n                }\n                if (css) {\n                    graphic.css(css);\n                }\n                graphic\n                    .attr(params.attribs)\n                    .animate(animatableAttribs, params.isNew ? false : animation, onComplete);\n            }\n            else if (graphic) {\n                var destroy_1 = function () {\n                    point.graphic = graphic = (graphic && graphic.destroy());\n                    if (typeof onComplete === 'function') {\n                        onComplete();\n                    }\n                };\n                // Animate only runs complete callback if something was animated.\n                if (Object.keys(animatableAttribs).length) {\n                    graphic.animate(animatableAttribs, void 0, function () { return destroy_1(); });\n                }\n                else {\n                    destroy_1();\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var DrawPointUtilities = {\n            draw: draw\n        };\n\n        return DrawPointUtilities;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapPoint.js', [_modules['Series/DrawPointUtilities.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (DPU, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var _a = SeriesRegistry.seriesTypes, PiePoint = _a.pie.prototype.pointClass, ScatterPoint = _a.scatter.prototype.pointClass;\n        var extend = U.extend, isNumber = U.isNumber, pick = U.pick;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var TreemapPoint = /** @class */ (function (_super) {\n            __extends(TreemapPoint, _super);\n            function TreemapPoint() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                _this.shapeType = 'rect';\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            TreemapPoint.prototype.draw = function (params) {\n                DPU.draw(this, params);\n            };\n            TreemapPoint.prototype.getClassName = function () {\n                var series = this.series, options = series.options;\n                var className = _super.prototype.getClassName.call(this);\n                // Above the current level\n                if (this.node.level <= series.nodeMap[series.rootNode].level) {\n                    className += ' highcharts-above-level';\n                }\n                else if (!this.node.isLeaf &&\n                    !pick(options.interactByLeaf, !options.allowTraversingTree)) {\n                    className += ' highcharts-internal-node-interactive';\n                }\n                else if (!this.node.isLeaf) {\n                    className += ' highcharts-internal-node';\n                }\n                return className;\n            };\n            /**\n             * A tree point is valid if it has han id too, assume it may be a parent\n             * item.\n             *\n             * @private\n             * @function Highcharts.Point#isValid\n             */\n            TreemapPoint.prototype.isValid = function () {\n                return Boolean(this.id || isNumber(this.value));\n            };\n            TreemapPoint.prototype.setState = function (state) {\n                _super.prototype.setState.apply(this, arguments);\n                // Graphic does not exist when point is not visible.\n                if (this.graphic) {\n                    this.graphic.attr({\n                        zIndex: state === 'hover' ? 1 : 0\n                    });\n                }\n            };\n            TreemapPoint.prototype.shouldDraw = function () {\n                return isNumber(this.plotY) && this.y !== null;\n            };\n            return TreemapPoint;\n        }(ScatterPoint));\n        extend(TreemapPoint.prototype, {\n            setVisible: PiePoint.prototype.setVisible\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapPoint;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapSeriesDefaults.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var isString = U.isString;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A treemap displays hierarchical data using nested rectangles. The data\n         * can be laid out in varying ways depending on options.\n         *\n         * @sample highcharts/demo/treemap-large-dataset/\n         *         Treemap\n         *\n         * @extends      plotOptions.scatter\n         * @excluding    cluster, connectEnds, connectNulls, dataSorting, dragDrop, jitter, marker\n         * @product      highcharts\n         * @requires     modules/treemap\n         * @optionparent plotOptions.treemap\n         */\n        var TreemapSeriesDefaults = {\n            /**\n             * When enabled the user can click on a point which is a parent and\n             * zoom in on its children. Deprecated and replaced by\n             * [allowTraversingTree](#plotOptions.treemap.allowTraversingTree).\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-allowdrilltonode/\n             *         Enabled\n             *\n             * @deprecated\n             * @type      {boolean}\n             * @default   false\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.allowDrillToNode\n             */\n            /**\n             * When enabled the user can click on a point which is a parent and\n             * zoom in on its children.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-allowtraversingtree/\n             *         Enabled\n             *\n             * @since     7.0.3\n             * @product   highcharts\n             */\n            allowTraversingTree: false,\n            animationLimit: 250,\n            /**\n             * The border radius for each treemap item.\n             */\n            borderRadius: 0,\n            /**\n             * Options for the breadcrumbs, the navigation at the top leading the\n             * way up through the traversed levels.\n             *\n             *\n             * @since 10.0.0\n             * @product   highcharts\n             * @extends   navigation.breadcrumbs\n             * @optionparent plotOptions.treemap.breadcrumbs\n             */\n            /**\n             * When the series contains less points than the crop threshold, all\n             * points are drawn, event if the points fall outside the visible plot\n             * area at the current zoom. The advantage of drawing all points\n             * (including markers and columns), is that animation is performed on\n             * updates. On the other hand, when the series contains more points than\n             * the crop threshold, the series data is cropped to only contain points\n             * that fall within the plot area. The advantage of cropping away\n             * invisible points is to increase performance on large series.\n             *\n             * @type      {number}\n             * @default   300\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.cropThreshold\n             */\n            /**\n             * Fires on a request for change of root node for the tree, before the\n             * update is made. An event object is passed to the function, containing\n             * additional properties `newRootId`, `previousRootId`, `redraw` and\n             * `trigger`.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-events-setrootnode/\n             *         Alert update information on setRootNode event.\n             *\n             * @type {Function}\n             * @default undefined\n             * @since 7.0.3\n             * @product highcharts\n             * @apioption plotOptions.treemap.events.setRootNode\n             */\n            /**\n             * This option decides if the user can interact with the parent nodes\n             * or just the leaf nodes. When this option is undefined, it will be\n             * true by default. However when allowTraversingTree is true, then it\n             * will be false by default.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-interactbyleaf-false/\n             *         False\n             * @sample {highcharts} highcharts/plotoptions/treemap-interactbyleaf-true-and-allowtraversingtree/\n             *         InteractByLeaf and allowTraversingTree is true\n             *\n             * @type      {boolean}\n             * @since     4.1.2\n             * @product   highcharts\n             * @apioption plotOptions.treemap.interactByLeaf\n             */\n            /**\n             * The sort index of the point inside the treemap level.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-sortindex/\n             *         Sort by years\n             *\n             * @type      {number}\n             * @since     4.1.10\n             * @product   highcharts\n             * @apioption plotOptions.treemap.sortIndex\n             */\n            /**\n             * A series specific or series type specific color set to apply instead\n             * of the global [colors](#colors) when\n             * [colorByPoint](#plotOptions.treemap.colorByPoint) is true.\n             *\n             * @type      {Array<Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject>}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.colors\n             */\n            /**\n             * Whether to display this series type or specific series item in the\n             * legend.\n             */\n            showInLegend: false,\n            /**\n             * @ignore-option\n             */\n            marker: void 0,\n            /**\n             * When using automatic point colors pulled from the `options.colors`\n             * collection, this option determines whether the chart should receive\n             * one color per series or one color per point.\n             *\n             * @see [series colors](#plotOptions.treemap.colors)\n             *\n             * @since     2.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.colorByPoint\n             */\n            colorByPoint: false,\n            /**\n             * @since 4.1.0\n             */\n            dataLabels: {\n                defer: false,\n                enabled: true,\n                formatter: function () {\n                    var point = this && this.point ?\n                        this.point :\n                        {}, name = isString(point.name) ? point.name : '';\n                    return name;\n                },\n                inside: true,\n                verticalAlign: 'middle'\n            },\n            tooltip: {\n                headerFormat: '',\n                pointFormat: '<b>{point.name}</b>: {point.value}<br/>'\n            },\n            /**\n             * Whether to ignore hidden points when the layout algorithm runs.\n             * If `false`, hidden points will leave open spaces.\n             *\n             * @since 5.0.8\n             */\n            ignoreHiddenPoint: true,\n            /**\n             * This option decides which algorithm is used for setting position\n             * and dimensions of the points.\n             *\n             * @see [How to write your own algorithm](https://www.highcharts.com/docs/chart-and-series-types/treemap)\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-sliceanddice/\n             *         SliceAndDice by default\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-stripes/\n             *         Stripes\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-squarified/\n             *         Squarified\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-strip/\n             *         Strip\n             *\n             * @since      4.1.0\n             * @validvalue [\"sliceAndDice\", \"stripes\", \"squarified\", \"strip\"]\n             */\n            layoutAlgorithm: 'sliceAndDice',\n            /**\n             * Defines which direction the layout algorithm will start drawing.\n             *\n             * @since       4.1.0\n             * @validvalue [\"vertical\", \"horizontal\"]\n             */\n            layoutStartingDirection: 'vertical',\n            /**\n             * Enabling this option will make the treemap alternate the drawing\n             * direction between vertical and horizontal. The next levels starting\n             * direction will always be the opposite of the previous.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-alternatestartingdirection-true/\n             *         Enabled\n             *\n             * @since 4.1.0\n             */\n            alternateStartingDirection: false,\n            /**\n             * Used together with the levels and allowTraversingTree options. When\n             * set to false the first level visible to be level one, which is\n             * dynamic when traversing the tree. Otherwise the level will be the\n             * same as the tree structure.\n             *\n             * @since 4.1.0\n             */\n            levelIsConstant: true,\n            /**\n             * Options for the button appearing when traversing down in a treemap.\n             *\n             * Since v9.3.3 the `traverseUpButton` is replaced by `breadcrumbs`.\n             *\n             * @deprecated\n             */\n            traverseUpButton: {\n                /**\n                 * The position of the button.\n                 */\n                position: {\n                    /**\n                     * Vertical alignment of the button.\n                     *\n                     * @type      {Highcharts.VerticalAlignValue}\n                     * @default   top\n                     * @product   highcharts\n                     * @apioption plotOptions.treemap.traverseUpButton.position.verticalAlign\n                     */\n                    /**\n                     * Horizontal alignment of the button.\n                     *\n                     * @type {Highcharts.AlignValue}\n                     */\n                    align: 'right',\n                    /**\n                     * Horizontal offset of the button.\n                     */\n                    x: -10,\n                    /**\n                     * Vertical offset of the button.\n                     */\n                    y: 10\n                }\n            },\n            /**\n             * Set options on specific levels. Takes precedence over series options,\n             * but not point options.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-levels/\n             *         Styling dataLabels and borders\n             * @sample {highcharts} highcharts/demo/treemap-with-levels/\n             *         Different layoutAlgorithm\n             *\n             * @type      {Array<*>}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels\n             */\n            /**\n             * Can set a `borderColor` on all points which lies on the same level.\n             *\n             * @type      {Highcharts.ColorString}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.borderColor\n             */\n            /**\n             * Set the dash style of the border of all the point which lies on the\n             * level. See\n             * [plotOptions.scatter.dashStyle](#plotoptions.scatter.dashstyle)\n             * for possible options.\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.borderDashStyle\n             */\n            /**\n             * Can set the borderWidth on all points which lies on the same level.\n             *\n             * @type      {number}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.borderWidth\n             */\n            /**\n             * Can set a color on all points which lies on the same level.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.color\n             */\n            /**\n             * A configuration object to define how the color of a child varies from\n             * the parent's color. The variation is distributed among the children\n             * of node. For example when setting brightness, the brightness change\n             * will range from the parent's original brightness on the first child,\n             * to the amount set in the `to` setting on the last node. This allows a\n             * gradient-like color scheme that sets children out from each other\n             * while highlighting the grouping on treemaps and sectors on sunburst\n             * charts.\n             *\n             * @sample highcharts/demo/sunburst/\n             *         Sunburst with color variation\n             *\n             * @sample highcharts/series-treegraph/color-variation\n             *         Treegraph nodes with color variation\n             *\n             * @since     6.0.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.colorVariation\n             */\n            /**\n             * The key of a color variation. Currently supports `brightness` only.\n             *\n             * @type       {string}\n             * @since      6.0.0\n             * @product    highcharts\n             * @validvalue [\"brightness\"]\n             * @apioption  plotOptions.treemap.levels.colorVariation.key\n             */\n            /**\n             * The ending value of a color variation. The last sibling will receive\n             * this value.\n             *\n             * @type      {number}\n             * @since     6.0.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.colorVariation.to\n             */\n            /**\n             * Can set the options of dataLabels on each point which lies on the\n             * level.\n             * [plotOptions.treemap.dataLabels](#plotOptions.treemap.dataLabels) for\n             * possible values.\n             *\n             * @extends   plotOptions.treemap.dataLabels\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.dataLabels\n             */\n            /**\n             * Can set the layoutAlgorithm option on a specific level.\n             *\n             * @type       {string}\n             * @since      4.1.0\n             * @product    highcharts\n             * @validvalue [\"sliceAndDice\", \"stripes\", \"squarified\", \"strip\"]\n             * @apioption  plotOptions.treemap.levels.layoutAlgorithm\n             */\n            /**\n             * Can set the layoutStartingDirection option on a specific level.\n             *\n             * @type       {string}\n             * @since      4.1.0\n             * @product    highcharts\n             * @validvalue [\"vertical\", \"horizontal\"]\n             * @apioption  plotOptions.treemap.levels.layoutStartingDirection\n             */\n            /**\n             * Decides which level takes effect from the options set in the levels\n             * object.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-levels/\n             *         Styling of both levels\n             *\n             * @type      {number}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.level\n             */\n            // Presentational options\n            /**\n             * The color of the border surrounding each tree map item.\n             *\n             * @type {Highcharts.ColorString}\n             */\n            borderColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n            /**\n             * The width of the border surrounding each tree map item.\n             */\n            borderWidth: 1,\n            colorKey: 'colorValue',\n            /**\n             * The opacity of a point in treemap. When a point has children, the\n             * visibility of the children is determined by the opacity.\n             *\n             * @since 4.2.4\n             */\n            opacity: 0.15,\n            /**\n             * A wrapper object for all the series options in specific states.\n             *\n             * @extends plotOptions.heatmap.states\n             */\n            states: {\n                /**\n                 * Options for the hovered series\n                 *\n                 * @extends   plotOptions.heatmap.states.hover\n                 * @excluding halo\n                 */\n                hover: {\n                    /**\n                     * The border color for the hovered state.\n                     */\n                    borderColor: \"#999999\" /* Palette.neutralColor40 */,\n                    /**\n                     * Brightness for the hovered point. Defaults to 0 if the\n                     * heatmap series is loaded first, otherwise 0.1.\n                     *\n                     * @type    {number}\n                     * @default undefined\n                     */\n                    brightness: SeriesRegistry.seriesTypes.heatmap ? 0 : 0.1,\n                    /**\n                     * @extends plotOptions.heatmap.states.hover.halo\n                     */\n                    halo: false,\n                    /**\n                     * The opacity of a point in treemap. When a point has children,\n                     * the visibility of the children is determined by the opacity.\n                     *\n                     * @since 4.2.4\n                     */\n                    opacity: 0.75,\n                    /**\n                     * The shadow option for hovered state.\n                     */\n                    shadow: false\n                }\n            },\n            legendSymbol: 'rectangle'\n        };\n        /**\n         * A `treemap` series. If the [type](#series.treemap.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.treemap\n         * @excluding dataParser, dataURL, stack, dataSorting\n         * @product   highcharts\n         * @requires  modules/treemap\n         * @apioption series.treemap\n         */\n        /**\n         * An array of data points for the series. For the `treemap` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `value` options. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.treemap.turboThreshold),\n         *    this option is not available.\n         *    ```js\n         *      data: [{\n         *        value: 9,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *      }, {\n         *        value: 6,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *      }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|null|*>}\n         * @extends   series.heatmap.data\n         * @excluding x, y, pointPadding\n         * @product   highcharts\n         * @apioption series.treemap.data\n         */\n        /**\n         * The value of the point, resulting in a relative area of the point\n         * in the treemap.\n         *\n         * @type      {number|null}\n         * @product   highcharts\n         * @apioption series.treemap.data.value\n         */\n        /**\n         * Serves a purpose only if a `colorAxis` object is defined in the chart\n         * options. This value will decide which color the point gets from the\n         * scale of the colorAxis.\n         *\n         * @type      {number}\n         * @since     4.1.0\n         * @product   highcharts\n         * @apioption series.treemap.data.colorValue\n         */\n        /**\n         * Only for treemap. Use this option to build a tree structure. The\n         * value should be the id of the point which is the parent. If no points\n         * has a matching id, or this option is undefined, then the parent will\n         * be set to the root.\n         *\n         * @sample {highcharts} highcharts/point/parent/\n         *         Point parent\n         * @sample {highcharts} highcharts/demo/treemap-with-levels/\n         *         Example where parent id is not matching\n         *\n         * @type      {string}\n         * @since     4.1.0\n         * @product   highcharts\n         * @apioption series.treemap.data.parent\n         */\n        ''; // Keeps doclets above detached\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapUtilities.js', [], function () {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var TreemapUtilities;\n        (function (TreemapUtilities) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @todo find correct name for this function.\n             * @todo Similar to reduce, this function is likely redundant\n             */\n            function recursive(item, func, context) {\n                var next = func.call(context || this, item);\n                if (next !== false) {\n                    recursive(next, func, context);\n                }\n            }\n            TreemapUtilities.recursive = recursive;\n        })(TreemapUtilities || (TreemapUtilities = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapUtilities;\n    });\n    _registerModule(_modules, 'Series/TreeUtilities.js', [_modules['Core/Color/Color.js'], _modules['Core/Utilities.js']], function (Color, U) {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var extend = U.extend, isArray = U.isArray, isNumber = U.isNumber, isObject = U.isObject, merge = U.merge, pick = U.pick, relativeLength = U.relativeLength;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         */\n        function getColor(node, options) {\n            var index = options.index, mapOptionsToLevel = options.mapOptionsToLevel, parentColor = options.parentColor, parentColorIndex = options.parentColorIndex, series = options.series, colors = options.colors, siblings = options.siblings, points = series.points, chartOptionsChart = series.chart.options.chart;\n            var getColorByPoint, point, level, colorByPoint, colorIndexByPoint, color, colorIndex;\n            /**\n             * @private\n             */\n            var variateColor = function (color) {\n                var colorVariation = level && level.colorVariation;\n                if (colorVariation &&\n                    colorVariation.key === 'brightness' &&\n                    index &&\n                    siblings) {\n                    return Color.parse(color).brighten(colorVariation.to * (index / siblings)).get();\n                }\n                return color;\n            };\n            if (node) {\n                point = points[node.i];\n                level = mapOptionsToLevel[node.level] || {};\n                getColorByPoint = point && level.colorByPoint;\n                if (getColorByPoint) {\n                    colorIndexByPoint = point.index % (colors ?\n                        colors.length :\n                        chartOptionsChart.colorCount);\n                    colorByPoint = colors && colors[colorIndexByPoint];\n                }\n                // Select either point color, level color or inherited color.\n                if (!series.chart.styledMode) {\n                    color = pick(point && point.options.color, level && level.color, colorByPoint, parentColor && variateColor(parentColor), series.color);\n                }\n                colorIndex = pick(point && point.options.colorIndex, level && level.colorIndex, colorIndexByPoint, parentColorIndex, options.colorIndex);\n            }\n            return {\n                color: color,\n                colorIndex: colorIndex\n            };\n        }\n        /**\n         * Creates a map from level number to its given options.\n         *\n         * @private\n         *\n         * @param {Object} params\n         * Object containing parameters.\n         * - `defaults` Object containing default options. The default options are\n         *   merged with the userOptions to get the final options for a specific\n         *   level.\n         * - `from` The lowest level number.\n         * - `levels` User options from series.levels.\n         * - `to` The highest level number.\n         *\n         * @return {Highcharts.Dictionary<object>|null}\n         * Returns a map from level number to its given options.\n         */\n        function getLevelOptions(params) {\n            var result = {};\n            var defaults, converted, i, from, to, levels;\n            if (isObject(params)) {\n                from = isNumber(params.from) ? params.from : 1;\n                levels = params.levels;\n                converted = {};\n                defaults = isObject(params.defaults) ? params.defaults : {};\n                if (isArray(levels)) {\n                    converted = levels.reduce(function (obj, item) {\n                        var level, levelIsConstant, options;\n                        if (isObject(item) && isNumber(item.level)) {\n                            options = merge({}, item);\n                            levelIsConstant = pick(options.levelIsConstant, defaults.levelIsConstant);\n                            // Delete redundant properties.\n                            delete options.levelIsConstant;\n                            delete options.level;\n                            // Calculate which level these options apply to.\n                            level = item.level + (levelIsConstant ? 0 : from - 1);\n                            if (isObject(obj[level])) {\n                                merge(true, obj[level], options); // #16329\n                            }\n                            else {\n                                obj[level] = options;\n                            }\n                        }\n                        return obj;\n                    }, {});\n                }\n                to = isNumber(params.to) ? params.to : 1;\n                for (i = 0; i <= to; i++) {\n                    result[i] = merge({}, defaults, isObject(converted[i]) ? converted[i] : {});\n                }\n            }\n            return result;\n        }\n        /**\n         * @private\n         * @todo Combine buildTree and buildNode with setTreeValues\n         * @todo Remove logic from Treemap and make it utilize this mixin.\n         */\n        function setTreeValues(tree, options) {\n            var before = options.before, idRoot = options.idRoot, mapIdToNode = options.mapIdToNode, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (options.levelIsConstant !== false), points = options.points, point = points[tree.i], optionsPoint = point && point.options || {}, children = [];\n            var childrenTotal = 0;\n            tree.levelDynamic = tree.level - (levelIsConstant ? 0 : nodeRoot.level);\n            tree.name = pick(point && point.name, '');\n            tree.visible = (idRoot === tree.id ||\n                options.visible === true);\n            if (typeof before === 'function') {\n                tree = before(tree, options);\n            }\n            // First give the children some values\n            tree.children.forEach(function (child, i) {\n                var newOptions = extend({}, options);\n                extend(newOptions, {\n                    index: i,\n                    siblings: tree.children.length,\n                    visible: tree.visible\n                });\n                child = setTreeValues(child, newOptions);\n                children.push(child);\n                if (child.visible) {\n                    childrenTotal += child.val;\n                }\n            });\n            // Set the values\n            var value = pick(optionsPoint.value, childrenTotal);\n            tree.visible = value >= 0 && (childrenTotal > 0 || tree.visible);\n            tree.children = children;\n            tree.childrenTotal = childrenTotal;\n            tree.isLeaf = tree.visible && !childrenTotal;\n            tree.val = value;\n            return tree;\n        }\n        /**\n         * Update the rootId property on the series. Also makes sure that it is\n         * accessible to exporting.\n         *\n         * @private\n         *\n         * @param {Object} series\n         * The series to operate on.\n         *\n         * @return {string}\n         * Returns the resulting rootId after update.\n         */\n        function updateRootId(series) {\n            var rootId, options;\n            if (isObject(series)) {\n                // Get the series options.\n                options = isObject(series.options) ? series.options : {};\n                // Calculate the rootId.\n                rootId = pick(series.rootNode, options.rootId, '');\n                // Set rootId on series.userOptions to pick it up in exporting.\n                if (isObject(series.userOptions)) {\n                    series.userOptions.rootId = rootId;\n                }\n                // Set rootId on series to pick it up on next update.\n                series.rootNode = rootId;\n            }\n            return rootId;\n        }\n        /**\n         * Get the node width, which relies on the plot width and the nodeDistance\n         * option.\n         *\n         * @private\n         */\n        function getNodeWidth(series, columnCount) {\n            var chart = series.chart, options = series.options, _a = options.nodeDistance, nodeDistance = _a === void 0 ? 0 : _a, _b = options.nodeWidth, nodeWidth = _b === void 0 ? 0 : _b, _c = chart.plotSizeX, plotSizeX = _c === void 0 ? 1 : _c;\n            // Node width auto means they are evenly distributed along the width of\n            // the plot area\n            if (nodeWidth === 'auto') {\n                if (typeof nodeDistance === 'string' && /%$/.test(nodeDistance)) {\n                    var fraction = parseFloat(nodeDistance) / 100, total = columnCount + fraction * (columnCount - 1);\n                    return plotSizeX / total;\n                }\n                var nDistance = Number(nodeDistance);\n                return ((plotSizeX + nDistance) /\n                    (columnCount || 1)) - nDistance;\n            }\n            return relativeLength(nodeWidth, plotSizeX);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var TreeUtilities = {\n            getColor: getColor,\n            getLevelOptions: getLevelOptions,\n            getNodeWidth: getNodeWidth,\n            setTreeValues: setTreeValues,\n            updateRootId: updateRootId\n        };\n\n        return TreeUtilities;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapSeries.js', [_modules['Extensions/Breadcrumbs/Breadcrumbs.js'], _modules['Core/Color/Color.js'], _modules['Series/ColorMapComposition.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/Treemap/TreemapAlgorithmGroup.js'], _modules['Series/Treemap/TreemapNode.js'], _modules['Series/Treemap/TreemapPoint.js'], _modules['Series/Treemap/TreemapSeriesDefaults.js'], _modules['Series/Treemap/TreemapUtilities.js'], _modules['Series/TreeUtilities.js'], _modules['Core/Utilities.js']], function (Breadcrumbs, Color, ColorMapComposition, H, SeriesRegistry, TreemapAlgorithmGroup, TreemapNode, TreemapPoint, TreemapSeriesDefaults, TreemapUtilities, TU, U) {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var color = Color.parse;\n        var composed = H.composed, noop = H.noop;\n        var _a = SeriesRegistry.seriesTypes, ColumnSeries = _a.column, ScatterSeries = _a.scatter;\n        var getColor = TU.getColor, getLevelOptions = TU.getLevelOptions, updateRootId = TU.updateRootId;\n        var addEvent = U.addEvent, correctFloat = U.correctFloat, defined = U.defined, error = U.error, extend = U.extend, fireEvent = U.fireEvent, isArray = U.isArray, isObject = U.isObject, isString = U.isString, merge = U.merge, pick = U.pick, pushUnique = U.pushUnique, stableSort = U.stableSort;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var axisMax = 100;\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        var treemapAxisDefaultValues = false;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /** @private */\n        function onSeriesAfterBindAxes() {\n            var series = this, xAxis = series.xAxis, yAxis = series.yAxis;\n            var treeAxis;\n            if (xAxis && yAxis) {\n                if (series.is('treemap')) {\n                    treeAxis = {\n                        endOnTick: false,\n                        gridLineWidth: 0,\n                        lineWidth: 0,\n                        min: 0,\n                        minPadding: 0,\n                        max: axisMax,\n                        maxPadding: 0,\n                        startOnTick: false,\n                        title: void 0,\n                        tickPositions: []\n                    };\n                    extend(yAxis.options, treeAxis);\n                    extend(xAxis.options, treeAxis);\n                    treemapAxisDefaultValues = true;\n                }\n                else if (treemapAxisDefaultValues) {\n                    yAxis.setOptions(yAxis.userOptions);\n                    xAxis.setOptions(xAxis.userOptions);\n                    treemapAxisDefaultValues = false;\n                }\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.treemap\n         *\n         * @augments Highcharts.Series\n         */\n        var TreemapSeries = /** @class */ (function (_super) {\n            __extends(TreemapSeries, _super);\n            function TreemapSeries() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            TreemapSeries.compose = function (SeriesClass) {\n                if (pushUnique(composed, 'TreemapSeries')) {\n                    addEvent(SeriesClass, 'afterBindAxes', onSeriesAfterBindAxes);\n                }\n            };\n            /* *\n             *\n             *  Function\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            TreemapSeries.prototype.algorithmCalcPoints = function (directionChange, last, group, childrenArea) {\n                var plot = group.plot, end = group.elArr.length - 1;\n                var pX, pY, pW, pH, gW = group.lW, gH = group.lH, keep, i = 0;\n                if (last) {\n                    gW = group.nW;\n                    gH = group.nH;\n                }\n                else {\n                    keep = group.elArr[end];\n                }\n                for (var _i = 0, _a = group.elArr; _i < _a.length; _i++) {\n                    var p = _a[_i];\n                    if (last || (i < end)) {\n                        if (group.direction === 0) {\n                            pX = plot.x;\n                            pY = plot.y;\n                            pW = gW;\n                            pH = p / pW;\n                        }\n                        else {\n                            pX = plot.x;\n                            pY = plot.y;\n                            pH = gH;\n                            pW = p / pH;\n                        }\n                        childrenArea.push({\n                            x: pX,\n                            y: pY,\n                            width: pW,\n                            height: correctFloat(pH)\n                        });\n                        if (group.direction === 0) {\n                            plot.y = plot.y + pH;\n                        }\n                        else {\n                            plot.x = plot.x + pW;\n                        }\n                    }\n                    i = i + 1;\n                }\n                // Reset variables\n                group.reset();\n                if (group.direction === 0) {\n                    group.width = group.width - gW;\n                }\n                else {\n                    group.height = group.height - gH;\n                }\n                plot.y = plot.parent.y + (plot.parent.height - group.height);\n                plot.x = plot.parent.x + (plot.parent.width - group.width);\n                if (directionChange) {\n                    group.direction = 1 - group.direction;\n                }\n                // If not last, then add uncalculated element\n                if (!last) {\n                    group.addElement(keep);\n                }\n            };\n            TreemapSeries.prototype.algorithmFill = function (directionChange, parent, children) {\n                var childrenArea = [];\n                var pTot, direction = parent.direction, x = parent.x, y = parent.y, width = parent.width, height = parent.height, pX, pY, pW, pH;\n                for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n                    var child = children_1[_i];\n                    pTot =\n                        (parent.width * parent.height) * (child.val / parent.val);\n                    pX = x;\n                    pY = y;\n                    if (direction === 0) {\n                        pH = height;\n                        pW = pTot / pH;\n                        width = width - pW;\n                        x = x + pW;\n                    }\n                    else {\n                        pW = width;\n                        pH = pTot / pW;\n                        height = height - pH;\n                        y = y + pH;\n                    }\n                    childrenArea.push({\n                        x: pX,\n                        y: pY,\n                        width: pW,\n                        height: pH\n                    });\n                    if (directionChange) {\n                        direction = 1 - direction;\n                    }\n                }\n                return childrenArea;\n            };\n            TreemapSeries.prototype.algorithmLowAspectRatio = function (directionChange, parent, children) {\n                var series = this, childrenArea = [], plot = {\n                    x: parent.x,\n                    y: parent.y,\n                    parent: parent\n                }, direction = parent.direction, end = children.length - 1, group = new TreemapAlgorithmGroup(parent.height, parent.width, direction, plot);\n                var pTot, i = 0;\n                // Loop through and calculate all areas\n                for (var _i = 0, children_2 = children; _i < children_2.length; _i++) {\n                    var child = children_2[_i];\n                    pTot =\n                        (parent.width * parent.height) * (child.val / parent.val);\n                    group.addElement(pTot);\n                    if (group.lP.nR > group.lP.lR) {\n                        series.algorithmCalcPoints(directionChange, false, group, childrenArea, plot // @todo no supported\n                        );\n                    }\n                    // If last child, then calculate all remaining areas\n                    if (i === end) {\n                        series.algorithmCalcPoints(directionChange, true, group, childrenArea, plot // @todo not supported\n                        );\n                    }\n                    ++i;\n                }\n                return childrenArea;\n            };\n            /**\n             * Over the alignment method by setting z index.\n             * @private\n             */\n            TreemapSeries.prototype.alignDataLabel = function (point, dataLabel, labelOptions) {\n                var style = labelOptions.style;\n                // #8160: Prevent the label from exceeding the point's\n                // boundaries in treemaps by applying ellipsis overflow.\n                // The issue was happening when datalabel's text contained a\n                // long sequence of characters without a whitespace.\n                if (style &&\n                    !defined(style.textOverflow) &&\n                    dataLabel.text &&\n                    dataLabel.getBBox().width > (dataLabel.text.textWidth || 0)) {\n                    dataLabel.css({\n                        textOverflow: 'ellipsis',\n                        // Unit (px) is required when useHTML is true\n                        width: style.width += 'px'\n                    });\n                }\n                ColumnSeries.prototype.alignDataLabel.apply(this, arguments);\n                if (point.dataLabel) {\n                    // `point.node.zIndex` could be undefined (#6956)\n                    point.dataLabel.attr({ zIndex: (point.node.zIndex || 0) + 1 });\n                }\n            };\n            /**\n             * Recursive function which calculates the area for all children of a\n             * node.\n             *\n             * @private\n             * @function Highcharts.Series#calculateChildrenAreas\n             *\n             * @param {Object} parent\n             * The node which is parent to the children.\n             *\n             * @param {Object} area\n             * The rectangular area of the parent.\n             */\n            TreemapSeries.prototype.calculateChildrenAreas = function (parent, area) {\n                var series = this, options = series.options, mapOptionsToLevel = series.mapOptionsToLevel, level = mapOptionsToLevel[parent.level + 1], algorithm = pick((series[(level && level.layoutAlgorithm)] &&\n                    level.layoutAlgorithm), options.layoutAlgorithm), alternate = options.alternateStartingDirection, \n                // Collect all children which should be included\n                children = parent.children.filter(function (n) { return !n.ignore; });\n                var childrenValues = [];\n                if (level && level.layoutStartingDirection) {\n                    area.direction = level.layoutStartingDirection === 'vertical' ?\n                        0 :\n                        1;\n                }\n                childrenValues = series[algorithm](area, children);\n                var i = -1;\n                for (var _i = 0, children_3 = children; _i < children_3.length; _i++) {\n                    var child = children_3[_i];\n                    var values = childrenValues[++i];\n                    child.values = merge(values, {\n                        val: child.childrenTotal,\n                        direction: (alternate ? 1 - area.direction : area.direction)\n                    });\n                    child.pointValues = merge(values, {\n                        x: (values.x / series.axisRatio),\n                        // Flip y-values to avoid visual regression with csvCoord in\n                        // Axis.translate at setPointValues. #12488\n                        y: axisMax - values.y - values.height,\n                        width: (values.width / series.axisRatio)\n                    });\n                    // If node has children, then call method recursively\n                    if (child.children.length) {\n                        series.calculateChildrenAreas(child, child.values);\n                    }\n                }\n            };\n            /**\n             * Create level list.\n             * @private\n             */\n            TreemapSeries.prototype.createList = function (e) {\n                var chart = this.chart, breadcrumbs = chart.breadcrumbs, list = [];\n                if (breadcrumbs) {\n                    var currentLevelNumber = 0;\n                    list.push({\n                        level: currentLevelNumber,\n                        levelOptions: chart.series[0]\n                    });\n                    var node = e.target.nodeMap[e.newRootId];\n                    var extraNodes = [];\n                    // When the root node is set and has parent,\n                    // recreate the path from the node tree.\n                    while (node.parent || node.parent === '') {\n                        extraNodes.push(node);\n                        node = e.target.nodeMap[node.parent];\n                    }\n                    for (var _i = 0, _a = extraNodes.reverse(); _i < _a.length; _i++) {\n                        var node_1 = _a[_i];\n                        list.push({\n                            level: ++currentLevelNumber,\n                            levelOptions: node_1\n                        });\n                    }\n                    // If the list has only first element, we should clear it\n                    if (list.length <= 1) {\n                        list.length = 0;\n                    }\n                }\n                return list;\n            };\n            /**\n             * Extend drawDataLabels with logic to handle custom options related to\n             * the treemap series:\n             *\n             * - Points which is not a leaf node, has dataLabels disabled by\n             *   default.\n             *\n             * - Options set on series.levels is merged in.\n             *\n             * - Width of the dataLabel is set to match the width of the point\n             *   shape.\n             *\n             * @private\n             */\n            TreemapSeries.prototype.drawDataLabels = function () {\n                var series = this, mapOptionsToLevel = series.mapOptionsToLevel, points = series.points.filter(function (n) {\n                    return n.node.visible;\n                });\n                var options, level;\n                for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n                    var point = points_1[_i];\n                    level = mapOptionsToLevel[point.node.level];\n                    // Set options to new object to avoid problems with scope\n                    options = { style: {} };\n                    // If not a leaf, then label should be disabled as default\n                    if (!point.node.isLeaf) {\n                        options.enabled = false;\n                    }\n                    // If options for level exists, include them as well\n                    if (level && level.dataLabels) {\n                        options = merge(options, level.dataLabels);\n                        series.hasDataLabels = function () { return true; };\n                    }\n                    // Set dataLabel width to the width of the point shape.\n                    if (point.shapeArgs) {\n                        options.style.width = point.shapeArgs.width;\n                        if (point.dataLabel) {\n                            point.dataLabel.css({\n                                width: point.shapeArgs.width + 'px'\n                            });\n                        }\n                    }\n                    // Merge custom options with point options\n                    point.dlOptions = merge(options, point.options.dataLabels);\n                }\n                _super.prototype.drawDataLabels.call(this);\n            };\n            /**\n             * Override drawPoints\n             * @private\n             */\n            TreemapSeries.prototype.drawPoints = function (points) {\n                if (points === void 0) { points = this.points; }\n                var series = this, chart = series.chart, renderer = chart.renderer, styledMode = chart.styledMode, options = series.options, shadow = styledMode ? {} : options.shadow, borderRadius = options.borderRadius, withinAnimationLimit = chart.pointCount < options.animationLimit, allowTraversingTree = options.allowTraversingTree;\n                for (var _i = 0, points_2 = points; _i < points_2.length; _i++) {\n                    var point = points_2[_i];\n                    var levelDynamic = point.node.levelDynamic, animatableAttribs = {}, attribs = {}, css = {}, groupKey = 'level-group-' + point.node.level, hasGraphic = !!point.graphic, shouldAnimate = withinAnimationLimit && hasGraphic, shapeArgs = point.shapeArgs;\n                    // Don't bother with calculate styling if the point is not drawn\n                    if (point.shouldDraw()) {\n                        point.isInside = true;\n                        if (borderRadius) {\n                            attribs.r = borderRadius;\n                        }\n                        merge(true, // Extend object\n                        // Which object to extend\n                        shouldAnimate ? animatableAttribs : attribs, \n                        // Add shapeArgs to animate/attr if graphic exists\n                        hasGraphic ? shapeArgs : {}, \n                        // Add style attribs if !styleMode\n                        styledMode ?\n                            {} :\n                            series.pointAttribs(point, point.selected ? 'select' : void 0));\n                        // In styled mode apply point.color. Use CSS, otherwise the\n                        // fill used in the style sheet will take precedence over\n                        // the fill attribute.\n                        if (series.colorAttribs && styledMode) {\n                            // Heatmap is loaded\n                            extend(css, series.colorAttribs(point));\n                        }\n                        if (!series[groupKey]) {\n                            series[groupKey] = renderer.g(groupKey)\n                                .attr({\n                                // @todo Set the zIndex based upon the number of\n                                // levels, instead of using 1000\n                                zIndex: 1000 - (levelDynamic || 0)\n                            })\n                                .add(series.group);\n                            series[groupKey].survive = true;\n                        }\n                    }\n                    // Draw the point\n                    point.draw({\n                        animatableAttribs: animatableAttribs,\n                        attribs: attribs,\n                        css: css,\n                        group: series[groupKey],\n                        imageUrl: point.imageUrl,\n                        renderer: renderer,\n                        shadow: shadow,\n                        shapeArgs: shapeArgs,\n                        shapeType: point.shapeType\n                    });\n                    // If setRootNode is allowed, set a point cursor on clickables &\n                    // add drillId to point\n                    if (allowTraversingTree && point.graphic) {\n                        point.drillId = options.interactByLeaf ?\n                            series.drillToByLeaf(point) :\n                            series.drillToByGroup(point);\n                    }\n                }\n            };\n            /**\n             * Finds the drill id for a parent node. Returns false if point should\n             * not have a click event.\n             * @private\n             */\n            TreemapSeries.prototype.drillToByGroup = function (point) {\n                var drillId = false;\n                if (!point.node.isLeaf &&\n                    (point.node.level - this.nodeMap[this.rootNode].level) === 1) {\n                    drillId = point.id;\n                }\n                return drillId;\n            };\n            /**\n             * Finds the drill id for a leaf node. Returns false if point should not\n             * have a click event\n             * @private\n             */\n            TreemapSeries.prototype.drillToByLeaf = function (point) {\n                var drillId = false, nodeParent;\n                if ((point.node.parent !== this.rootNode) &&\n                    point.node.isLeaf) {\n                    nodeParent = point.node;\n                    while (!drillId) {\n                        nodeParent = this.nodeMap[nodeParent.parent];\n                        if (nodeParent.parent === this.rootNode) {\n                            drillId = nodeParent.id;\n                        }\n                    }\n                }\n                return drillId;\n            };\n            /**\n             * @todo remove this function at a suitable version.\n             * @private\n             */\n            TreemapSeries.prototype.drillToNode = function (id, redraw) {\n                error(32, false, void 0, { 'treemap.drillToNode': 'use treemap.setRootNode' });\n                this.setRootNode(id, redraw);\n            };\n            TreemapSeries.prototype.drillUp = function () {\n                var series = this, node = series.nodeMap[series.rootNode];\n                if (node && isString(node.parent)) {\n                    series.setRootNode(node.parent, true, { trigger: 'traverseUpButton' });\n                }\n            };\n            TreemapSeries.prototype.getExtremes = function () {\n                // Get the extremes from the value data\n                var _a = _super.prototype.getExtremes.call(this, this.colorValueData), dataMin = _a.dataMin, dataMax = _a.dataMax;\n                this.valueMin = dataMin;\n                this.valueMax = dataMax;\n                // Get the extremes from the y data\n                return _super.prototype.getExtremes.call(this);\n            };\n            /**\n             * Creates an object map from parent id to childrens index.\n             *\n             * @private\n             * @function Highcharts.Series#getListOfParents\n             *\n             * @param {Highcharts.SeriesTreemapDataOptions} [data]\n             *        List of points set in options.\n             *\n             * @param {Array<string>} [existingIds]\n             *        List of all point ids.\n             *\n             * @return {Object}\n             *         Map from parent id to children index in data.\n             */\n            TreemapSeries.prototype.getListOfParents = function (data, existingIds) {\n                var arr = isArray(data) ? data : [], ids = isArray(existingIds) ? existingIds : [], listOfParents = arr.reduce(function (prev, curr, i) {\n                    var parent = pick(curr.parent, '');\n                    if (typeof prev[parent] === 'undefined') {\n                        prev[parent] = [];\n                    }\n                    prev[parent].push(i);\n                    return prev;\n                }, {\n                    '': [] // Root of tree\n                });\n                // If parent does not exist, hoist parent to root of tree.\n                for (var _i = 0, _a = Object.keys(listOfParents); _i < _a.length; _i++) {\n                    var parent_1 = _a[_i];\n                    var children = listOfParents[parent_1];\n                    if ((parent_1 !== '') && (ids.indexOf(parent_1) === -1)) {\n                        for (var _b = 0, children_4 = children; _b < children_4.length; _b++) {\n                            var child = children_4[_b];\n                            listOfParents[''].push(child);\n                        }\n                        delete listOfParents[parent_1];\n                    }\n                }\n                return listOfParents;\n            };\n            /**\n             * Creates a tree structured object from the series points.\n             * @private\n             */\n            TreemapSeries.prototype.getTree = function () {\n                var series = this, allIds = this.data.map(function (d) {\n                    return d.id;\n                }), parentList = series.getListOfParents(this.data, allIds);\n                series.nodeMap = {};\n                series.nodeList = [];\n                return series.buildTree('', -1, 0, parentList);\n            };\n            TreemapSeries.prototype.buildTree = function (id, index, level, list, parent) {\n                var series = this, children = [], point = series.points[index];\n                var height = 0, child;\n                // Actions\n                for (var _i = 0, _a = (list[id] || []); _i < _a.length; _i++) {\n                    var i = _a[_i];\n                    child = series.buildTree(series.points[i].id, i, level + 1, list, id);\n                    height = Math.max(child.height + 1, height);\n                    children.push(child);\n                }\n                var node = new series.NodeClass().init(id, index, children, height, level, series, parent);\n                for (var _b = 0, children_5 = children; _b < children_5.length; _b++) {\n                    var child_1 = children_5[_b];\n                    child_1.parentNode = node;\n                }\n                series.nodeMap[node.id] = node;\n                series.nodeList.push(node);\n                if (point) {\n                    point.node = node;\n                    node.point = point;\n                }\n                return node;\n            };\n            /**\n             * Define hasData function for non-cartesian series. Returns true if the\n             * series has points at all.\n             * @private\n             */\n            TreemapSeries.prototype.hasData = function () {\n                return !!this.processedXData.length; // != 0\n            };\n            TreemapSeries.prototype.init = function (chart, options) {\n                var series = this, breadcrumbsOptions = merge(options.drillUpButton, options.breadcrumbs), setOptionsEvent = addEvent(series, 'setOptions', function (event) {\n                    var options = event.userOptions;\n                    if (defined(options.allowDrillToNode) &&\n                        !defined(options.allowTraversingTree)) {\n                        options.allowTraversingTree = options.allowDrillToNode;\n                        delete options.allowDrillToNode;\n                    }\n                    if (defined(options.drillUpButton) &&\n                        !defined(options.traverseUpButton)) {\n                        options.traverseUpButton = options.drillUpButton;\n                        delete options.drillUpButton;\n                    }\n                });\n                _super.prototype.init.call(this, chart, options);\n                // Treemap's opacity is a different option from other series\n                delete series.opacity;\n                // Handle deprecated options.\n                series.eventsToUnbind.push(setOptionsEvent);\n                if (series.options.allowTraversingTree) {\n                    series.eventsToUnbind.push(addEvent(series, 'click', series.onClickDrillToNode));\n                    series.eventsToUnbind.push(addEvent(series, 'setRootNode', function (e) {\n                        var chart = series.chart;\n                        if (chart.breadcrumbs) {\n                            // Create a list using the event after drilldown.\n                            chart.breadcrumbs.updateProperties(series.createList(e));\n                        }\n                    }));\n                    series.eventsToUnbind.push(addEvent(series, 'update', \n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    function (e, redraw) {\n                        var breadcrumbs = this.chart.breadcrumbs;\n                        if (breadcrumbs && e.options.breadcrumbs) {\n                            breadcrumbs.update(e.options.breadcrumbs);\n                        }\n                    }));\n                    series.eventsToUnbind.push(addEvent(series, 'destroy', function destroyEvents(e) {\n                        var chart = this.chart;\n                        if (chart.breadcrumbs && !e.keepEventsForUpdate) {\n                            chart.breadcrumbs.destroy();\n                            chart.breadcrumbs = void 0;\n                        }\n                    }));\n                }\n                if (!chart.breadcrumbs) {\n                    chart.breadcrumbs = new Breadcrumbs(chart, breadcrumbsOptions);\n                }\n                series.eventsToUnbind.push(addEvent(chart.breadcrumbs, 'up', function (e) {\n                    var drillUpsNumber = this.level - e.newLevel;\n                    for (var i = 0; i < drillUpsNumber; i++) {\n                        series.drillUp();\n                    }\n                }));\n            };\n            /**\n             * Add drilling on the suitable points.\n             * @private\n             */\n            TreemapSeries.prototype.onClickDrillToNode = function (event) {\n                var series = this, point = event.point, drillId = point && point.drillId;\n                // If a drill id is returned, add click event and cursor.\n                if (isString(drillId)) {\n                    point.setState(''); // Remove hover\n                    series.setRootNode(drillId, true, { trigger: 'click' });\n                }\n            };\n            /**\n             * Get presentational attributes\n             * @private\n             */\n            TreemapSeries.prototype.pointAttribs = function (point, state) {\n                var series = this, mapOptionsToLevel = (isObject(series.mapOptionsToLevel) ?\n                    series.mapOptionsToLevel :\n                    {}), level = point && mapOptionsToLevel[point.node.level] || {}, options = this.options, stateOptions = state && options.states && options.states[state] || {}, className = (point && point.getClassName()) || '', \n                // Set attributes by precedence. Point trumps level trumps series.\n                // Stroke width uses pick because it can be 0.\n                attr = {\n                    'stroke': (point && point.borderColor) ||\n                        level.borderColor ||\n                        stateOptions.borderColor ||\n                        options.borderColor,\n                    'stroke-width': pick(point && point.borderWidth, level.borderWidth, stateOptions.borderWidth, options.borderWidth),\n                    'dashstyle': (point && point.borderDashStyle) ||\n                        level.borderDashStyle ||\n                        stateOptions.borderDashStyle ||\n                        options.borderDashStyle,\n                    'fill': (point && point.color) || this.color\n                };\n                var opacity;\n                // Hide levels above the current view\n                if (className.indexOf('highcharts-above-level') !== -1) {\n                    attr.fill = 'none';\n                    attr['stroke-width'] = 0;\n                    // Nodes with children that accept interaction\n                }\n                else if (className.indexOf('highcharts-internal-node-interactive') !== -1) {\n                    opacity = pick(stateOptions.opacity, options.opacity);\n                    attr.fill = color(attr.fill).setOpacity(opacity).get();\n                    attr.cursor = 'pointer';\n                    // Hide nodes that have children\n                }\n                else if (className.indexOf('highcharts-internal-node') !== -1) {\n                    attr.fill = 'none';\n                }\n                else if (state) {\n                    // Brighten and hoist the hover nodes\n                    attr.fill = color(attr.fill)\n                        .brighten(stateOptions.brightness)\n                        .get();\n                }\n                return attr;\n            };\n            /**\n             * Set the node's color recursively, from the parent down.\n             * @private\n             */\n            TreemapSeries.prototype.setColorRecursive = function (node, parentColor, colorIndex, index, siblings) {\n                var series = this, chart = series && series.chart, colors = chart && chart.options && chart.options.colors;\n                if (node) {\n                    var colorInfo = getColor(node, {\n                        colors: colors,\n                        index: index,\n                        mapOptionsToLevel: series.mapOptionsToLevel,\n                        parentColor: parentColor,\n                        parentColorIndex: colorIndex,\n                        series: series,\n                        siblings: siblings\n                    }), point = series.points[node.i];\n                    if (point) {\n                        point.color = colorInfo.color;\n                        point.colorIndex = colorInfo.colorIndex;\n                    }\n                    var i = -1;\n                    // Do it all again with the children\n                    for (var _i = 0, _a = (node.children || []); _i < _a.length; _i++) {\n                        var child = _a[_i];\n                        series.setColorRecursive(child, colorInfo.color, colorInfo.colorIndex, ++i, node.children.length);\n                    }\n                }\n            };\n            TreemapSeries.prototype.setPointValues = function () {\n                var series = this;\n                var points = series.points, xAxis = series.xAxis, yAxis = series.yAxis;\n                var styledMode = series.chart.styledMode;\n                // Get the crisp correction in classic mode. For this to work in\n                // styled mode, we would need to first add the shape (without x,\n                // y, width and height), then read the rendered stroke width\n                // using point.graphic.strokeWidth(), then modify and apply the\n                // shapeArgs. This applies also to column series, but the\n                // downside is performance and code complexity.\n                var getCrispCorrection = function (point) { return (styledMode ?\n                    0 :\n                    ((series.pointAttribs(point)['stroke-width'] || 0) % 2) / 2); };\n                for (var _i = 0, points_3 = points; _i < points_3.length; _i++) {\n                    var point = points_3[_i];\n                    var _a = point.node, values = _a.pointValues, visible = _a.visible;\n                    // Points which is ignored, have no values.\n                    if (values && visible) {\n                        var height = values.height, width = values.width, x = values.x, y = values.y;\n                        var crispCorr = getCrispCorrection(point);\n                        var x1 = Math.round(xAxis.toPixels(x, true)) - crispCorr;\n                        var x2 = Math.round(xAxis.toPixels(x + width, true)) - crispCorr;\n                        var y1 = Math.round(yAxis.toPixels(y, true)) - crispCorr;\n                        var y2 = Math.round(yAxis.toPixels(y + height, true)) - crispCorr;\n                        // Set point values\n                        var shapeArgs = {\n                            x: Math.min(x1, x2),\n                            y: Math.min(y1, y2),\n                            width: Math.abs(x2 - x1),\n                            height: Math.abs(y2 - y1)\n                        };\n                        point.plotX = shapeArgs.x + (shapeArgs.width / 2);\n                        point.plotY = shapeArgs.y + (shapeArgs.height / 2);\n                        point.shapeArgs = shapeArgs;\n                    }\n                    else {\n                        // Reset visibility\n                        delete point.plotX;\n                        delete point.plotY;\n                    }\n                }\n            };\n            /**\n             * Sets a new root node for the series.\n             *\n             * @private\n             * @function Highcharts.Series#setRootNode\n             *\n             * @param {string} id\n             * The id of the new root node.\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or not.\n             *\n             * @param {Object} [eventArguments]\n             * Arguments to be accessed in event handler.\n             *\n             * @param {string} [eventArguments.newRootId]\n             * Id of the new root.\n             *\n             * @param {string} [eventArguments.previousRootId]\n             * Id of the previous root.\n             *\n             * @param {boolean} [eventArguments.redraw]\n             * Whether to redraw the chart after.\n             *\n             * @param {Object} [eventArguments.series]\n             * The series to update the root of.\n             *\n             * @param {string} [eventArguments.trigger]\n             * The action which triggered the event. Undefined if the setRootNode is\n             * called directly.\n             *\n             * @emits Highcharts.Series#event:setRootNode\n             */\n            TreemapSeries.prototype.setRootNode = function (id, redraw, eventArguments) {\n                var series = this, eventArgs = extend({\n                    newRootId: id,\n                    previousRootId: series.rootNode,\n                    redraw: pick(redraw, true),\n                    series: series\n                }, eventArguments);\n                /**\n                 * The default functionality of the setRootNode event.\n                 *\n                 * @private\n                 * @param {Object} args The event arguments.\n                 * @param {string} args.newRootId Id of the new root.\n                 * @param {string} args.previousRootId Id of the previous root.\n                 * @param {boolean} args.redraw Whether to redraw the chart after.\n                 * @param {Object} args.series The series to update the root of.\n                 * @param {string} [args.trigger=undefined] The action which\n                 * triggered the event. Undefined if the setRootNode is called\n                 * directly.\n                     */\n                var defaultFn = function (args) {\n                    var series = args.series;\n                    // Store previous and new root ids on the series.\n                    series.idPreviousRoot = args.previousRootId;\n                    series.rootNode = args.newRootId;\n                    // Redraw the chart\n                    series.isDirty = true; // Force redraw\n                    if (args.redraw) {\n                        series.chart.redraw();\n                    }\n                };\n                // Fire setRootNode event.\n                fireEvent(series, 'setRootNode', eventArgs, defaultFn);\n            };\n            /**\n             * Workaround for `inactive` state. Since `series.opacity` option is\n             * already reserved, don't use that state at all by disabling\n             * `inactiveOtherPoints` and not inheriting states by points.\n             * @private\n             */\n            TreemapSeries.prototype.setState = function (state) {\n                this.options.inactiveOtherPoints = true;\n                _super.prototype.setState.call(this, state, false);\n                this.options.inactiveOtherPoints = false;\n            };\n            TreemapSeries.prototype.setTreeValues = function (tree) {\n                var series = this, options = series.options, idRoot = series.rootNode, mapIdToNode = series.nodeMap, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (typeof options.levelIsConstant === 'boolean' ?\n                    options.levelIsConstant :\n                    true), children = [], point = series.points[tree.i];\n                // First give the children some values\n                var childrenTotal = 0;\n                for (var _i = 0, _a = tree.children; _i < _a.length; _i++) {\n                    var child = _a[_i];\n                    child = series.setTreeValues(child);\n                    children.push(child);\n                    if (!child.ignore) {\n                        childrenTotal += child.val;\n                    }\n                }\n                // Sort the children\n                stableSort(children, function (a, b) { return ((a.sortIndex || 0) - (b.sortIndex || 0)); });\n                // Set the values\n                var val = pick(point && point.options.value, childrenTotal);\n                if (point) {\n                    point.value = val;\n                }\n                extend(tree, {\n                    children: children,\n                    childrenTotal: childrenTotal,\n                    // Ignore this node if point is not visible\n                    ignore: !(pick(point && point.visible, true) && (val > 0)),\n                    isLeaf: tree.visible && !childrenTotal,\n                    levelDynamic: (tree.level - (levelIsConstant ? 0 : nodeRoot.level)),\n                    name: pick(point && point.name, ''),\n                    sortIndex: pick(point && point.sortIndex, -val),\n                    val: val\n                });\n                return tree;\n            };\n            TreemapSeries.prototype.sliceAndDice = function (parent, children) {\n                return this.algorithmFill(true, parent, children);\n            };\n            TreemapSeries.prototype.squarified = function (parent, children) {\n                return this.algorithmLowAspectRatio(true, parent, children);\n            };\n            TreemapSeries.prototype.strip = function (parent, children) {\n                return this.algorithmLowAspectRatio(false, parent, children);\n            };\n            TreemapSeries.prototype.stripes = function (parent, children) {\n                return this.algorithmFill(false, parent, children);\n            };\n            TreemapSeries.prototype.translate = function () {\n                var series = this, options = series.options;\n                var // NOTE: updateRootId modifies series.\n                rootId = updateRootId(series), rootNode, pointValues, seriesArea, val;\n                // Call prototype function\n                _super.prototype.translate.call(this);\n                // @todo Only if series.isDirtyData is true\n                var tree = series.tree = series.getTree();\n                rootNode = series.nodeMap[rootId];\n                if (rootId !== '' &&\n                    (!rootNode || !rootNode.children.length)) {\n                    series.setRootNode('', false);\n                    rootId = series.rootNode;\n                    rootNode = series.nodeMap[rootId];\n                }\n                series.mapOptionsToLevel = getLevelOptions({\n                    from: rootNode.level + 1,\n                    levels: options.levels,\n                    to: tree.height,\n                    defaults: {\n                        levelIsConstant: series.options.levelIsConstant,\n                        colorByPoint: options.colorByPoint\n                    }\n                });\n                // Parents of the root node is by default visible\n                TreemapUtilities.recursive(series.nodeMap[series.rootNode], function (node) {\n                    var p = node.parent;\n                    var next = false;\n                    node.visible = true;\n                    if (p || p === '') {\n                        next = series.nodeMap[p];\n                    }\n                    return next;\n                });\n                // Children of the root node is by default visible\n                TreemapUtilities.recursive(series.nodeMap[series.rootNode].children, function (children) {\n                    var next = false;\n                    for (var _i = 0, children_6 = children; _i < children_6.length; _i++) {\n                        var child = children_6[_i];\n                        child.visible = true;\n                        if (child.children.length) {\n                            next = (next || []).concat(child.children);\n                        }\n                    }\n                    return next;\n                });\n                series.setTreeValues(tree);\n                // Calculate plotting values.\n                series.axisRatio = (series.xAxis.len / series.yAxis.len);\n                series.nodeMap[''].pointValues = pointValues = {\n                    x: 0,\n                    y: 0,\n                    width: axisMax,\n                    height: axisMax\n                };\n                series.nodeMap[''].values = seriesArea = merge(pointValues, {\n                    width: (pointValues.width * series.axisRatio),\n                    direction: (options.layoutStartingDirection === 'vertical' ? 0 : 1),\n                    val: tree.val\n                });\n                series.calculateChildrenAreas(tree, seriesArea);\n                // Logic for point colors\n                if (!series.colorAxis &&\n                    !options.colorByPoint) {\n                    series.setColorRecursive(series.tree);\n                }\n                // Update axis extremes according to the root node.\n                if (options.allowTraversingTree) {\n                    val = rootNode.pointValues;\n                    series.xAxis.setExtremes(val.x, val.x + val.width, false);\n                    series.yAxis.setExtremes(val.y, val.y + val.height, false);\n                    series.xAxis.setScale();\n                    series.yAxis.setScale();\n                }\n                // Assign values to points.\n                series.setPointValues();\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            TreemapSeries.defaultOptions = merge(ScatterSeries.defaultOptions, TreemapSeriesDefaults);\n            return TreemapSeries;\n        }(ScatterSeries));\n        extend(TreemapSeries.prototype, {\n            buildKDTree: noop,\n            colorAttribs: ColorMapComposition.seriesMembers.colorAttribs,\n            colorKey: 'colorValue',\n            directTouch: true,\n            getExtremesFromAll: true,\n            getSymbol: noop,\n            optionalAxis: 'colorAxis',\n            parallelArrays: ['x', 'y', 'value', 'colorValue'],\n            pointArrayMap: ['value'],\n            pointClass: TreemapPoint,\n            NodeClass: TreemapNode,\n            trackerGroups: ['group', 'dataLabelsGroup'],\n            utils: TreemapUtilities\n        });\n        ColorMapComposition.compose(TreemapSeries);\n        SeriesRegistry.registerSeriesType('treemap', TreemapSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapSeries;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  This module implements sunburst charts in Highcharts.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var Point = SeriesRegistry.series.prototype.pointClass, TreemapPoint = SeriesRegistry.seriesTypes.treemap.prototype.pointClass;\n        var correctFloat = U.correctFloat, extend = U.extend, pInt = U.pInt;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var SunburstPoint = /** @class */ (function (_super) {\n            __extends(SunburstPoint, _super);\n            function SunburstPoint() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            SunburstPoint.prototype.getDataLabelPath = function (label) {\n                var _a;\n                var renderer = this.series.chart.renderer, shapeArgs = this.shapeExisting, r = shapeArgs.r + pInt(((_a = label.options) === null || _a === void 0 ? void 0 : _a.distance) || 0);\n                var start = shapeArgs.start, end = shapeArgs.end;\n                var angle = start + (end - start) / 2; // Arc middle value\n                var upperHalf = angle < 0 &&\n                    angle > -Math.PI ||\n                    angle > Math.PI, moreThanHalf;\n                // Check if point is a full circle\n                if (start === -Math.PI / 2 &&\n                    correctFloat(end) === correctFloat(Math.PI * 1.5)) {\n                    start = -Math.PI + Math.PI / 360;\n                    end = -Math.PI / 360;\n                    upperHalf = true;\n                }\n                // Check if dataLabels should be render in the upper half of the circle\n                if (end - start > Math.PI) {\n                    upperHalf = false;\n                    moreThanHalf = true;\n                    // Close to the full circle, add some padding so that the SVG\n                    // renderer treats it as separate points (#18884).\n                    if ((end - start) > 2 * Math.PI - 0.01) {\n                        start += 0.01;\n                        end -= 0.01;\n                    }\n                }\n                if (this.dataLabelPath) {\n                    this.dataLabelPath = this.dataLabelPath.destroy();\n                }\n                // All times\n                this.dataLabelPath = renderer\n                    .arc({\n                    open: true,\n                    longArc: moreThanHalf ? 1 : 0\n                })\n                    .attr({\n                    start: (upperHalf ? start : end),\n                    end: (upperHalf ? end : start),\n                    clockwise: +upperHalf,\n                    x: shapeArgs.x,\n                    y: shapeArgs.y,\n                    r: (r + shapeArgs.innerR) / 2\n                })\n                    .add(renderer.defs);\n                return this.dataLabelPath;\n            };\n            SunburstPoint.prototype.isValid = function () {\n                return true;\n            };\n            return SunburstPoint;\n        }(TreemapPoint));\n        extend(SunburstPoint.prototype, {\n            getClassName: Point.prototype.getClassName,\n            haloPath: Point.prototype.haloPath,\n            setState: Point.prototype.setState\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SunburstPoint;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstUtilities.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  This module implements sunburst charts in Highcharts.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var TreemapSeries = SeriesRegistry.seriesTypes.treemap;\n        var isNumber = U.isNumber, isObject = U.isObject, merge = U.merge;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         * @function calculateLevelSizes\n         *\n         * @param {Object} levelOptions\n         * Map of level to its options.\n         *\n         * @param {Highcharts.Dictionary<number>} params\n         * Object containing number parameters `innerRadius` and `outerRadius`.\n         *\n         * @return {Highcharts.SunburstSeriesLevelsOptions|undefined}\n         * Returns the modified options, or undefined.\n         */\n        function calculateLevelSizes(levelOptions, params) {\n            var p = isObject(params) ? params : {};\n            var result, totalWeight = 0, diffRadius, levels, levelsNotIncluded, remainingSize, from, to;\n            if (isObject(levelOptions)) {\n                result = merge({}, levelOptions);\n                from = isNumber(p.from) ? p.from : 0;\n                to = isNumber(p.to) ? p.to : 0;\n                levels = range(from, to);\n                levelsNotIncluded = Object.keys(result).filter(function (key) { return (levels.indexOf(+key) === -1); });\n                diffRadius = remainingSize = isNumber(p.diffRadius) ?\n                    p.diffRadius : 0;\n                // Convert percentage to pixels.\n                // Calculate the remaining size to divide between \"weight\" levels.\n                // Calculate total weight to use in conversion from weight to\n                // pixels.\n                for (var _i = 0, levels_1 = levels; _i < levels_1.length; _i++) {\n                    var level = levels_1[_i];\n                    var options = result[level], unit = options.levelSize.unit, value = options.levelSize.value;\n                    if (unit === 'weight') {\n                        totalWeight += value;\n                    }\n                    else if (unit === 'percentage') {\n                        options.levelSize = {\n                            unit: 'pixels',\n                            value: (value / 100) * diffRadius\n                        };\n                        remainingSize -= options.levelSize.value;\n                    }\n                    else if (unit === 'pixels') {\n                        remainingSize -= value;\n                    }\n                }\n                // Convert weight to pixels.\n                for (var _a = 0, levels_2 = levels; _a < levels_2.length; _a++) {\n                    var level = levels_2[_a];\n                    var options = result[level];\n                    if (options.levelSize.unit === 'weight') {\n                        var weight = options.levelSize.value;\n                        result[level].levelSize = {\n                            unit: 'pixels',\n                            value: (weight / totalWeight) * remainingSize\n                        };\n                    }\n                }\n                // Set all levels not included in interval [from,to] to have 0\n                // pixels.\n                for (var _b = 0, levelsNotIncluded_1 = levelsNotIncluded; _b < levelsNotIncluded_1.length; _b++) {\n                    var level = levelsNotIncluded_1[_b];\n                    result[level].levelSize = {\n                        value: 0,\n                        unit: 'pixels'\n                    };\n                }\n            }\n            return result;\n        }\n        /**\n         * @private\n         */\n        function getLevelFromAndTo(_a) {\n            var level = _a.level, height = _a.height;\n            //  Never displays level below 1\n            var from = level > 0 ? level : 1;\n            var to = level + height;\n            return { from: from, to: to };\n        }\n        /**\n         * TODO introduce step, which should default to 1.\n         * @private\n         */\n        function range(from, to) {\n            var result = [];\n            if (isNumber(from) && isNumber(to) && from <= to) {\n                for (var i = from; i <= to; i++) {\n                    result.push(i);\n                }\n            }\n            return result;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var SunburstUtilities = {\n            calculateLevelSizes: calculateLevelSizes,\n            getLevelFromAndTo: getLevelFromAndTo,\n            range: range,\n            recursive: TreemapSeries.prototype.utils.recursive\n        };\n\n        return SunburstUtilities;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstNode.js', [_modules['Series/Treemap/TreemapNode.js']], function (TreemapNode) {\n        /* *\n         *\n         *  (c) 2010-2024 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var SunburstNode = /** @class */ (function (_super) {\n            __extends(SunburstNode, _super);\n            function SunburstNode() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            return SunburstNode;\n        }(TreemapNode));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SunburstNode;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  This module implements sunburst charts in Highcharts.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A Sunburst displays hierarchical data, where a level in the hierarchy is\n         * represented by a circle. The center represents the root node of the tree.\n         * The visualization bears a resemblance to both treemap and pie charts.\n         *\n         * @sample highcharts/demo/sunburst\n         *         Sunburst chart\n         *\n         * @extends      plotOptions.pie\n         * @excluding    allAreas, clip, colorAxis, colorKey, compare, compareBase,\n         *               dataGrouping, depth, dragDrop, endAngle, gapSize, gapUnit,\n         *               ignoreHiddenPoint, innerSize, joinBy, legendType, linecap,\n         *               minSize, navigatorOptions, pointRange\n         * @product      highcharts\n         * @requires     modules/sunburst.js\n         * @optionparent plotOptions.sunburst\n         *\n         * @private\n         */\n        var SunburstSeriesDefaults = {\n            /**\n             * Options for the breadcrumbs, the navigation at the top leading the\n             * way up through the traversed levels.\n             *\n             * @since 10.0.0\n             * @product   highcharts\n             * @extends   navigation.breadcrumbs\n             * @optionparent plotOptions.sunburst.breadcrumbs\n             */\n            /**\n             * Set options on specific levels. Takes precedence over series options,\n             * but not point options.\n             *\n             * @sample highcharts/demo/sunburst\n             *         Sunburst chart\n             *\n             * @type      {Array<*>}\n             * @apioption plotOptions.sunburst.levels\n             */\n            /**\n             * Can set a `borderColor` on all points which lies on the same level.\n             *\n             * @type      {Highcharts.ColorString}\n             * @apioption plotOptions.sunburst.levels.borderColor\n             */\n            /**\n             * Can set a `borderWidth` on all points which lies on the same level.\n             *\n             * @type      {number}\n             * @apioption plotOptions.sunburst.levels.borderWidth\n             */\n            /**\n             * Can set a `borderDashStyle` on all points which lies on the same\n             * level.\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @apioption plotOptions.sunburst.levels.borderDashStyle\n             */\n            /**\n             * Can set a `color` on all points which lies on the same level.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @apioption plotOptions.sunburst.levels.color\n             */\n            /**\n             * Determines whether the chart should receive one color per point based\n             * on this level.\n             *\n             * @type      {boolean}\n             * @apioption plotOptions.sunburst.levels.colorByPoint\n             */\n            /**\n             * Can set a `colorVariation` on all points which lies on the same\n             * level.\n             *\n             * @apioption plotOptions.sunburst.levels.colorVariation\n             */\n            /**\n             * The key of a color variation. Currently supports `brightness` only.\n             *\n             * @type      {string}\n             * @apioption plotOptions.sunburst.levels.colorVariation.key\n             */\n            /**\n             * The ending value of a color variation. The last sibling will receive\n             * this value.\n             *\n             * @type      {number}\n             * @apioption plotOptions.sunburst.levels.colorVariation.to\n             */\n            /**\n             * Can set `dataLabels` on all points which lies on the same level.\n             *\n             * @extends   plotOptions.sunburst.dataLabels\n             * @apioption plotOptions.sunburst.levels.dataLabels\n             */\n            /**\n             * Decides which level takes effect from the options set in the levels\n             * object.\n             *\n             * @sample highcharts/demo/sunburst\n             *         Sunburst chart\n             *\n             * @type      {number}\n             * @apioption plotOptions.sunburst.levels.level\n             */\n            /**\n             * Can set a `levelSize` on all points which lies on the same level.\n             *\n             * @type      {Object}\n             * @apioption plotOptions.sunburst.levels.levelSize\n             */\n            /**\n             * When enabled the user can click on a point which is a parent and\n             * zoom in on its children. Deprecated and replaced by\n             * [allowTraversingTree](#plotOptions.sunburst.allowTraversingTree).\n             *\n             * @deprecated\n             * @type      {boolean}\n             * @default   false\n             * @since     6.0.0\n             * @product   highcharts\n             * @apioption plotOptions.sunburst.allowDrillToNode\n             */\n            /**\n             * When enabled the user can click on a point which is a parent and\n             * zoom in on its children.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     7.0.3\n             * @product   highcharts\n             * @apioption plotOptions.sunburst.allowTraversingTree\n             */\n            /**\n             * The center of the sunburst chart relative to the plot area. Can be\n             * percentages or pixel values.\n             *\n             * @sample {highcharts} highcharts/plotoptions/pie-center/\n             *         Centered at 100, 100\n             *\n             * @type    {Array<number|string>}\n             * @default [\"50%\", \"50%\"]\n             * @product highcharts\n             *\n             * @private\n             */\n            center: ['50%', '50%'],\n            /**\n             * @product highcharts\n             *\n             * @private\n             */\n            clip: false,\n            colorByPoint: false,\n            /**\n             * Disable inherited opacity from Treemap series.\n             *\n             * @ignore-option\n             *\n             * @private\n             */\n            opacity: 1,\n            /**\n             * @declare Highcharts.SeriesSunburstDataLabelsOptionsObject\n             *\n             * @private\n             */\n            dataLabels: {\n                allowOverlap: true,\n                defer: true,\n                /**\n                 * Decides how the data label will be rotated relative to the\n                 * perimeter of the sunburst. Valid values are `circular`, `auto`,\n                 * `parallel` and `perpendicular`. When `circular`, the best fit\n                 * will be computed for the point, so that the label is curved\n                 * around the center when there is room for it, otherwise\n                 * perpendicular. The legacy `auto` option works similar to\n                 * `circular`, but instead of curving the labels they are tangent to\n                 * the perimeter.\n                 *\n                 * The `rotation` option takes precedence over `rotationMode`.\n                 *\n                 * @type       {string}\n                 * @sample {highcharts}\n                 *         highcharts/plotoptions/sunburst-datalabels-rotationmode-circular/\n                 *         Circular rotation mode\n                 * @validvalue [\"auto\", \"perpendicular\", \"parallel\", \"circular\"]\n                 * @since      6.0.0\n                 */\n                rotationMode: 'circular',\n                style: {\n                    /** @internal */\n                    textOverflow: 'ellipsis'\n                }\n            },\n            /**\n             * Which point to use as a root in the visualization.\n             *\n             * @type {string}\n             *\n             * @private\n             */\n            rootId: void 0,\n            /**\n             * Used together with the levels and `allowDrillToNode` options. When\n             * set to false the first level visible when drilling is considered\n             * to be level one. Otherwise the level will be the same as the tree\n             * structure.\n             *\n             * @private\n             */\n            levelIsConstant: true,\n            /**\n             * Determines the width of the ring per level.\n             *\n             * @sample {highcharts} highcharts/plotoptions/sunburst-levelsize/\n             *         Sunburst with various sizes per level\n             *\n             * @since 6.0.5\n             *\n             * @private\n             */\n            levelSize: {\n                /**\n                 * The value used for calculating the width of the ring. Its' affect\n                 * is determined by `levelSize.unit`.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/sunburst-levelsize/\n                 *         Sunburst with various sizes per level\n                 */\n                value: 1,\n                /**\n                 * How to interpret `levelSize.value`.\n                 *\n                 * - `percentage` gives a width relative to result of outer radius\n                 *   minus inner radius.\n                 *\n                 * - `pixels` gives the ring a fixed width in pixels.\n                 *\n                 * - `weight` takes the remaining width after percentage and pixels,\n                 *   and distributes it across all \"weighted\" levels. The value\n                 *   relative to the sum of all weights determines the width.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/sunburst-levelsize/\n                 *         Sunburst with various sizes per level\n                 *\n                 * @validvalue [\"percentage\", \"pixels\", \"weight\"]\n                 */\n                unit: 'weight'\n            },\n            /**\n             * Options for the button appearing when traversing down in a sunburst.\n             * Since v9.3.3 the `traverseUpButton` is replaced by `breadcrumbs`.\n             *\n             * @extends   plotOptions.treemap.traverseUpButton\n             * @since     6.0.0\n             * @deprecated\n             * @apioption plotOptions.sunburst.traverseUpButton\n             *\n             */\n            /**\n             * If a point is sliced, moved out from the center, how many pixels\n             * should it be moved?.\n             *\n             * @sample highcharts/plotoptions/sunburst-sliced\n             *         Sliced sunburst\n             *\n             * @since 6.0.4\n             *\n             * @private\n             */\n            slicedOffset: 10\n        };\n        /**\n         * A `sunburst` series. If the [type](#series.sunburst.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.sunburst\n         * @excluding dataParser, dataURL, stack, dataSorting, boostThreshold,\n         *            boostBlending\n         * @product   highcharts\n         * @requires  modules/sunburst.js\n         * @apioption series.sunburst\n         */\n        /**\n         * @type      {Array<number|null|*>}\n         * @extends   series.treemap.data\n         * @excluding x, y\n         * @product   highcharts\n         * @apioption series.sunburst.data\n         */\n        /**\n         * @type      {Highcharts.SeriesSunburstDataLabelsOptionsObject|Array<Highcharts.SeriesSunburstDataLabelsOptionsObject>}\n         * @product   highcharts\n         * @apioption series.sunburst.data.dataLabels\n         */\n        /**\n         * The value of the point, resulting in a relative area of the point\n         * in the sunburst.\n         *\n         * @type      {number|null}\n         * @since     6.0.0\n         * @product   highcharts\n         * @apioption series.sunburst.data.value\n         */\n        /**\n         * Use this option to build a tree structure. The value should be the id of the\n         * point which is the parent. If no points has a matching id, or this option is\n         * undefined, then the parent will be set to the root.\n         *\n         * @type      {string}\n         * @since     6.0.0\n         * @product   highcharts\n         * @apioption series.sunburst.data.parent\n         */\n        /**\n          * Whether to display a slice offset from the center. When a sunburst point is\n          * sliced, its children are also offset.\n          *\n          * @sample highcharts/plotoptions/sunburst-sliced\n          *         Sliced sunburst\n          *\n          * @type      {boolean}\n          * @default   false\n          * @since     6.0.4\n          * @product   highcharts\n          * @apioption series.sunburst.data.sliced\n          */\n        ''; // Detach doclets above\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SunburstSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstSeries.js', [_modules['Series/CenteredUtilities.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/Sunburst/SunburstPoint.js'], _modules['Series/Sunburst/SunburstUtilities.js'], _modules['Series/TreeUtilities.js'], _modules['Core/Utilities.js'], _modules['Series/Sunburst/SunburstNode.js'], _modules['Series/Sunburst/SunburstSeriesDefaults.js']], function (CU, H, SeriesRegistry, SunburstPoint, SunburstUtilities, TU, U, SunburstNode, SunburstSeriesDefaults) {\n        /* *\n         *\n         *  This module implements sunburst charts in Highcharts.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var getCenter = CU.getCenter, getStartAndEndRadians = CU.getStartAndEndRadians;\n        var noop = H.noop;\n        var _a = SeriesRegistry.seriesTypes, ColumnSeries = _a.column, TreemapSeries = _a.treemap;\n        var getColor = TU.getColor, getLevelOptions = TU.getLevelOptions, setTreeValues = TU.setTreeValues, updateRootId = TU.updateRootId;\n        var defined = U.defined, error = U.error, extend = U.extend, fireEvent = U.fireEvent, isNumber = U.isNumber, isObject = U.isObject, isString = U.isString, merge = U.merge, splat = U.splat;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var rad2deg = 180 / Math.PI;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /** @private */\n        function isBoolean(x) {\n            return typeof x === 'boolean';\n        }\n        /**\n         * Find a set of coordinates given a start coordinates, an angle, and a\n         * distance.\n         *\n         * @private\n         * @function getEndPoint\n         *\n         * @param {number} x\n         *        Start coordinate x\n         *\n         * @param {number} y\n         *        Start coordinate y\n         *\n         * @param {number} angle\n         *        Angle in radians\n         *\n         * @param {number} distance\n         *        Distance from start to end coordinates\n         *\n         * @return {Highcharts.SVGAttributes}\n         *         Returns the end coordinates, x and y.\n         */\n        var getEndPoint = function getEndPoint(x, y, angle, distance) {\n            return {\n                x: x + (Math.cos(angle) * distance),\n                y: y + (Math.sin(angle) * distance)\n            };\n        };\n        /** @private */\n        function getDlOptions(params) {\n            // Set options to new object to avoid problems with scope\n            var point = params.point, shape = isObject(params.shapeArgs) ? params.shapeArgs : {}, optionsPoint = (isObject(params.optionsPoint) ?\n                params.optionsPoint.dataLabels :\n                {}), \n            // The splat was used because levels dataLabels\n            // options doesn't work as an array\n            optionsLevel = splat(isObject(params.level) ?\n                params.level.dataLabels :\n                {})[0], options = merge({\n                style: {}\n            }, optionsLevel, optionsPoint);\n            var rotationRad, rotation, rotationMode = options.rotationMode;\n            if (!isNumber(options.rotation)) {\n                if (rotationMode === 'auto' || rotationMode === 'circular') {\n                    if (options.useHTML &&\n                        rotationMode === 'circular') {\n                        // Change rotationMode to 'auto' to avoid using text paths\n                        // for HTML labels, see #18953\n                        rotationMode = 'auto';\n                    }\n                    if (point.innerArcLength < 1 &&\n                        point.outerArcLength > shape.radius) {\n                        rotationRad = 0;\n                        // Trigger setTextPath function to get textOutline etc.\n                        if (point.dataLabelPath && rotationMode === 'circular') {\n                            options.textPath = {\n                                enabled: true\n                            };\n                        }\n                    }\n                    else if (point.innerArcLength > 1 &&\n                        point.outerArcLength > 1.5 * shape.radius) {\n                        if (rotationMode === 'circular') {\n                            options.textPath = {\n                                enabled: true,\n                                attributes: {\n                                    dy: 5\n                                }\n                            };\n                        }\n                        else {\n                            rotationMode = 'parallel';\n                        }\n                    }\n                    else {\n                        // Trigger the destroyTextPath function\n                        if (point.dataLabel &&\n                            point.dataLabel.textPath &&\n                            rotationMode === 'circular') {\n                            options.textPath = {\n                                enabled: false\n                            };\n                        }\n                        rotationMode = 'perpendicular';\n                    }\n                }\n                if (rotationMode !== 'auto' && rotationMode !== 'circular') {\n                    if (point.dataLabel && point.dataLabel.textPath) {\n                        options.textPath = {\n                            enabled: false\n                        };\n                    }\n                    rotationRad = (shape.end -\n                        (shape.end - shape.start) / 2);\n                }\n                if (rotationMode === 'parallel') {\n                    options.style.width = Math.min(shape.radius * 2.5, (point.outerArcLength + point.innerArcLength) / 2);\n                }\n                else {\n                    if (!defined(options.style.width) &&\n                        shape.radius) {\n                        options.style.width = point.node.level === 1 ?\n                            2 * shape.radius :\n                            shape.radius;\n                    }\n                }\n                if (rotationMode === 'perpendicular' &&\n                    // 16 is the inferred line height. We don't know the real line\n                    // yet because the label is not rendered. A better approach for this\n                    // would be to hide the label from the `alignDataLabel` function\n                    // when the actual line height is known.\n                    point.outerArcLength < 16) {\n                    options.style.width = 1;\n                }\n                // Apply padding (#8515)\n                options.style.width = Math.max(options.style.width - 2 * (options.padding || 0), 1);\n                rotation = (rotationRad * rad2deg) % 180;\n                if (rotationMode === 'parallel') {\n                    rotation -= 90;\n                }\n                // Prevent text from rotating upside down\n                if (rotation > 90) {\n                    rotation -= 180;\n                }\n                else if (rotation < -90) {\n                    rotation += 180;\n                }\n                options.rotation = rotation;\n            }\n            if (options.textPath) {\n                if (point.shapeExisting.innerR === 0 &&\n                    options.textPath.enabled) {\n                    // Enable rotation to render text\n                    options.rotation = 0;\n                    // Center dataLabel - disable textPath\n                    options.textPath.enabled = false;\n                    // Setting width and padding\n                    options.style.width = Math.max((point.shapeExisting.r * 2) -\n                        2 * (options.padding || 0), 1);\n                }\n                else if (point.dlOptions &&\n                    point.dlOptions.textPath &&\n                    !point.dlOptions.textPath.enabled &&\n                    (rotationMode === 'circular')) {\n                    // Bring dataLabel back if was a center dataLabel\n                    options.textPath.enabled = true;\n                }\n                if (options.textPath.enabled) {\n                    // Enable rotation to render text\n                    options.rotation = 0;\n                    // Setting width and padding\n                    options.style.width = Math.max((point.outerArcLength +\n                        point.innerArcLength) / 2 -\n                        2 * (options.padding || 0), 1);\n                }\n            }\n            return options;\n        }\n        /** @private */\n        function getAnimation(shape, params) {\n            var point = params.point, radians = params.radians, innerR = params.innerR, idRoot = params.idRoot, idPreviousRoot = params.idPreviousRoot, shapeExisting = params.shapeExisting, shapeRoot = params.shapeRoot, shapePreviousRoot = params.shapePreviousRoot, visible = params.visible;\n            var from = {}, to = {\n                end: shape.end,\n                start: shape.start,\n                innerR: shape.innerR,\n                r: shape.r,\n                x: shape.x,\n                y: shape.y\n            };\n            if (visible) {\n                // Animate points in\n                if (!point.graphic && shapePreviousRoot) {\n                    if (idRoot === point.id) {\n                        from = {\n                            start: radians.start,\n                            end: radians.end\n                        };\n                    }\n                    else {\n                        from = (shapePreviousRoot.end <= shape.start) ? {\n                            start: radians.end,\n                            end: radians.end\n                        } : {\n                            start: radians.start,\n                            end: radians.start\n                        };\n                    }\n                    // Animate from center and outwards.\n                    from.innerR = from.r = innerR;\n                }\n            }\n            else {\n                // Animate points out\n                if (point.graphic) {\n                    if (idPreviousRoot === point.id) {\n                        to = {\n                            innerR: innerR,\n                            r: innerR\n                        };\n                    }\n                    else if (shapeRoot) {\n                        to = (shapeRoot.end <= shapeExisting.start) ?\n                            {\n                                innerR: innerR,\n                                r: innerR,\n                                start: radians.end,\n                                end: radians.end\n                            } : {\n                            innerR: innerR,\n                            r: innerR,\n                            start: radians.start,\n                            end: radians.start\n                        };\n                    }\n                }\n            }\n            return {\n                from: from,\n                to: to\n            };\n        }\n        /** @private */\n        function getDrillId(point, idRoot, mapIdToNode) {\n            var node = point.node;\n            var drillId, nodeRoot;\n            if (!node.isLeaf) {\n                // When it is the root node, the drillId should be set to parent.\n                if (idRoot === point.id) {\n                    nodeRoot = mapIdToNode[idRoot];\n                    drillId = nodeRoot.parent;\n                }\n                else {\n                    drillId = point.id;\n                }\n            }\n            return drillId;\n        }\n        /** @private */\n        function cbSetTreeValuesBefore(node, options) {\n            var mapIdToNode = options.mapIdToNode, parent = node.parent, nodeParent = parent ? mapIdToNode[parent] : void 0, series = options.series, chart = series.chart, points = series.points, point = points[node.i], colors = series.options.colors || chart && chart.options.colors, colorInfo = getColor(node, {\n                colors: colors,\n                colorIndex: series.colorIndex,\n                index: options.index,\n                mapOptionsToLevel: options.mapOptionsToLevel,\n                parentColor: nodeParent && nodeParent.color,\n                parentColorIndex: nodeParent && nodeParent.colorIndex,\n                series: options.series,\n                siblings: options.siblings\n            });\n            node.color = colorInfo.color;\n            node.colorIndex = colorInfo.colorIndex;\n            if (point) {\n                point.color = node.color;\n                point.colorIndex = node.colorIndex;\n                // Set slicing on node, but avoid slicing the top node.\n                node.sliced = (node.id !== options.idRoot) ? point.sliced : false;\n            }\n            return node;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var SunburstSeries = /** @class */ (function (_super) {\n            __extends(SunburstSeries, _super);\n            function SunburstSeries() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            SunburstSeries.prototype.alignDataLabel = function (point, dataLabel, labelOptions) {\n                if (labelOptions.textPath && labelOptions.textPath.enabled) {\n                    return;\n                }\n                return _super.prototype.alignDataLabel.apply(this, arguments);\n            };\n            /**\n             * Animate the slices in. Similar to the animation of polar charts.\n             * @private\n             */\n            SunburstSeries.prototype.animate = function (init) {\n                var chart = this.chart, center = [\n                    chart.plotWidth / 2,\n                    chart.plotHeight / 2\n                ], plotLeft = chart.plotLeft, plotTop = chart.plotTop, group = this.group;\n                var attribs;\n                // Initialize the animation\n                if (init) {\n                    // Scale down the group and place it in the center\n                    attribs = {\n                        translateX: center[0] + plotLeft,\n                        translateY: center[1] + plotTop,\n                        scaleX: 0.001,\n                        scaleY: 0.001,\n                        rotation: 10,\n                        opacity: 0.01\n                    };\n                    group.attr(attribs);\n                    // Run the animation\n                }\n                else {\n                    attribs = {\n                        translateX: plotLeft,\n                        translateY: plotTop,\n                        scaleX: 1,\n                        scaleY: 1,\n                        rotation: 0,\n                        opacity: 1\n                    };\n                    group.animate(attribs, this.options.animation);\n                }\n            };\n            SunburstSeries.prototype.drawPoints = function () {\n                var series = this, mapOptionsToLevel = series.mapOptionsToLevel, shapeRoot = series.shapeRoot, group = series.group, hasRendered = series.hasRendered, idRoot = series.rootNode, idPreviousRoot = series.idPreviousRoot, nodeMap = series.nodeMap, nodePreviousRoot = nodeMap[idPreviousRoot], shapePreviousRoot = nodePreviousRoot && nodePreviousRoot.shapeArgs, points = series.points, radians = series.startAndEndRadians, chart = series.chart, optionsChart = chart && chart.options && chart.options.chart || {}, animation = (isBoolean(optionsChart.animation) ?\n                    optionsChart.animation :\n                    true), positions = series.center, center = {\n                    x: positions[0],\n                    y: positions[1]\n                }, innerR = positions[3] / 2, renderer = series.chart.renderer, hackDataLabelAnimation = !!(animation &&\n                    hasRendered &&\n                    idRoot !== idPreviousRoot &&\n                    series.dataLabelsGroup);\n                var animateLabels, animateLabelsCalled = false, addedHack = false;\n                if (hackDataLabelAnimation) {\n                    series.dataLabelsGroup.attr({ opacity: 0 });\n                    animateLabels = function () {\n                        var s = series;\n                        animateLabelsCalled = true;\n                        if (s.dataLabelsGroup) {\n                            s.dataLabelsGroup.animate({\n                                opacity: 1,\n                                visibility: 'inherit'\n                            });\n                        }\n                    };\n                }\n                for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n                    var point = points_1[_i];\n                    var node = point.node, level = mapOptionsToLevel[node.level], shapeExisting = (point.shapeExisting || {}), shape = node.shapeArgs || {}, visible = !!(node.visible && node.shapeArgs);\n                    var animationInfo = void 0, onComplete = void 0;\n                    // Border radius requires the border-radius.js module. Adding it\n                    // here because the SunburstSeries is a mess and I can't find the\n                    // regular shapeArgs. Usually shapeArgs are created in the series'\n                    // `translate` function and then passed directly on to the renderer\n                    // in the `drawPoints` function.\n                    shape.borderRadius = series.options.borderRadius;\n                    if (hasRendered && animation) {\n                        animationInfo = getAnimation(shape, {\n                            center: center,\n                            point: point,\n                            radians: radians,\n                            innerR: innerR,\n                            idRoot: idRoot,\n                            idPreviousRoot: idPreviousRoot,\n                            shapeExisting: shapeExisting,\n                            shapeRoot: shapeRoot,\n                            shapePreviousRoot: shapePreviousRoot,\n                            visible: visible\n                        });\n                    }\n                    else {\n                        // When animation is disabled, attr is called from animation.\n                        animationInfo = {\n                            to: shape,\n                            from: {}\n                        };\n                    }\n                    extend(point, {\n                        shapeExisting: shape,\n                        tooltipPos: [shape.plotX, shape.plotY],\n                        drillId: getDrillId(point, idRoot, nodeMap),\n                        name: '' + (point.name || point.id || point.index),\n                        plotX: shape.plotX,\n                        plotY: shape.plotY,\n                        value: node.val,\n                        isInside: visible,\n                        isNull: !visible // Used for dataLabels & point.draw\n                    });\n                    point.dlOptions = getDlOptions({\n                        point: point,\n                        level: level,\n                        optionsPoint: point.options,\n                        shapeArgs: shape\n                    });\n                    if (!addedHack && visible) {\n                        addedHack = true;\n                        onComplete = animateLabels;\n                    }\n                    point.draw({\n                        animatableAttribs: animationInfo.to,\n                        attribs: extend(animationInfo.from, (!chart.styledMode && series.pointAttribs(point, (point.selected && 'select')))),\n                        onComplete: onComplete,\n                        group: group,\n                        renderer: renderer,\n                        shapeType: 'arc',\n                        shapeArgs: shape\n                    });\n                }\n                // Draw data labels after points\n                // TODO draw labels one by one to avoid additional looping\n                if (hackDataLabelAnimation && addedHack) {\n                    series.hasRendered = false;\n                    series.options.dataLabels.defer = true;\n                    ColumnSeries.prototype.drawDataLabels.call(series);\n                    series.hasRendered = true;\n                    // If animateLabels is called before labels were hidden, then call\n                    // it again.\n                    if (animateLabelsCalled) {\n                        animateLabels();\n                    }\n                }\n                else {\n                    ColumnSeries.prototype.drawDataLabels.call(series);\n                }\n                series.idPreviousRoot = idRoot;\n            };\n            /**\n             * The layout algorithm for the levels.\n             * @private\n             */\n            SunburstSeries.prototype.layoutAlgorithm = function (parent, children, options) {\n                var startAngle = parent.start;\n                var range = parent.end - startAngle, total = parent.val, x = parent.x, y = parent.y, radius = ((options &&\n                    isObject(options.levelSize) &&\n                    isNumber(options.levelSize.value)) ?\n                    options.levelSize.value :\n                    0), innerRadius = parent.r, outerRadius = innerRadius + radius, slicedOffset = options && isNumber(options.slicedOffset) ?\n                    options.slicedOffset :\n                    0;\n                return (children || []).reduce(function (arr, child) {\n                    var percentage = (1 / total) * child.val, radians = percentage * range, radiansCenter = startAngle + (radians / 2), offsetPosition = getEndPoint(x, y, radiansCenter, slicedOffset), values = {\n                        x: child.sliced ? offsetPosition.x : x,\n                        y: child.sliced ? offsetPosition.y : y,\n                        innerR: innerRadius,\n                        r: outerRadius,\n                        radius: radius,\n                        start: startAngle,\n                        end: startAngle + radians\n                    };\n                    arr.push(values);\n                    startAngle = values.end;\n                    return arr;\n                }, []);\n            };\n            SunburstSeries.prototype.setRootNode = function (id, redraw, eventArguments) {\n                var series = this;\n                if ( // If the target node is the only one at level 1, skip it. (#18658)\n                series.nodeMap[id].level === 1 &&\n                    series.nodeList\n                        .filter(function (node) { return node.level === 1; })\n                        .length === 1) {\n                    if (series.idPreviousRoot === '') {\n                        return;\n                    }\n                    id = '';\n                }\n                _super.prototype.setRootNode.call(this, id, redraw, eventArguments);\n            };\n            /**\n             * Set the shape arguments on the nodes. Recursive from root down.\n             * @private\n             */\n            SunburstSeries.prototype.setShapeArgs = function (parent, parentValues, mapOptionsToLevel) {\n                var level = parent.level + 1, options = mapOptionsToLevel[level], \n                // Collect all children which should be included\n                children = parent.children.filter(function (n) {\n                    return n.visible;\n                }), twoPi = 6.28; // Two times Pi.\n                var childrenValues = [];\n                childrenValues = this.layoutAlgorithm(parentValues, children, options);\n                var i = -1;\n                for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n                    var child = children_1[_i];\n                    var values = childrenValues[++i], angle = values.start + ((values.end - values.start) / 2), radius = values.innerR + ((values.r - values.innerR) / 2), radians = (values.end - values.start), isCircle = (values.innerR === 0 && radians > twoPi), center = (isCircle ?\n                        { x: values.x, y: values.y } :\n                        getEndPoint(values.x, values.y, angle, radius)), val = (child.val ?\n                        (child.childrenTotal > child.val ?\n                            child.childrenTotal :\n                            child.val) :\n                        child.childrenTotal);\n                    // The inner arc length is a convenience for data label filters.\n                    if (this.points[child.i]) {\n                        this.points[child.i].innerArcLength = radians * values.innerR;\n                        this.points[child.i].outerArcLength = radians * values.r;\n                    }\n                    child.shapeArgs = merge(values, {\n                        plotX: center.x,\n                        plotY: center.y\n                    });\n                    child.values = merge(values, {\n                        val: val\n                    });\n                    // If node has children, then call method recursively\n                    if (child.children.length) {\n                        this.setShapeArgs(child, child.values, mapOptionsToLevel);\n                    }\n                }\n            };\n            SunburstSeries.prototype.translate = function () {\n                var series = this, options = series.options, positions = series.center = series.getCenter(), radians = series.startAndEndRadians = getStartAndEndRadians(options.startAngle, options.endAngle), innerRadius = positions[3] / 2, outerRadius = positions[2] / 2, diffRadius = outerRadius - innerRadius, \n                // NOTE: updateRootId modifies series.\n                rootId = updateRootId(series);\n                var mapIdToNode = series.nodeMap, mapOptionsToLevel, nodeRoot = mapIdToNode && mapIdToNode[rootId], nodeIds = {};\n                series.shapeRoot = nodeRoot && nodeRoot.shapeArgs;\n                if (!series.processedXData) { // Hidden series\n                    series.processData();\n                }\n                series.generatePoints();\n                fireEvent(series, 'afterTranslate');\n                // @todo Only if series.isDirtyData is true\n                var tree = series.tree = series.getTree();\n                // Render traverseUpButton, after series.nodeMap i calculated.\n                mapIdToNode = series.nodeMap;\n                nodeRoot = mapIdToNode[rootId];\n                var idTop = isString(nodeRoot.parent) ? nodeRoot.parent : '', nodeTop = mapIdToNode[idTop], _a = SunburstUtilities.getLevelFromAndTo(nodeRoot), from = _a.from, to = _a.to;\n                mapOptionsToLevel = getLevelOptions({\n                    from: from,\n                    levels: series.options.levels,\n                    to: to,\n                    defaults: {\n                        colorByPoint: options.colorByPoint,\n                        dataLabels: options.dataLabels,\n                        levelIsConstant: options.levelIsConstant,\n                        levelSize: options.levelSize,\n                        slicedOffset: options.slicedOffset\n                    }\n                });\n                // NOTE consider doing calculateLevelSizes in a callback to\n                // getLevelOptions\n                mapOptionsToLevel = SunburstUtilities.calculateLevelSizes(mapOptionsToLevel, {\n                    diffRadius: diffRadius,\n                    from: from,\n                    to: to\n                });\n                // TODO Try to combine setTreeValues & setColorRecursive to avoid\n                //  unnecessary looping.\n                setTreeValues(tree, {\n                    before: cbSetTreeValuesBefore,\n                    idRoot: rootId,\n                    levelIsConstant: options.levelIsConstant,\n                    mapOptionsToLevel: mapOptionsToLevel,\n                    mapIdToNode: mapIdToNode,\n                    points: series.points,\n                    series: series\n                });\n                var values = mapIdToNode[''].shapeArgs = {\n                    end: radians.end,\n                    r: innerRadius,\n                    start: radians.start,\n                    val: nodeRoot.val,\n                    x: positions[0],\n                    y: positions[1]\n                };\n                this.setShapeArgs(nodeTop, values, mapOptionsToLevel);\n                // Set mapOptionsToLevel on series for use in drawPoints.\n                series.mapOptionsToLevel = mapOptionsToLevel;\n                // #10669 - verify if all nodes have unique ids\n                for (var _i = 0, _b = series.points; _i < _b.length; _i++) {\n                    var point = _b[_i];\n                    if (nodeIds[point.id]) {\n                        error(31, false, series.chart);\n                    }\n                    // Map\n                    nodeIds[point.id] = true;\n                }\n                // Reset object\n                nodeIds = {};\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            SunburstSeries.defaultOptions = merge(TreemapSeries.defaultOptions, SunburstSeriesDefaults);\n            return SunburstSeries;\n        }(TreemapSeries));\n        extend(SunburstSeries.prototype, {\n            axisTypes: [],\n            drawDataLabels: noop,\n            getCenter: getCenter,\n            isCartesian: false,\n            // Mark that the sunburst is supported by the series on point feature.\n            onPointSupported: true,\n            pointAttribs: ColumnSeries.prototype.pointAttribs,\n            pointClass: SunburstPoint,\n            NodeClass: SunburstNode,\n            utils: SunburstUtilities\n        });\n        SeriesRegistry.registerSeriesType('sunburst', SunburstSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SunburstSeries;\n    });\n    _registerModule(_modules, 'masters/modules/sunburst.src.js', [_modules['Core/Globals.js'], _modules['Extensions/Breadcrumbs/Breadcrumbs.js']], function (Highcharts, Breadcrumbs) {\n\n        var G = Highcharts;\n        G.Breadcrumbs = G.Breadcrumbs || Breadcrumbs;\n        G.Breadcrumbs.compose(G.Chart, G.defaultOptions);\n\n        return Highcharts;\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","lang","mainBreadcrumb","options","buttonTheme","fill","height","padding","zIndex","states","select","style","color","buttonSpacing","floating","format","relativeTo","rtl","position","align","verticalAlign","x","y","separator","text","fontSize","showFullPath","useHTML","BreadcrumbsDefaults","F","H","U","composed","addEvent","defined","extend","fireEvent","isString","merge","objectEach","pick","pushUnique","onChartAfterShowResetZoom","chart","breadcrumbs","bbox","resetZoomButton","getBBox","breadcrumbsOptions","alignBreadcrumbsGroup","width","onChartDestroy","destroy","onChartGetMargins","level","breadcrumbsHeight","marginBottom","yOffset","plotTop","onChartRedraw","redraw","onChartSelection","event","resetSelection","Breadcrumbs","userOptions","elementList","isDirty","list","chartOptions","drilldown","drillUpButton","defaultOptions","navigation","compose","ChartClass","highchartsDefaultOptions","prototype","updateProperties","setList","setLevel","length","getLevel","getButtonText","breadcrumb","textFormat","defaultText","drillUpText","returnText","formatter","levelOptions","render","group","renderer","g","addClass","attr","add","renderFullPathButtons","renderSingleButton","destroySingleButton","resetElementListState","updateListElements","destroyListElements","posX","previousBreadcrumb","renderButton","updateSingleButton","xOffset","positionOptions","alignTo","bBox","additionalSpace","newPositions","posY","button","e","callDefaultEvent","buttonEvents","events","click","call","newLevel","styledMode","renderSeparator","separatorOptions","label","css","update","currentBreadcrumb","force","element","updated","rtlFactor","updateXPosition","spacing","adjustToRTL","translate","i","iEnd","isLast","setState","SeriesRegistry","ColorMapComposition","columnProto","seriesTypes","column","onPointAfterSetState","point","moveToTopOnHover","graphic","state","pointMembers","dataLabelOnNull","isValid","value","Infinity","isNaN","seriesMembers","colorKey","axisTypes","parallelArrays","pointArrayMap","trackerGroups","colorAttribs","ret","colorProp","pointAttribs","SeriesClass","pointClass","TreemapAlgorithmGroup","h","w","d","p","plot","direction","startDirection","total","nW","lW","nH","lH","elArr","lP","nR","lR","aspectRatio","Math","max","addElement","el","push","reset","TreemapNode","childrenTotal","visible","init","id","children","series","parent","__assign","Object","assign","t","s","n","arguments","draw","params","animatableAttribs","onComplete","animation","hasRendered","attribs","getClassName","shouldDraw","shapeType","image","imageUrl","shapeArgs","animate","isNew","destroy_1","keys","DPU","extendStatics","__extends","b","setPrototypeOf","__proto__","Array","TypeError","String","__","constructor","create","_a","PiePoint","pie","ScatterPoint","scatter","isNumber","TreemapPoint","_super","_this","className","node","nodeMap","rootNode","isLeaf","interactByLeaf","allowTraversingTree","Boolean","plotY","setVisible","animationLimit","borderRadius","showInLegend","marker","colorByPoint","dataLabels","defer","enabled","name","inside","tooltip","headerFormat","pointFormat","ignoreHiddenPoint","layoutAlgorithm","layoutStartingDirection","alternateStartingDirection","levelIsConstant","traverseUpButton","borderColor","borderWidth","opacity","hover","brightness","heatmap","halo","shadow","legendSymbol","TreemapUtilities","recursive","item","func","context","next","Color","isArray","isObject","relativeLength","getColor","colorVariation","colorIndexByPoint","colorIndex","index","mapOptionsToLevel","parentColor","parentColorIndex","colors","siblings","points","chartOptionsChart","colorCount","key","parse","brighten","to","get","getLevelOptions","defaults","converted","from","levels","result","reduce","getNodeWidth","columnCount","nodeDistance","_b","nodeWidth","_c","plotSizeX","test","fraction","parseFloat","nDistance","Number","setTreeValues","tree","before","idRoot","nodeRoot","mapIdToNode","optionsPoint","levelDynamic","forEach","child","newOptions","val","updateRootId","rootId","TreemapSeriesDefaults","TU","noop","ColumnSeries","ScatterSeries","correctFloat","error","stableSort","treemapAxisDefaultValues","onSeriesAfterBindAxes","treeAxis","xAxis","yAxis","is","endOnTick","gridLineWidth","lineWidth","min","minPadding","maxPadding","startOnTick","title","tickPositions","setOptions","TreemapSeries","algorithmCalcPoints","directionChange","last","childrenArea","pX","pY","pW","pH","keep","end","gW","gH","_i","algorithmFill","pTot","children_1","algorithmLowAspectRatio","children_2","alignDataLabel","dataLabel","labelOptions","textOverflow","textWidth","calculateChildrenAreas","area","algorithm","alternate","filter","ignore","childrenValues","children_3","values","pointValues","axisRatio","axisMax","createList","currentLevelNumber","target","newRootId","extraNodes","reverse","node_1","drawDataLabels","points_1","hasDataLabels","dlOptions","drawPoints","withinAnimationLimit","pointCount","points_2","groupKey","hasGraphic","shouldAnimate","isInside","r","selected","survive","drillId","drillToByLeaf","drillToByGroup","nodeParent","drillToNode","setRootNode","drillUp","trigger","getExtremes","colorValueData","dataMin","dataMax","valueMin","valueMax","getListOfParents","data","existingIds","arr","ids","listOfParents","prev","curr","parent_1","indexOf","children_4","getTree","allIds","map","parentList","nodeList","buildTree","NodeClass","children_5","child_1","parentNode","hasData","processedXData","setOptionsEvent","allowDrillToNode","eventsToUnbind","onClickDrillToNode","keepEventsForUpdate","drillUpsNumber","stateOptions","borderDashStyle","setOpacity","cursor","setColorRecursive","colorInfo","setPointValues","points_3","crispCorr","x1","round","toPixels","x2","y1","y2","abs","plotX","eventArguments","previousRootId","idPreviousRoot","inactiveOtherPoints","a","sortIndex","sliceAndDice","squarified","strip","stripes","seriesArea","children_6","concat","len","colorAxis","setExtremes","setScale","buildKDTree","directTouch","getExtremesFromAll","getSymbol","optionalAxis","utils","registerSeriesType","Point","treemap","pInt","SunburstPoint","getDataLabelPath","moreThanHalf","shapeExisting","distance","start","angle","upperHalf","PI","dataLabelPath","arc","open","longArc","clockwise","innerR","defs","haloPath","range","calculateLevelSizes","diffRadius","levelsNotIncluded","remainingSize","totalWeight","levels_1","unit","levelSize","levels_2","weight","levelsNotIncluded_1","getLevelFromAndTo","SunburstNode","center","clip","allowOverlap","rotationMode","slicedOffset","CU","SunburstUtilities","SunburstSeriesDefaults","getCenter","getStartAndEndRadians","splat","rad2deg","getEndPoint","cos","sin","cbSetTreeValuesBefore","sliced","SunburstSeries","textPath","plotWidth","plotHeight","plotLeft","translateX","translateY","scaleX","scaleY","rotation","animateLabels","shapeRoot","nodePreviousRoot","shapePreviousRoot","radians","startAndEndRadians","optionsChart","isBoolean","positions","hackDataLabelAnimation","dataLabelsGroup","animateLabelsCalled","addedHack","visibility","shape","animationInfo","getAnimation","tooltipPos","getDrillId","isNull","getDlOptions","rotationRad","innerArcLength","outerArcLength","radius","attributes","dy","startAngle","innerRadius","outerRadius","percentage","offsetPosition","setShapeArgs","parentValues","isCircle","endAngle","nodeIds","processData","generatePoints","idTop","nodeTop","isCartesian","onPointSupported","G","Chart"],"mappings":"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"}