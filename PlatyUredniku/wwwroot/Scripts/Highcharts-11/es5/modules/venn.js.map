{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.1 (2024-04-04)\n *\n * (c) 2017-2024 Highsoft AS\n * Authors: Jon Arild Nygard\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/venn', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Geometry/GeometryUtilities.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var GeometryUtilities;\n        (function (GeometryUtilities) {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Calculates the center between a list of points.\n             *\n             * @private\n             *\n             * @param {Array<Highcharts.PositionObject>} points\n             * A list of points to calculate the center of.\n             *\n             * @return {Highcharts.PositionObject}\n             * Calculated center\n             */\n            function getCenterOfPoints(points) {\n                var sum = points.reduce(function (sum, point) {\n                    sum.x += point.x;\n                    sum.y += point.y;\n                    return sum;\n                }, { x: 0, y: 0 });\n                return {\n                    x: sum.x / points.length,\n                    y: sum.y / points.length\n                };\n            }\n            GeometryUtilities.getCenterOfPoints = getCenterOfPoints;\n            /**\n             * Calculates the distance between two points based on their x and y\n             * coordinates.\n             *\n             * @private\n             *\n             * @param {Highcharts.PositionObject} p1\n             * The x and y coordinates of the first point.\n             *\n             * @param {Highcharts.PositionObject} p2\n             * The x and y coordinates of the second point.\n             *\n             * @return {number}\n             * Returns the distance between the points.\n             */\n            function getDistanceBetweenPoints(p1, p2) {\n                return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n            }\n            GeometryUtilities.getDistanceBetweenPoints = getDistanceBetweenPoints;\n            /**\n             * Calculates the angle between two points.\n             * @todo add unit tests.\n             * @private\n             * @param {Highcharts.PositionObject} p1 The first point.\n             * @param {Highcharts.PositionObject} p2 The second point.\n             * @return {number} Returns the angle in radians.\n             */\n            function getAngleBetweenPoints(p1, p2) {\n                return Math.atan2(p2.x - p1.x, p2.y - p1.y);\n            }\n            GeometryUtilities.getAngleBetweenPoints = getAngleBetweenPoints;\n        })(GeometryUtilities || (GeometryUtilities = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GeometryUtilities;\n    });\n    _registerModule(_modules, 'Core/Geometry/CircleUtilities.js', [_modules['Core/Geometry/GeometryUtilities.js']], function (Geometry) {\n        /* *\n         *\n         *  (c) 2010-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var getAngleBetweenPoints = Geometry.getAngleBetweenPoints, getCenterOfPoints = Geometry.getCenterOfPoints, getDistanceBetweenPoints = Geometry.getDistanceBetweenPoints;\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var CircleUtilities;\n        (function (CircleUtilities) {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             *\n             * @param {number} x\n             * Number to round\n             *\n             * @param {number} decimals\n             * Number of decimals to round to\n             *\n             * @return {number}\n             * Rounded number\n             */\n            function round(x, decimals) {\n                var a = Math.pow(10, decimals);\n                return Math.round(x * a) / a;\n            }\n            CircleUtilities.round = round;\n            /**\n             * Calculates the area of a circle based on its radius.\n             *\n             * @private\n             *\n             * @param {number} r\n             * The radius of the circle.\n             *\n             * @return {number}\n             * Returns the area of the circle.\n             */\n            function getAreaOfCircle(r) {\n                if (r <= 0) {\n                    throw new Error('radius of circle must be a positive number.');\n                }\n                return Math.PI * r * r;\n            }\n            CircleUtilities.getAreaOfCircle = getAreaOfCircle;\n            /**\n             * Calculates the area of a circular segment based on the radius of the\n             * circle and the height of the segment.\n             *\n             * @see http://mathworld.wolfram.com/CircularSegment.html\n             *\n             * @private\n             *\n             * @param {number} r\n             * The radius of the circle.\n             *\n             * @param {number} h\n             * The height of the circular segment.\n             *\n             * @return {number}\n             * Returns the area of the circular segment.\n             */\n            function getCircularSegmentArea(r, h) {\n                return (r * r * Math.acos(1 - h / r) -\n                    (r - h) * Math.sqrt(h * (2 * r - h)));\n            }\n            CircleUtilities.getCircularSegmentArea = getCircularSegmentArea;\n            /**\n             * Calculates the area of overlap between two circles based on their\n             * radiuses and the distance between them.\n             *\n             * @see http://mathworld.wolfram.com/Circle-CircleIntersection.html\n             *\n             * @private\n             *\n             * @param {number} r1\n             * Radius of the first circle.\n             *\n             * @param {number} r2\n             * Radius of the second circle.\n             *\n             * @param {number} d\n             * The distance between the two circles.\n             *\n             * @return {number}\n             * Returns the area of overlap between the two circles.\n             */\n            function getOverlapBetweenCircles(r1, r2, d) {\n                var overlap = 0;\n                // If the distance is larger than the sum of the radiuses then the\n                // circles does not overlap.\n                if (d < r1 + r2) {\n                    if (d <= Math.abs(r2 - r1)) {\n                        // If the circles are completely overlapping, then the overlap\n                        // equals the area of the smallest circle.\n                        overlap = getAreaOfCircle(r1 < r2 ? r1 : r2);\n                    }\n                    else {\n                        // Height of first triangle segment.\n                        var d1 = (r1 * r1 - r2 * r2 + d * d) / (2 * d), \n                        // Height of second triangle segment.\n                        d2 = d - d1;\n                        overlap = (getCircularSegmentArea(r1, r1 - d1) +\n                            getCircularSegmentArea(r2, r2 - d2));\n                    }\n                    // Round the result to two decimals.\n                    overlap = round(overlap, 14);\n                }\n                return overlap;\n            }\n            CircleUtilities.getOverlapBetweenCircles = getOverlapBetweenCircles;\n            /**\n             * Calculates the intersection points of two circles.\n             *\n             * NOTE: does not handle floating errors well.\n             *\n             * @private\n             *\n             * @param {Highcharts.CircleObject} c1\n             * The first circle.\n             *\n             * @param {Highcharts.CircleObject} c2\n             * The second circle.\n             *\n             * @return {Array<Highcharts.PositionObject>}\n             * Returns the resulting intersection points.\n             */\n            function getCircleCircleIntersection(c1, c2) {\n                var d = getDistanceBetweenPoints(c1, c2), r1 = c1.r, r2 = c2.r;\n                var points = [];\n                if (d < r1 + r2 && d > Math.abs(r1 - r2)) {\n                    // If the circles are overlapping, but not completely overlapping,\n                    // then it exists intersecting points.\n                    var r1Square = r1 * r1, r2Square = r2 * r2, \n                    // `d^2 - r^2 + R^2 / 2d`\n                    x = (r1Square - r2Square + d * d) / (2 * d), \n                    // `y^2 = R^2 - x^2`\n                    y = Math.sqrt(r1Square - x * x), x1 = c1.x, x2 = c2.x, y1 = c1.y, y2 = c2.y, x0 = x1 + x * (x2 - x1) / d, y0 = y1 + x * (y2 - y1) / d, rx = -(y2 - y1) * (y / d), ry = -(x2 - x1) * (y / d);\n                    points = [\n                        { x: round(x0 + rx, 14), y: round(y0 - ry, 14) },\n                        { x: round(x0 - rx, 14), y: round(y0 + ry, 14) }\n                    ];\n                }\n                return points;\n            }\n            CircleUtilities.getCircleCircleIntersection = getCircleCircleIntersection;\n            /**\n             * Calculates all the intersection points for between a list of circles.\n             *\n             * @private\n             *\n             * @param {Array<Highcharts.CircleObject>} circles\n             * The circles to calculate the points from.\n             *\n             * @return {Array<Highcharts.GeometryObject>}\n             * Returns a list of intersection points.\n             */\n            function getCirclesIntersectionPoints(circles) {\n                return circles.reduce(function (points, c1, i, arr) {\n                    var additional = arr\n                        .slice(i + 1)\n                        .reduce(function (points, c2, j) {\n                        var indexes = [i, j + i + 1];\n                        return points.concat(getCircleCircleIntersection(c1, c2).map(function (p) {\n                            p.indexes = indexes;\n                            return p;\n                        }));\n                    }, []);\n                    return points.concat(additional);\n                }, []);\n            }\n            CircleUtilities.getCirclesIntersectionPoints = getCirclesIntersectionPoints;\n            /**\n             * Tests whether the first circle is completely overlapping the second\n             * circle.\n             *\n             * @private\n             *\n             * @param {Highcharts.CircleObject} circle1\n             * The first circle.\n             *\n             * @param {Highcharts.CircleObject} circle2\n             * The second circle.\n             *\n             * @return {boolean}\n             * Returns true if circle1 is completely overlapping circle2, false if not.\n             */\n            function isCircle1CompletelyOverlappingCircle2(circle1, circle2) {\n                return getDistanceBetweenPoints(circle1, circle2) + circle2.r < circle1.r + 1e-10;\n            }\n            CircleUtilities.isCircle1CompletelyOverlappingCircle2 = isCircle1CompletelyOverlappingCircle2;\n            /**\n             * Tests whether a point lies within a given circle.\n             * @private\n             * @param {Highcharts.PositionObject} point\n             * The point to test for.\n             *\n             * @param {Highcharts.CircleObject} circle\n             * The circle to test if the point is within.\n             *\n             * @return {boolean}\n             * Returns true if the point is inside, false if outside.\n             */\n            function isPointInsideCircle(point, circle) {\n                return getDistanceBetweenPoints(point, circle) <= circle.r + 1e-10;\n            }\n            CircleUtilities.isPointInsideCircle = isPointInsideCircle;\n            /**\n             * Tests whether a point lies within a set of circles.\n             *\n             * @private\n             *\n             * @param {Highcharts.PositionObject} point\n             * The point to test.\n             *\n             * @param {Array<Highcharts.CircleObject>} circles\n             * The list of circles to test against.\n             *\n             * @return {boolean}\n             * Returns true if the point is inside all the circles, false if not.\n             */\n            function isPointInsideAllCircles(point, circles) {\n                return !circles.some(function (circle) {\n                    return !isPointInsideCircle(point, circle);\n                });\n            }\n            CircleUtilities.isPointInsideAllCircles = isPointInsideAllCircles;\n            /**\n             * Tests whether a point lies outside a set of circles.\n             *\n             * TODO: add unit tests.\n             *\n             * @private\n             *\n             * @param {Highcharts.PositionObject} point\n             * The point to test.\n             *\n             * @param {Array<Highcharts.CircleObject>} circles\n             * The list of circles to test against.\n             *\n             * @return {boolean}\n             * Returns true if the point is outside all the circles, false if not.\n             */\n            function isPointOutsideAllCircles(point, circles) {\n                return !circles.some(function (circle) {\n                    return isPointInsideCircle(point, circle);\n                });\n            }\n            CircleUtilities.isPointOutsideAllCircles = isPointOutsideAllCircles;\n            /**\n             * Calculates the points for the polygon of the intersection area between\n             * a set of circles.\n             *\n             * @private\n             *\n             * @param {Array<Highcharts.CircleObject>} circles\n             * List of circles to calculate polygon of.\n             *\n             * @return {Array<Highcharts.GeometryObject>}\n             * Return list of points in the intersection polygon.\n             */\n            function getCirclesIntersectionPolygon(circles) {\n                return getCirclesIntersectionPoints(circles)\n                    .filter(function (p) {\n                    return isPointInsideAllCircles(p, circles);\n                });\n            }\n            CircleUtilities.getCirclesIntersectionPolygon = getCirclesIntersectionPolygon;\n            /**\n             * Calculate the path for the area of overlap between a set of circles.\n             *\n             * @todo handle cases with only 1 or 0 arcs.\n             *\n             * @private\n             *\n             * @param {Array<Highcharts.CircleObject>} circles\n             * List of circles to calculate area of.\n             *\n             * @return {Highcharts.GeometryIntersectionObject|undefined}\n             * Returns the path for the area of overlap. Returns an empty string if\n             * there are no intersection between all the circles.\n             */\n            function getAreaOfIntersectionBetweenCircles(circles) {\n                var intersectionPoints = getCirclesIntersectionPolygon(circles), result;\n                if (intersectionPoints.length > 1) {\n                    // Calculate the center of the intersection points.\n                    var center_1 = getCenterOfPoints(intersectionPoints);\n                    intersectionPoints = intersectionPoints\n                        // Calculate the angle between the center and the points.\n                        .map(function (p) {\n                        p.angle = getAngleBetweenPoints(center_1, p);\n                        return p;\n                    })\n                        // Sort the points by the angle to the center.\n                        .sort(function (a, b) {\n                        return b.angle - a.angle;\n                    });\n                    var startPoint = intersectionPoints[intersectionPoints.length - 1];\n                    var arcs = intersectionPoints\n                        .reduce(function (data, p1) {\n                        var startPoint = data.startPoint, midPoint = getCenterOfPoints([startPoint, p1]);\n                        // Calculate the arc from the intersection points and their\n                        // circles.\n                        var arc = p1.indexes\n                            // Filter out circles that are not included in both\n                            // intersection points.\n                            .filter(function (index) {\n                            return startPoint.indexes.indexOf(index) > -1;\n                        })\n                            // Iterate the circles of the intersection points and\n                            // calculate arcs.\n                            .reduce(function (arc, index) {\n                            var circle = circles[index], angle1 = getAngleBetweenPoints(circle, p1), angle2 = getAngleBetweenPoints(circle, startPoint), angleDiff = angle2 - angle1 +\n                                (angle2 < angle1 ? 2 * Math.PI : 0), angle = angle2 - angleDiff / 2;\n                            var width = getDistanceBetweenPoints(midPoint, {\n                                x: circle.x + circle.r * Math.sin(angle),\n                                y: circle.y + circle.r * Math.cos(angle)\n                            });\n                            var r = circle.r;\n                            // Width can sometimes become to large due to\n                            // floating point errors\n                            if (width > r * 2) {\n                                width = r * 2;\n                            }\n                            // Get the arc with the smallest width.\n                            if (!arc || arc.width > width) {\n                                arc = {\n                                    r: r,\n                                    largeArc: width > r ? 1 : 0,\n                                    width: width,\n                                    x: p1.x,\n                                    y: p1.y\n                                };\n                            }\n                            // Return the chosen arc.\n                            return arc;\n                        }, null);\n                        // If we find an arc then add it to the list and update p2.\n                        if (arc) {\n                            var r = arc.r;\n                            data.arcs.push(['A', r, r, 0, arc.largeArc, 1, arc.x, arc.y]);\n                            data.startPoint = p1;\n                        }\n                        return data;\n                    }, {\n                        startPoint: startPoint,\n                        arcs: []\n                    }).arcs;\n                    if (arcs.length === 0) {\n                        // Empty\n                    }\n                    else if (arcs.length === 1) {\n                        // Empty\n                    }\n                    else {\n                        arcs.unshift(['M', startPoint.x, startPoint.y]);\n                        result = {\n                            center: center_1,\n                            d: arcs\n                        };\n                    }\n                }\n                return result;\n            }\n            CircleUtilities.getAreaOfIntersectionBetweenCircles = getAreaOfIntersectionBetweenCircles;\n        })(CircleUtilities || (CircleUtilities = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CircleUtilities;\n    });\n    _registerModule(_modules, 'Series/DrawPointUtilities.js', [], function () {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Handles the drawing of a component.\n         * Can be used for any type of component that reserves the graphic property,\n         * and provides a shouldDraw on its context.\n         *\n         * @private\n         *\n         * @todo add type checking.\n         * @todo export this function to enable usage\n         */\n        function draw(point, params) {\n            var animatableAttribs = params.animatableAttribs, onComplete = params.onComplete, css = params.css, renderer = params.renderer;\n            var animation = (point.series && point.series.chart.hasRendered) ?\n                // Chart-level animation on updates\n                void 0 :\n                // Series-level animation on new points\n                (point.series &&\n                    point.series.options.animation);\n            var graphic = point.graphic;\n            params.attribs = __assign(__assign({}, params.attribs), { 'class': point.getClassName() }) || {};\n            if ((point.shouldDraw())) {\n                if (!graphic) {\n                    if (params.shapeType === 'text') {\n                        graphic = renderer.text();\n                    }\n                    else if (params.shapeType === 'image') {\n                        graphic = renderer.image(params.imageUrl || '')\n                            .attr(params.shapeArgs || {});\n                    }\n                    else {\n                        graphic = renderer[params.shapeType](params.shapeArgs || {});\n                    }\n                    point.graphic = graphic;\n                    graphic.add(params.group);\n                }\n                if (css) {\n                    graphic.css(css);\n                }\n                graphic\n                    .attr(params.attribs)\n                    .animate(animatableAttribs, params.isNew ? false : animation, onComplete);\n            }\n            else if (graphic) {\n                var destroy_1 = function () {\n                    point.graphic = graphic = (graphic && graphic.destroy());\n                    if (typeof onComplete === 'function') {\n                        onComplete();\n                    }\n                };\n                // Animate only runs complete callback if something was animated.\n                if (Object.keys(animatableAttribs).length) {\n                    graphic.animate(animatableAttribs, void 0, function () { return destroy_1(); });\n                }\n                else {\n                    destroy_1();\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var DrawPointUtilities = {\n            draw: draw\n        };\n\n        return DrawPointUtilities;\n    });\n    _registerModule(_modules, 'Series/Venn/VennPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  Experimental Highcharts module which enables visualization of a Venn\n         *  diagram.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  Layout algorithm by Ben Frederickson:\n         *  https://www.benfrederickson.com/better-venn-diagrams/\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var ScatterPoint = SeriesRegistry.seriesTypes.scatter.prototype.pointClass;\n        var isNumber = U.isNumber;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var VennPoint = /** @class */ (function (_super) {\n            __extends(VennPoint, _super);\n            function VennPoint() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            VennPoint.prototype.isValid = function () {\n                return isNumber(this.value);\n            };\n            VennPoint.prototype.shouldDraw = function () {\n                // Only draw points with single sets.\n                return !!this.shapeArgs;\n            };\n            return VennPoint;\n        }(ScatterPoint));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return VennPoint;\n    });\n    _registerModule(_modules, 'Series/Venn/VennSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  Experimental Highcharts module which enables visualization of a Venn\n         *  diagram.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  Layout algorithm by Ben Frederickson:\n         *  https://www.benfrederickson.com/better-venn-diagrams/\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A Venn diagram displays all possible logical relations between a\n         * collection of different sets. The sets are represented by circles, and\n         * the relation between the sets are displayed by the overlap or lack of\n         * overlap between them. The venn diagram is a special case of Euler\n         * diagrams, which can also be displayed by this series type.\n         *\n         * @sample {highcharts} highcharts/demo/venn-diagram/\n         *         Venn diagram\n         * @sample {highcharts} highcharts/demo/euler-diagram/\n         *         Euler diagram\n         * @sample {highcharts} highcharts/series-venn/point-legend/\n         *         Venn diagram with a legend\n         *\n         * @extends      plotOptions.scatter\n         * @excluding    connectEnds, connectNulls, cropThreshold, dragDrop,\n         *               findNearestPointBy, getExtremesFromAll, jitter, label,\n         *               linecap, lineWidth, linkedTo, marker, negativeColor,\n         *               pointInterval, pointIntervalUnit, pointPlacement,\n         *               pointStart, softThreshold, stacking, steps, threshold,\n         *               xAxis, yAxis, zoneAxis, zones, dataSorting, boostThreshold,\n         *               boostBlending\n         * @product      highcharts\n         * @requires     modules/venn\n         * @optionparent plotOptions.venn\n         */\n        var VennSeriesDefaults = {\n            borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            borderDashStyle: 'solid',\n            borderWidth: 1,\n            brighten: 0,\n            clip: false,\n            colorByPoint: true,\n            dataLabels: {\n                enabled: true,\n                verticalAlign: 'middle',\n                formatter: function () {\n                    return this.point.name;\n                }\n            },\n            /**\n             * @default   true\n             * @extends   plotOptions.series.inactiveOtherPoints\n             * @private\n             */\n            inactiveOtherPoints: true,\n            /**\n             * @ignore-option\n             * @private\n             */\n            marker: false,\n            opacity: 0.75,\n            showInLegend: false,\n            /**\n             * @ignore-option\n             *\n             * @private\n             */\n            legendType: 'point',\n            states: {\n                /**\n                 * @excluding halo\n                 */\n                hover: {\n                    opacity: 1,\n                    borderColor: \"#333333\" /* Palette.neutralColor80 */\n                },\n                /**\n                 * @excluding halo\n                 */\n                select: {\n                    color: \"#cccccc\" /* Palette.neutralColor20 */,\n                    borderColor: \"#000000\" /* Palette.neutralColor100 */,\n                    animation: false\n                },\n                inactive: {\n                    opacity: 0.075\n                }\n            },\n            tooltip: {\n                pointFormat: '{point.name}: {point.value}'\n            },\n            legendSymbol: 'rectangle'\n        };\n        /**\n         * A `venn` series. If the [type](#series.venn.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.venn\n         * @excluding connectEnds, connectNulls, cropThreshold, dataParser, dataURL,\n         *            findNearestPointBy, getExtremesFromAll, label, linecap, lineWidth,\n         *            linkedTo, marker, negativeColor, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointStart, softThreshold, stack, stacking, steps,\n         *            threshold, xAxis, yAxis, zoneAxis, zones, dataSorting,\n         *            boostThreshold, boostBlending\n         * @product   highcharts\n         * @requires  modules/venn\n         * @apioption series.venn\n         */\n        /**\n         * @type      {Array<*>}\n         * @extends   series.scatter.data\n         * @excluding marker, x, y\n         * @product   highcharts\n         * @apioption series.venn.data\n         */\n        /**\n         * The name of the point. Used in data labels and tooltip. If name is not\n         * defined then it will default to the joined values in\n         * [sets](#series.venn.sets).\n         *\n         * @sample {highcharts} highcharts/demo/venn-diagram/\n         *         Venn diagram\n         * @sample {highcharts} highcharts/demo/euler-diagram/\n         *         Euler diagram\n         *\n         * @type      {number}\n         * @since     7.0.0\n         * @product   highcharts\n         * @apioption series.venn.data.name\n         */\n        /**\n         * The value of the point, resulting in a relative area of the circle, or area\n         * of overlap between two sets in the venn or euler diagram.\n         *\n         * @sample {highcharts} highcharts/demo/venn-diagram/\n         *         Venn diagram\n         * @sample {highcharts} highcharts/demo/euler-diagram/\n         *         Euler diagram\n         *\n         * @type      {number}\n         * @since     7.0.0\n         * @product   highcharts\n         * @apioption series.venn.data.value\n         */\n        /**\n         * The set or sets the options will be applied to. If a single entry is defined,\n         * then it will create a new set. If more than one entry is defined, then it\n         * will define the overlap between the sets in the array.\n         *\n         * @sample {highcharts} highcharts/demo/venn-diagram/\n         *         Venn diagram\n         * @sample {highcharts} highcharts/demo/euler-diagram/\n         *         Euler diagram\n         *\n         * @type      {Array<string>}\n         * @since     7.0.0\n         * @product   highcharts\n         * @apioption series.venn.data.sets\n         */\n        /**\n         * @excluding halo\n         * @apioption series.venn.states.hover\n         */\n        /**\n         * @excluding halo\n         * @apioption series.venn.states.select\n         */\n        ''; // Detach doclets above\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return VennSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Venn/VennUtils.js', [_modules['Core/Geometry/CircleUtilities.js'], _modules['Core/Geometry/GeometryUtilities.js'], _modules['Core/Utilities.js']], function (CU, GU, U) {\n        /* *\n         *\n         *  Experimental Highcharts module which enables visualization of a Venn\n         *  diagram.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  Layout algorithm by Ben Frederickson:\n         *  https://www.benfrederickson.com/better-venn-diagrams/\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        var getAreaOfCircle = CU.getAreaOfCircle, getCircleCircleIntersection = CU.getCircleCircleIntersection, getOverlapBetweenCirclesByDistance = CU.getOverlapBetweenCircles, isPointInsideAllCircles = CU.isPointInsideAllCircles, isPointInsideCircle = CU.isPointInsideCircle, isPointOutsideAllCircles = CU.isPointOutsideAllCircles;\n        var getDistanceBetweenPoints = GU.getDistanceBetweenPoints;\n        var extend = U.extend, isArray = U.isArray, isNumber = U.isNumber, isObject = U.isObject, isString = U.isString;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Takes an array of relations and adds the properties `totalOverlap` and\n         * `overlapping` to each set. The property `totalOverlap` is the sum of\n         * value for each relation where this set is included. The property\n         * `overlapping` is a map of how much this set is overlapping another set.\n         * NOTE: This algorithm ignores relations consisting of more than 2 sets.\n         * @private\n         * @param {Array<Highcharts.VennRelationObject>} relations\n         * The list of relations that should be sorted.\n         * @return {Array<Highcharts.VennRelationObject>}\n         * Returns the modified input relations with added properties `totalOverlap`\n         * and `overlapping`.\n         */\n        function addOverlapToSets(relations) {\n            // Calculate the amount of overlap per set.\n            var mapOfIdToProps = {};\n            relations\n                // Filter out relations consisting of 2 sets.\n                .filter(function (relation) { return (relation.sets.length === 2); })\n                // Sum up the amount of overlap for each set.\n                .forEach(function (relation) {\n                relation.sets.forEach(function (set, i, arr) {\n                    var _a;\n                    if (!isObject(mapOfIdToProps[set])) {\n                        mapOfIdToProps[set] = {\n                            totalOverlap: 0,\n                            overlapping: {}\n                        };\n                    }\n                    mapOfIdToProps[set] = {\n                        totalOverlap: (mapOfIdToProps[set].totalOverlap || 0) +\n                            relation.value,\n                        overlapping: __assign(__assign({}, (mapOfIdToProps[set].overlapping || {})), (_a = {}, _a[arr[1 - i]] = relation.value, _a))\n                    };\n                });\n            });\n            relations\n                // Filter out single sets\n                .filter(isSet)\n                // Extend the set with the calculated properties.\n                .forEach(function (set) {\n                var properties = mapOfIdToProps[set.sets[0]];\n                extend(set, properties);\n            });\n            // Returns the modified relations.\n            return relations;\n        }\n        /**\n         * Finds the root of a given function. The root is the input value needed\n         * for a function to return 0.\n         *\n         * See https://en.wikipedia.org/wiki/Bisection_method#Algorithm\n         *\n         * TODO: Add unit tests.\n         *\n         * @param {Function} f\n         * The function to find the root of.\n         * @param {number} a\n         * The lowest number in the search range.\n         * @param {number} b\n         * The highest number in the search range.\n         * @param {number} [tolerance=1e-10]\n         * The allowed difference between the returned value and root.\n         * @param {number} [maxIterations=100]\n         * The maximum iterations allowed.\n         * @return {number}\n         * Root number.\n         */\n        function bisect(f, a, b, tolerance, maxIterations) {\n            var fA = f(a), fB = f(b), nMax = maxIterations || 100, tol = tolerance || 1e-10;\n            var delta = b - a, x, fX, n = 1;\n            if (a >= b) {\n                throw new Error('a must be smaller than b.');\n            }\n            else if (fA * fB > 0) {\n                throw new Error('f(a) and f(b) must have opposite signs.');\n            }\n            if (fA === 0) {\n                x = a;\n            }\n            else if (fB === 0) {\n                x = b;\n            }\n            else {\n                while (n++ <= nMax && fX !== 0 && delta > tol) {\n                    delta = (b - a) / 2;\n                    x = a + delta;\n                    fX = f(x);\n                    // Update low and high for next search interval.\n                    if (fA * fX > 0) {\n                        a = x;\n                    }\n                    else {\n                        b = x;\n                    }\n                }\n            }\n            return x;\n        }\n        /**\n         * @private\n         */\n        function getCentroid(simplex) {\n            var arr = simplex.slice(0, -1), length = arr.length, result = [], sum = function (data, point) {\n                data.sum += point[data.i];\n                return data;\n            };\n            for (var i = 0; i < length; i++) {\n                result[i] = arr.reduce(sum, { sum: 0, i: i }).sum / length;\n            }\n            return result;\n        }\n        /**\n         * Uses the bisection method to make a best guess of the ideal distance\n         * between two circles too get the desired overlap.\n         * Currently there is no known formula to calculate the distance from the\n         * area of overlap, which makes the bisection method preferred.\n         * @private\n         * @param {number} r1\n         * Radius of the first circle.\n         * @param {number} r2\n         * Radius of the second circle.\n         * @param {number} overlap\n         * The wanted overlap between the two circles.\n         * @return {number}\n         * Returns the distance needed to get the wanted overlap between the two\n         * circles.\n         */\n        function getDistanceBetweenCirclesByOverlap(r1, r2, overlap) {\n            var maxDistance = r1 + r2;\n            var distance;\n            if (overlap <= 0) {\n                // If overlap is below or equal to zero, then there is no overlap.\n                distance = maxDistance;\n            }\n            else if (getAreaOfCircle(r1 < r2 ? r1 : r2) <= overlap) {\n                // When area of overlap is larger than the area of the smallest\n                // circle, then it is completely overlapping.\n                distance = 0;\n            }\n            else {\n                distance = bisect(function (x) {\n                    var actualOverlap = getOverlapBetweenCirclesByDistance(r1, r2, x);\n                    // Return the difference between wanted and actual overlap.\n                    return overlap - actualOverlap;\n                }, 0, maxDistance);\n            }\n            return distance;\n        }\n        /**\n         * Finds the available width for a label, by taking the label position and\n         * finding the largest distance, which is inside all internal circles, and\n         * outside all external circles.\n         *\n         * @private\n         * @param {Highcharts.PositionObject} pos\n         * The x and y coordinate of the label.\n         * @param {Array<Highcharts.CircleObject>} internal\n         * Internal circles.\n         * @param {Array<Highcharts.CircleObject>} external\n         * External circles.\n         * @return {number}\n         * Returns available width for the label.\n         */\n        function getLabelWidth(pos, internal, external) {\n            var radius = internal.reduce(function (min, circle) { return Math.min(circle.r, min); }, Infinity), \n            // Filter out external circles that are completely overlapping.\n            filteredExternals = external.filter(function (circle) { return !isPointInsideCircle(pos, circle); });\n            var findDistance = function (maxDistance, direction) {\n                return bisect(function (x) {\n                    var testPos = {\n                        x: pos.x + (direction * x),\n                        y: pos.y\n                    }, isValid = (isPointInsideAllCircles(testPos, internal) &&\n                        isPointOutsideAllCircles(testPos, filteredExternals));\n                    // If the position is valid, then we want to move towards the\n                    // max distance. If not, then we want to away from the max distance.\n                    return -(maxDistance - x) + (isValid ? 0 : Number.MAX_VALUE);\n                }, 0, maxDistance);\n            };\n            // Find the smallest distance of left and right.\n            return Math.min(findDistance(radius, -1), findDistance(radius, 1)) * 2;\n        }\n        /**\n         * Calculates a margin for a point based on the internal and external\n         * circles. The margin describes if the point is well placed within the\n         * internal circles, and away from the external.\n         * @private\n         * @todo add unit tests.\n         * @param {Highcharts.PositionObject} point\n         * The point to evaluate.\n         * @param {Array<Highcharts.CircleObject>} internal\n         * The internal circles.\n         * @param {Array<Highcharts.CircleObject>} external\n         * The external circles.\n         * @return {number}\n         * Returns the margin.\n         */\n        function getMarginFromCircles(point, internal, external) {\n            var margin = internal.reduce(function (margin, circle) {\n                var m = circle.r - getDistanceBetweenPoints(point, circle);\n                return (m <= margin) ? m : margin;\n            }, Number.MAX_VALUE);\n            margin = external.reduce(function (margin, circle) {\n                var m = getDistanceBetweenPoints(point, circle) - circle.r;\n                return (m <= margin) ? m : margin;\n            }, margin);\n            return margin;\n        }\n        /**\n         * Calculates the area of overlap between a list of circles.\n         * @private\n         * @todo add support for calculating overlap between more than 2 circles.\n         * @param {Array<Highcharts.CircleObject>} circles\n         * List of circles with their given positions.\n         * @return {number}\n         * Returns the area of overlap between all the circles.\n         */\n        function getOverlapBetweenCircles(circles) {\n            var overlap = 0;\n            // When there is only two circles we can find the overlap by using their\n            // radiuses and the distance between them.\n            if (circles.length === 2) {\n                var circle1 = circles[0];\n                var circle2 = circles[1];\n                overlap = getOverlapBetweenCirclesByDistance(circle1.r, circle2.r, getDistanceBetweenPoints(circle1, circle2));\n            }\n            return overlap;\n        }\n        // eslint-disable-next-line require-jsdoc\n        /**\n         *\n         */\n        function isSet(x) {\n            return isArray(x.sets) && x.sets.length === 1;\n        }\n        // eslint-disable-next-line require-jsdoc\n        /**\n         *\n         */\n        function isValidRelation(x) {\n            var map = {};\n            return (isObject(x) &&\n                (isNumber(x.value) && x.value > -1) &&\n                (isArray(x.sets) && x.sets.length > 0) &&\n                !x.sets.some(function (set) {\n                    var invalid = false;\n                    if (!map[set] && isString(set)) {\n                        map[set] = true;\n                    }\n                    else {\n                        invalid = true;\n                    }\n                    return invalid;\n                }));\n        }\n        // eslint-disable-next-line require-jsdoc\n        /**\n         *\n         */\n        function isValidSet(x) {\n            return (isValidRelation(x) && isSet(x) && x.value > 0);\n        }\n        /**\n         * Uses a greedy approach to position all the sets. Works well with a small\n         * number of sets, and are in these cases a good choice aesthetically.\n         * @private\n         * @param {Array<object>} relations List of the overlap between two or more\n         * sets, or the size of a single set.\n         * @return {Array<object>} List of circles and their calculated positions.\n         */\n        function layoutGreedyVenn(relations) {\n            var positionedSets = [], mapOfIdToCircles = {};\n            // Define a circle for each set.\n            relations\n                .filter(function (relation) { return (relation.sets.length === 1); })\n                .forEach(function (relation) {\n                mapOfIdToCircles[relation.sets[0]] = relation.circle = {\n                    x: Number.MAX_VALUE,\n                    y: Number.MAX_VALUE,\n                    r: Math.sqrt(relation.value / Math.PI)\n                };\n            });\n            /**\n             * Takes a set and updates the position, and add the set to the list of\n             * positioned sets.\n             * @private\n             * @param {Object} set\n             * The set to add to its final position.\n             * @param {Object} coordinates\n             * The coordinates to position the set at.\n             */\n            var positionSet = function (set, coordinates) {\n                var circle = set.circle;\n                if (circle) {\n                    circle.x = coordinates.x;\n                    circle.y = coordinates.y;\n                }\n                positionedSets.push(set);\n            };\n            // Find overlap between sets. Ignore relations with more then 2 sets.\n            addOverlapToSets(relations);\n            // Sort sets by the sum of their size from large to small.\n            var sortedByOverlap = relations\n                .filter(isSet)\n                .sort(sortByTotalOverlap);\n            // Position the most overlapped set at 0,0.\n            positionSet(sortedByOverlap.shift(), { x: 0, y: 0 });\n            var relationsWithTwoSets = relations.filter(function (x) { return (x.sets.length === 2); });\n            var _loop_1 = function (set) {\n                var circle = set.circle;\n                if (!circle) {\n                    return \"continue\";\n                }\n                var radius = circle.r, overlapping = set.overlapping;\n                var bestPosition = positionedSets.reduce(function (best, positionedSet, i) {\n                    var positionedCircle = positionedSet.circle;\n                    if (!positionedCircle || !overlapping) {\n                        return best;\n                    }\n                    var overlap = overlapping[positionedSet.sets[0]];\n                    // Calculate the distance between the sets to get the\n                    // correct overlap\n                    var distance = getDistanceBetweenCirclesByOverlap(radius, positionedCircle.r, overlap);\n                    // Create a list of possible coordinates calculated from\n                    // distance.\n                    var possibleCoordinates = [\n                        { x: positionedCircle.x + distance, y: positionedCircle.y },\n                        { x: positionedCircle.x - distance, y: positionedCircle.y },\n                        { x: positionedCircle.x, y: positionedCircle.y + distance },\n                        { x: positionedCircle.x, y: positionedCircle.y - distance }\n                    ];\n                    // If there are more circles overlapping, then add the\n                    // intersection points as possible positions.\n                    for (var _i = 0, _a = positionedSets.slice(i + 1); _i < _a.length; _i++) {\n                        var positionedSet2 = _a[_i];\n                        var positionedCircle2 = positionedSet2.circle, overlap2 = overlapping[positionedSet2.sets[0]];\n                        if (!positionedCircle2) {\n                            continue;\n                        }\n                        var distance2 = getDistanceBetweenCirclesByOverlap(radius, positionedCircle2.r, overlap2);\n                        // Add intersections to list of coordinates.\n                        possibleCoordinates = possibleCoordinates.concat(getCircleCircleIntersection({\n                            x: positionedCircle.x,\n                            y: positionedCircle.y,\n                            r: distance\n                        }, {\n                            x: positionedCircle2.x,\n                            y: positionedCircle2.y,\n                            r: distance2\n                        }));\n                    }\n                    // Iterate all suggested coordinates and find the best one.\n                    for (var _b = 0, possibleCoordinates_1 = possibleCoordinates; _b < possibleCoordinates_1.length; _b++) {\n                        var coordinates = possibleCoordinates_1[_b];\n                        circle.x = coordinates.x;\n                        circle.y = coordinates.y;\n                        // Calculate loss for the suggested coordinates.\n                        var currentLoss = loss(mapOfIdToCircles, relationsWithTwoSets);\n                        // If the loss is better, then use these new coordinates\n                        if (currentLoss < best.loss) {\n                            best.loss = currentLoss;\n                            best.coordinates = coordinates;\n                        }\n                    }\n                    // Return resulting coordinates.\n                    return best;\n                }, {\n                    loss: Number.MAX_VALUE,\n                    coordinates: void 0\n                });\n                // Add the set to its final position.\n                positionSet(set, bestPosition.coordinates);\n            };\n            // Iterate and position the remaining sets.\n            for (var _i = 0, sortedByOverlap_1 = sortedByOverlap; _i < sortedByOverlap_1.length; _i++) {\n                var set = sortedByOverlap_1[_i];\n                _loop_1(set);\n            }\n            // Return the positions of each set.\n            return mapOfIdToCircles;\n        }\n        /**\n         * Calculates the difference between the desired overlap and the actual\n         * overlap between two circles.\n         * @private\n         * @param {Dictionary<Highcharts.CircleObject>} mapOfIdToCircle\n         * Map from id to circle.\n         * @param {Array<Highcharts.VennRelationObject>} relations\n         * List of relations to calculate the loss of.\n         * @return {number}\n         * Returns the loss between positions of the circles for the given\n         * relations.\n         */\n        function loss(mapOfIdToCircle, relations) {\n            var precision = 10e10;\n            // Iterate all the relations and calculate their individual loss.\n            return relations.reduce(function (totalLoss, relation) {\n                var loss = 0;\n                if (relation.sets.length > 1) {\n                    var wantedOverlap = relation.value;\n                    // Calculate the actual overlap between the sets.\n                    var actualOverlap = getOverlapBetweenCircles(\n                    // Get the circles for the given sets.\n                    relation.sets.map(function (set) {\n                        return mapOfIdToCircle[set];\n                    }));\n                    var diff = wantedOverlap - actualOverlap;\n                    loss = Math.round((diff * diff) * precision) / precision;\n                }\n                // Add calculated loss to the sum.\n                return totalLoss + loss;\n            }, 0);\n        }\n        /**\n         * Finds an optimal position for a given point.\n         * @todo add unit tests.\n         * @todo add constraints to optimize the algorithm.\n         * @private\n         * @param {Highcharts.NelderMeadTestFunction} fn\n         *        The function to test a point.\n         * @param {Highcharts.NelderMeadPointArray} initial\n         *        The initial point to optimize.\n         * @return {Highcharts.NelderMeadPointArray}\n         *         Returns the optimized position of a point.\n         */\n        function nelderMead(fn, initial) {\n            var maxIterations = 100, sortByFx = function (a, b) {\n                return a.fx - b.fx;\n            }, pRef = 1, // Reflection parameter\n            pExp = 2, // Expansion parameter\n            pCon = -0.5, // Contraction parameter\n            pOCon = pCon * pRef, // Outwards contraction parameter\n            pShrink = 0.5; // Shrink parameter\n            /**\n             * @private\n             */\n            var weightedSum = function (weight1, v1, weight2, v2) { return v1.map(function (x, i) { return weight1 * x + weight2 * v2[i]; }); };\n            /**\n             * @private\n             */\n            var getSimplex = function (initial) {\n                var n = initial.length, simplex = new Array(n + 1);\n                // Initial point to the simplex.\n                simplex[0] = initial;\n                simplex[0].fx = fn(initial);\n                // Create a set of extra points based on the initial.\n                for (var i = 0; i < n; ++i) {\n                    var point = initial.slice();\n                    point[i] = point[i] ? point[i] * 1.05 : 0.001;\n                    point.fx = fn(point);\n                    simplex[i + 1] = point;\n                }\n                return simplex;\n            };\n            var updateSimplex = function (simplex, point) {\n                point.fx = fn(point);\n                simplex[simplex.length - 1] = point;\n                return simplex;\n            };\n            var shrinkSimplex = function (simplex) {\n                var best = simplex[0];\n                return simplex.map(function (point) {\n                    var p = weightedSum(1 - pShrink, best, pShrink, point);\n                    p.fx = fn(p);\n                    return p;\n                });\n            };\n            var getPoint = function (centroid, worst, a, b) {\n                var point = weightedSum(a, centroid, b, worst);\n                point.fx = fn(point);\n                return point;\n            };\n            // Create a simplex\n            var simplex = getSimplex(initial);\n            // Iterate from 0 to max iterations\n            for (var i = 0; i < maxIterations; i++) {\n                // Sort the simplex\n                simplex.sort(sortByFx);\n                // Create a centroid from the simplex\n                var worst = simplex[simplex.length - 1];\n                var centroid = getCentroid(simplex);\n                // Calculate the reflected point.\n                var reflected = getPoint(centroid, worst, 1 + pRef, -pRef);\n                if (reflected.fx < simplex[0].fx) {\n                    // If reflected point is the best, then possibly expand.\n                    var expanded = getPoint(centroid, worst, 1 + pExp, -pExp);\n                    simplex = updateSimplex(simplex, (expanded.fx < reflected.fx) ? expanded : reflected);\n                }\n                else if (reflected.fx >= simplex[simplex.length - 2].fx) {\n                    // If the reflected point is worse than the second worse, then\n                    // contract.\n                    var contracted = void 0;\n                    if (reflected.fx > worst.fx) {\n                        // If the reflected is worse than the worst point, do a\n                        // contraction\n                        contracted = getPoint(centroid, worst, 1 + pCon, -pCon);\n                        if (contracted.fx < worst.fx) {\n                            simplex = updateSimplex(simplex, contracted);\n                        }\n                        else {\n                            simplex = shrinkSimplex(simplex);\n                        }\n                    }\n                    else {\n                        // Otherwise do an outwards contraction\n                        contracted = getPoint(centroid, worst, 1 - pOCon, pOCon);\n                        if (contracted.fx < reflected.fx) {\n                            simplex = updateSimplex(simplex, contracted);\n                        }\n                        else {\n                            simplex = shrinkSimplex(simplex);\n                        }\n                    }\n                }\n                else {\n                    simplex = updateSimplex(simplex, reflected);\n                }\n            }\n            return simplex[0];\n        }\n        /**\n         * Prepares the venn data so that it is usable for the layout function.\n         * Filter out sets, or intersections that includes sets, that are missing in\n         * the data or has (value < 1). Adds missing relations between sets in the\n         * data as value = 0.\n         * @private\n         * @param {Array<object>} data The raw input data.\n         * @return {Array<object>} Returns an array of valid venn data.\n         */\n        function processVennData(data, splitter) {\n            var d = isArray(data) ? data : [];\n            var validSets = d\n                .reduce(function (arr, x) {\n                // Check if x is a valid set, and that it is not an duplicate.\n                if (x.sets && isValidSet(x) && arr.indexOf(x.sets[0]) === -1) {\n                    arr.push(x.sets[0]);\n                }\n                return arr;\n            }, [])\n                .sort();\n            var mapOfIdToRelation = d.reduce(function (mapOfIdToRelation, relation) {\n                if (relation.sets &&\n                    isValidRelation(relation) &&\n                    !relation.sets.some(function (set) {\n                        return validSets.indexOf(set) === -1;\n                    })) {\n                    mapOfIdToRelation[relation.sets.sort().join(splitter)] = {\n                        sets: relation.sets,\n                        value: relation.value || 0\n                    };\n                }\n                return mapOfIdToRelation;\n            }, {});\n            validSets.reduce(function (combinations, set, i, arr) {\n                var remaining = arr.slice(i + 1);\n                remaining.forEach(function (set2) {\n                    combinations.push(set + splitter + set2);\n                });\n                return combinations;\n            }, []).forEach(function (combination) {\n                if (!mapOfIdToRelation[combination]) {\n                    var obj = {\n                        sets: combination.split(splitter),\n                        value: 0\n                    };\n                    mapOfIdToRelation[combination] = obj;\n                }\n            });\n            // Transform map into array.\n            return Object\n                .keys(mapOfIdToRelation)\n                .map(function (id) {\n                return mapOfIdToRelation[id];\n            });\n        }\n        /**\n         * Takes two sets and finds the one with the largest total overlap.\n         * @private\n         * @param {Object} a\n         * The first set to compare.\n         * @param {Object} b\n         * The second set to compare.\n         * @return {number}\n         * Returns 0 if a and b are equal, <0 if a is greater, >0 if b is greater.\n         */\n        function sortByTotalOverlap(a, b) {\n            if (typeof b.totalOverlap !== 'undefined' &&\n                typeof a.totalOverlap !== 'undefined') {\n                return b.totalOverlap - a.totalOverlap;\n            }\n            return NaN;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var VennUtils = {\n            geometry: GU,\n            geometryCircles: CU,\n            addOverlapToSets: addOverlapToSets,\n            getCentroid: getCentroid,\n            getDistanceBetweenCirclesByOverlap: getDistanceBetweenCirclesByOverlap,\n            getLabelWidth: getLabelWidth,\n            getMarginFromCircles: getMarginFromCircles,\n            isSet: isSet,\n            layoutGreedyVenn: layoutGreedyVenn,\n            loss: loss,\n            nelderMead: nelderMead,\n            processVennData: processVennData,\n            sortByTotalOverlap: sortByTotalOverlap\n        };\n\n        return VennUtils;\n    });\n    _registerModule(_modules, 'Series/Venn/VennSeries.js', [_modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Color/Color.js'], _modules['Core/Geometry/CircleUtilities.js'], _modules['Series/DrawPointUtilities.js'], _modules['Core/Geometry/GeometryUtilities.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/Venn/VennPoint.js'], _modules['Series/Venn/VennSeriesDefaults.js'], _modules['Series/Venn/VennUtils.js'], _modules['Core/Utilities.js']], function (A, Color, CU, DPU, GU, SeriesRegistry, VennPoint, VennSeriesDefaults, VennUtils, U) {\n        /* *\n         *\n         *  Experimental Highcharts module which enables visualization of a Venn\n         *  diagram.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  Layout algorithm by Ben Frederickson:\n         *  https://www.benfrederickson.com/better-venn-diagrams/\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var animObject = A.animObject;\n        var color = Color.parse;\n        var getAreaOfIntersectionBetweenCircles = CU.getAreaOfIntersectionBetweenCircles, getCirclesIntersectionPolygon = CU.getCirclesIntersectionPolygon, isCircle1CompletelyOverlappingCircle2 = CU.isCircle1CompletelyOverlappingCircle2, isPointInsideAllCircles = CU.isPointInsideAllCircles, isPointOutsideAllCircles = CU.isPointOutsideAllCircles;\n        var getCenterOfPoints = GU.getCenterOfPoints;\n        var ScatterSeries = SeriesRegistry.seriesTypes.scatter;\n        var addEvent = U.addEvent, extend = U.extend, isArray = U.isArray, isNumber = U.isNumber, isObject = U.isObject, merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.venn\n         *\n         * @augments Highcharts.Series\n         */\n        var VennSeries = /** @class */ (function (_super) {\n            __extends(VennSeries, _super);\n            function VennSeries() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Finds the optimal label position by looking for a position that has a low\n             * distance from the internal circles, and as large possible distance to the\n             * external circles.\n             * @private\n             * @todo Optimize the intial position.\n             * @todo Add unit tests.\n             * @param {Array<Highcharts.CircleObject>} internal\n             * Internal circles.\n             * @param {Array<Highcharts.CircleObject>} external\n             * External circles.\n             * @return {Highcharts.PositionObject}\n             * Returns the found position.\n             */\n            VennSeries.getLabelPosition = function (internal, external) {\n                // Get the best label position within the internal circles.\n                var best = internal.reduce(function (best, circle) {\n                    var d = circle.r / 2;\n                    // Give a set of points with the circle to evaluate as the best\n                    // label position.\n                    return [\n                        { x: circle.x, y: circle.y },\n                        { x: circle.x + d, y: circle.y },\n                        { x: circle.x - d, y: circle.y },\n                        { x: circle.x, y: circle.y + d },\n                        { x: circle.x, y: circle.y - d }\n                    ]\n                        // Iterate the given points and return the one with the\n                        // largest margin.\n                        .reduce(function (best, point) {\n                        var margin = VennUtils.getMarginFromCircles(point, internal, external);\n                        // If the margin better than the current best, then\n                        // update sbest.\n                        if (best.margin < margin) {\n                            best.point = point;\n                            best.margin = margin;\n                        }\n                        return best;\n                    }, best);\n                }, {\n                    point: void 0,\n                    margin: -Number.MAX_VALUE\n                }).point;\n                // Use nelder mead to optimize the initial label position.\n                var optimal = VennUtils.nelderMead(function (p) { return -(VennUtils.getMarginFromCircles({ x: p[0], y: p[1] }, internal, external)); }, [\n                    best.x,\n                    best.y\n                ]);\n                // Update best to be the point which was found to have the best margin.\n                best = {\n                    x: optimal[0],\n                    y: optimal[1]\n                };\n                if (!(isPointInsideAllCircles(best, internal) &&\n                    isPointOutsideAllCircles(best, external))) {\n                    // If point was either outside one of the internal, or inside one of\n                    // the external, then it was invalid and should use a fallback.\n                    if (internal.length > 1) {\n                        best = getCenterOfPoints(getCirclesIntersectionPolygon(internal));\n                    }\n                    else {\n                        best = {\n                            x: internal[0].x,\n                            y: internal[0].y\n                        };\n                    }\n                }\n                // Return the best point.\n                return best;\n            };\n            /**\n             * Calculates data label values for a given relations object.\n             *\n             * @private\n             * @todo add unit tests\n             * @param {Highcharts.VennRelationObject} relation A relations object.\n             * @param {Array<Highcharts.VennRelationObject>} setRelations The list of\n             * relations that is a set.\n             * @return {Highcharts.VennLabelValuesObject}\n             * Returns an object containing position and width of the label.\n             */\n            VennSeries.getLabelValues = function (relation, setRelations) {\n                var sets = relation.sets;\n                // Create a list of internal and external circles.\n                var data = setRelations.reduce(function (data, set) {\n                    // If the set exists in this relation, then it is internal,\n                    // otherwise it will be external.\n                    var isInternal = sets.indexOf(set.sets[0]) > -1;\n                    var property = isInternal ? 'internal' : 'external';\n                    // Add the circle to the list.\n                    if (set.circle) {\n                        data[property].push(set.circle);\n                    }\n                    return data;\n                }, {\n                    internal: [],\n                    external: []\n                });\n                // Filter out external circles that are completely overlapping all\n                // internal\n                data.external = data.external.filter(function (externalCircle) {\n                    return data.internal.some(function (internalCircle) {\n                        return !isCircle1CompletelyOverlappingCircle2(externalCircle, internalCircle);\n                    });\n                });\n                // Calculate the label position.\n                var position = VennSeries.getLabelPosition(data.internal, data.external);\n                // Calculate the label width\n                var width = VennUtils.getLabelWidth(position, data.internal, data.external);\n                return {\n                    position: position,\n                    width: width\n                };\n            };\n            /**\n             * Calculates the positions, and the label values of all the sets in the\n             * venn diagram.\n             *\n             * @private\n             * @todo Add support for constrained MDS.\n             * @param {Array<Highchats.VennRelationObject>} relations\n             * List of the overlap between two or more sets, or the size of a single\n             * set.\n             * @return {Highcharts.Dictionary<*>}\n             * List of circles and their calculated positions.\n             */\n            VennSeries.layout = function (relations) {\n                var mapOfIdToShape = {};\n                var mapOfIdToLabelValues = {};\n                // Calculate best initial positions by using greedy layout.\n                if (relations.length > 0) {\n                    var mapOfIdToCircles_1 = VennUtils.layoutGreedyVenn(relations);\n                    var setRelations = relations.filter(VennUtils.isSet);\n                    for (var _i = 0, relations_1 = relations; _i < relations_1.length; _i++) {\n                        var relation = relations_1[_i];\n                        var sets = relation.sets;\n                        var id = sets.join();\n                        // Get shape from map of circles, or calculate intersection.\n                        var shape = VennUtils.isSet(relation) ?\n                            mapOfIdToCircles_1[id] :\n                            getAreaOfIntersectionBetweenCircles(sets.map(function (set) { return mapOfIdToCircles_1[set]; }));\n                        // Calculate label values if the set has a shape\n                        if (shape) {\n                            mapOfIdToShape[id] = shape;\n                            mapOfIdToLabelValues[id] = VennSeries.getLabelValues(relation, setRelations);\n                        }\n                    }\n                }\n                return { mapOfIdToShape: mapOfIdToShape, mapOfIdToLabelValues: mapOfIdToLabelValues };\n            };\n            /**\n             * Calculates the proper scale to fit the cloud inside the plotting area.\n             * @private\n             * @todo add unit test\n             * @param {number} targetWidth\n             * Width of target area.\n             * @param {number} targetHeight\n             * Height of target area.\n             * @param {Highcharts.PolygonBoxObject} field\n             * The playing field.\n             * @return {Highcharts.Dictionary<number>}\n             * Returns the value to scale the playing field up to the size of the target\n             * area, and center of x and y.\n             */\n            VennSeries.getScale = function (targetWidth, targetHeight, field) {\n                var height = field.bottom - field.top, // Top is smaller than bottom\n                width = field.right - field.left, scaleX = width > 0 ? 1 / width * targetWidth : 1, scaleY = height > 0 ? 1 / height * targetHeight : 1, adjustX = (field.right + field.left) / 2, adjustY = (field.top + field.bottom) / 2, scale = Math.min(scaleX, scaleY);\n                return {\n                    scale: scale,\n                    centerX: targetWidth / 2 - adjustX * scale,\n                    centerY: targetHeight / 2 - adjustY * scale\n                };\n            };\n            /**\n             * If a circle is outside a give field, then the boundaries of the field is\n             * adjusted accordingly. Modifies the field object which is passed as the\n             * first parameter.\n             * @private\n             * @todo NOTE: Copied from wordcloud, can probably be unified.\n             * @param {Highcharts.PolygonBoxObject} field\n             * The bounding box of a playing field.\n             * @param {Highcharts.CircleObject} circle\n             * The bounding box for a placed point.\n             * @return {Highcharts.PolygonBoxObject}\n             * Returns a modified field object.\n             */\n            VennSeries.updateFieldBoundaries = function (field, circle) {\n                var left = circle.x - circle.r, right = circle.x + circle.r, bottom = circle.y + circle.r, top = circle.y - circle.r;\n                // TODO improve type checking.\n                if (!isNumber(field.left) || field.left > left) {\n                    field.left = left;\n                }\n                if (!isNumber(field.right) || field.right < right) {\n                    field.right = right;\n                }\n                if (!isNumber(field.top) || field.top > top) {\n                    field.top = top;\n                }\n                if (!isNumber(field.bottom) || field.bottom < bottom) {\n                    field.bottom = bottom;\n                }\n                return field;\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            VennSeries.prototype.animate = function (init) {\n                if (!init) {\n                    var series = this, animOptions = animObject(series.options.animation);\n                    var _loop_1 = function (point) {\n                        var args = point.shapeArgs;\n                        if (point.graphic && args) {\n                            var attr = {}, animate = {};\n                            if (args.d) {\n                                // If shape is a path, then animate opacity.\n                                attr.opacity = 0.001;\n                            }\n                            else {\n                                // If shape is a circle, then animate radius.\n                                attr.r = 0;\n                                animate.r = args.r;\n                            }\n                            point.graphic\n                                .attr(attr)\n                                .animate(animate, animOptions);\n                            // If shape is path, then fade it in after the circles\n                            // animation\n                            if (args.d) {\n                                setTimeout(function () {\n                                    if (point && point.graphic) {\n                                        point.graphic.animate({\n                                            opacity: 1\n                                        });\n                                    }\n                                }, animOptions.duration);\n                            }\n                        }\n                    };\n                    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n                        var point = _a[_i];\n                        _loop_1(point);\n                    }\n                }\n            };\n            /**\n             * Draw the graphics for each point.\n             * @private\n             */\n            VennSeries.prototype.drawPoints = function () {\n                var series = this, \n                // Series properties\n                chart = series.chart, group = series.group, points = series.points || [], \n                // Chart properties\n                renderer = chart.renderer;\n                // Iterate all points and calculate and draw their graphics.\n                for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n                    var point = points_1[_i];\n                    var attribs = {\n                        zIndex: isArray(point.sets) ? point.sets.length : 0\n                    }, shapeArgs = point.shapeArgs;\n                    // Add point attribs\n                    if (!chart.styledMode) {\n                        extend(attribs, series.pointAttribs(point, point.state));\n                    }\n                    // Draw the point graphic.\n                    DPU.draw(point, {\n                        isNew: !point.graphic,\n                        animatableAttribs: shapeArgs,\n                        attribs: attribs,\n                        group: group,\n                        renderer: renderer,\n                        shapeType: shapeArgs && shapeArgs.d ? 'path' : 'circle'\n                    });\n                }\n            };\n            VennSeries.prototype.init = function () {\n                ScatterSeries.prototype.init.apply(this, arguments);\n                // Venn's opacity is a different option from other series\n                delete this.opacity;\n            };\n            /**\n             * Calculates the style attributes for a point. The attributes can vary\n             * depending on the state of the point.\n             * @private\n             * @param {Highcharts.Point} point\n             * The point which will get the resulting attributes.\n             * @param {string} [state]\n             * The state of the point.\n             * @return {Highcharts.SVGAttributes}\n             * Returns the calculated attributes.\n             */\n            VennSeries.prototype.pointAttribs = function (point, state) {\n                var series = this, seriesOptions = series.options || {}, pointOptions = point && point.options || {}, stateOptions = (state && seriesOptions.states[state]) || {}, options = merge(seriesOptions, { color: point && point.color }, pointOptions, stateOptions);\n                // Return resulting values for the attributes.\n                return {\n                    'fill': color(options.color)\n                        .brighten(options.brightness)\n                        .get(),\n                    // Set opacity directly to the SVG element, not to pattern #14372.\n                    opacity: options.opacity,\n                    'stroke': options.borderColor,\n                    'stroke-width': options.borderWidth,\n                    'dashstyle': options.borderDashStyle\n                };\n            };\n            VennSeries.prototype.translate = function () {\n                var chart = this.chart;\n                this.processedXData = this.xData;\n                this.generatePoints();\n                // Process the data before passing it into the layout function.\n                var relations = VennUtils.processVennData(this.options.data, VennSeries.splitter);\n                // Calculate the positions of each circle.\n                var _a = VennSeries.layout(relations), mapOfIdToShape = _a.mapOfIdToShape, mapOfIdToLabelValues = _a.mapOfIdToLabelValues;\n                // Calculate the scale, and center of the plot area.\n                var field = Object.keys(mapOfIdToShape)\n                    .filter(function (key) {\n                    var shape = mapOfIdToShape[key];\n                    return shape && isNumber(shape.r);\n                })\n                    .reduce(function (field, key) { return VennSeries.updateFieldBoundaries(field, mapOfIdToShape[key]); }, {\n                    top: 0,\n                    bottom: 0,\n                    left: 0,\n                    right: 0\n                }), scaling = VennSeries.getScale(chart.plotWidth, chart.plotHeight, field), scale = scaling.scale, centerX = scaling.centerX, centerY = scaling.centerY;\n                // Iterate all points and calculate and draw their graphics.\n                for (var _i = 0, _b = this.points; _i < _b.length; _i++) {\n                    var point = _b[_i];\n                    var sets = isArray(point.sets) ? point.sets : [], id = sets.join(), shape = mapOfIdToShape[id], dataLabelValues = mapOfIdToLabelValues[id] || {}, dlOptions = point.options && point.options.dataLabels;\n                    var shapeArgs = void 0, dataLabelWidth = dataLabelValues.width, dataLabelPosition = dataLabelValues.position;\n                    if (shape) {\n                        if (shape.r) {\n                            shapeArgs = {\n                                x: centerX + shape.x * scale,\n                                y: centerY + shape.y * scale,\n                                r: shape.r * scale\n                            };\n                        }\n                        else if (shape.d) {\n                            var d = shape.d;\n                            d.forEach(function (seg) {\n                                if (seg[0] === 'M') {\n                                    seg[1] = centerX + seg[1] * scale;\n                                    seg[2] = centerY + seg[2] * scale;\n                                }\n                                else if (seg[0] === 'A') {\n                                    seg[1] = seg[1] * scale;\n                                    seg[2] = seg[2] * scale;\n                                    seg[6] = centerX + seg[6] * scale;\n                                    seg[7] = centerY + seg[7] * scale;\n                                }\n                            });\n                            shapeArgs = { d: d };\n                        }\n                        // Scale the position for the data label.\n                        if (dataLabelPosition) {\n                            dataLabelPosition.x = centerX + dataLabelPosition.x * scale;\n                            dataLabelPosition.y = centerY + dataLabelPosition.y * scale;\n                        }\n                        else {\n                            dataLabelPosition = {};\n                        }\n                        if (isNumber(dataLabelWidth)) {\n                            dataLabelWidth = Math.round(dataLabelWidth * scale);\n                        }\n                    }\n                    point.shapeArgs = shapeArgs;\n                    // Placement for the data labels\n                    if (dataLabelPosition && shapeArgs) {\n                        point.plotX = dataLabelPosition.x;\n                        point.plotY = dataLabelPosition.y;\n                    }\n                    // Add width for the data label\n                    if (dataLabelWidth && shapeArgs) {\n                        point.dlOptions = merge(true, {\n                            style: {\n                                width: dataLabelWidth\n                            }\n                        }, isObject(dlOptions, true) ? dlOptions : void 0);\n                    }\n                    // Set name for usage in tooltip and in data label.\n                    point.name = point.options.name || sets.join('∩');\n                }\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            VennSeries.splitter = 'highcharts-split';\n            VennSeries.defaultOptions = merge(ScatterSeries.defaultOptions, VennSeriesDefaults);\n            return VennSeries;\n        }(ScatterSeries));\n        extend(VennSeries.prototype, {\n            axisTypes: [],\n            directTouch: true,\n            isCartesian: false,\n            pointArrayMap: ['value'],\n            pointClass: VennPoint,\n            utils: VennUtils\n        });\n        // Modify final series options.\n        addEvent(VennSeries, 'afterSetOptions', function (e) {\n            var options = e.options, states = options.states || {};\n            if (this.is('venn')) {\n                // Explicitly disable all halo options.\n                for (var _i = 0, _a = Object.keys(states); _i < _a.length; _i++) {\n                    var state = _a[_i];\n                    states[state].halo = false;\n                }\n            }\n        });\n        SeriesRegistry.registerSeriesType('venn', VennSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return VennSeries;\n    });\n    _registerModule(_modules, 'masters/modules/venn.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n\n        return Highcharts;\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","GeometryUtilities","getCenterOfPoints","points","sum","reduce","point","x","y","length","getDistanceBetweenPoints","p1","p2","Math","sqrt","pow","getAngleBetweenPoints","atan2","Geometry","CircleUtilities","round","decimals","a","getAreaOfCircle","r","Error","PI","getCircularSegmentArea","h","acos","getCircleCircleIntersection","c1","c2","d","r1","r2","abs","r1Square","x1","x2","y1","y2","x0","y0","rx","ry","getCirclesIntersectionPoints","circles","i","arr","additional","slice","j","indexes","concat","map","p","isPointInsideCircle","circle","isPointInsideAllCircles","some","getCirclesIntersectionPolygon","filter","getOverlapBetweenCircles","overlap","d1","isCircle1CompletelyOverlappingCircle2","circle1","circle2","isPointOutsideAllCircles","getAreaOfIntersectionBetweenCircles","result","intersectionPoints","center_1","startPoint","angle","sort","b","arcs","data","midPoint","arc","index","indexOf","angle1","angle2","angleDiff","width","sin","cos","largeArc","push","unshift","center","__assign","Object","assign","t","s","n","arguments","prototype","call","draw","params","animatableAttribs","onComplete","css","renderer","animation","series","chart","hasRendered","options","graphic","attribs","getClassName","shouldDraw","shapeType","text","image","imageUrl","attr","shapeArgs","add","group","animate","isNew","destroy_1","destroy","keys","SeriesRegistry","U","extendStatics","__extends","setPrototypeOf","__proto__","Array","TypeError","String","__","constructor","create","ScatterPoint","seriesTypes","scatter","pointClass","isNumber","_super","VennPoint","isValid","value","borderColor","borderDashStyle","borderWidth","brighten","clip","colorByPoint","dataLabels","enabled","verticalAlign","formatter","name","inactiveOtherPoints","marker","opacity","showInLegend","legendType","states","hover","select","color","inactive","tooltip","pointFormat","legendSymbol","CU","GU","getOverlapBetweenCirclesByDistance","extend","isArray","isObject","isString","addOverlapToSets","relations","mapOfIdToProps","relation","sets","forEach","set","_a","totalOverlap","overlapping","isSet","properties","bisect","f","tolerance","maxIterations","fX","fA","fB","nMax","tol","delta","getCentroid","simplex","getDistanceBetweenCirclesByOverlap","maxDistance","isValidRelation","invalid","loss","mapOfIdToCircle","totalLoss","diff","wantedOverlap","sortByTotalOverlap","NaN","geometry","geometryCircles","getLabelWidth","pos","internal","external","radius","min","Infinity","filteredExternals","findDistance","direction","testPos","Number","MAX_VALUE","getMarginFromCircles","margin","m","layoutGreedyVenn","positionedSets","mapOfIdToCircles","positionSet","coordinates","sortedByOverlap","shift","relationsWithTwoSets","_i","sortedByOverlap_1","_loop_1","bestPosition","best","positionedSet","positionedCircle","distance","possibleCoordinates","positionedSet2","positionedCircle2","overlap2","distance2","_b","possibleCoordinates_1","currentLoss","nelderMead","initial","sortByFx","fx","weightedSum","weight1","v1","weight2","v2","updateSimplex","shrinkSimplex","getPoint","centroid","worst","getSimplex","reflected","expanded","contracted","pCon","processVennData","splitter","validSets","mapOfIdToRelation","join","combinations","remaining","set2","combination","split","id","A","Color","DPU","VennSeriesDefaults","VennUtils","animObject","parse","ScatterSeries","addEvent","merge","VennSeries","getLabelPosition","optimal","getLabelValues","setRelations","isInternal","externalCircle","internalCircle","position","layout","mapOfIdToShape","mapOfIdToLabelValues","mapOfIdToCircles_1","relations_1","shape","getScale","targetWidth","targetHeight","field","height","bottom","top","right","left","adjustX","adjustY","scale","centerX","centerY","updateFieldBoundaries","init","animOptions","setTimeout","duration","drawPoints","points_1","zIndex","styledMode","pointAttribs","state","seriesOptions","pointOptions","stateOptions","brightness","get","translate","processedXData","xData","generatePoints","key","scaling","plotWidth","plotHeight","dataLabelValues","dlOptions","dataLabelWidth","dataLabelPosition","seg","plotX","plotY","style","defaultOptions","axisTypes","directTouch","isCartesian","pointArrayMap","utils","e","is","halo","registerSeriesType"],"mappings":"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"}