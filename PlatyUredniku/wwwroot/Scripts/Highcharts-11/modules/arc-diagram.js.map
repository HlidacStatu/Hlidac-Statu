{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.1 (2024-04-04)\n *\n * Arc diagram module\n *\n * (c) 2021 Piotr Madej\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/arc-diagram', ['highcharts', 'highcharts/modules/sankey'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/ArcDiagram/ArcDiagramPoint.js', [_modules['Series/NodesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (NodesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  Arc diagram module\n         *\n         *  (c) 2018-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { sankey: { prototype: { pointClass: SankeyPoint } } } } = SeriesRegistry;\n        const { extend } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class ArcDiagramPoint extends SankeyPoint {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            isValid() {\n                // No null points here\n                return true;\n            }\n        }\n        extend(ArcDiagramPoint.prototype, {\n            setState: NodesComposition.setNodeState\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ArcDiagramPoint;\n    });\n    _registerModule(_modules, 'Series/ArcDiagram/ArcDiagramSeries.js', [_modules['Series/ArcDiagram/ArcDiagramPoint.js'], _modules['Series/Sankey/SankeyColumnComposition.js'], _modules['Core/Series/Series.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Renderer/SVG/SVGRenderer.js'], _modules['Core/Utilities.js']], function (ArcDiagramPoint, SankeyColumnComposition, Series, SeriesRegistry, SVGRenderer, U) {\n        /* *\n         *\n         *  Arc diagram module\n         *\n         *  (c) 2021 Piotr Madej, Grzegorz BlachliÅ„ski\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { prototype: { symbols } } = SVGRenderer;\n        const { seriesTypes: { column: ColumnSeries, sankey: SankeySeries } } = SeriesRegistry;\n        const { extend, merge, pick, relativeLength } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.arcdiagram\n         *\n         * @augments Highcharts.seriesTypes.sankey\n         */\n        class ArcDiagramSeries extends SankeySeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create node columns by analyzing the nodes and the relations between\n             * incoming and outgoing links.\n             * @private\n             */\n            createNodeColumns() {\n                const series = this, chart = series.chart, \n                // Column needs casting, to much methods required at the same time\n                column = SankeyColumnComposition.compose([], series);\n                column.sankeyColumn.maxLength = chart.inverted ?\n                    chart.plotHeight : chart.plotWidth;\n                // Get the translation factor needed for each column to fill up the plot\n                // height\n                column.sankeyColumn.getTranslationFactor = (series) => {\n                    const nodes = column.slice(), minLinkWidth = this.options.minLinkWidth || 0;\n                    let skipPoint, factor = 0, i, radius, maxRadius = 0, scale = 1, additionalSpace = 0, remainingWidth = (chart.plotSizeX || 0) -\n                        (series.options.marker &&\n                            series.options.marker.lineWidth || 0) -\n                        (column.length - 1) *\n                            series.nodePadding;\n                    // Because the minLinkWidth option doesn't obey the direct\n                    // translation, we need to run translation iteratively, check node\n                    // heights, remove those nodes affected by minLinkWidth, check\n                    // again, etc.\n                    while (column.length) {\n                        factor = remainingWidth / column.sankeyColumn.sum();\n                        skipPoint = false;\n                        i = column.length;\n                        while (i--) {\n                            radius = (column[i].getSum()) * factor * scale;\n                            const plotArea = Math.min(chart.plotHeight, chart.plotWidth);\n                            if (radius > plotArea) {\n                                scale = Math.min(plotArea / radius, scale);\n                            }\n                            else if (radius < minLinkWidth) {\n                                column.splice(i, 1);\n                                remainingWidth -= minLinkWidth;\n                                radius = minLinkWidth;\n                                skipPoint = true;\n                            }\n                            additionalSpace += radius * (1 - scale) / 2;\n                            maxRadius = Math.max(maxRadius, radius);\n                        }\n                        if (!skipPoint) {\n                            break;\n                        }\n                    }\n                    // Re-insert original nodes\n                    column.length = 0;\n                    nodes.forEach((node) => {\n                        node.scale = scale;\n                        column.push(node);\n                    });\n                    column.sankeyColumn.maxRadius = maxRadius;\n                    column.sankeyColumn.scale = scale;\n                    column.sankeyColumn.additionalSpace = additionalSpace;\n                    return factor;\n                };\n                column.sankeyColumn.offset = function (node, factor) {\n                    const equalNodes = node.series.options.equalNodes, nodePadding = series.nodePadding, maxRadius = Math.min(chart.plotWidth, chart.plotHeight, (column.sankeyColumn.maxLength || 0) /\n                        series.nodes.length - nodePadding);\n                    let offset = column.sankeyColumn.additionalSpace || 0, totalNodeOffset;\n                    for (let i = 0; i < column.length; i++) {\n                        const sum = column[i].getSum() *\n                            (column.sankeyColumn.scale || 0);\n                        const width = equalNodes ?\n                            maxRadius :\n                            Math.max(sum * factor, series.options.minLinkWidth || 0);\n                        if (sum) {\n                            totalNodeOffset = width + nodePadding;\n                        }\n                        else {\n                            // If node sum equals 0 nodePadding is missed #12453\n                            totalNodeOffset = 0;\n                        }\n                        if (column[i] === node) {\n                            return {\n                                relativeLeft: offset + relativeLength(node.options.offset || 0, totalNodeOffset)\n                            };\n                        }\n                        offset += totalNodeOffset;\n                    }\n                };\n                // Add nodes directly to the column right after it's creation\n                series.nodes.forEach(function (node) {\n                    node.column = 0;\n                    column.push(node);\n                });\n                return [column];\n            }\n            /**\n             * Run translation operations for one link.\n             * @private\n             */\n            translateLink(point) {\n                const series = this, fromNode = point.fromNode, toNode = point.toNode, chart = this.chart, translationFactor = series.translationFactor, pointOptions = point.options, seriesOptions = series.options, linkWeight = pick(pointOptions.linkWeight, seriesOptions.linkWeight, Math.max((point.weight || 0) *\n                    translationFactor *\n                    fromNode.scale, (series.options.minLinkWidth || 0))), centeredLinks = point.series.options.centeredLinks, nodeTop = fromNode.nodeY;\n                const getX = (node, fromOrTo) => {\n                    const linkLeft = ((node.offset(point, fromOrTo) || 0) *\n                        translationFactor);\n                    const x = Math.min(node.nodeX + linkLeft, \n                    // Prevent links from spilling below the node (#12014)\n                    node.nodeX + (node.shapeArgs && node.shapeArgs.height || 0) - linkWeight);\n                    return x;\n                };\n                let fromX = centeredLinks ?\n                    fromNode.nodeX +\n                        ((fromNode.shapeArgs.height || 0) - linkWeight) / 2 :\n                    getX(fromNode, 'linksFrom'), toX = centeredLinks ? toNode.nodeX +\n                    ((toNode.shapeArgs.height || 0) - linkWeight) / 2 :\n                    getX(toNode, 'linksTo'), bottom = nodeTop;\n                if (fromX > toX) {\n                    [fromX, toX] = [toX, fromX];\n                }\n                if (seriesOptions.reversed) {\n                    [fromX, toX] = [toX, fromX];\n                    bottom = (chart.plotSizeY || 0) - bottom;\n                }\n                point.shapeType = 'path';\n                point.linkBase = [\n                    fromX,\n                    fromX + linkWeight,\n                    toX,\n                    toX + linkWeight\n                ];\n                const linkRadius = ((toX + linkWeight - fromX) / Math.abs(toX + linkWeight - fromX)) * pick(seriesOptions.linkRadius, Math.min(Math.abs(toX + linkWeight - fromX) / 2, fromNode.nodeY - Math.abs(linkWeight)));\n                point.shapeArgs = {\n                    d: [\n                        ['M', fromX, bottom],\n                        [\n                            'A',\n                            (toX + linkWeight - fromX) / 2,\n                            linkRadius,\n                            0,\n                            0,\n                            1,\n                            toX + linkWeight,\n                            bottom\n                        ],\n                        ['L', toX, bottom],\n                        [\n                            'A',\n                            (toX - fromX - linkWeight) / 2,\n                            linkRadius - linkWeight,\n                            0,\n                            0,\n                            0,\n                            fromX + linkWeight,\n                            bottom\n                        ],\n                        ['Z']\n                    ]\n                };\n                point.dlBox = {\n                    x: fromX + (toX - fromX) / 2,\n                    y: bottom - linkRadius,\n                    height: linkWeight,\n                    width: 0\n                };\n                // And set the tooltip anchor in the middle\n                point.tooltipPos = chart.inverted ? [\n                    (chart.plotSizeY || 0) - point.dlBox.y - linkWeight / 2,\n                    (chart.plotSizeX || 0) - point.dlBox.x\n                ] : [\n                    point.dlBox.x,\n                    point.dlBox.y + linkWeight / 2\n                ];\n                // Pass test in drawPoints\n                point.y = point.plotY = 1;\n                point.x = point.plotX = 1;\n                if (!point.color) {\n                    point.color = fromNode.color;\n                }\n            }\n            /**\n             * Run translation operations for one node.\n             * @private\n             */\n            translateNode(node, column) {\n                const series = this, translationFactor = series.translationFactor, chart = series.chart, maxNodesLength = chart.inverted ?\n                    chart.plotWidth : chart.plotHeight, options = series.options, maxRadius = Math.min(chart.plotWidth, chart.plotHeight, maxNodesLength / node.series.nodes.length - this.nodePadding), sum = node.getSum() * (column.sankeyColumn.scale || 0), equalNodes = options.equalNodes, nodeHeight = equalNodes ?\n                    maxRadius :\n                    Math.max(sum * translationFactor, this.options.minLinkWidth || 0), crisp = Math.round(options.marker &&\n                    options.marker.lineWidth || 0) % 2 / 2, nodeOffset = column.sankeyColumn.offset(node, translationFactor), fromNodeLeft = Math.floor(pick(nodeOffset && nodeOffset.absoluteLeft, ((column.sankeyColumn.left(translationFactor) || 0) +\n                    (nodeOffset && nodeOffset.relativeLeft || 0)))) + crisp, markerOptions = merge(options.marker, node.options.marker), symbol = markerOptions.symbol, markerRadius = markerOptions.radius, top = parseInt(options.offset, 10) *\n                    ((chart.inverted ?\n                        chart.plotWidth : chart.plotHeight) - (Math.floor(this.colDistance * (node.column || 0) +\n                        (markerOptions.lineWidth || 0) / 2) + crisp +\n                        (column.sankeyColumn.scale || 0) *\n                            (column.sankeyColumn.maxRadius || 0) / 2)) / 100;\n                node.sum = sum;\n                // If node sum is 0, donâ€™t render the rect #12453\n                if (sum) {\n                    // Draw the node\n                    node.nodeX = fromNodeLeft;\n                    node.nodeY = top;\n                    const x = fromNodeLeft, width = node.options.width || options.width || nodeHeight, height = node.options.height || options.height || nodeHeight;\n                    let y = top;\n                    if (options.reversed) {\n                        y = (chart.plotSizeY || 0) - top;\n                        if (chart.inverted) {\n                            y = (chart.plotSizeY || 0) - top;\n                        }\n                    }\n                    if (this.mapOptionsToLevel) {\n                        // Calculate data label options for the point\n                        node.dlOptions = SankeySeries.getDLOptions({\n                            level: this.mapOptionsToLevel[node.level],\n                            optionsPoint: node.options\n                        });\n                    }\n                    // Pass test in drawPoints\n                    node.plotX = 1;\n                    node.plotY = 1;\n                    // Set the anchor position for tooltips\n                    node.tooltipPos = chart.inverted ? [\n                        (chart.plotSizeY || 0) - y - height / 2,\n                        (chart.plotSizeX || 0) - x - width / 2\n                    ] : [\n                        x + width / 2,\n                        y + height / 2\n                    ];\n                    node.shapeType = 'path';\n                    node.shapeArgs = {\n                        d: symbols[symbol || 'circle'](x, y - (markerRadius || height) / 2, markerRadius || width, markerRadius || height),\n                        width: markerRadius || width,\n                        height: markerRadius || height\n                    };\n                    node.dlBox = {\n                        x: x + width / 2,\n                        y: y,\n                        height: 0,\n                        width: 0\n                    };\n                }\n                else {\n                    node.dlOptions = {\n                        enabled: false\n                    };\n                }\n            }\n            // Networkgraph has two separate collecions of nodes and lines, render\n            // dataLabels for both sets:\n            drawDataLabels() {\n                if (this.options.dataLabels) {\n                    const textPath = this.options.dataLabels.textPath;\n                    // Render node labels:\n                    ColumnSeries.prototype.drawDataLabels.call(this, this.nodes);\n                    // Render link labels:\n                    this.options.dataLabels.textPath =\n                        this.options.dataLabels.linkTextPath;\n                    ColumnSeries.prototype.drawDataLabels.call(this, this.data);\n                    // Restore nodes\n                    this.options.dataLabels.textPath = textPath;\n                }\n            }\n            pointAttribs(point, \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            state) {\n                if (point && point.isNode) {\n                    const { ...attrs } = Series.prototype.pointAttribs\n                        .apply(this, arguments);\n                    return attrs;\n                }\n                return super.pointAttribs.apply(this, arguments);\n            }\n            markerAttribs(point) {\n                if (point.isNode) {\n                    return super.markerAttribs.apply(this, arguments);\n                }\n                return {};\n            }\n        }\n        /**\n         *  Arc diagram series is a chart drawing style in which\n         *  the vertices of the chart are positioned along a line\n         *  on the Euclidean plane and the edges are drawn as a semicircle\n         *  in one of the two half-planes delimited by the line,\n         *  or as smooth curves formed by sequences of semicircles.\n         *\n         * @sample highcharts/demo/arc-diagram/\n         *         Arc Diagram\n         *\n         * @extends      plotOptions.sankey\n         * @since 10.0.0\n         * @product      highcharts\n         * @requires     modules/arc-diagram\n         * @exclude      curveFactor, connectEnds, connectNulls, colorAxis, colorKey,\n         *               dataSorting, dragDrop, getExtremesFromAll, nodeAlignment,\n         *               nodePadding, centerInCategory, pointInterval,\n         *               pointIntervalUnit, pointPlacement, pointStart,\n         *               relativeXValue, softThreshold, stack, stacking, step,\n         *               xAxis, yAxis\n         * @optionparent plotOptions.arcdiagram\n         */\n        ArcDiagramSeries.defaultOptions = merge(SankeySeries.defaultOptions, {\n            /**\n             * The option to center links rather than position them one after\n             * another\n             *\n             * @type    {boolean}\n             * @since 10.0.0\n             * @default false\n             * @product highcharts\n             */\n            centeredLinks: false,\n            /**\n             * The radius of the link arc. If not set, series renders a semi-circle\n             * between the nodes, except when overflowing the edge of the plot area,\n             * in which case an arc touching the edge is rendered. If `linkRadius`\n             * is set, an arc extending to the given value is rendered.\n             *\n             * @type    {number}\n             * @since 10.0.0\n             * @default undefined\n             * @product highcharts\n             * @apioption series.arcdiagram.linkRadius\n             */\n            /**\n             * The offset of an arc diagram nodes column in relation to the\n             * `plotArea`. The offset equal to 50% places nodes in the center of a\n             * chart. By default the series is placed so that the biggest node is\n             * touching the bottom border of the `plotArea`.\n             *\n             * @type    {string}\n             * @since 10.0.0\n             * @default '100%'\n             * @product highcharts\n             * @apioption series.arcdiagram.offset\n             */\n            offset: '100%',\n            /**\n             * The global link weight, in pixels. If not set, width is calculated\n             * per link, depending on the weight value.\n             *\n             * @sample highcharts/series-arcdiagram/link-weight\n             *         Link weight\n             *\n             * @type    {number}\n             * @since 10.0.0\n             * @default undefined\n             * @product highcharts\n             * @apioption series.arcdiagram.linkWeight\n             */\n            /**\n             * Whether nodes with different values should have the same size. If set\n             * to true, all nodes are calculated based on the `nodePadding` and\n             * current `plotArea`. It is possible to override it using the\n             * `marker.radius` option.\n             *\n             * @type    {boolean}\n             * @since 10.0.0\n             * @default false\n             * @product highcharts\n             */\n            equalNodes: false,\n            /**\n             * Whether the series should be placed on the other side of the\n             * `plotArea`.\n             *\n             * @type    {boolean}\n             * @since 10.0.0\n             * @default false\n             * @product highcharts\n             */\n            reversed: false,\n            /**\n             * Options for the data labels appearing on top of the nodes and links.\n             * For arc diagram charts, data labels are visible for the nodes by\n             * default, but hidden for links. This is controlled by modifying the\n             * `nodeFormat`, and the `format` that applies to links and is an empty\n             * string by default.\n             *\n             * @declare Highcharts.SeriesArcDiagramDataLabelsOptionsObject\n             *\n             * @private\n             */\n            dataLabels: {\n                /**\n                 * Options for a _link_ label text which should follow link\n                 * connection. Border and background are disabled for a label that\n                 * follows a path.\n                 *\n                 * **Note:** Only SVG-based renderer supports this option. Setting\n                 * `useHTML` to true will disable this option.\n                 *\n                 * @extends plotOptions.networkgraph.dataLabels.linkTextPath\n                 * @since 10.0.0\n                 */\n                linkTextPath: {\n                    /**\n                     * @type    {Highcharts.SVGAttributes}\n                     * @default {\"startOffset\":\"25%\"}\n                     */\n                    attributes: {\n                        /**\n                         * @ignore-option\n                         */\n                        startOffset: '25%'\n                    }\n                }\n            },\n            /**\n             * @extends   plotOptions.series.marker\n             * @excluding enabled, enabledThreshold, height, width\n             */\n            marker: {\n                symbol: 'circle',\n                fillOpacity: 1,\n                lineWidth: 0,\n                states: {}\n            }\n        });\n        extend(ArcDiagramSeries.prototype, {\n            orderNodes: false\n        });\n        ArcDiagramSeries.prototype.pointClass = ArcDiagramPoint;\n        SeriesRegistry.registerSeriesType('arcdiagram', ArcDiagramSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An `arcdiagram` series. If the [type](#series.arcdiagram.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.arcdiagram\n         * @exclude   dataSorting, boostThreshold, boostBlending, curveFactor,\n         *            connectEnds, connectNulls, colorAxis, colorKey, dataSorting,\n         *            dragDrop, getExtremesFromAll, nodePadding, centerInCategory,\n         *            pointInterval, pointIntervalUnit, pointPlacement,\n         *            pointStart, relativeXValue, softThreshold, stack,\n         *            stacking, step, xAxis, yAxis\n         * @product   highcharts\n         * @requires  modules/sankey\n         * @requires  modules/arc-diagram\n         * @apioption series.arcdiagram\n         */\n        /**\n         * @extends   plotOptions.series.marker\n         * @excluding enabled, enabledThreshold, height, radius, width\n         * @apioption series.arcdiagram.marker\n         */\n        /**\n         * @type      {Highcharts.SeriesArcDiagramDataLabelsOptionsObject|Array<Highcharts.SeriesArcDiagramDataLabelsOptionsObject>}\n         * @product   highcharts\n         * @apioption series.arcdiagram.data.dataLabels\n         */\n        /**\n         * A collection of options for the individual nodes. The nodes in an arc diagram\n         * are auto-generated instances of `Highcharts.Point`, but options can be\n         * applied here and linked by the `id`.\n         *\n         * @extends   series.sankey.nodes\n         * @type      {Array<*>}\n         * @product   highcharts\n         * @excluding column, level\n         * @apioption series.arcdiagram.nodes\n         */\n        /**\n         * Individual data label for each node. The options are the same as the ones for\n         * [series.arcdiagram.dataLabels](#series.arcdiagram.dataLabels).\n         *\n         * @type\n         * {Highcharts.SeriesArcDiagramDataLabelsOptionsObject|Array<Highcharts.SeriesArcDiagramDataLabelsOptionsObject>}\n         *\n         * @apioption series.arcdiagram.nodes.dataLabels\n         */\n        /**\n         * Individual data label for each node. The options are the same as the ones for\n         * [series.arcdiagram.dataLabels](#series.arcdiagram.dataLabels).\n         *\n         * @type\n         * {Highcharts.SeriesArcDiagramDataLabelsOptionsObject|Array<Highcharts.SeriesArcDiagramDataLabelsOptionsObject>}\n         *\n         */\n        /**\n         * An array of data points for the series. For the `arcdiagram` series type,\n         * points can be given in the following way:\n         *\n         * An array of objects with named values. The following snippet shows only a few\n         * settings, see the complete options set below. If the total number of data\n         * points exceeds the series' [turboThreshold](#series.area.turboThreshold),\n         * this option is not available.\n         *\n         *  ```js\n         *     data: [{\n         *         from: 'Category1',\n         *         to: 'Category2',\n         *         weight: 2\n         *     }, {\n         *         from: 'Category1',\n         *         to: 'Category3',\n         *         weight: 5\n         *     }]\n         *  ```\n         *\n         * @type      {Array<*>}\n         * @extends   series.sankey.data\n         * @product   highcharts\n         * @excluding outgoing, dataLabels\n         * @apioption series.arcdiagram.data\n         */\n        ''; // Adds doclets above to the transpiled file\n\n        return ArcDiagramSeries;\n    });\n    _registerModule(_modules, 'masters/modules/arc-diagram.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n\n        return Highcharts;\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","NodesComposition","SeriesRegistry","U","seriesTypes","sankey","prototype","pointClass","SankeyPoint","extend","ArcDiagramPoint","isValid","setState","setNodeState","SankeyColumnComposition","Series","SVGRenderer","symbols","column","ColumnSeries","SankeySeries","merge","pick","relativeLength","ArcDiagramSeries","createNodeColumns","series","chart","compose","sankeyColumn","maxLength","inverted","plotHeight","plotWidth","getTranslationFactor","nodes","slice","minLinkWidth","options","skipPoint","factor","i","radius","maxRadius","scale","additionalSpace","remainingWidth","plotSizeX","marker","lineWidth","length","nodePadding","sum","getSum","plotArea","Math","min","splice","max","forEach","node","push","offset","equalNodes","totalNodeOffset","width","relativeLeft","translateLink","point","fromNode","toNode","translationFactor","pointOptions","seriesOptions","linkWeight","weight","centeredLinks","nodeTop","nodeY","getX","fromOrTo","linkLeft","nodeX","shapeArgs","height","fromX","toX","bottom","reversed","plotSizeY","shapeType","linkBase","linkRadius","abs","d","dlBox","x","y","tooltipPos","plotY","plotX","color","translateNode","maxNodesLength","nodeHeight","crisp","round","nodeOffset","fromNodeLeft","floor","absoluteLeft","left","markerOptions","symbol","markerRadius","top","parseInt","colDistance","mapOptionsToLevel","dlOptions","getDLOptions","level","optionsPoint","enabled","drawDataLabels","dataLabels","textPath","call","linkTextPath","data","pointAttribs","state","isNode","attrs","arguments","markerAttribs","defaultOptions","attributes","startOffset","fillOpacity","states","orderNodes","registerSeriesType"],"mappings":"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"}