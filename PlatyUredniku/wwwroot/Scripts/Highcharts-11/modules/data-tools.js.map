{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.1 (2024-04-04)\n *\n * Highcharts\n *\n * (c) 2010-2024 Highsoft AS\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/data-tools', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Data/Modifiers/DataModifier.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - GÃ¸ran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class to provide an interface for modifying a table.\n         *\n         * @private\n         */\n        class DataModifier {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Runs a timed execution of the modifier on the given datatable.\n             * Can be configured to run multiple times.\n             *\n             * @param {DataTable} dataTable\n             * The datatable to execute\n             *\n             * @param {DataModifier.BenchmarkOptions} options\n             * Options. Currently supports `iterations` for number of iterations.\n             *\n             * @return {Array<number>}\n             * An array of times in milliseconds\n             *\n             */\n            benchmark(dataTable, options) {\n                const results = [];\n                const modifier = this;\n                const execute = () => {\n                    modifier.modifyTable(dataTable);\n                    modifier.emit({\n                        type: 'afterBenchmarkIteration'\n                    });\n                };\n                const defaultOptions = {\n                    iterations: 1\n                };\n                const { iterations } = merge(defaultOptions, options);\n                modifier.on('afterBenchmarkIteration', () => {\n                    if (results.length === iterations) {\n                        modifier.emit({\n                            type: 'afterBenchmark',\n                            results\n                        });\n                        return;\n                    }\n                    // Run again\n                    execute();\n                });\n                const times = {\n                    startTime: 0,\n                    endTime: 0\n                };\n                // Add timers\n                modifier.on('modify', () => {\n                    times.startTime = window.performance.now();\n                });\n                modifier.on('afterModify', () => {\n                    times.endTime = window.performance.now();\n                    results.push(times.endTime - times.startTime);\n                });\n                // Initial run\n                execute();\n                return results;\n            }\n            /**\n             * Emits an event on the modifier to all registered callbacks of this event.\n             *\n             * @param {DataModifier.Event} [e]\n             * Event object containing additonal event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns a modified copy of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            modify(table, eventDetail) {\n                const modifier = this;\n                return new Promise((resolve, reject) => {\n                    if (table.modified === table) {\n                        table.modified = table.clone(false, eventDetail);\n                    }\n                    try {\n                        resolve(modifier.modifyTable(table, eventDetail));\n                    }\n                    catch (e) {\n                        modifier.emit({\n                            type: 'error',\n                            detail: eventDetail,\n                            table\n                        });\n                        reject(e);\n                    }\n                });\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columnName, rowIndex, cellValue, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columns, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            rows, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Registers a callback for a specific modifier event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for modifier events and options.\n         * @private\n         */\n        (function (DataModifier) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with modifier names and their class\n             * constructor.\n             */\n            DataModifier.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a modifier class to the registry. The modifier class has to provide\n             * the `DataModifier.options` property and the `DataModifier.modifyTable`\n             * method to modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the modifier class.\n             *\n             * @param {DataModifierType} DataModifierClass\n             * Modifier class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a modifier registered with this key.\n             */\n            function registerType(key, DataModifierClass) {\n                return (!!key &&\n                    !DataModifier.types[key] &&\n                    !!(DataModifier.types[key] = DataModifierClass));\n            }\n            DataModifier.registerType = registerType;\n        })(DataModifier || (DataModifier = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataModifier;\n    });\n    _registerModule(_modules, 'Data/DataTable.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - GÃ¸ran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class to manage columns and rows in a table structure. It provides methods\n         * to add, remove, and manipulate columns and rows, as well as to retrieve data\n         * from specific cells.\n         *\n         * @class\n         * @name Highcharts.DataTable\n         *\n         * @param {Highcharts.DataTableOptions} [options]\n         * Options to initialize the new DataTable instance.\n         */\n        class DataTable {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Tests whether a row contains only `null` values or is equal to\n             * DataTable.NULL. If all columns have `null` values, the function returns\n             * `true`. Otherwise, it returns `false` to indicate that the row contains\n             * at least one non-null value.\n             *\n             * @function Highcharts.DataTable.isNull\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Row to test.\n             *\n             * @return {boolean}\n             * Returns `true`, if the row contains only null, otherwise `false`.\n             *\n             * @example\n             * if (DataTable.isNull(row)) {\n             *   // handle null row\n             * }\n             */\n            static isNull(row) {\n                if (row === DataTable.NULL) {\n                    return true;\n                }\n                if (row instanceof Array) {\n                    if (!row.length) {\n                        return false;\n                    }\n                    for (let i = 0, iEnd = row.length; i < iEnd; ++i) {\n                        if (row[i] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                else {\n                    const columnNames = Object.keys(row);\n                    if (!columnNames.length) {\n                        return false;\n                    }\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (row[columnNames[i]] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataTable class.\n             *\n             * @param {Highcharts.DataTableOptions} [options]\n             * Options to initialize the new DataTable instance.\n             */\n            constructor(options = {}) {\n                /**\n                 * Dictionary of all column aliases and their mapped column. If a column\n                 * for one of the get-methods matches an column alias, this column will\n                 * be replaced with the mapped column by the column alias.\n                 *\n                 * @name Highcharts.DataTable#aliases\n                 * @type {Highcharts.Dictionary<string>}\n                 */\n                this.aliases = (options.aliases ?\n                    JSON.parse(JSON.stringify(options.aliases)) :\n                    {});\n                /**\n                 * Whether the ID was automatic generated or given in the constructor.\n                 *\n                 * @name Highcharts.DataTable#autoId\n                 * @type {boolean}\n                 */\n                this.autoId = !options.id;\n                this.columns = {};\n                /**\n                 * ID of the table for indentification purposes.\n                 *\n                 * @name Highcharts.DataTable#id\n                 * @type {string}\n                 */\n                this.id = (options.id || uniqueKey());\n                this.modified = this;\n                this.rowCount = 0;\n                this.versionTag = uniqueKey();\n                const columns = options.columns || {}, columnNames = Object.keys(columns), thisColumns = this.columns;\n                let rowCount = 0;\n                for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName].slice();\n                    thisColumns[columnName] = column;\n                    rowCount = Math.max(rowCount, column.length);\n                }\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    thisColumns[columnNames[i]].length = rowCount;\n                }\n                this.rowCount = rowCount;\n                const aliases = options.aliases || {}, aliasKeys = Object.keys(aliases), thisAliases = this.aliases;\n                for (let i = 0, iEnd = aliasKeys.length, alias; i < iEnd; ++i) {\n                    alias = aliasKeys[i];\n                    thisAliases[alias] = aliases[alias];\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns a clone of this table. The cloned table is completely independent\n             * of the original, and any changes made to the clone will not affect\n             * the original table.\n             *\n             * @function Highcharts.DataTable#clone\n             *\n             * @param {boolean} [skipColumns]\n             * Whether to clone columns or not.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Clone of this data table.\n             *\n             * @emits #cloneTable\n             * @emits #afterCloneTable\n             */\n            clone(skipColumns, eventDetail) {\n                const table = this, tableOptions = {};\n                table.emit({ type: 'cloneTable', detail: eventDetail });\n                if (!skipColumns) {\n                    tableOptions.aliases = table.aliases;\n                    tableOptions.columns = table.columns;\n                }\n                if (!table.autoId) {\n                    tableOptions.id = table.id;\n                }\n                const tableClone = new DataTable(tableOptions);\n                if (!skipColumns) {\n                    tableClone.versionTag = table.versionTag;\n                }\n                table.emit({\n                    type: 'afterCloneTable',\n                    detail: eventDetail,\n                    tableClone\n                });\n                return tableClone;\n            }\n            /**\n             * Deletes a column alias and returns the original column name. If the alias\n             * is not found, the method returns `undefined`. Deleting an alias does not\n             * affect the data in the table, only the way columns are accessed.\n             *\n             * @function Highcharts.DataTable#deleteColumnAlias\n             *\n             * @param {string} alias\n             * The alias to delete.\n             *\n             * @return {string|undefined}\n             * Returns the original column name, if found.\n             */\n            deleteColumnAlias(alias) {\n                const table = this, aliases = table.aliases, deletedAlias = aliases[alias], modifier = table.modifier;\n                if (deletedAlias) {\n                    delete table.aliases[alias];\n                    if (modifier) {\n                        modifier.modifyColumns(table, { [deletedAlias]: new Array(table.rowCount) }, 0);\n                    }\n                }\n                return deletedAlias;\n            }\n            /**\n             * Deletes columns from the table.\n             *\n             * @function Highcharts.DataTable#deleteColumns\n             *\n             * @param {Array<string>} [columnNames]\n             * Names (no alias) of columns to delete. If no array is provided, all\n             * columns will be deleted.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTableColumnCollection|undefined}\n             * Returns the deleted columns, if found.\n             *\n             * @emits #deleteColumns\n             * @emits #afterDeleteColumns\n             */\n            deleteColumns(columnNames, eventDetail) {\n                const table = this, columns = table.columns, deletedColumns = {}, modifiedColumns = {}, modifier = table.modifier, rowCount = table.rowCount;\n                columnNames = (columnNames || Object.keys(columns));\n                if (columnNames.length) {\n                    table.emit({\n                        type: 'deleteColumns',\n                        columnNames,\n                        detail: eventDetail\n                    });\n                    for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                        columnName = columnNames[i];\n                        column = columns[columnName];\n                        if (column) {\n                            deletedColumns[columnName] = column;\n                            modifiedColumns[columnName] = new Array(rowCount);\n                        }\n                        delete columns[columnName];\n                    }\n                    if (!Object.keys(columns).length) {\n                        table.rowCount = 0;\n                    }\n                    if (modifier) {\n                        modifier.modifyColumns(table, modifiedColumns, 0, eventDetail);\n                    }\n                    table.emit({\n                        type: 'afterDeleteColumns',\n                        columns: deletedColumns,\n                        columnNames,\n                        detail: eventDetail\n                    });\n                    return deletedColumns;\n                }\n            }\n            /**\n             * Deletes rows in this table.\n             *\n             * @function Highcharts.DataTable#deleteRows\n             *\n             * @param {number} [rowIndex]\n             * Index to start delete of rows. If not specified, all rows will be\n             * deleted.\n             *\n             * @param {number} [rowCount=1]\n             * Number of rows to delete.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Array<Highcharts.DataTableRow>}\n             * Returns the deleted rows, if found.\n             *\n             * @emits #deleteRows\n             * @emits #afterDeleteRows\n             */\n            deleteRows(rowIndex, rowCount = 1, eventDetail) {\n                const table = this, deletedRows = [], modifiedRows = [], modifier = table.modifier;\n                table.emit({\n                    type: 'deleteRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex: (rowIndex || 0)\n                });\n                if (typeof rowIndex === 'undefined') {\n                    rowIndex = 0;\n                    rowCount = table.rowCount;\n                }\n                if (rowCount > 0 && rowIndex < table.rowCount) {\n                    const columns = table.columns, columnNames = Object.keys(columns);\n                    for (let i = 0, iEnd = columnNames.length, column, deletedCells; i < iEnd; ++i) {\n                        column = columns[columnNames[i]];\n                        deletedCells = column.splice(rowIndex, rowCount);\n                        if (!i) {\n                            table.rowCount = column.length;\n                        }\n                        for (let j = 0, jEnd = deletedCells.length; j < jEnd; ++j) {\n                            deletedRows[j] = (deletedRows[j] || []);\n                            deletedRows[j][i] = deletedCells[j];\n                        }\n                        modifiedRows.push(new Array(iEnd));\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, modifiedRows, (rowIndex || 0), eventDetail);\n                }\n                table.emit({\n                    type: 'afterDeleteRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex: (rowIndex || 0),\n                    rows: deletedRows\n                });\n                return deletedRows;\n            }\n            /**\n             * Emits an event on this table to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                const table = this;\n                switch (e.type) {\n                    case 'afterDeleteColumns':\n                    case 'afterDeleteRows':\n                    case 'afterSetCell':\n                    case 'afterSetColumns':\n                    case 'afterSetRows':\n                        table.versionTag = uniqueKey();\n                        break;\n                    default:\n                }\n                fireEvent(table, e.type, e);\n            }\n            /**\n             * Fetches a single cell value.\n             *\n             * @function Highcharts.DataTable#getCell\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias of the cell to retrieve.\n             *\n             * @param {number} rowIndex\n             * Row index of the cell to retrieve.\n             *\n             * @return {Highcharts.DataTableCellType|undefined}\n             * Returns the cell value or `undefined`.\n             */\n            getCell(columnNameOrAlias, rowIndex) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                if (column) {\n                    return column[rowIndex];\n                }\n            }\n            /**\n             * Fetches a cell value for the given row as a boolean.\n             *\n             * @function Highcharts.DataTable#getCellAsBoolean\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {boolean}\n             * Returns the cell value of the row as a boolean.\n             */\n            getCellAsBoolean(columnNameOrAlias, rowIndex) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                return !!(column && column[rowIndex]);\n            }\n            /**\n             * Fetches a cell value for the given row as a number.\n             *\n             * @function Highcharts.DataTable#getCellAsNumber\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to return NaN instead of `null` and `undefined`.\n             *\n             * @return {number|null}\n             * Returns the cell value of the row as a number.\n             */\n            getCellAsNumber(columnNameOrAlias, rowIndex, useNaN) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                let cellValue = (column && column[rowIndex]);\n                switch (typeof cellValue) {\n                    case 'boolean':\n                        return (cellValue ? 1 : 0);\n                    case 'number':\n                        return (isNaN(cellValue) && !useNaN ? null : cellValue);\n                }\n                cellValue = parseFloat(`${cellValue}`);\n                return (isNaN(cellValue) && !useNaN ? null : cellValue);\n            }\n            /**\n             * Fetches a cell value for the given row as a string.\n             *\n             * @function Highcharts.DataTable#getCellAsString\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {string}\n             * Returns the cell value of the row as a string.\n             */\n            getCellAsString(columnNameOrAlias, rowIndex) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                return `${(column && column[rowIndex])}`;\n            }\n            /**\n             * Fetches the given column by the canonical column name or by an alias.\n             * This function is a simplified wrap of {@link getColumns}.\n             *\n             * @function Highcharts.DataTable#getColumn\n             *\n             * @param {string} columnNameOrAlias\n             * Name or alias of the column to get, alias takes precedence.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return the column as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumn|undefined}\n             * A copy of the column, or `undefined` if not found.\n             */\n            getColumn(columnNameOrAlias, asReference) {\n                return this.getColumns([columnNameOrAlias], asReference)[columnNameOrAlias];\n            }\n            /**\n             * Fetches the given column by the canonical column name or by an alias, and\n             * validates the type of the first few cells. If the first defined cell is\n             * of type number, it assumes for performance reasons, that all cells are of\n             * type number or `null`. Otherwise it will convert all cells to number\n             * type, except `null`.\n             *\n             * @function Highcharts.DataTable#getColumnAsNumbers\n             *\n             * @param {string} columnNameOrAlias\n             * Name or alias of the column to get, alias takes precedence.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to use NaN instead of `null` and `undefined`.\n             *\n             * @return {Array<(number|null)>}\n             * A copy of the column, or an empty array if not found.\n             */\n            getColumnAsNumbers(columnNameOrAlias, useNaN) {\n                const table = this, columns = table.columns;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = columns[columnNameOrAlias], columnAsNumber = [];\n                if (column) {\n                    const columnLength = column.length;\n                    if (useNaN) {\n                        for (let i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnNameOrAlias, i, true));\n                        }\n                    }\n                    else {\n                        for (let i = 0, cellValue; i < columnLength; ++i) {\n                            cellValue = column[i];\n                            if (typeof cellValue === 'number') {\n                                // Assume unmixed data for performance reasons\n                                return column.slice();\n                            }\n                            if (cellValue !== null &&\n                                typeof cellValue !== 'undefined') {\n                                break;\n                            }\n                        }\n                        for (let i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnNameOrAlias, i));\n                        }\n                    }\n                }\n                return columnAsNumber;\n            }\n            /**\n             * Fetches all column names.\n             *\n             * @function Highcharts.DataTable#getColumnNames\n             *\n             * @return {Array<string>}\n             * Returns all column names.\n             */\n            getColumnNames() {\n                const table = this, columnNames = Object.keys(table.columns);\n                return columnNames;\n            }\n            /**\n             * Retrieves all or the given columns.\n             *\n             * @function Highcharts.DataTable#getColumns\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases to retrieve. Aliases taking precedence.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return columns as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * Collection of columns. If a requested column was not found, it is\n             * `undefined`.\n             */\n            getColumns(columnNamesOrAliases, asReference) {\n                const table = this, tableAliasMap = table.aliases, tableColumns = table.columns, columns = {};\n                columnNamesOrAliases = (columnNamesOrAliases || Object.keys(tableColumns));\n                for (let i = 0, iEnd = columnNamesOrAliases.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNamesOrAliases[i];\n                    column = tableColumns[(tableAliasMap[columnName] || columnName)];\n                    if (column) {\n                        columns[columnName] = (asReference ? column : column.slice());\n                    }\n                }\n                return columns;\n            }\n            /**\n             * Retrieves the modifier for the table.\n             * @private\n             *\n             * @return {Highcharts.DataModifier|undefined}\n             * Returns the modifier or `undefined`.\n             */\n            getModifier() {\n                return this.modifier;\n            }\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRows}.\n             *\n             * @function Highcharts.DataTable#getRow\n             *\n             * @param {number} rowIndex\n             * Row index to retrieve. First row has index 0.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases in order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRow(rowIndex, columnNamesOrAliases) {\n                return this.getRows(rowIndex, 1, columnNamesOrAliases)[0];\n            }\n            /**\n             * Returns the number of rows in this table.\n             *\n             * @function Highcharts.DataTable#getRowCount\n             *\n             * @return {number}\n             * Number of rows in this table.\n             */\n            getRowCount() {\n                // @todo Implement via property getter `.length` browsers supported\n                return this.rowCount;\n            }\n            /**\n             * Retrieves the index of the first row matching a specific cell value.\n             *\n             * @function Highcharts.DataTable#getRowIndexBy\n             *\n             * @param {string} columnNameOrAlias\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @param {number} [rowIndexOffset]\n             * Index offset to start searching.\n             *\n             * @return {number|undefined}\n             * Index of the first row matching the cell value.\n             */\n            getRowIndexBy(columnNameOrAlias, cellValue, rowIndexOffset) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                if (column) {\n                    const rowIndex = column.indexOf(cellValue, rowIndexOffset);\n                    if (rowIndex !== -1) {\n                        return rowIndex;\n                    }\n                }\n            }\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRowObjects}.\n             *\n             * @function Highcharts.DataTable#getRowObject\n             *\n             * @param {number} rowIndex\n             * Row index.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRowObject(rowIndex, columnNamesOrAliases) {\n                return this.getRowObjects(rowIndex, 1, columnNamesOrAliases)[0];\n            }\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRowObjects\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns retrieved rows.\n             */\n            getRowObjects(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNamesOrAliases) {\n                const table = this, aliases = table.aliases, columns = table.columns, rows = new Array(rowCount);\n                columnNamesOrAliases = (columnNamesOrAliases || Object.keys(columns));\n                for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = {};\n                    for (const columnName of columnNamesOrAliases) {\n                        column = columns[(aliases[columnName] || columnName)];\n                        row[columnName] = (column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRows\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns retrieved rows.\n             */\n            getRows(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNamesOrAliases) {\n                const table = this, aliases = table.aliases, columns = table.columns, rows = new Array(rowCount);\n                columnNamesOrAliases = (columnNamesOrAliases || Object.keys(columns));\n                for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = [];\n                    for (const columnName of columnNamesOrAliases) {\n                        column = columns[(aliases[columnName] || columnName)];\n                        row.push(column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Returns the unique version tag of the current state of the table.\n             *\n             * @function Highcharts.DataTable#getVersionTag\n             *\n             * @return {string}\n             * Unique version tag.\n             */\n            getVersionTag() {\n                return this.versionTag;\n            }\n            /**\n             * Checks for given column names or aliases.\n             *\n             * @function Highcharts.DataTable#hasColumns\n             *\n             * @param {Array<string>} columnNamesOrAliases\n             * Column names of aliases to check.\n             *\n             * @return {boolean}\n             * Returns `true` if all columns have been found, otherwise `false`.\n             */\n            hasColumns(columnNamesOrAliases) {\n                const table = this, aliases = table.aliases, columns = table.columns;\n                for (let i = 0, iEnd = columnNamesOrAliases.length, columnName; i < iEnd; ++i) {\n                    columnName = columnNamesOrAliases[i];\n                    if (!columns[columnName] && !aliases[columnName]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            /**\n             * Searches for a specific cell value.\n             *\n             * @function Highcharts.DataTable#hasRowWith\n             *\n             * @param {string} columnNameOrAlias\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @return {boolean}\n             * True, if a row has been found, otherwise false.\n             */\n            hasRowWith(columnNameOrAlias, cellValue) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                if (column) {\n                    return (column.indexOf(cellValue) !== -1);\n                }\n                return false;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataTable#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataTable>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Renames a column of cell values.\n             *\n             * @function Highcharts.DataTable#renameColumn\n             *\n             * @param {string} columnName\n             * Name of the column to be renamed.\n             *\n             * @param {string} newColumnName\n             * New name of the column. An existing column with the same name will be\n             * replaced.\n             *\n             * @return {boolean}\n             * Returns `true` if successful, `false` if the column was not found.\n             */\n            renameColumn(columnName, newColumnName) {\n                const table = this, columns = table.columns;\n                if (columns[columnName]) {\n                    if (columnName !== newColumnName) {\n                        const aliases = table.aliases;\n                        if (aliases[newColumnName]) {\n                            delete aliases[newColumnName];\n                        }\n                        columns[newColumnName] = columns[columnName];\n                        delete columns[columnName];\n                    }\n                    return true;\n                }\n                return false;\n            }\n            /**\n             * Sets a cell value based on the row index and column name or alias.  Will\n             * insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setCell\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to set.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index to set.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to set.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setCell\n             * @emits #afterSetCell\n             */\n            setCell(columnNameOrAlias, rowIndex, cellValue, eventDetail) {\n                const table = this, columns = table.columns, modifier = table.modifier;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                let column = columns[columnNameOrAlias];\n                if (column && column[rowIndex] === cellValue) {\n                    return;\n                }\n                table.emit({\n                    type: 'setCell',\n                    cellValue,\n                    columnName: columnNameOrAlias,\n                    detail: eventDetail,\n                    rowIndex\n                });\n                if (!column) {\n                    column = columns[columnNameOrAlias] = new Array(table.rowCount);\n                }\n                if (rowIndex >= table.rowCount) {\n                    table.rowCount = (rowIndex + 1);\n                }\n                column[rowIndex] = cellValue;\n                if (modifier) {\n                    modifier.modifyCell(table, columnNameOrAlias, rowIndex, cellValue);\n                }\n                table.emit({\n                    type: 'afterSetCell',\n                    cellValue,\n                    columnName: columnNameOrAlias,\n                    detail: eventDetail,\n                    rowIndex\n                });\n            }\n            /**\n             * Sets cell values for a column. Will insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setColumn\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to set.\n             *\n             * @param {Highcharts.DataTableColumn} [column]\n             * Values to set in the column.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first row to change. (Default: 0)\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumn(columnNameOrAlias, column = [], rowIndex = 0, eventDetail) {\n                this.setColumns({ [columnNameOrAlias]: column }, rowIndex, eventDetail);\n            }\n            /**\n             * Sets cell values for multiple columns. Will insert new columns, if not\n             * found.\n             *\n             * @function Highcharts.DataTable#setColumns\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Columns as a collection, where the keys are the column names or aliases.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to change. Keep undefined to reset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumns(columns, rowIndex, eventDetail) {\n                const table = this, tableColumns = table.columns, tableModifier = table.modifier, reset = (typeof rowIndex === 'undefined'), columnNames = Object.keys(columns);\n                table.emit({\n                    type: 'setColumns',\n                    columns,\n                    columnNames,\n                    detail: eventDetail,\n                    rowIndex\n                });\n                for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    columnName = (table.aliases[columnName] ||\n                        columnName);\n                    if (reset) {\n                        tableColumns[columnName] = column.slice();\n                        table.rowCount = column.length;\n                    }\n                    else {\n                        const tableColumn = (tableColumns[columnName] ?\n                            tableColumns[columnName] :\n                            tableColumns[columnName] = new Array(table.rowCount));\n                        for (let i = (rowIndex || 0), iEnd = column.length; i < iEnd; ++i) {\n                            tableColumn[i] = column[i];\n                        }\n                        table.rowCount = Math.max(table.rowCount, tableColumn.length);\n                    }\n                }\n                const tableColumnNames = Object.keys(tableColumns);\n                for (let i = 0, iEnd = tableColumnNames.length; i < iEnd; ++i) {\n                    tableColumns[tableColumnNames[i]].length = table.rowCount;\n                }\n                if (tableModifier) {\n                    tableModifier.modifyColumns(table, columns, (rowIndex || 0));\n                }\n                table.emit({\n                    type: 'afterSetColumns',\n                    columns,\n                    columnNames,\n                    detail: eventDetail,\n                    rowIndex\n                });\n            }\n            /**\n             * Sets or unsets the modifier for the table.\n             * @private\n             *\n             * @param {Highcharts.DataModifier} [modifier]\n             * Modifier to set, or `undefined` to unset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Resolves to this table if successfull, or rejects on failure.\n             *\n             * @emits #setModifier\n             * @emits #afterSetModifier\n             */\n            setModifier(modifier, eventDetail) {\n                const table = this;\n                let promise;\n                table.emit({\n                    type: 'setModifier',\n                    detail: eventDetail,\n                    modifier,\n                    modified: table.modified\n                });\n                table.modified = table;\n                table.modifier = modifier;\n                if (modifier) {\n                    promise = modifier.modify(table);\n                }\n                else {\n                    promise = Promise.resolve(table);\n                }\n                return promise\n                    .then((table) => {\n                    table.emit({\n                        type: 'afterSetModifier',\n                        detail: eventDetail,\n                        modifier,\n                        modified: table.modified\n                    });\n                    return table;\n                })['catch']((error) => {\n                    table.emit({\n                        type: 'setModifierError',\n                        error,\n                        modifier,\n                        modified: table.modified\n                    });\n                    throw error;\n                });\n            }\n            /**\n             * Sets cell values of a row. Will insert a new row, if no index was\n             * provided, or if the index is higher than the total number of table rows.\n             *\n             * Note: This function is just a simplified wrap of\n             * {@link Highcharts.DataTable#setRows}.\n             *\n             * @function Highcharts.DataTable#setRow\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Cell values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the row to set. Leave `undefind` to add as a new row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            setRow(row, rowIndex, eventDetail) {\n                this.setRows([row], rowIndex, eventDetail);\n            }\n            /**\n             * Sets cell values for multiple rows. Will insert new rows, if no index was\n             * was provided, or if the index is higher than the total number of table\n             * rows.\n             *\n             * @function Highcharts.DataTable#setRows\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Row values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to set. Leave `undefind` to add as new rows.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            setRows(rows, rowIndex = this.rowCount, eventDetail) {\n                const table = this, aliases = table.aliases, columns = table.columns, columnNames = Object.keys(columns), modifier = table.modifier, rowCount = rows.length;\n                table.emit({\n                    type: 'setRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex,\n                    rows\n                });\n                for (let i = 0, i2 = rowIndex, row; i < rowCount; ++i, ++i2) {\n                    row = rows[i];\n                    if (row === DataTable.NULL) {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = null;\n                        }\n                    }\n                    else if (row instanceof Array) {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = row[j];\n                        }\n                    }\n                    else {\n                        const rowColumnNames = Object.keys(row);\n                        for (let j = 0, jEnd = rowColumnNames.length, rowColumnName; j < jEnd; ++j) {\n                            rowColumnName = rowColumnNames[j];\n                            rowColumnName = (aliases[rowColumnName] || rowColumnName);\n                            if (!columns[rowColumnName]) {\n                                columns[rowColumnName] = new Array(i2 + 1);\n                            }\n                            columns[rowColumnName][i2] = row[rowColumnName];\n                        }\n                    }\n                }\n                const indexRowCount = (rowIndex + rowCount);\n                if (indexRowCount > table.rowCount) {\n                    table.rowCount = indexRowCount;\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        columns[columnNames[i]].length = indexRowCount;\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, rows, rowIndex);\n                }\n                table.emit({\n                    type: 'afterSetRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex,\n                    rows\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Null state for a row record. In some cases, a row in a table may not\n         * contain any data or may be invalid. In these cases, a null state can be\n         * used to indicate that the row record is empty or invalid.\n         *\n         * @name Highcharts.DataTable.NULL\n         * @type {Highcharts.DataTableRowObject}\n         *\n         * @see {@link Highcharts.DataTable.isNull} for a null test.\n         *\n         * @example\n         * table.setRows([DataTable.NULL, DataTable.NULL], 10);\n         */\n        DataTable.NULL = {};\n        /**\n         * Semantic version string of the DataTable class.\n         * @internal\n         */\n        DataTable.version = '1.0.0';\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataTable;\n    });\n    _registerModule(_modules, 'Data/Connectors/DataConnector.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class providing an interface for managing a DataConnector.\n         *\n         * @private\n         */\n        class DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructor for the connector class.\n             *\n             * @param {DataConnector.UserOptions} [options]\n             * Options to use in the connector.\n             */\n            constructor(options = {}) {\n                this.table = new DataTable(options.dataTable);\n                this.metadata = options.metadata || { columns: {} };\n            }\n            /**\n             * Poll timer ID, if active.\n             */\n            get polling() {\n                return !!this.polling;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method for adding metadata for a single column.\n             *\n             * @param {string} name\n             * The name of the column to be described.\n             *\n             * @param {DataConnector.MetaColumn} columnMeta\n             * The metadata to apply to the column.\n             */\n            describeColumn(name, columnMeta) {\n                const connector = this, columns = connector.metadata.columns;\n                columns[name] = merge(columns[name] || {}, columnMeta);\n            }\n            /**\n             * Method for applying columns meta information to the whole DataConnector.\n             *\n             * @param {Highcharts.Dictionary<DataConnector.MetaColumn>} columns\n             * Pairs of column names and MetaColumn objects.\n             */\n            describeColumns(columns) {\n                const connector = this, columnNames = Object.keys(columns);\n                let columnName;\n                while (typeof (columnName = columnNames.pop()) === 'string') {\n                    connector.describeColumn(columnName, columns[columnName]);\n                }\n            }\n            /**\n             * Emits an event on the connector to all registered callbacks of this\n             * event.\n             *\n             * @param {DataConnector.Event} [e]\n             * Event object containing additional event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns the order of columns.\n             *\n             * @param {boolean} [usePresentationState]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Array<string>|undefined}\n             * Order of columns.\n             */\n            getColumnOrder(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            usePresentationState) {\n                const connector = this, columns = connector.metadata.columns, names = Object.keys(columns || {});\n                if (names.length) {\n                    return names.sort((a, b) => (pick(columns[a].index, 0) - pick(columns[b].index, 0)));\n                }\n            }\n            /**\n             * Retrieves the columns of the dataTable,\n             * applies column order from meta.\n             *\n             * @param {boolean} [usePresentationOrder]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * An object with the properties `columnNames` and `columnValues`\n             */\n            getSortedColumns(usePresentationOrder) {\n                return this.table.getColumns(this.getColumnOrder(usePresentationOrder));\n            }\n            /**\n             * The default load method, which fires the `afterLoad` event\n             *\n             * @return {Promise<DataConnector>}\n             * The loaded connector.\n             *\n             * @emits DataConnector#afterLoad\n             */\n            load() {\n                fireEvent(this, 'afterLoad', { table: this.table });\n                return Promise.resolve(this);\n            }\n            /**\n             * Registers a callback for a specific connector event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for the connector callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the connector event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * The default save method, which fires the `afterSave` event.\n             *\n             * @return {Promise<DataConnector>}\n             * The saved connector.\n             *\n             * @emits DataConnector#afterSave\n             * @emits DataConnector#saveError\n             */\n            save() {\n                fireEvent(this, 'saveError', { table: this.table });\n                return Promise.reject(new Error('Not implemented'));\n            }\n            /**\n             * Sets the index and order of columns.\n             *\n             * @param {Array<string>} columnNames\n             * Order of columns.\n             */\n            setColumnOrder(columnNames) {\n                const connector = this;\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    connector.describeColumn(columnNames[i], { index: i });\n                }\n            }\n            setModifierOptions(modifierOptions) {\n                const ModifierClass = (modifierOptions &&\n                    DataModifier.types[modifierOptions.type]);\n                return this.table\n                    .setModifier(ModifierClass ?\n                    new ModifierClass(modifierOptions) :\n                    void 0)\n                    .then(() => this);\n            }\n            /**\n             * Starts polling new data after the specific time span in milliseconds.\n             *\n             * @param {number} refreshTime\n             * Refresh time in milliseconds between polls.\n             */\n            startPolling(refreshTime = 1000) {\n                const connector = this;\n                window.clearTimeout(connector._polling);\n                connector._polling = window.setTimeout(() => connector\n                    .load()['catch']((error) => connector.emit({\n                    type: 'loadError',\n                    error,\n                    table: connector.table\n                }))\n                    .then(() => {\n                    if (connector._polling) {\n                        connector.startPolling(refreshTime);\n                    }\n                }), refreshTime);\n            }\n            /**\n             * Stops polling data.\n             */\n            stopPolling() {\n                const connector = this;\n                window.clearTimeout(connector._polling);\n                delete connector._polling;\n            }\n            /**\n             * Retrieves metadata from a single column.\n             *\n             * @param {string} name\n             * The identifier for the column that should be described\n             *\n             * @return {DataConnector.MetaColumn|undefined}\n             * Returns a MetaColumn object if found.\n             */\n            whatIs(name) {\n                return this.metadata.columns[name];\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (DataConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with connector names and their class.\n             */\n            DataConnector.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a connector class to the registry. The connector has to provide the\n             * `DataConnector.options` property and the `DataConnector.load` method to\n             * modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the connector class.\n             *\n             * @param {DataConnectorType} DataConnectorClass\n             * Connector class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a connector registered with this key.\n             */\n            function registerType(key, DataConnectorClass) {\n                return (!!key &&\n                    !DataConnector.types[key] &&\n                    !!(DataConnector.types[key] = DataConnectorClass));\n            }\n            DataConnector.registerType = registerType;\n        })(DataConnector || (DataConnector = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/DataConverter.js', [_modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Sebastian Bochan\n         *  - GÃ¸ran Slettemark\n         *  - Torstein HÃ¸nsi\n         *  - Wojciech Chmiel\n         *\n         * */\n        const { addEvent, fireEvent, isNumber, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Base class providing an interface and basic methods for a DataConverter\n         *\n         * @private\n         */\n        class DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataConverter.\n             *\n             * @param {DataConverter.UserOptions} [options]\n             * Options for the DataConverter.\n             */\n            constructor(options) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                /**\n                 * A collection of available date formats.\n                 */\n                this.dateFormats = {\n                    'YYYY/mm/dd': {\n                        regex: /^([0-9]{4})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{1,2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[1], match[3] - 1, +match[4]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YYYY': {\n                        regex: /^([0-9]{1,2})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[3] - 1, +match[1]) :\n                                NaN);\n                        },\n                        alternative: 'mm/dd/YYYY' // Different format with the same regex\n                    },\n                    'mm/dd/YYYY': {\n                        regex: /^([0-9]{1,2})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YY': {\n                        regex: /^([0-9]{1,2})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{2})$/,\n                        parser: function (match) {\n                            const d = new Date();\n                            if (!match) {\n                                return NaN;\n                            }\n                            let year = +match[4];\n                            if (year > (d.getFullYear() - 2000)) {\n                                year += 1900;\n                            }\n                            else {\n                                year += 2000;\n                            }\n                            return Date.UTC(year, match[3] - 1, +match[1]);\n                        },\n                        alternative: 'mm/dd/YY' // Different format with the same regex\n                    },\n                    'mm/dd/YY': {\n                        regex: /^([0-9]{1,2})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4] + 2000, match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    }\n                };\n                const mergedOptions = merge(DataConverter.defaultOptions, options);\n                let regExpPoint = mergedOptions.decimalPoint;\n                if (regExpPoint === '.' || regExpPoint === ',') {\n                    regExpPoint = regExpPoint === '.' ? '\\\\.' : ',';\n                    this.decimalRegExp =\n                        new RegExp('^(-?[0-9]+)' + regExpPoint + '([0-9]+)$');\n                }\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts a value to a boolean.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {boolean}\n             * Converted value as a boolean.\n             */\n            asBoolean(value) {\n                if (typeof value === 'boolean') {\n                    return value;\n                }\n                if (typeof value === 'string') {\n                    return value !== '' && value !== '0' && value !== 'false';\n                }\n                return !!this.asNumber(value);\n            }\n            /**\n             * Converts a value to a Date.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {globalThis.Date}\n             * Converted value as a Date.\n             */\n            asDate(value) {\n                let timestamp;\n                if (typeof value === 'string') {\n                    timestamp = this.parseDate(value);\n                }\n                else if (typeof value === 'number') {\n                    timestamp = value;\n                }\n                else if (value instanceof Date) {\n                    return value;\n                }\n                else {\n                    timestamp = this.parseDate(this.asString(value));\n                }\n                return new Date(timestamp);\n            }\n            /**\n             * Casts a string value to it's guessed type\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {number|string|Date}\n             * The converted value.\n             */\n            asGuessedType(value) {\n                const converter = this, typeMap = {\n                    'number': converter.asNumber,\n                    'Date': converter.asDate,\n                    'string': converter.asString\n                };\n                return typeMap[converter.guessType(value)].call(converter, value);\n            }\n            /**\n             * Converts a value to a number.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {number}\n             * Converted value as a number.\n             */\n            asNumber(value) {\n                if (typeof value === 'number') {\n                    return value;\n                }\n                if (typeof value === 'boolean') {\n                    return value ? 1 : 0;\n                }\n                if (typeof value === 'string') {\n                    const decimalRegex = this.decimalRegExp;\n                    if (value.indexOf(' ') > -1) {\n                        value = value.replace(/\\s+/g, '');\n                    }\n                    if (decimalRegex) {\n                        if (!decimalRegex.test(value)) {\n                            return NaN;\n                        }\n                        value = value.replace(decimalRegex, '$1.$2');\n                    }\n                    return parseFloat(value);\n                }\n                if (value instanceof Date) {\n                    return value.getDate();\n                }\n                if (value) {\n                    return value.getRowCount();\n                }\n                return NaN;\n            }\n            /**\n             * Converts a value to a string.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {string}\n             * Converted value as a string.\n             */\n            asString(value) {\n                return '' + value;\n            }\n            /**\n             * Tries to guess the date format\n             *  - Check if either month candidate exceeds 12\n             *  - Check if year is missing (use current year)\n             *  - Check if a shortened year format is used (e.g. 1/1/99)\n             *  - If no guess can be made, the user must be prompted\n             * data is the data to deduce a format based on\n             * @private\n             *\n             * @param {Array<string>} data\n             * Data to check the format.\n             *\n             * @param {number} limit\n             * Max data to check the format.\n             *\n             * @param {boolean} save\n             * Whether to save the date format in the converter options.\n             */\n            deduceDateFormat(data, limit, save) {\n                const parser = this, stable = [], max = [];\n                let format = 'YYYY/mm/dd', thing, guessedFormat = [], i = 0, madeDeduction = false, \n                /// candidates = {},\n                elem, j;\n                if (!limit || limit > data.length) {\n                    limit = data.length;\n                }\n                for (; i < limit; i++) {\n                    if (typeof data[i] !== 'undefined' &&\n                        data[i] && data[i].length) {\n                        thing = data[i]\n                            .trim()\n                            .replace(/[-\\.\\/]/g, ' ')\n                            .split(' ');\n                        guessedFormat = [\n                            '',\n                            '',\n                            ''\n                        ];\n                        for (j = 0; j < thing.length; j++) {\n                            if (j < guessedFormat.length) {\n                                elem = parseInt(thing[j], 10);\n                                if (elem) {\n                                    max[j] = (!max[j] || max[j] < elem) ? elem : max[j];\n                                    if (typeof stable[j] !== 'undefined') {\n                                        if (stable[j] !== elem) {\n                                            stable[j] = false;\n                                        }\n                                    }\n                                    else {\n                                        stable[j] = elem;\n                                    }\n                                    if (elem > 31) {\n                                        if (elem < 100) {\n                                            guessedFormat[j] = 'YY';\n                                        }\n                                        else {\n                                            guessedFormat[j] = 'YYYY';\n                                        }\n                                        /// madeDeduction = true;\n                                    }\n                                    else if (elem > 12 &&\n                                        elem <= 31) {\n                                        guessedFormat[j] = 'dd';\n                                        madeDeduction = true;\n                                    }\n                                    else if (!guessedFormat[j].length) {\n                                        guessedFormat[j] = 'mm';\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (madeDeduction) {\n                    // This handles a few edge cases with hard to guess dates\n                    for (j = 0; j < stable.length; j++) {\n                        if (stable[j] !== false) {\n                            if (max[j] > 12 &&\n                                guessedFormat[j] !== 'YY' &&\n                                guessedFormat[j] !== 'YYYY') {\n                                guessedFormat[j] = 'YY';\n                            }\n                        }\n                        else if (max[j] > 12 && guessedFormat[j] === 'mm') {\n                            guessedFormat[j] = 'dd';\n                        }\n                    }\n                    // If the middle one is dd, and the last one is dd,\n                    // the last should likely be year.\n                    if (guessedFormat.length === 3 &&\n                        guessedFormat[1] === 'dd' &&\n                        guessedFormat[2] === 'dd') {\n                        guessedFormat[2] = 'YY';\n                    }\n                    format = guessedFormat.join('/');\n                    // If the caculated format is not valid, we need to present an\n                    // error.\n                }\n                // Save the deduced format in the converter options.\n                if (save) {\n                    parser.options.dateFormat = format;\n                }\n                return format;\n            }\n            /**\n             * Emits an event on the DataConverter instance.\n             *\n             * @param {DataConverter.Event} [e]\n             * Event object containing additional event data\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Initiates the data exporting. Should emit `exportError` on failure.\n             *\n             * @param {DataConnector} connector\n             * Connector to export from.\n             *\n             * @param {DataConverter.Options} [options]\n             * Options for the export.\n             */\n            export(\n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            connector, options\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                this.emit({\n                    type: 'exportError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            }\n            /**\n             * Getter for the data table.\n             *\n             * @return {DataTable}\n             * Table of parsed data.\n             */\n            getTable() {\n                throw new Error('Not implemented');\n            }\n            /**\n             * Guesses the potential type of a string value for parsing CSV etc.\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {'number'|'string'|'Date'}\n             * Type string, either `string`, `Date`, or `number`.\n             */\n            guessType(value) {\n                const converter = this;\n                let result = 'string';\n                if (typeof value === 'string') {\n                    const trimedValue = converter.trim(`${value}`), decimalRegExp = converter.decimalRegExp;\n                    let innerTrimedValue = converter.trim(trimedValue, true);\n                    if (decimalRegExp) {\n                        innerTrimedValue = (decimalRegExp.test(innerTrimedValue) ?\n                            innerTrimedValue.replace(decimalRegExp, '$1.$2') :\n                            '');\n                    }\n                    const floatValue = parseFloat(innerTrimedValue);\n                    if (+innerTrimedValue === floatValue) {\n                        // String is numeric\n                        value = floatValue;\n                    }\n                    else {\n                        // Determine if a date string\n                        const dateValue = converter.parseDate(value);\n                        result = isNumber(dateValue) ? 'Date' : 'string';\n                    }\n                }\n                if (typeof value === 'number') {\n                    // Greater than milliseconds in a year assumed timestamp\n                    result = value > 365 * 24 * 3600 * 1000 ? 'Date' : 'number';\n                }\n                return result;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Initiates the data parsing. Should emit `parseError` on failure.\n             *\n             * @param {DataConverter.UserOptions} options\n             * Options of the DataConverter.\n             */\n            parse(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            options) {\n                this.emit({\n                    type: 'parseError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            }\n            /**\n             * Parse a date and return it as a number.\n             *\n             * @function Highcharts.Data#parseDate\n             *\n             * @param {string} value\n             * Value to parse.\n             *\n             * @param {string} dateFormatProp\n             * Which of the predefined date formats\n             * to use to parse date values.\n             */\n            parseDate(value, dateFormatProp) {\n                const converter = this, options = converter.options;\n                let dateFormat = dateFormatProp || options.dateFormat, result = NaN, key, format, match;\n                if (options.parseDate) {\n                    result = options.parseDate(value);\n                }\n                else {\n                    // Auto-detect the date format the first time\n                    if (!dateFormat) {\n                        for (key in converter.dateFormats) { // eslint-disable-line guard-for-in\n                            format = converter.dateFormats[key];\n                            match = value.match(format.regex);\n                            if (match) {\n                                // `converter.options.dateFormat` = dateFormat = key;\n                                dateFormat = key;\n                                // `converter.options.alternativeFormat` =\n                                // format.alternative || '';\n                                result = format.parser(match);\n                                break;\n                            }\n                        }\n                        // Next time, use the one previously found\n                    }\n                    else {\n                        format = converter.dateFormats[dateFormat];\n                        if (!format) {\n                            // The selected format is invalid\n                            format = converter.dateFormats['YYYY/mm/dd'];\n                        }\n                        match = value.match(format.regex);\n                        if (match) {\n                            result = format.parser(match);\n                        }\n                    }\n                    // Fall back to Date.parse\n                    if (!match) {\n                        match = Date.parse(value);\n                        // External tools like Date.js and MooTools extend Date object\n                        // and returns a date.\n                        if (typeof match === 'object' &&\n                            match !== null &&\n                            match.getTime) {\n                            result = (match.getTime() -\n                                match.getTimezoneOffset() *\n                                    60000);\n                            // Timestamp\n                        }\n                        else if (isNumber(match)) {\n                            result = match - (new Date(match)).getTimezoneOffset() * 60000;\n                            if ( // Reset dates without year in Chrome\n                            value.indexOf('2001') === -1 &&\n                                (new Date(result)).getFullYear() === 2001) {\n                                result = NaN;\n                            }\n                        }\n                    }\n                }\n                return result;\n            }\n            /**\n             * Trim a string from whitespaces.\n             *\n             * @param {string} str\n             * String to trim.\n             *\n             * @param {boolean} [inside=false]\n             * Remove all spaces between numbers.\n             *\n             * @return {string}\n             * Trimed string\n             */\n            trim(str, inside) {\n                if (typeof str === 'string') {\n                    str = str.replace(/^\\s+|\\s+$/g, '');\n                    // Clear white space insdie the string, like thousands separators\n                    if (inside && /^[0-9\\s]+$/.test(str)) {\n                        str = str.replace(/\\s/g, '');\n                    }\n                }\n                return str;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        DataConverter.defaultOptions = {\n            dateFormat: '',\n            alternativeFormat: '',\n            startColumn: 0,\n            endColumn: Number.MAX_VALUE,\n            startRow: 0,\n            endRow: Number.MAX_VALUE,\n            firstRowAsNames: true,\n            switchRowsAndColumns: false\n        };\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for events and conversion.\n         */\n        (function (DataConverter) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts an array of columns to a table instance. Second dimension of the\n             * array are the row cells.\n             *\n             * @param {Array<DataTable.Column>} [columns]\n             * Array to convert.\n             *\n             * @param {Array<string>} [headers]\n             * Column names to use.\n             *\n             * @return {DataTable}\n             * Table instance from the arrays.\n             */\n            function getTableFromColumns(columns = [], headers = []) {\n                const table = new DataTable();\n                for (let i = 0, iEnd = Math.max(headers.length, columns.length); i < iEnd; ++i) {\n                    table.setColumn(headers[i] || `${i}`, columns[i]);\n                }\n                return table;\n            }\n            DataConverter.getTableFromColumns = getTableFromColumns;\n        })(DataConverter || (DataConverter = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConverter;\n    });\n    _registerModule(_modules, 'Data/DataCursor.js', [], function () {\n        /* *\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * This class manages state cursors pointing on {@link Data.DataTable}. It\n         * creates a relation between states of the user interface and the table cells,\n         * columns, or rows.\n         *\n         * @class\n         * @name Data.DataCursor\n         */\n        class DataCursor {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(stateMap = {}) {\n                this.emittingRegister = [];\n                this.listenerMap = {};\n                this.stateMap = stateMap;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * This function registers a listener for a specific state and table.\n             *\n             * @example\n             * ```TypeScript\n             * dataCursor.addListener(myTable.id, 'hover', (e: DataCursor.Event) => {\n             *     if (e.cursor.type === 'position') {\n             *         console.log(`Hover over row #${e.cursor.row}.`);\n             *     }\n             * });\n             * ```\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table to listen to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table to listen to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to register.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            addListener(tableId, state, listener) {\n                const listenerMap = this.listenerMap[tableId] = (this.listenerMap[tableId] ||\n                    {});\n                const listeners = listenerMap[state] = (listenerMap[state] ||\n                    []);\n                listeners.push(listener);\n                return this;\n            }\n            /**\n             * @private\n             */\n            buildEmittingTag(e) {\n                return (e.cursor.type === 'position' ?\n                    [\n                        e.table.id,\n                        e.cursor.column,\n                        e.cursor.row,\n                        e.cursor.state,\n                        e.cursor.type\n                    ] :\n                    [\n                        e.table.id,\n                        e.cursor.columns,\n                        e.cursor.firstRow,\n                        e.cursor.lastRow,\n                        e.cursor.state,\n                        e.cursor.type\n                    ]).join('\\0');\n            }\n            // Implementation\n            emitCursor(table, groupOrCursor, cursorOrEvent, eventOrLasting, lasting) {\n                const cursor = (typeof groupOrCursor === 'object' ?\n                    groupOrCursor :\n                    cursorOrEvent), event = (typeof eventOrLasting === 'object' ?\n                    eventOrLasting :\n                    cursorOrEvent), group = (typeof groupOrCursor === 'string' ?\n                    groupOrCursor :\n                    void 0), tableId = table.id, state = cursor.state, listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                lasting = (lasting || eventOrLasting === true);\n                if (listeners) {\n                    const stateMap = this.stateMap[tableId] = (this.stateMap[tableId] ||\n                        {});\n                    const cursors = stateMap[cursor.state] || [];\n                    if (lasting) {\n                        if (!cursors.length) {\n                            stateMap[cursor.state] = cursors;\n                        }\n                        if (DataCursor.getIndex(cursor, cursors) === -1) {\n                            cursors.push(cursor);\n                        }\n                    }\n                    const e = {\n                        cursor,\n                        cursors,\n                        table\n                    };\n                    if (event) {\n                        e.event = event;\n                    }\n                    if (group) {\n                        e.group = group;\n                    }\n                    const emittingRegister = this.emittingRegister, emittingTag = this.buildEmittingTag(e);\n                    if (emittingRegister.indexOf(emittingTag) >= 0) {\n                        // Break call stack loops\n                        return this;\n                    }\n                    try {\n                        this.emittingRegister.push(emittingTag);\n                        for (let i = 0, iEnd = listeners.length; i < iEnd; ++i) {\n                            listeners[i].call(this, e);\n                        }\n                    }\n                    finally {\n                        const index = this.emittingRegister.indexOf(emittingTag);\n                        if (index >= 0) {\n                            this.emittingRegister.splice(index, 1);\n                        }\n                    }\n                }\n                return this;\n            }\n            /**\n             * Removes a lasting state cursor.\n             *\n             * @function #remitCursor\n             *\n             * @param {string} tableId\n             * ID of the related cursor table.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * Copy or reference of the cursor.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            remitCursor(tableId, cursor) {\n                const cursors = (this.stateMap[tableId] &&\n                    this.stateMap[tableId][cursor.state]);\n                if (cursors) {\n                    const index = DataCursor.getIndex(cursor, cursors);\n                    if (index >= 0) {\n                        cursors.splice(index, 1);\n                    }\n                }\n                return this;\n            }\n            /**\n             * This function removes a listener.\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table the listener is connected to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table the listener is listening to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to deregister.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            removeListener(tableId, state, listener) {\n                const listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    const index = listeners.indexOf(listener);\n                    if (index) {\n                        listeners.splice(index, 1);\n                    }\n                }\n                return this;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Semantic version string of the DataCursor class.\n         * @internal\n         */\n        DataCursor.version = '1.0.0';\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * @class Data.DataCursor\n         */\n        (function (DataCursor) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Finds the index of an cursor in an array.\n             * @private\n             */\n            function getIndex(needle, cursors) {\n                if (needle.type === 'position') {\n                    for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'position' &&\n                            cursor.state === needle.state &&\n                            cursor.column === needle.column &&\n                            cursor.row === needle.row) {\n                            return i;\n                        }\n                    }\n                }\n                else {\n                    const columnNeedle = JSON.stringify(needle.columns);\n                    for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'range' &&\n                            cursor.state === needle.state &&\n                            cursor.firstRow === needle.firstRow &&\n                            cursor.lastRow === needle.lastRow &&\n                            JSON.stringify(cursor.columns) === columnNeedle) {\n                            return i;\n                        }\n                    }\n                }\n                return -1;\n            }\n            DataCursor.getIndex = getIndex;\n            /**\n             * Checks whether two cursor share the same properties.\n             * @private\n             */\n            function isEqual(cursorA, cursorB) {\n                if (cursorA.type === 'position' && cursorB.type === 'position') {\n                    return (cursorA.column === cursorB.column &&\n                        cursorA.row === cursorB.row &&\n                        cursorA.state === cursorB.state);\n                }\n                if (cursorA.type === 'range' && cursorB.type === 'range') {\n                    return (cursorA.firstRow === cursorB.firstRow &&\n                        cursorA.lastRow === cursorB.lastRow &&\n                        (JSON.stringify(cursorA.columns) ===\n                            JSON.stringify(cursorB.columns)));\n                }\n                return false;\n            }\n            DataCursor.isEqual = isEqual;\n            /**\n             * Checks whether a cursor is in a range.\n             * @private\n             */\n            function isInRange(needle, range) {\n                if (range.type === 'position') {\n                    range = toRange(range);\n                }\n                if (needle.type === 'position') {\n                    needle = toRange(needle, range);\n                }\n                const needleColumns = needle.columns;\n                const rangeColumns = range.columns;\n                return (needle.firstRow >= range.firstRow &&\n                    needle.lastRow <= range.lastRow &&\n                    (!needleColumns ||\n                        !rangeColumns ||\n                        needleColumns.every((column) => rangeColumns.indexOf(column) >= 0)));\n            }\n            DataCursor.isInRange = isInRange;\n            /**\n             * @private\n             */\n            function toPositions(cursor) {\n                if (cursor.type === 'position') {\n                    return [cursor];\n                }\n                const columns = (cursor.columns || []);\n                const positions = [];\n                const state = cursor.state;\n                for (let row = cursor.firstRow, rowEnd = cursor.lastRow; row < rowEnd; ++row) {\n                    if (!columns.length) {\n                        positions.push({\n                            type: 'position',\n                            row,\n                            state\n                        });\n                        continue;\n                    }\n                    for (let column = 0, columnEnd = columns.length; column < columnEnd; ++column) {\n                        positions.push({\n                            type: 'position',\n                            column: columns[column],\n                            row,\n                            state\n                        });\n                    }\n                }\n                return positions;\n            }\n            DataCursor.toPositions = toPositions;\n            /**\n             * @private\n             */\n            function toRange(cursor, defaultRange) {\n                if (cursor.type === 'range') {\n                    return cursor;\n                }\n                const range = {\n                    type: 'range',\n                    firstRow: (cursor.row ??\n                        (defaultRange && defaultRange.firstRow) ??\n                        0),\n                    lastRow: (cursor.row ??\n                        (defaultRange && defaultRange.lastRow) ??\n                        Number.MAX_VALUE),\n                    state: cursor.state\n                };\n                if (typeof cursor.column !== 'undefined') {\n                    range.columns = [cursor.column];\n                }\n                return range;\n            }\n            DataCursor.toRange = toRange;\n        })(DataCursor || (DataCursor = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataCursor;\n    });\n    _registerModule(_modules, 'Data/DataPoolDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        const DataPoolDefaults = {\n            connectors: []\n        };\n        /* *\n         *\n         *  Export Defaults\n         *\n         * */\n\n        return DataPoolDefaults;\n    });\n    _registerModule(_modules, 'Data/DataPool.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/DataPoolDefaults.js'], _modules['Core/Utilities.js']], function (DataConnector, DataPoolDefaults, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Data pool to load connectors on-demand.\n         *\n         * @class\n         * @name Data.DataPool\n         *\n         * @param {Data.DataPoolOptions} options\n         * Pool options with all connectors.\n         */\n        class DataPool {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options = DataPoolDefaults) {\n                options.connectors = (options.connectors || []);\n                this.connectors = {};\n                this.options = options;\n                this.waiting = {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Emits an event on this data pool to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                U.fireEvent(this, e.type, e);\n            }\n            /**\n             * Loads the connector.\n             *\n             * @function Data.DataPool#getConnector\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            getConnector(connectorId) {\n                const connector = this.connectors[connectorId];\n                // Already loaded\n                if (connector) {\n                    return Promise.resolve(connector);\n                }\n                let waitingList = this.waiting[connectorId];\n                // Start loading\n                if (!waitingList) {\n                    waitingList = this.waiting[connectorId] = [];\n                    const connectorOptions = this.getConnectorOptions(connectorId);\n                    if (!connectorOptions) {\n                        throw new Error(`Connector not found. (${connectorId})`);\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    this\n                        .loadConnector(connectorOptions)\n                        .then((connector) => {\n                        delete this.waiting[connectorId];\n                        for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][0](connector);\n                        }\n                    })['catch']((error) => {\n                        delete this.waiting[connectorId];\n                        for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][1](error);\n                        }\n                    });\n                }\n                // Add request to waiting list\n                return new Promise((resolve, reject) => {\n                    waitingList.push([resolve, reject]);\n                });\n            }\n            /**\n             * Returns the IDs of all connectors.\n             *\n             * @private\n             *\n             * @return {Array<string>}\n             * Names of all connectors.\n             */\n            getConnectorIds() {\n                const connectors = this.options.connectors, connectorIds = [];\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    connectorIds.push(connectors[i].id);\n                }\n                return connectorIds;\n            }\n            /**\n             * Loads the options of the connector.\n             *\n             * @private\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {DataPoolConnectorOptions|undefined}\n             * Returns the options of the connector, or `undefined` if not found.\n             */\n            getConnectorOptions(connectorId) {\n                const connectors = this.options.connectors;\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === connectorId) {\n                        return connectors[i];\n                    }\n                }\n            }\n            /**\n             * Loads the connector table.\n             *\n             * @function Data.DataPool#getConnectorTable\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataTable>}\n             * Returns the connector table.\n             */\n            getConnectorTable(connectorId) {\n                return this\n                    .getConnector(connectorId)\n                    .then((connector) => connector.table);\n            }\n            /**\n             * Tests whether the connector has never been requested.\n             *\n             * @param {string} connectorId\n             * Name of the connector.\n             *\n             * @return {boolean}\n             * Returns `true`, if the connector has never been requested, otherwise\n             * `false`.\n             */\n            isNewConnector(connectorId) {\n                return !this.connectors[connectorId];\n            }\n            /**\n             * Creates and loads the connector.\n             *\n             * @private\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Options of connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            loadConnector(options) {\n                return new Promise((resolve, reject) => {\n                    this.emit({\n                        type: 'load',\n                        options\n                    });\n                    const ConnectorClass = DataConnector.types[options.type];\n                    if (!ConnectorClass) {\n                        throw new Error(`Connector type not found. (${options.type})`);\n                    }\n                    const connector = new ConnectorClass(options.options);\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    connector\n                        .load()\n                        .then((connector) => {\n                        this.connectors[options.id] = connector;\n                        this.emit({\n                            type: 'afterLoad',\n                            options\n                        });\n                        resolve(connector);\n                    })['catch'](reject);\n                });\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataPool#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataPool>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return U.addEvent(this, type, callback);\n            }\n            /**\n             * Sets connector options under the specified `options.id`.\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Connector options to set.\n             */\n            setConnectorOptions(options) {\n                const connectors = this.options.connectors, instances = this.connectors;\n                this.emit({\n                    type: 'setConnectorOptions',\n                    options\n                });\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === options.id) {\n                        connectors.splice(i, 1);\n                        break;\n                    }\n                }\n                if (instances[options.id]) {\n                    instances[options.id].stopPolling();\n                    delete instances[options.id];\n                }\n                connectors.push(options);\n                this.emit({\n                    type: 'afterSetConnectorOptions',\n                    options\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Semantic version string of the DataPool class.\n         * @internal\n         */\n        DataPool.version = '1.0.0';\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataPool;\n    });\n    _registerModule(_modules, 'Data/Formula/FormulaParser.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * @private\n         */\n        const booleanRegExp = /^(?:FALSE|TRUE)/;\n        /**\n         * `.`-separated decimal.\n         * @private\n         */\n        const decimal1RegExp = /^[+-]?\\d+(?:\\.\\d+)?(?:e[+-]\\d+)?/;\n        /**\n         * `,`-separated decimal.\n         * @private\n         */\n        const decimal2RegExp = /^[+-]?\\d+(?:,\\d+)?(?:e[+-]\\d+)?/;\n        /**\n         * - Group 1: Function name\n         * @private\n         */\n        const functionRegExp = /^([A-Z][A-Z\\d\\.]*)\\(/;\n        /**\n         * @private\n         */\n        const operatorRegExp = /^(?:[+\\-*\\/^<=>]|<=|=>)/;\n        /**\n         * - Group 1: Start column\n         * - Group 2: Start row\n         * - Group 3: End column\n         * - Group 4: End row\n         * @private\n         */\n        const rangeA1RegExp = /^(\\$?[A-Z]+)(\\$?\\d+)\\:(\\$?[A-Z]+)(\\$?\\d+)/;\n        /**\n         * - Group 1: Start row\n         * - Group 2: Start column\n         * - Group 3: End row\n         * - Group 4: End column\n         * @private\n         */\n        const rangeR1C1RegExp = /^R(\\d*|\\[\\d+\\])C(\\d*|\\[\\d+\\])\\:R(\\d*|\\[\\d+\\])C(\\d*|\\[\\d+\\])/;\n        /**\n         * - Group 1: Column\n         * - Group 2: Row\n         * @private\n         */\n        const referenceA1RegExp = /^(\\$?[A-Z]+)(\\$?\\d+)(?![\\:C])/;\n        /**\n         * - Group 1: Row\n         * - Group 2: Column\n         * @private\n         */\n        const referenceR1C1RegExp = /^R(\\d*|\\[\\d+\\])C(\\d*|\\[\\d+\\])(?!\\:)/;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Extracts the inner string of the most outer parantheses.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Text string to extract from.\n         *\n         * @return {string}\n         * Extracted parantheses. If not found an exception will be thrown.\n         */\n        function extractParantheses(text) {\n            let parantheseLevel = 0;\n            for (let i = 0, iEnd = text.length, char, parantheseStart = 1; i < iEnd; ++i) {\n                char = text[i];\n                if (char === '(') {\n                    if (!parantheseLevel) {\n                        parantheseStart = i + 1;\n                    }\n                    ++parantheseLevel;\n                    continue;\n                }\n                if (char === ')') {\n                    --parantheseLevel;\n                    if (!parantheseLevel) {\n                        return text.substring(parantheseStart, i);\n                    }\n                }\n            }\n            if (parantheseLevel > 0) {\n                const error = new Error('Incomplete parantheses.');\n                error.name = 'FormulaParseError';\n                throw error;\n            }\n            return '';\n        }\n        /**\n         * Extracts the inner string value.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Text string to extract from.\n         *\n         * @return {string}\n         * Extracted string. If not found an exception will be thrown.\n         */\n        function extractString(text) {\n            let start = -1;\n            for (let i = 0, iEnd = text.length, char, escaping = false; i < iEnd; ++i) {\n                char = text[i];\n                if (char === '\\\\') {\n                    escaping = !escaping;\n                    continue;\n                }\n                if (escaping) {\n                    escaping = false;\n                    continue;\n                }\n                if (char === '\"') {\n                    if (start < 0) {\n                        start = i;\n                    }\n                    else {\n                        return text.substring(start + 1, i); // `Ã¬` is excluding\n                    }\n                }\n            }\n            const error = new Error('Incomplete string.');\n            error.name = 'FormulaParseError';\n            throw error;\n        }\n        /**\n         * Parses an argument string. Formula arrays with a single term will be\n         * simplified to the term.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Argument string to parse.\n         *\n         * @param {boolean} alternativeSeparators\n         * Whether to expect `;` as argument separator and `,` as decimal separator.\n         *\n         * @return {Formula|Function|Range|Reference|Value}\n         * The recognized term structure.\n         */\n        function parseArgument(text, alternativeSeparators) {\n            let match;\n            // Check for a R1C1:R1C1 range notation\n            match = text.match(rangeR1C1RegExp);\n            if (match) {\n                const beginColumnRelative = (match[2] === '' || match[2][0] === '[');\n                const beginRowRelative = (match[1] === '' || match[1][0] === '[');\n                const endColumnRelative = (match[4] === '' || match[4][0] === '[');\n                const endRowRelative = (match[3] === '' || match[3][0] === '[');\n                const range = {\n                    type: 'range',\n                    beginColumn: (beginColumnRelative ?\n                        parseInt(match[2].substring(1, -1) || '0', 10) :\n                        parseInt(match[2], 10) - 1),\n                    beginRow: (beginRowRelative ?\n                        parseInt(match[1].substring(1, -1) || '0', 10) :\n                        parseInt(match[1], 10) - 1),\n                    endColumn: (endColumnRelative ?\n                        parseInt(match[4].substring(1, -1) || '0', 10) :\n                        parseInt(match[4], 10) - 1),\n                    endRow: (endRowRelative ?\n                        parseInt(match[3].substring(1, -1) || '0', 10) :\n                        parseInt(match[3], 10) - 1)\n                };\n                if (beginColumnRelative) {\n                    range.beginColumnRelative = true;\n                }\n                if (beginRowRelative) {\n                    range.beginRowRelative = true;\n                }\n                if (endColumnRelative) {\n                    range.endColumnRelative = true;\n                }\n                if (endRowRelative) {\n                    range.endRowRelative = true;\n                }\n                return range;\n            }\n            // Check for a A1:A1 range notation\n            match = text.match(rangeA1RegExp);\n            if (match) {\n                const beginColumnRelative = match[1][0] !== '$';\n                const beginRowRelative = match[2][0] !== '$';\n                const endColumnRelative = match[3][0] !== '$';\n                const endRowRelative = match[4][0] !== '$';\n                const range = {\n                    type: 'range',\n                    beginColumn: parseReferenceColumn(beginColumnRelative ?\n                        match[1] :\n                        match[1].substring(1)) - 1,\n                    beginRow: parseInt(beginRowRelative ?\n                        match[2] :\n                        match[2].substring(1), 10) - 1,\n                    endColumn: parseReferenceColumn(endColumnRelative ?\n                        match[3] :\n                        match[3].substring(1)) - 1,\n                    endRow: parseInt(endRowRelative ?\n                        match[4] :\n                        match[4].substring(1), 10) - 1\n                };\n                if (beginColumnRelative) {\n                    range.beginColumnRelative = true;\n                }\n                if (beginRowRelative) {\n                    range.beginRowRelative = true;\n                }\n                if (endColumnRelative) {\n                    range.endColumnRelative = true;\n                }\n                if (endRowRelative) {\n                    range.endRowRelative = true;\n                }\n                return range;\n            }\n            // Fallback to formula processing for other pattern types\n            const formula = parseFormula(text, alternativeSeparators);\n            return (formula.length === 1 && typeof formula[0] !== 'string' ?\n                formula[0] :\n                formula);\n        }\n        /**\n         * Parse arguments string inside function parantheses.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Parantheses string of the function.\n         *\n         * @param {boolean} alternativeSeparators\n         * Whether to expect `;` as argument separator and `,` as decimal separator.\n         *\n         * @return {Highcharts.FormulaArguments}\n         * Parsed arguments array.\n         */\n        function parseArguments(text, alternativeSeparators) {\n            const args = [], argumentsSeparator = (alternativeSeparators ? ';' : ',');\n            let parantheseLevel = 0, term = '';\n            for (let i = 0, iEnd = text.length, char; i < iEnd; ++i) {\n                char = text[i];\n                // Check for separator\n                if (char === argumentsSeparator &&\n                    !parantheseLevel &&\n                    term) {\n                    args.push(parseArgument(term, alternativeSeparators));\n                    term = '';\n                    // Check for a quoted string before skip logic\n                }\n                else if (char === '\"' &&\n                    !parantheseLevel &&\n                    !term) {\n                    const string = extractString(text.substring(i));\n                    args.push(string);\n                    i += string.length + 1; // Only +1 to cover ++i in for-loop\n                    // Skip space and check paranthesis nesting\n                }\n                else if (char !== ' ') {\n                    term += char;\n                    if (char === '(') {\n                        ++parantheseLevel;\n                    }\n                    else if (char === ')') {\n                        --parantheseLevel;\n                    }\n                }\n            }\n            // Look for left-overs from last argument\n            if (!parantheseLevel && term) {\n                args.push(parseArgument(term, alternativeSeparators));\n            }\n            return args;\n        }\n        /**\n         * Converts a spreadsheet formula string into a formula array. Throws a\n         * `FormulaParserError` when the string can not be parsed.\n         *\n         * @private\n         * @function Formula.parseFormula\n         *\n         * @param {string} text\n         * Spreadsheet formula string, without the leading `=`.\n         *\n         * @param {boolean} alternativeSeparators\n         * * `false` to expect `,` between arguments and `.` in decimals.\n         * * `true` to expect `;` between arguments and `,` in decimals.\n         *\n         * @return {Formula.Formula}\n         * Formula array representing the string.\n         */\n        function parseFormula(text, alternativeSeparators) {\n            const decimalRegExp = (alternativeSeparators ?\n                decimal2RegExp :\n                decimal1RegExp), formula = [];\n            let match, next = (text[0] === '=' ? text.substring(1) : text).trim();\n            while (next) {\n                // Check for an R1C1 reference notation\n                match = next.match(referenceR1C1RegExp);\n                if (match) {\n                    const columnRelative = (match[2] === '' || match[2][0] === '[');\n                    const rowRelative = (match[1] === '' || match[1][0] === '[');\n                    const reference = {\n                        type: 'reference',\n                        column: (columnRelative ?\n                            parseInt(match[2].substring(1, -1) || '0', 10) :\n                            parseInt(match[2], 10) - 1),\n                        row: (rowRelative ?\n                            parseInt(match[1].substring(1, -1) || '0', 10) :\n                            parseInt(match[1], 10) - 1)\n                    };\n                    if (columnRelative) {\n                        reference.columnRelative = true;\n                    }\n                    if (rowRelative) {\n                        reference.rowRelative = true;\n                    }\n                    formula.push(reference);\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for an A1 reference notation\n                match = next.match(referenceA1RegExp);\n                if (match) {\n                    const columnRelative = match[1][0] !== '$';\n                    const rowRelative = match[2][0] !== '$';\n                    const reference = {\n                        type: 'reference',\n                        column: parseReferenceColumn(columnRelative ?\n                            match[1] :\n                            match[1].substring(1)) - 1,\n                        row: parseInt(rowRelative ?\n                            match[2] :\n                            match[2].substring(1), 10) - 1\n                    };\n                    if (columnRelative) {\n                        reference.columnRelative = true;\n                    }\n                    if (rowRelative) {\n                        reference.rowRelative = true;\n                    }\n                    formula.push(reference);\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a formula operator\n                match = next.match(operatorRegExp);\n                if (match) {\n                    formula.push(match[0]);\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a boolean value\n                match = next.match(booleanRegExp);\n                if (match) {\n                    formula.push(match[0] === 'TRUE');\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a number value\n                match = next.match(decimalRegExp);\n                if (match) {\n                    formula.push(parseFloat(match[0]));\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a quoted string\n                if (next[0] === '\"') {\n                    const string = extractString(next);\n                    formula.push(string.substring(1, -1));\n                    next = next.substring(string.length + 2).trim();\n                    continue;\n                }\n                // Check for a function\n                match = next.match(functionRegExp);\n                if (match) {\n                    next = next.substring(match[1].length).trim();\n                    const parantheses = extractParantheses(next);\n                    formula.push({\n                        type: 'function',\n                        name: match[1],\n                        args: parseArguments(parantheses, alternativeSeparators)\n                    });\n                    next = next.substring(parantheses.length + 2).trim();\n                    continue;\n                }\n                // Check for a formula in parantheses\n                if (next[0] === '(') {\n                    const paranteses = extractParantheses(next);\n                    if (paranteses) {\n                        formula\n                            .push(parseFormula(paranteses, alternativeSeparators));\n                        next = next.substring(paranteses.length + 2).trim();\n                        continue;\n                    }\n                }\n                // Something is not right\n                const position = text.length - next.length, error = new Error('Unexpected character `' +\n                    text.substring(position, position + 1) +\n                    '` at position ' + (position + 1) +\n                    '. (`...' + text.substring(position - 5, position + 6) + '...`)');\n                error.name = 'FormulaParseError';\n                throw error;\n            }\n            return formula;\n        }\n        /**\n         * Converts a reference column `A` of `A1` into a number. Supports endless sizes\n         * `ZZZ...`, just limited by integer precision.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Column string to convert.\n         *\n         * @return {number}\n         * Converted column index.\n         */\n        function parseReferenceColumn(text) {\n            let column = 0;\n            for (let i = 0, iEnd = text.length, code, factor = text.length - 1; i < iEnd; ++i) {\n                code = text.charCodeAt(i);\n                if (code >= 65 && code <= 90) {\n                    column += (code - 64) * Math.pow(26, factor);\n                }\n                --factor;\n            }\n            return column;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const FormulaParser = {\n            parseFormula\n        };\n\n        return FormulaParser;\n    });\n    _registerModule(_modules, 'Data/Formula/FormulaTypes.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Array of all possible operators.\n         * @private\n         */\n        const operators = ['+', '-', '*', '/', '^', '=', '<', '<=', '>', '>='];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Tests an item for a Formula array.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a formula (or argument) array.\n         */\n        function isFormula(item) {\n            return item instanceof Array;\n        }\n        /**\n         * Tests an item for a Function structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a formula function.\n         */\n        function isFunction(item) {\n            return (typeof item === 'object' &&\n                !(item instanceof Array) &&\n                item.type === 'function');\n        }\n        /**\n         * Tests an item for an Operator string.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is an operator string.\n         */\n        function isOperator(item) {\n            return (typeof item === 'string' &&\n                operators.indexOf(item) >= 0);\n        }\n        /**\n         * Tests an item for a Range structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a range.\n         */\n        function isRange(item) {\n            return (typeof item === 'object' &&\n                !(item instanceof Array) &&\n                item.type === 'range');\n        }\n        /**\n         * Tests an item for a Reference structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a reference.\n         */\n        function isReference(item) {\n            return (typeof item === 'object' &&\n                !(item instanceof Array) &&\n                item.type === 'reference');\n        }\n        /**\n         * Tests an item for a Value structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem|null|undefined} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a value.\n         */\n        function isValue(item) {\n            return (typeof item === 'boolean' ||\n                typeof item === 'number' ||\n                typeof item === 'string');\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const MathFormula = {\n            isFormula,\n            isFunction,\n            isOperator,\n            isRange,\n            isReference,\n            isValue\n        };\n\n        return MathFormula;\n    });\n    _registerModule(_modules, 'Data/Formula/FormulaProcessor.js', [_modules['Data/Formula/FormulaTypes.js']], function (FormulaTypes) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { isFormula, isFunction, isOperator, isRange, isReference, isValue } = FormulaTypes;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const asLogicalStringRegExp = / */;\n        const MAX_FALSE = Number.MAX_VALUE / 1.000000000001;\n        const MAX_STRING = Number.MAX_VALUE / 1.000000000002;\n        const MAX_TRUE = Number.MAX_VALUE;\n        const operatorPriority = {\n            '^': 3,\n            '*': 2,\n            '/': 2,\n            '+': 1,\n            '-': 1,\n            '=': 0,\n            '<': 0,\n            '<=': 0,\n            '>': 0,\n            '>=': 0\n        };\n        const processorFunctions = {};\n        const processorFunctionNameRegExp = /^[A-Z][A-Z\\.]*$/;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Converts non-number types to logical numbers.\n         *\n         * @param {Highcharts.FormulaValue} value\n         * Value to convert.\n         *\n         * @return {number}\n         * Logical number value. `NaN` if not convertable.\n         */\n        function asLogicalNumber(value) {\n            switch (typeof value) {\n                case 'boolean':\n                    return value ? MAX_TRUE : MAX_FALSE;\n                case 'string':\n                    return MAX_STRING;\n                case 'number':\n                    return value;\n                default:\n                    return NaN;\n            }\n        }\n        /**\n         * Converts strings to logical strings, while other types get passed through. In\n         * logical strings the space character is the lowest value and letters are case\n         * insensitive.\n         *\n         * @param {Highcharts.FormulaValue} value\n         * Value to convert.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Logical string value or passed through value.\n         */\n        function asLogicalString(value) {\n            if (typeof value === 'string') {\n                return value.toLowerCase().replace(asLogicalStringRegExp, '\\0');\n            }\n            return value;\n        }\n        /**\n         * Converts non-number types to a logic number.\n         *\n         * @param {Highcharts.FormulaValue} value\n         * Value to convert.\n         *\n         * @return {number}\n         * Number value. `NaN` if not convertable.\n         */\n        function asNumber(value) {\n            switch (typeof value) {\n                case 'boolean':\n                    return value ? 1 : 0;\n                case 'string':\n                    return parseFloat(value.replace(',', '.'));\n                case 'number':\n                    return value;\n                default:\n                    return NaN;\n            }\n        }\n        /**\n         * Process a basic operation of two given values.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaOperator} operator\n         * Operator between values.\n         *\n         * @param {Highcharts.FormulaValue} x\n         * First value for operation.\n         *\n         * @param {Highcharts.FormulaValue} y\n         * Second value for operation.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Operation result. `NaN` if operation is not support.\n         */\n        function basicOperation(operator, x, y) {\n            switch (operator) {\n                case '=':\n                    return asLogicalString(x) === asLogicalString(y);\n                case '<':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) < asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) < asLogicalNumber(y);\n                case '<=':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) <= asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) <= asLogicalNumber(y);\n                case '>':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) > asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) > asLogicalNumber(y);\n                case '>=':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) >= asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) >= asLogicalNumber(y);\n            }\n            x = asNumber(x);\n            y = asNumber(y);\n            let result;\n            switch (operator) {\n                case '+':\n                    result = x + y;\n                    break;\n                case '-':\n                    result = x - y;\n                    break;\n                case '*':\n                    result = x * y;\n                    break;\n                case '/':\n                    result = x / y;\n                    break;\n                case '^':\n                    result = Math.pow(x, y);\n                    break;\n                default:\n                    return NaN;\n            }\n            // Limit decimal to 9 digits\n            return (result % 1 ?\n                Math.round(result * 1000000000) / 1000000000 :\n                result);\n        }\n        /**\n         * Converts an argument to Value and in case of a range to an array of Values.\n         *\n         * @function Highcharts.Formula.getArgumentValue\n         *\n         * @param {Highcharts.FormulaRange|Highcharts.FormulaTerm} arg\n         * Formula range or term to convert.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Highcharts.FormulaValue|Array<Highcharts.FormulaValue>}\n         * Converted value.\n         */\n        function getArgumentValue(arg, table) {\n            // Add value\n            if (isValue(arg)) {\n                return arg;\n            }\n            // Add values of a range\n            if (isRange(arg)) {\n                return (table && getRangeValues(arg, table) || []);\n            }\n            // Add values of a function\n            if (isFunction(arg)) {\n                return processFunction(arg, table);\n            }\n            // Process functions, operations, references with formula processor\n            return processFormula((isFormula(arg) ? arg : [arg]), table);\n        }\n        /**\n         * Converts all arguments to Values and in case of ranges to arrays of Values.\n         *\n         * @function Highcharts.Formula.getArgumentsValues\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Formula arguments to convert.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Array<(Highcharts.FormulaValue|Array<Highcharts.FormulaValue>)>}\n         * Converted values.\n         */\n        function getArgumentsValues(args, table) {\n            const values = [];\n            for (let i = 0, iEnd = args.length; i < iEnd; ++i) {\n                values.push(getArgumentValue(args[i], table));\n            }\n            return values;\n        }\n        /**\n         * Extracts cell values from a table for a given range.\n         *\n         * @function Highcharts.Formula.getRangeValues\n         *\n         * @param {Highcharts.FormulaRange} range\n         * Formula range to use.\n         *\n         * @param {Highcharts.DataTable} table\n         * Table to extract from.\n         *\n         * @return {Array<Highcharts.FormulaValue>}\n         * Extracted values.\n         */\n        function getRangeValues(range, table) {\n            const columnNames = table\n                .getColumnNames()\n                .slice(range.beginColumn, range.endColumn + 1), values = [];\n            for (let i = 0, iEnd = columnNames.length, cell; i < iEnd; ++i) {\n                const cells = table.getColumn(columnNames[i], true) || [];\n                for (let j = range.beginRow, jEnd = range.endRow + 1; j < jEnd; ++j) {\n                    cell = cells[j];\n                    if (typeof cell === 'string' &&\n                        cell[0] === '=' &&\n                        table !== table.modified) {\n                        // Look in the modified table for formula result\n                        cell = table.modified.getCell(columnNames[i], j);\n                    }\n                    values.push(isValue(cell) ? cell : NaN);\n                }\n            }\n            return values;\n        }\n        /**\n         * Extracts the cell value from a table for a given reference.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaReference} reference\n         * Formula reference to use.\n         *\n         * @param {Highcharts.DataTable} table\n         * Table to extract from.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Extracted value. 'undefined' might also indicate that the cell was not found.\n         */\n        function getReferenceValue(reference, table) {\n            const columnName = table.getColumnNames()[reference.column];\n            if (columnName) {\n                const cell = table.getCell(columnName, reference.row);\n                if (typeof cell === 'string' &&\n                    cell[0] === '=' &&\n                    table !== table.modified) {\n                    // Look in the modified table for formula result\n                    const result = table.modified.getCell(columnName, reference.row);\n                    return isValue(result) ? result : NaN;\n                }\n                return isValue(cell) ? cell : NaN;\n            }\n            return NaN;\n        }\n        /**\n         * Processes a formula array on the given table. If the formula does not contain\n         * references or ranges, then no table has to be provided.\n         *\n         * @private\n         * @function Highcharts.processFormula\n         *\n         * @param {Highcharts.Formula} formula\n         * Formula array to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Result value of the process. `NaN` indicates an error.\n         */\n        function processFormula(formula, table) {\n            let x;\n            for (let i = 0, iEnd = formula.length, item, operator, result, y; i < iEnd; ++i) {\n                item = formula[i];\n                // Remember operator for operation on next item\n                if (isOperator(item)) {\n                    operator = item;\n                    continue;\n                }\n                // Next item is a value\n                if (isValue(item)) {\n                    y = item;\n                    // Next item is a formula and needs to get processed first\n                }\n                else if (isFormula(item)) {\n                    y = processFormula(formula, table);\n                    // Next item is a function call and needs to get processed first\n                }\n                else if (isFunction(item)) {\n                    result = processFunction(item, table);\n                    y = (isValue(result) ? result : NaN); // Arrays are not allowed here\n                    // Next item is a reference and needs to get resolved\n                }\n                else if (isReference(item)) {\n                    y = (table && getReferenceValue(item, table));\n                }\n                // If we have a next value, lets do the operation\n                if (typeof y !== 'undefined') {\n                    // Next value is our first value\n                    if (typeof x === 'undefined') {\n                        if (operator) {\n                            x = basicOperation(operator, 0, y);\n                        }\n                        else {\n                            x = y;\n                        }\n                        // Fail fast if no operator available\n                    }\n                    else if (!operator) {\n                        return NaN;\n                        // Regular next value\n                    }\n                    else {\n                        const operator2 = formula[i + 1];\n                        if (isOperator(operator2) &&\n                            operatorPriority[operator2] > operatorPriority[operator]) {\n                            y = basicOperation(operator2, y, processFormula(formula.slice(i + 2)));\n                            i = iEnd;\n                        }\n                        x = basicOperation(operator, x, y);\n                    }\n                    operator = void 0;\n                    y = void 0;\n                }\n            }\n            return isValue(x) ? x : NaN;\n        }\n        /**\n         * Process a function on the given table. If the arguments do not contain\n         * references or ranges, then no table has to be provided.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaFunction} formulaFunction\n         * Formula function to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @param {Highcharts.FormulaReference} [reference]\n         * Table cell reference to use for relative references and ranges.\n         *\n         * @return {Highcharts.FormulaValue|Array<Highcharts.FormulaValue>}\n         * Result value (or values) of the process. `NaN` indicates an error.\n         */\n        function processFunction(formulaFunction, table, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        reference // @todo\n        ) {\n            const processor = processorFunctions[formulaFunction.name];\n            if (processor) {\n                try {\n                    return processor(formulaFunction.args, table);\n                }\n                catch {\n                    return NaN;\n                }\n            }\n            const error = new Error(`Function \"${formulaFunction.name}\" not found.`);\n            error.name = 'FormulaProcessError';\n            throw error;\n        }\n        /**\n         * Registers a function for the FormulaProcessor.\n         *\n         * @param {string} name\n         * Name of the function in spreadsheets notation with upper case.\n         *\n         * @param {Highcharts.FormulaFunction} processorFunction\n         * ProcessorFunction for the FormulaProcessor. This is an object so that it\n         * can take additional parameter for future validation routines.\n         *\n         * @return {boolean}\n         * Return true, if the ProcessorFunction has been registered.\n         */\n        function registerProcessorFunction(name, processorFunction) {\n            return (processorFunctionNameRegExp.test(name) &&\n                !processorFunctions[name] &&\n                !!(processorFunctions[name] = processorFunction));\n        }\n        /**\n         * Translates relative references and ranges in-place.\n         *\n         * @param {Highcharts.Formula} formula\n         * Formula to translate references and ranges in.\n         *\n         * @param {number} [columnDelta=0]\n         * Column delta to translate to. Negative translate back.\n         *\n         * @param {number} [rowDelta=0]\n         * Row delta to translate to. Negative numbers translate back.\n         *\n         * @return {Highcharts.Formula}\n         * Formula with translated reference and ranges. This formula is equal to the\n         * first argument.\n         */\n        function translateReferences(formula, columnDelta = 0, rowDelta = 0) {\n            for (let i = 0, iEnd = formula.length, item; i < iEnd; ++i) {\n                item = formula[i];\n                if (item instanceof Array) {\n                    translateReferences(item, columnDelta, rowDelta);\n                }\n                else if (isFunction(item)) {\n                    translateReferences(item.args, columnDelta, rowDelta);\n                }\n                else if (isRange(item)) {\n                    if (item.beginColumnRelative) {\n                        item.beginColumn += columnDelta;\n                    }\n                    if (item.beginRowRelative) {\n                        item.beginRow += rowDelta;\n                    }\n                    if (item.endColumnRelative) {\n                        item.endColumn += columnDelta;\n                    }\n                    if (item.endRowRelative) {\n                        item.endRow += rowDelta;\n                    }\n                }\n                else if (isReference(item)) {\n                    if (item.columnRelative) {\n                        item.column += columnDelta;\n                    }\n                    if (item.rowRelative) {\n                        item.row += rowDelta;\n                    }\n                }\n            }\n            return formula;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const FormulaProcessor = {\n            asNumber,\n            getArgumentValue,\n            getArgumentsValues,\n            getRangeValues,\n            getReferenceValue,\n            processFormula,\n            processorFunctions,\n            registerProcessorFunction,\n            translateReferences\n        };\n\n        return FormulaProcessor;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/ABS.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentValue } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `ABS(value)` implementation. Returns positive numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Array<number>}\n         * Result value of the process.\n         */\n        function ABS(args, table) {\n            const value = getArgumentValue(args[0], table);\n            switch (typeof value) {\n                case 'number':\n                    return Math.abs(value);\n                case 'object': {\n                    const values = [];\n                    for (let i = 0, iEnd = value.length, value2; i < iEnd; ++i) {\n                        value2 = value[i];\n                        if (typeof value2 !== 'number') {\n                            return NaN;\n                        }\n                        values.push(Math.abs(value2));\n                    }\n                    return values;\n                }\n                default:\n                    return NaN;\n            }\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('ABS', ABS);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ABS;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/AND.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentValue } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `AND(...tests)` implementation. Returns `TRUE`, if all test\n         * results are not `0` or `FALSE`.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean}\n         * Result value of the process.\n         */\n        function AND(args, table) {\n            for (let i = 0, iEnd = args.length, value; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                if (!value ||\n                    (typeof value === 'object' &&\n                        !AND(value, table))) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('AND', AND);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AND;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/AVERAGE.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentsValues } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `AVERAGE(...values)` implementation. Calculates the average\n         * of the given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.AVERAGE\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function AVERAGE(args, table) {\n            const values = getArgumentsValues(args, table);\n            let count = 0, result = 0;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            ++count;\n                            result += value;\n                        }\n                        break;\n                    case 'object':\n                        for (let j = 0, jEnd = value.length, value2; j < jEnd; ++j) {\n                            value2 = value[j];\n                            if (typeof value2 === 'number' &&\n                                !isNaN(value2)) {\n                                ++count;\n                                result += value2;\n                            }\n                        }\n                        break;\n                }\n            }\n            return (count ? (result / count) : 0);\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('AVERAGE', AVERAGE);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AVERAGE;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/AVERAGEA.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentValue } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `AVERAGEA(...values)` implementation. Calculates the\n         * average of the given values. Strings and FALSE are calculated as 0.\n         *\n         * @private\n         * @function Formula.processorFunctions.AVERAGEA\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function AVERAGEA(args, table) {\n            let count = 0, result = 0;\n            for (let i = 0, iEnd = args.length, value; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                switch (typeof value) {\n                    case 'boolean':\n                        ++count;\n                        result += (value ? 1 : 0);\n                        continue;\n                    case 'number':\n                        if (!isNaN(value)) {\n                            ++count;\n                            result += value;\n                        }\n                        continue;\n                    case 'string':\n                        ++count;\n                        continue;\n                    default:\n                        for (let j = 0, jEnd = value.length, value2; j < jEnd; ++j) {\n                            value2 = value[j];\n                            switch (typeof value2) {\n                                case 'boolean':\n                                    ++count;\n                                    result += (value2 ? 1 : 0);\n                                    continue;\n                                case 'number':\n                                    if (!isNaN(value2)) {\n                                        ++count;\n                                        result += value2;\n                                    }\n                                    continue;\n                                case 'string':\n                                    ++count;\n                                    continue;\n                            }\n                        }\n                        continue;\n                }\n            }\n            return (count ? (result / count) : 0);\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('AVERAGEA', AVERAGEA);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AVERAGEA;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/COUNT.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `COUNT(...values)` implementation. Returns the count of\n         * given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.COUNT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function COUNT(args, table) {\n            const values = FormulaProcessor.getArgumentsValues(args, table);\n            let count = 0;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            ++count;\n                        }\n                        break;\n                    case 'object':\n                        count += COUNT(value, table);\n                        break;\n                }\n            }\n            return count;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('COUNT', COUNT);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return COUNT;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/COUNTA.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `COUNTA(...values)` implementation. Returns the count of\n         * given values that are not empty.\n         *\n         * @private\n         * @function Formula.processorFunctions.COUNT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function COUNTA(args, table) {\n            const values = FormulaProcessor.getArgumentsValues(args, table);\n            let count = 0;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (isNaN(value)) {\n                            continue;\n                        }\n                        break;\n                    case 'object':\n                        count += COUNTA(value, table);\n                        continue;\n                    case 'string':\n                        if (!value) {\n                            continue;\n                        }\n                        break;\n                }\n                ++count;\n            }\n            return count;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('COUNTA', COUNTA);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return COUNTA;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/IF.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentValue } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `IF(test, value1, value2)` implementation. Returns one of\n         * the values based on the test result. `value1` will be returned, if the test\n         * result is not `0` or `FALSE`.\n         *\n         * @private\n         * @function Formula.processorFunctions.IF\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Highcharts.FormulaValue|Array<Highcharts.FormulaValue>}\n         * Result value of the process.\n         */\n        function IF(args, table) {\n            return (getArgumentValue(args[0], table) ?\n                getArgumentValue(args[1], table) :\n                getArgumentValue(args[2], table));\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('IF', IF);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return IF;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/ISNA.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentValue } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `ISNA(value)` implementation. Returns TRUE if value is not\n         * a number.\n         *\n         * @private\n         * @function Formula.processorFunctions.ISNA\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean}\n         * Result value of the process.\n         */\n        function ISNA(args, table) {\n            const value = getArgumentValue(args[0], table);\n            return (typeof value !== 'number' || isNaN(value));\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('ISNA', ISNA);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ISNA;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MAX.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentsValues } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MAX(...values)` implementation. Calculates the largest\n         * of the given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.MAX\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MAX(args, table) {\n            const values = getArgumentsValues(args, table);\n            let result = Number.NEGATIVE_INFINITY;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (value > result) {\n                            result = value;\n                        }\n                        break;\n                    case 'object':\n                        value = MAX(value);\n                        if (value > result) {\n                            result = value;\n                        }\n                        break;\n                }\n            }\n            return isFinite(result) ? result : 0;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MAX', MAX);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MAX;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MEDIAN.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MEDIAN(...values)` implementation. Calculates the median\n         * average of the given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.MEDIAN\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MEDIAN(args, table) {\n            const median = [], values = FormulaProcessor.getArgumentsValues(args, table);\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            median.push(value);\n                        }\n                        break;\n                    case 'object':\n                        for (let j = 0, jEnd = value.length, value2; j < jEnd; ++j) {\n                            value2 = value[j];\n                            if (typeof value2 === 'number' &&\n                                !isNaN(value2)) {\n                                median.push(value2);\n                            }\n                        }\n                        break;\n                }\n            }\n            const count = median.length;\n            if (!count) {\n                return NaN;\n            }\n            const half = Math.floor(count / 2); // Floor because index starts at 0\n            return (count % 2 ?\n                median[half] : // Odd\n                (median[half - 1] + median[half]) / 2 // Even\n            );\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MEDIAN', MEDIAN);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MEDIAN;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MIN.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentsValues } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MIN(...values)` implementation. Calculates the lowest\n         * of the given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.MIN\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MIN(args, table) {\n            const values = getArgumentsValues(args, table);\n            let result = Number.POSITIVE_INFINITY;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (value < result) {\n                            result = value;\n                        }\n                        break;\n                    case 'object':\n                        value = MIN(value);\n                        if (value < result) {\n                            result = value;\n                        }\n                        break;\n                }\n            }\n            return isFinite(result) ? result : 0;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MIN', MIN);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MIN;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MOD.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentValue } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MOD(value1, value2)` implementation. Calculates the rest\n         * of the division with the given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.MOD\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MOD(args, table) {\n            let value1 = getArgumentValue(args[0], table), value2 = getArgumentValue(args[1], table);\n            if (typeof value1 === 'object') {\n                value1 = value1[0];\n            }\n            if (typeof value2 === 'object') {\n                value2 = value2[0];\n            }\n            if (typeof value1 !== 'number' ||\n                typeof value2 !== 'number' ||\n                value2 === 0) {\n                return NaN;\n            }\n            return value1 % value2;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MOD', MOD);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MOD;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MODE.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Creates the mode map of the given arguments.\n         *\n         * @private\n         * @function Formula.processorFunctions.MULT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function getModeMap(args, table) {\n            const modeMap = {}, values = FormulaProcessor.getArgumentsValues(args, table);\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            modeMap[value] = (modeMap[value] || 0) + 1;\n                        }\n                        break;\n                    case 'object':\n                        for (let j = 0, jEnd = value.length, value2; j < jEnd; ++j) {\n                            value2 = value[j];\n                            if (typeof value2 === 'number' &&\n                                !isNaN(value2)) {\n                                modeMap[value2] = (modeMap[value2] || 0) + 1;\n                            }\n                        }\n                        break;\n                }\n            }\n            return modeMap;\n        }\n        /**\n         * Processor for the `MODE.MULT(...values)` implementation. Calculates the most\n         * frequent values of the give values.\n         *\n         * @private\n         * @function Formula.processorFunctions.MULT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number|Array<number>}\n         * Result value of the process.\n         */\n        function MULT(args, table) {\n            const modeMap = getModeMap(args, table), keys = Object.keys(modeMap);\n            if (!keys.length) {\n                return NaN;\n            }\n            let modeKeys = [parseFloat(keys[0])], modeCount = modeMap[keys[0]];\n            for (let i = 1, iEnd = keys.length, key, count; i < iEnd; ++i) {\n                key = keys[i];\n                count = modeMap[key];\n                if (modeCount < count) {\n                    modeKeys = [parseFloat(key)];\n                    modeCount = count;\n                }\n                else if (modeCount === count) {\n                    modeKeys.push(parseFloat(key));\n                }\n            }\n            return modeCount > 1 ? modeKeys : NaN;\n        }\n        /**\n         * Processor for the `MODE.SNGL(...values)` implementation. Calculates the\n         * lowest most frequent value of the give values.\n         *\n         * @private\n         * @function Formula.processorFunctions['MODE.SNGL']\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function SNGL(args, table) {\n            const modeMap = getModeMap(args, table), keys = Object.keys(modeMap);\n            if (!keys.length) {\n                return NaN;\n            }\n            let modeKey = parseFloat(keys[0]), modeCount = modeMap[keys[0]];\n            for (let i = 1, iEnd = keys.length, key, keyValue, count; i < iEnd; ++i) {\n                key = keys[i];\n                count = modeMap[key];\n                if (modeCount < count) {\n                    modeKey = parseFloat(key);\n                    modeCount = count;\n                }\n                else if (modeCount === count) {\n                    keyValue = parseFloat(key);\n                    if (modeKey > keyValue) {\n                        modeKey = keyValue;\n                        modeCount = count;\n                    }\n                }\n            }\n            return modeCount > 1 ? modeKey : NaN;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MODE', SNGL);\n        FormulaProcessor.registerProcessorFunction('MODE.MULT', MULT);\n        FormulaProcessor.registerProcessorFunction('MODE.SNGL', SNGL);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const MODE = {\n            MULT,\n            SNGL\n        };\n\n        return MODE;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/NOT.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentValue } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `NOT(value)` implementation. Returns the opposite test\n         * result.\n         *\n         * @private\n         * @function Formula.processorFunctions.NOT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean|number}\n         * Result value of the process.\n         */\n        function NOT(args, table) {\n            let value = getArgumentValue(args[0], table);\n            if (typeof value === 'object') {\n                value = value[0];\n            }\n            switch (typeof value) {\n                case 'boolean':\n                case 'number':\n                    return !value;\n            }\n            return NaN;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('NOT', NOT);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NOT;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/OR.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentValue } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `OR(...tests)` implementation. Returns `TRUE`, if one test\n         * result is not `0` or `FALSE`.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean}\n         * Result value of the process.\n         */\n        function OR(args, table) {\n            for (let i = 0, iEnd = args.length, value; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                if (typeof value === 'object') {\n                    if (OR(value, table)) {\n                        return true;\n                    }\n                }\n                else if (value) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('OR', OR);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OR;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/PRODUCT.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentsValues } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `PRODUCT(...values)` implementation. Calculates the product\n         * of the given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.PRODUCT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function PRODUCT(args, table) {\n            const values = getArgumentsValues(args, table);\n            let result = 1, calculated = false;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            calculated = true;\n                            result *= value;\n                        }\n                        break;\n                    case 'object':\n                        calculated = true;\n                        result *= PRODUCT(value, table);\n                        break;\n                }\n            }\n            return (calculated ? result : 0);\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('PRODUCT', PRODUCT);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PRODUCT;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/SUM.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `SUM(...values)` implementation. Calculates the sum of the\n         * given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.SUM\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function SUM(args, table) {\n            const values = FormulaProcessor.getArgumentsValues(args, table);\n            let result = 0;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            result += value;\n                        }\n                        break;\n                    case 'object':\n                        result += SUM(value, table);\n                        break;\n                }\n            }\n            return result;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('SUM', SUM); // ð\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SUM;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/XOR.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentValue } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `XOR(...tests)` implementation. Returns `TRUE`, if at least\n         * one of the given tests differs in result of other tests.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean|number}\n         * Result value of the process.\n         */\n        function XOR(args, table) {\n            for (let i = 0, iEnd = args.length, lastValue, value; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                switch (typeof value) {\n                    case 'boolean':\n                    case 'number':\n                        if (typeof lastValue === 'undefined') {\n                            lastValue = !!value;\n                        }\n                        else if (!!value !== lastValue) {\n                            return true;\n                        }\n                        break;\n                    case 'object':\n                        for (let j = 0, jEnd = value.length, value2; j < jEnd; ++j) {\n                            value2 = value[j];\n                            switch (typeof value2) {\n                                case 'boolean':\n                                case 'number':\n                                    if (typeof lastValue === 'undefined') {\n                                        lastValue = !!value2;\n                                    }\n                                    else if (!!value2 !== lastValue) {\n                                        return true;\n                                    }\n                                    break;\n                            }\n                        }\n                        break;\n                }\n            }\n            return false;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('XOR', XOR);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return XOR;\n    });\n    _registerModule(_modules, 'Data/Formula/Formula.js', [_modules['Data/Formula/FormulaParser.js'], _modules['Data/Formula/FormulaProcessor.js'], _modules['Data/Formula/FormulaTypes.js']], function (FormulaParser, FormulaProcessor, FormulaType) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * Formula engine to make use of spreadsheet formula strings.\n         * @internal\n         */\n        const Formula = {\n            ...FormulaParser,\n            ...FormulaProcessor,\n            ...FormulaType\n        };\n\n        return Formula;\n    });\n    _registerModule(_modules, 'Data/Converters/CSVConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - Christer Vasseng\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming CSV to a table.\n         *\n         * @private\n         */\n        class CSVConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the CSV parser.\n             *\n             * @param {CSVConverter.UserOptions} [options]\n             * Options for the CSV parser.\n             */\n            constructor(options) {\n                const mergedOptions = merge(CSVConverter.defaultOptions, options);\n                super(mergedOptions);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columns = [];\n                this.headers = [];\n                this.dataTypes = [];\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates a CSV string from the datatable on the connector instance.\n             *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {CSVConverter.Options} [options]\n             * Options used for the export.\n             *\n             * @return {string}\n             * CSV string from the connector table.\n             */\n            export(connector, options = this.options) {\n                const { useLocalDecimalPoint, lineDelimiter } = options, exportNames = (this.options.firstRowAsNames !== false);\n                let { decimalPoint, itemDelimiter } = options;\n                if (!decimalPoint) {\n                    decimalPoint = (itemDelimiter !== ',' && useLocalDecimalPoint ?\n                        (1.1).toLocaleString()[1] :\n                        '.');\n                }\n                if (!itemDelimiter) {\n                    itemDelimiter = (decimalPoint === ',' ? ';' : ',');\n                }\n                const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), csvRows = [], columnsCount = columnNames.length;\n                const rowArray = [];\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    csvRows.push(columnNames.map((columnName) => `\"${columnName}\"`).join(itemDelimiter));\n                }\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    const columnMeta = connector.whatIs(columnName);\n                    let columnDataType;\n                    if (columnMeta) {\n                        columnDataType = columnMeta.dataType;\n                    }\n                    for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        let cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Prefer datatype from metadata\n                        if (columnDataType === 'string') {\n                            cellValue = '\"' + cellValue + '\"';\n                        }\n                        else if (typeof cellValue === 'number') {\n                            cellValue = String(cellValue).replace('.', decimalPoint);\n                        }\n                        else if (typeof cellValue === 'string') {\n                            cellValue = `\"${cellValue}\"`;\n                        }\n                        rowArray[rowIndex][columnIndex] = cellValue;\n                        // On the final column, push the row to the CSV\n                        if (columnIndex === columnsCount - 1) {\n                            // Trim repeated undefined values starting at the end\n                            // Currently, we export the first \"comma\" even if the\n                            // second value is undefined\n                            let i = columnIndex;\n                            while (rowArray[rowIndex].length > 2) {\n                                const cellVal = rowArray[rowIndex][i];\n                                if (cellVal !== void 0) {\n                                    break;\n                                }\n                                rowArray[rowIndex].pop();\n                                i--;\n                            }\n                            csvRows.push(rowArray[rowIndex].join(itemDelimiter));\n                        }\n                    }\n                }\n                return csvRows.join(lineDelimiter);\n            }\n            /**\n             * Initiates parsing of CSV\n             *\n             * @param {CSVConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this, dataTypes = converter.dataTypes, parserOptions = merge(this.options, options), { beforeParse, lineDelimiter, firstRowAsNames, itemDelimiter } = parserOptions;\n                let lines, rowIt = 0, { csv, startRow, endRow } = parserOptions, column;\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (csv && beforeParse) {\n                    csv = beforeParse(csv);\n                }\n                if (csv) {\n                    lines = csv\n                        .replace(/\\r\\n|\\r/g, '\\n') // Windows | Mac\n                        .split(lineDelimiter || '\\n');\n                    if (!startRow || startRow < 0) {\n                        startRow = 0;\n                    }\n                    if (!endRow || endRow >= lines.length) {\n                        endRow = lines.length - 1;\n                    }\n                    if (!itemDelimiter) {\n                        converter.guessedItemDelimiter =\n                            converter.guessDelimiter(lines);\n                    }\n                    // If the first row contain names, add them to the\n                    // headers array and skip the row.\n                    if (firstRowAsNames) {\n                        const headers = lines[0].split(itemDelimiter || converter.guessedItemDelimiter || ',');\n                        // Remove \"\"s from the headers\n                        for (let i = 0; i < headers.length; i++) {\n                            headers[i] = headers[i].trim().replace(/^[\"']|[\"']$/g, '');\n                        }\n                        converter.headers = headers;\n                        startRow++;\n                    }\n                    let offset = 0;\n                    for (rowIt = startRow; rowIt <= endRow; rowIt++) {\n                        if (lines[rowIt][0] === '#') {\n                            offset++;\n                        }\n                        else {\n                            converter\n                                .parseCSVRow(lines[rowIt], rowIt - startRow - offset);\n                        }\n                    }\n                    if (dataTypes.length &&\n                        dataTypes[0].length &&\n                        dataTypes[0][1] === 'date' && // Format is a string date\n                        !converter.options.dateFormat) {\n                        converter.deduceDateFormat(converter.columns[0], null, true);\n                    }\n                    // Guess types.\n                    for (let i = 0, iEnd = converter.columns.length; i < iEnd; ++i) {\n                        column = converter.columns[i];\n                        for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                            if (column[j] && typeof column[j] === 'string') {\n                                let cellValue = converter.asGuessedType(column[j]);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                converter.columns[i][j] = cellValue;\n                            }\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            }\n            /**\n             * Internal method that parses a single CSV row\n             */\n            parseCSVRow(columnStr, rowNumber) {\n                const converter = this, columns = converter.columns || [], dataTypes = converter.dataTypes, { startColumn, endColumn } = converter.options, itemDelimiter = (converter.options.itemDelimiter ||\n                    converter.guessedItemDelimiter);\n                let { decimalPoint } = converter.options;\n                if (!decimalPoint || decimalPoint === itemDelimiter) {\n                    decimalPoint = converter.guessedDecimalPoint || '.';\n                }\n                let i = 0, c = '', token = '', actualColumn = 0, column = 0;\n                const read = (j) => {\n                    c = columnStr[j];\n                };\n                const pushType = (type) => {\n                    if (dataTypes.length < column + 1) {\n                        dataTypes.push([type]);\n                    }\n                    if (dataTypes[column][dataTypes[column].length - 1] !== type) {\n                        dataTypes[column].push(type);\n                    }\n                };\n                const push = () => {\n                    if (startColumn > actualColumn || actualColumn > endColumn) {\n                        // Skip this column, but increment the column count (#7272)\n                        ++actualColumn;\n                        token = '';\n                        return;\n                    }\n                    // Save the type of the token.\n                    if (typeof token === 'string') {\n                        if (!isNaN(parseFloat(token)) && isFinite(token)) {\n                            token = parseFloat(token);\n                            pushType('number');\n                        }\n                        else if (!isNaN(Date.parse(token))) {\n                            token = token.replace(/\\//g, '-');\n                            pushType('date');\n                        }\n                        else {\n                            pushType('string');\n                        }\n                    }\n                    else {\n                        pushType('number');\n                    }\n                    if (columns.length < column + 1) {\n                        columns.push([]);\n                    }\n                    // Try to apply the decimal point, and check if the token then is a\n                    // number. If not, reapply the initial value\n                    if (typeof token !== 'number' &&\n                        converter.guessType(token) !== 'number' &&\n                        decimalPoint) {\n                        const initialValue = token;\n                        token = token.replace(decimalPoint, '.');\n                        if (converter.guessType(token) !== 'number') {\n                            token = initialValue;\n                        }\n                    }\n                    columns[column][rowNumber] = token;\n                    token = '';\n                    ++column;\n                    ++actualColumn;\n                };\n                if (!columnStr.trim().length) {\n                    return;\n                }\n                if (columnStr.trim()[0] === '#') {\n                    return;\n                }\n                for (; i < columnStr.length; i++) {\n                    read(i);\n                    if (c === '#') {\n                        // If there are hexvalues remaining (#13283)\n                        if (!/^#[0-F]{3,3}|[0-F]{6,6}/i.test(columnStr.substring(i))) {\n                            // The rest of the row is a comment\n                            push();\n                            return;\n                        }\n                    }\n                    // Quoted string\n                    if (c === '\"') {\n                        read(++i);\n                        while (i < columnStr.length) {\n                            if (c === '\"') {\n                                break;\n                            }\n                            token += c;\n                            read(++i);\n                        }\n                    }\n                    else if (c === itemDelimiter) {\n                        push();\n                        // Actual column data\n                    }\n                    else {\n                        token += c;\n                    }\n                }\n                push();\n            }\n            /**\n             * Internal method that guesses the delimiter from the first\n             * 13 lines of the CSV\n             * @param {Array<string>} lines\n             * The CSV, split into lines\n             */\n            guessDelimiter(lines) {\n                let points = 0, commas = 0, guessed;\n                const potDelimiters = {\n                    ',': 0,\n                    ';': 0,\n                    '\\t': 0\n                }, linesCount = lines.length;\n                for (let i = 0; i < linesCount; i++) {\n                    let inStr = false, c, cn, cl, token = '';\n                    // We should be able to detect dateformats within 13 rows\n                    if (i > 13) {\n                        break;\n                    }\n                    const columnStr = lines[i];\n                    for (let j = 0; j < columnStr.length; j++) {\n                        c = columnStr[j];\n                        cn = columnStr[j + 1];\n                        cl = columnStr[j - 1];\n                        if (c === '#') {\n                            // Skip the rest of the line - it's a comment\n                            break;\n                        }\n                        if (c === '\"') {\n                            if (inStr) {\n                                if (cl !== '\"' && cn !== '\"') {\n                                    while (cn === ' ' && j < columnStr.length) {\n                                        cn = columnStr[++j];\n                                    }\n                                    // After parsing a string, the next non-blank\n                                    // should be a delimiter if the CSV is properly\n                                    // formed.\n                                    if (typeof potDelimiters[cn] !== 'undefined') {\n                                        potDelimiters[cn]++;\n                                    }\n                                    inStr = false;\n                                }\n                            }\n                            else {\n                                inStr = true;\n                            }\n                        }\n                        else if (typeof potDelimiters[c] !== 'undefined') {\n                            token = token.trim();\n                            if (!isNaN(Date.parse(token))) {\n                                potDelimiters[c]++;\n                            }\n                            else if (isNaN(Number(token)) ||\n                                !isFinite(Number(token))) {\n                                potDelimiters[c]++;\n                            }\n                            token = '';\n                        }\n                        else {\n                            token += c;\n                        }\n                        if (c === ',') {\n                            commas++;\n                        }\n                        if (c === '.') {\n                            points++;\n                        }\n                    }\n                }\n                // Count the potential delimiters.\n                // This could be improved by checking if the number of delimiters\n                // equals the number of columns - 1\n                if (potDelimiters[';'] > potDelimiters[',']) {\n                    guessed = ';';\n                }\n                else if (potDelimiters[','] > potDelimiters[';']) {\n                    guessed = ',';\n                }\n                else {\n                    // No good guess could be made..\n                    guessed = ',';\n                }\n                // Try to deduce the decimal point if it's not explicitly set.\n                // If both commas or points is > 0 there is likely an issue\n                if (points > commas) {\n                    this.guessedDecimalPoint = '.';\n                }\n                else {\n                    this.guessedDecimalPoint = ',';\n                }\n                return guessed;\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        CSVConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            lineDelimiter: '\\n'\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/CSVConnector.js', [_modules['Data/Converters/CSVConverter.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js']], function (CSVConverter, DataConnector, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - Christer Vasseng\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from CSV\n         *\n         * @private\n         */\n        class CSVConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of CSVConnector.\n             *\n             * @param {CSVConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(CSVConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new CSVConverter(mergedOptions);\n                this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the CSV source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVConnector#load\n             * @emits CSVConnector#afterLoad\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { csv, csvURL, dataModifier } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    csv,\n                    detail: eventDetail,\n                    table\n                });\n                return Promise\n                    .resolve(csvURL ?\n                    fetch(csvURL).then((response) => response.text()) :\n                    csv || '')\n                    .then((csv) => {\n                    if (csv) {\n                        // If already loaded, clear the current rows\n                        table.deleteColumns();\n                        converter.parse({ csv });\n                        table.setColumns(converter.getTable().getColumns());\n                    }\n                    return connector\n                        .setModifierOptions(dataModifier)\n                        .then(() => csv);\n                })\n                    .then((csv) => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        csv,\n                        detail: eventDetail,\n                        table\n                    });\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        CSVConnector.defaultOptions = {\n            csv: '',\n            csvURL: '',\n            enablePolling: false,\n            dataRefreshRate: 1,\n            firstRowAsNames: true\n        };\n        DataConnector.registerType('CSV', CSVConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/JSONConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataConverter, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { error, isArray, merge, objectEach } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming JSON to a table.\n         *\n         * @private\n         */\n        class JSONConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the JSON parser.\n             *\n             * @param {JSONConverter.UserOptions} [options]\n             * Options for the JSON parser.\n             */\n            constructor(options) {\n                const mergedOptions = merge(JSONConverter.defaultOptions, options);\n                super(mergedOptions);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columns = [];\n                this.headers = [];\n                this.options = mergedOptions;\n                this.table = new DataTable();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates parsing of JSON structure.\n             *\n             * @param {JSONConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConverter#parse\n             * @emits JSONConverter#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this;\n                options = merge(converter.options, options);\n                const { beforeParse, orientation, firstRowAsNames, columnNames } = options;\n                let data = options.data;\n                if (!data) {\n                    return;\n                }\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (beforeParse) {\n                    data = beforeParse(data);\n                }\n                data = data.slice();\n                if (orientation === 'columns') {\n                    for (let i = 0, iEnd = data.length; i < iEnd; i++) {\n                        const item = data[i];\n                        if (!(item instanceof Array)) {\n                            return;\n                        }\n                        if (converter.headers instanceof Array) {\n                            if (firstRowAsNames) {\n                                converter.headers.push(`${item.shift()}`);\n                            }\n                            else if (columnNames && columnNames instanceof Array) {\n                                converter.headers.push(columnNames[i]);\n                            }\n                            converter.table.setColumn(converter.headers[i] || i.toString(), item);\n                        }\n                        else {\n                            error('JSONConverter: Invalid `columnNames` option.', false);\n                        }\n                    }\n                }\n                else if (orientation === 'rows') {\n                    if (firstRowAsNames) {\n                        converter.headers = data.shift();\n                    }\n                    else if (columnNames) {\n                        converter.headers = columnNames;\n                    }\n                    for (let rowIndex = 0, iEnd = data.length; rowIndex < iEnd; rowIndex++) {\n                        let row = data[rowIndex];\n                        if (isArray(row)) {\n                            for (let columnIndex = 0, jEnd = row.length; columnIndex < jEnd; columnIndex++) {\n                                if (converter.columns.length < columnIndex + 1) {\n                                    converter.columns.push([]);\n                                }\n                                converter.columns[columnIndex].push(row[columnIndex]);\n                                if (converter.headers instanceof Array) {\n                                    this.table.setColumn(converter.headers[columnIndex] ||\n                                        columnIndex.toString(), converter.columns[columnIndex]);\n                                }\n                                else {\n                                    error('JSONConverter: Invalid `columnNames` option.', false);\n                                }\n                            }\n                        }\n                        else {\n                            const columnNames = converter.headers;\n                            if (columnNames && !(columnNames instanceof Array)) {\n                                const newRow = {};\n                                objectEach(columnNames, (arrayWithPath, name) => {\n                                    newRow[name] = arrayWithPath.reduce((acc, key) => acc[key], row);\n                                });\n                                row = newRow;\n                            }\n                            this.table.setRows([row], rowIndex);\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            getTable() {\n                return this.table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        JSONConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            data: [],\n            orientation: 'rows'\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/JSONConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js'], _modules['Data/Converters/JSONConverter.js']], function (DataConnector, U, JSONConverter) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from JSON structure\n         *\n         * @private\n         */\n        class JSONConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of JSONConnector.\n             *\n             * @param {JSONConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(JSONConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new JSONConverter(mergedOptions);\n                this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the JSON source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConnector#load\n             * @emits JSONConnector#afterLoad\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { data, dataUrl, dataModifier } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    data,\n                    detail: eventDetail,\n                    table\n                });\n                return Promise\n                    .resolve(dataUrl ?\n                    fetch(dataUrl).then((json) => json.json()) :\n                    data || [])\n                    .then((data) => {\n                    if (data) {\n                        // If already loaded, clear the current rows\n                        table.deleteColumns();\n                        converter.parse({ data });\n                        table.setColumns(converter.getTable().getColumns());\n                    }\n                    return connector.setModifierOptions(dataModifier).then(() => data);\n                })\n                    .then((data) => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        data,\n                        detail: eventDetail,\n                        table\n                    });\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        JSONConnector.defaultOptions = {\n            data: [],\n            enablePolling: false,\n            dataRefreshRate: 0,\n            firstRowAsNames: true,\n            orientation: 'rows'\n        };\n        DataConnector.registerType('JSON', JSONConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/GoogleSheetsConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an Google Sheets to a table.\n         *\n         * @private\n         */\n        class GoogleSheetsConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the GoogleSheetsConverter.\n             *\n             * @param {GoogleSheetsConverter.UserOptions} [options]\n             * Options for the GoogleSheetsConverter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(GoogleSheetsConverter.defaultOptions, options);\n                super(mergedOptions);\n                this.columns = [];\n                this.header = [];\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the parsing of the Google Sheet\n             *\n             * @param {GoogleSheetsConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits GoogleSheetsParser#parse\n             * @emits GoogleSheetsParser#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this, parseOptions = merge(converter.options, options), columns = ((parseOptions.json &&\n                    parseOptions.json.values) || []).map((column) => column.slice());\n                if (columns.length === 0) {\n                    return false;\n                }\n                converter.header = [];\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n                converter.columns = columns;\n                let column;\n                for (let i = 0, iEnd = columns.length; i < iEnd; i++) {\n                    column = columns[i];\n                    converter.header[i] = (parseOptions.firstRowAsNames ?\n                        `${column.shift()}` :\n                        uniqueKey());\n                    for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                        if (column[j] && typeof column[j] === 'string') {\n                            let cellValue = converter.asGuessedType(column[j]);\n                            if (cellValue instanceof Date) {\n                                cellValue = cellValue.getTime();\n                            }\n                            converter.columns[i][j] = cellValue;\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed Google Sheet\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.header);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        GoogleSheetsConverter.defaultOptions = {\n            ...DataConverter.defaultOptions\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/GoogleSheetsConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/GoogleSheetsConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, GoogleSheetsConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Tests Google's response for error.\n         * @private\n         */\n        function isGoogleError(json) {\n            return (typeof json === 'object' && json &&\n                typeof json.error === 'object' && json.error &&\n                typeof json.error.code === 'number' &&\n                typeof json.error.message === 'string' &&\n                typeof json.error.status === 'string');\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @todo implement save, requires oauth2\n         */\n        class GoogleSheetsConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of GoogleSheetsConnector\n             *\n             * @param {GoogleSheetsConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(GoogleSheetsConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new GoogleSheetsConverter(mergedOptions);\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Loads data from a Google Spreadsheet.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<this>}\n             * Same connector instance with modified table.\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { dataModifier, dataRefreshRate, enablePolling, firstRowAsNames, googleAPIKey, googleSpreadsheetKey } = connector.options, url = GoogleSheetsConnector.buildFetchURL(googleAPIKey, googleSpreadsheetKey, connector.options);\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table,\n                    url\n                });\n                return fetch(url)\n                    .then((response) => (response.json()))\n                    .then((json) => {\n                    if (isGoogleError(json)) {\n                        throw new Error(json.error.message);\n                    }\n                    converter.parse({\n                        firstRowAsNames,\n                        json\n                    });\n                    // If already loaded, clear the current table\n                    table.deleteColumns();\n                    table.setColumns(converter.getTable().getColumns());\n                    return connector.setModifierOptions(dataModifier);\n                })\n                    .then(() => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table,\n                        url\n                    });\n                    // Polling\n                    if (enablePolling) {\n                        setTimeout(() => connector.load(), Math.max(dataRefreshRate || 0, 1) * 1000);\n                    }\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        GoogleSheetsConnector.defaultOptions = {\n            googleAPIKey: '',\n            googleSpreadsheetKey: '',\n            worksheet: 1,\n            enablePolling: false,\n            dataRefreshRate: 2,\n            firstRowAsNames: true\n        };\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (GoogleSheetsConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates GoogleSheets API v4 URL.\n             * @private\n             */\n            function buildFetchURL(apiKey, sheetKey, options = {}) {\n                return (`https://sheets.googleapis.com/v4/spreadsheets/${sheetKey}/values/` +\n                    (options.onlyColumnNames ?\n                        'A1:Z1' :\n                        buildQueryRange(options)) +\n                    '?alt=json' +\n                    (options.onlyColumnNames ?\n                        '' :\n                        '&dateTimeRenderOption=FORMATTED_STRING' +\n                            '&majorDimension=COLUMNS' +\n                            '&valueRenderOption=UNFORMATTED_VALUE') +\n                    '&prettyPrint=false' +\n                    `&key=${apiKey}`);\n            }\n            GoogleSheetsConnector.buildFetchURL = buildFetchURL;\n            /**\n             * Creates sheets range.\n             * @private\n             */\n            function buildQueryRange(options = {}) {\n                const { endColumn, endRow, googleSpreadsheetRange, startColumn, startRow } = options;\n                return googleSpreadsheetRange || ((alphabet[startColumn || 0] || 'A') +\n                    (Math.max((startRow || 0), 0) + 1) +\n                    ':' +\n                    (alphabet[pick(endColumn, 25)] || 'Z') +\n                    (endRow ?\n                        Math.max(endRow, 0) :\n                        'Z'));\n            }\n            GoogleSheetsConnector.buildQueryRange = buildQueryRange;\n        })(GoogleSheetsConnector || (GoogleSheetsConnector = {}));\n        DataConnector.registerType('GoogleSheets', GoogleSheetsConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/HTMLTableConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Row equal\n         */\n        function isRowEqual(row1, row2) {\n            let i = row1.length;\n            if (row2.length === i) {\n                while (--i) {\n                    if (row1[i] !== row2[i]) {\n                        return false;\n                    }\n                }\n            }\n            else {\n                return false;\n            }\n            return true;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an HTML table to a table.\n         *\n         * @private\n         */\n        class HTMLTableConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the HTMLTableConverter.\n             *\n             * @param {HTMLTableConverter.UserOptions} [options]\n             * Options for the HTMLTableConverter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(HTMLTableConverter.defaultOptions, options);\n                super(mergedOptions);\n                this.columns = [];\n                this.headers = [];\n                this.options = mergedOptions;\n                if (mergedOptions.tableElement) {\n                    this.tableElement = mergedOptions.tableElement;\n                    this.tableElementID = mergedOptions.tableElement.id;\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Exports the dataconnector as an HTML string, using the options\n             * provided on      *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {HTMLTableConnector.ExportOptions} [options]\n             * Options that override default or existing export options.\n             *\n             * @return {string}\n             * HTML from the current dataTable.\n             */\n            export(connector, options = this.options) {\n                const exportNames = (options.firstRowAsNames !== false), useMultiLevelHeaders = options.useMultiLevelHeaders;\n                const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), htmlRows = [], columnsCount = columnNames.length;\n                const rowArray = [];\n                let tableHead = '';\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    const subcategories = [];\n                    // If using multilevel headers, the first value\n                    // of each column is a subcategory\n                    if (useMultiLevelHeaders) {\n                        for (const name of columnNames) {\n                            const subhead = (columns[name].shift() || '').toString();\n                            subcategories.push(subhead);\n                        }\n                        tableHead = this.getTableHeaderHTML(columnNames, subcategories, options);\n                    }\n                    else {\n                        tableHead = this.getTableHeaderHTML(void 0, columnNames, options);\n                    }\n                }\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        let cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Alternative: Datatype from HTML attribute with\n                        // connector.whatIs(columnName)\n                        if (!(typeof cellValue === 'string' ||\n                            typeof cellValue === 'number' ||\n                            typeof cellValue === 'undefined')) {\n                            cellValue = (cellValue || '').toString();\n                        }\n                        rowArray[rowIndex][columnIndex] = this.getCellHTMLFromValue(columnIndex ? 'td' : 'th', null, columnIndex ? '' : 'scope=\"row\"', cellValue);\n                        // On the final column, push the row to the array\n                        if (columnIndex === columnsCount - 1) {\n                            htmlRows.push('<tr>' +\n                                rowArray[rowIndex].join('') +\n                                '</tr>');\n                        }\n                    }\n                }\n                let caption = '';\n                // Add table caption\n                // Current exportdata falls back to chart title\n                // but that should probably be handled elsewhere?\n                if (options.tableCaption) {\n                    caption = '<caption class=\"highcharts-table-caption\">' +\n                        options.tableCaption +\n                        '</caption>';\n                }\n                return ('<table>' +\n                    caption +\n                    tableHead +\n                    '<tbody>' +\n                    htmlRows.join('') +\n                    '</tbody>' +\n                    '</table>');\n            }\n            /**\n             * Get table cell markup from row data.\n             */\n            getCellHTMLFromValue(tag, classes, attrs, value, decimalPoint) {\n                let val = value, className = 'text' + (classes ? ' ' + classes : '');\n                // Convert to string if number\n                if (typeof val === 'number') {\n                    val = val.toString();\n                    if (decimalPoint === ',') {\n                        val = val.replace('.', decimalPoint);\n                    }\n                    className = 'number';\n                }\n                else if (!value) {\n                    val = '';\n                    className = 'empty';\n                }\n                return '<' + tag + (attrs ? ' ' + attrs : '') +\n                    ' class=\"' + className + '\">' +\n                    val + '</' + tag + '>';\n            }\n            /**\n             * Get table header markup from row data.\n             */\n            getTableHeaderHTML(topheaders = [], subheaders = [], options = this.options) {\n                const { useMultiLevelHeaders, useRowspanHeaders } = options;\n                let html = '<thead>', i = 0, len = subheaders && subheaders.length, next, cur, curColspan = 0, rowspan;\n                // Clean up multiple table headers. Chart.getDataRows() returns two\n                // levels of headers when using multilevel, not merged. We need to\n                // merge identical headers, remove redundant headers, and keep it\n                // all marked up nicely.\n                if (useMultiLevelHeaders &&\n                    topheaders &&\n                    subheaders &&\n                    !isRowEqual(topheaders, subheaders)) {\n                    html += '<tr>';\n                    for (; i < len; ++i) {\n                        cur = topheaders[i];\n                        next = topheaders[i + 1];\n                        if (cur === next) {\n                            ++curColspan;\n                        }\n                        else if (curColspan) {\n                            // Ended colspan\n                            // Add cur to HTML with colspan.\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\" ' +\n                                'colspan=\"' + (curColspan + 1) + '\"', cur);\n                            curColspan = 0;\n                        }\n                        else {\n                            // Cur is standalone. If it is same as sublevel,\n                            // remove sublevel and add just toplevel.\n                            if (cur === subheaders[i]) {\n                                if (useRowspanHeaders) {\n                                    rowspan = 2;\n                                    delete subheaders[i];\n                                }\n                                else {\n                                    rowspan = 1;\n                                    subheaders[i] = '';\n                                }\n                            }\n                            else {\n                                rowspan = 1;\n                            }\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\"' +\n                                (rowspan > 1 ?\n                                    ' valign=\"top\" rowspan=\"' + rowspan + '\"' :\n                                    ''), cur);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                // Add the subheaders (the only headers if not using multilevels)\n                if (subheaders) {\n                    html += '<tr>';\n                    for (i = 0, len = subheaders.length; i < len; ++i) {\n                        if (typeof subheaders[i] !== 'undefined') {\n                            html += this.getCellHTMLFromValue('th', null, 'scope=\"col\"', subheaders[i]);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                html += '</thead>';\n                return html;\n            }\n            /**\n             * Initiates the parsing of the HTML table\n             *\n             * @param {HTMLTableConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             * @emits HTMLTableParser#parseError\n             */\n            parse(options, eventDetail) {\n                const converter = this, columns = [], headers = [], parseOptions = merge(converter.options, options), { endRow, startColumn, endColumn, firstRowAsNames } = parseOptions, tableHTML = parseOptions.tableElement || this.tableElement;\n                if (!(tableHTML instanceof HTMLElement)) {\n                    converter.emit({\n                        type: 'parseError',\n                        columns,\n                        detail: eventDetail,\n                        headers,\n                        error: 'Not a valid HTML Table'\n                    });\n                    return;\n                }\n                converter.tableElement = tableHTML;\n                converter.tableElementID = tableHTML.id;\n                this.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                const rows = tableHTML.getElementsByTagName('tr'), rowsCount = rows.length;\n                let rowIndex = 0, item, { startRow } = parseOptions;\n                // Insert headers from the first row\n                if (firstRowAsNames && rowsCount) {\n                    const items = rows[0].children, itemsLength = items.length;\n                    for (let i = startColumn; i < itemsLength; i++) {\n                        if (i > endColumn) {\n                            break;\n                        }\n                        item = items[i];\n                        if (item.tagName === 'TD' ||\n                            item.tagName === 'TH') {\n                            headers.push(item.innerHTML);\n                        }\n                    }\n                    startRow++;\n                }\n                while (rowIndex < rowsCount) {\n                    if (rowIndex >= startRow && rowIndex <= endRow) {\n                        const columnsInRow = rows[rowIndex].children, columnsInRowLength = columnsInRow.length;\n                        let columnIndex = 0;\n                        while (columnIndex < columnsInRowLength) {\n                            const relativeColumnIndex = columnIndex - startColumn, row = columns[relativeColumnIndex];\n                            item = columnsInRow[columnIndex];\n                            if ((item.tagName === 'TD' ||\n                                item.tagName === 'TH') &&\n                                (columnIndex >= startColumn &&\n                                    columnIndex <= endColumn)) {\n                                if (!columns[relativeColumnIndex]) {\n                                    columns[relativeColumnIndex] = [];\n                                }\n                                let cellValue = converter.asGuessedType(item.innerHTML);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                columns[relativeColumnIndex][rowIndex - startRow] = cellValue;\n                                // Loop over all previous indices and make sure\n                                // they are nulls, not undefined.\n                                let i = 1;\n                                while (rowIndex - startRow >= i &&\n                                    row[rowIndex - startRow - i] === void 0) {\n                                    row[rowIndex - startRow - i] = null;\n                                    i++;\n                                }\n                            }\n                            columnIndex++;\n                        }\n                    }\n                    rowIndex++;\n                }\n                this.columns = columns;\n                this.headers = headers;\n                this.emit({\n                    type: 'afterParse',\n                    columns,\n                    detail: eventDetail,\n                    headers\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed HTML table\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        HTMLTableConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            useRowspanHeaders: true,\n            useMultiLevelHeaders: true\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/HTMLTableConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Globals.js'], _modules['Data/Converters/HTMLTableConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, H, HTMLTableConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { win } = H;\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a data connector from an HTML table.\n         *\n         * @private\n         */\n        class HTMLTableConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of HTMLTableConnector.\n             *\n             * @param {HTMLTableConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(HTMLTableConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new HTMLTableConverter(mergedOptions);\n                this.options = mergedOptions;\n            }\n            /**\n             * Initiates creating the dataconnector from the HTML table\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits HTMLTableConnector#load\n             * @emits HTMLTableConnector#afterLoad\n             * @emits HTMLTableConnector#loadError\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { dataModifier, table: tableHTML } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table,\n                    tableElement: connector.tableElement\n                });\n                let tableElement;\n                if (typeof tableHTML === 'string') {\n                    connector.tableID = tableHTML;\n                    tableElement = win.document.getElementById(tableHTML);\n                }\n                else {\n                    tableElement = tableHTML;\n                    connector.tableID = tableElement.id;\n                }\n                connector.tableElement = tableElement || void 0;\n                if (!connector.tableElement) {\n                    const error = 'HTML table not provided, or element with ID not found';\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    return Promise.reject(new Error(error));\n                }\n                converter.parse(merge({ tableElement: connector.tableElement }, connector.options), eventDetail);\n                // If already loaded, clear the current rows\n                table.deleteColumns();\n                table.setColumns(converter.getTable().getColumns());\n                return connector\n                    .setModifierOptions(dataModifier)\n                    .then(() => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table,\n                        tableElement: connector.tableElement\n                    });\n                    return connector;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        HTMLTableConnector.defaultOptions = {\n            table: ''\n        };\n        DataConnector.registerType('HTMLTable', HTMLTableConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConnector;\n    });\n    _registerModule(_modules, 'Data/Modifiers/ChainModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Modifies a table with the help of modifiers in an ordered chain.\n         *\n         * @private\n         */\n        class ChainModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the modifier chain.\n             *\n             * @param {Partial<ChainModifier.Options>} [options]\n             * Options to configure the modifier chain.\n             *\n             * @param {...DataModifier} [chain]\n             * Ordered chain of modifiers.\n             */\n            constructor(options, ...chain) {\n                super();\n                this.chain = chain;\n                this.options = merge(ChainModifier.defaultOptions, options);\n                const optionsChain = this.options.chain || [];\n                for (let i = 0, iEnd = optionsChain.length, modifierOptions, ModifierClass; i < iEnd; ++i) {\n                    modifierOptions = optionsChain[i];\n                    if (!modifierOptions.type) {\n                        continue;\n                    }\n                    ModifierClass = DataModifier.types[modifierOptions.type];\n                    if (ModifierClass) {\n                        chain.push(new ModifierClass(modifierOptions));\n                    }\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a configured modifier to the end of the modifier chain. Please note,\n             * that the modifier can be added multiple times.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to add.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            add(modifier, eventDetail) {\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n                this.chain.push(modifier);\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n            }\n            /**\n             * Clears all modifiers from the chain.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            clear(eventDetail) {\n                this.emit({\n                    type: 'clearChain',\n                    detail: eventDetail\n                });\n                this.chain.length = 0;\n                this.emit({\n                    type: 'afterClearChain',\n                    detail: eventDetail\n                });\n            }\n            /**\n             * Applies several modifications to the table and returns a modified copy of\n             * the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            modify(table, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.slice().reverse() :\n                    this.chain.slice());\n                if (table.modified === table) {\n                    table.modified = table.clone(false, eventDetail);\n                }\n                let promiseChain = Promise.resolve(table);\n                for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                    const modifier = modifiers[i];\n                    promiseChain = promiseChain.then((chainTable) => modifier.modify(chainTable.modified, eventDetail));\n                }\n                promiseChain = promiseChain.then((chainTable) => {\n                    table.modified.deleteColumns();\n                    table.modified.setColumns(chainTable.modified.getColumns());\n                    return table;\n                });\n                promiseChain = promiseChain['catch']((error) => {\n                    this.emit({\n                        type: 'error',\n                        detail: eventDetail,\n                        table\n                    });\n                    throw error;\n                });\n                return promiseChain;\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain);\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyCell(clone, columnName, rowIndex, cellValue, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyColumns(clone, columns, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyRows(clone, rows, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies several modifications to the table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table as a reference.\n             *\n             * @emits ChainDataModifier#execute\n             * @emits ChainDataModifier#afterExecute\n             */\n            modifyTable(table, eventDetail) {\n                const chain = this;\n                chain.emit({\n                    type: 'modify',\n                    detail: eventDetail,\n                    table\n                });\n                const modifiers = (chain.options.reverse ?\n                    chain.chain.reverse() :\n                    chain.chain.slice());\n                let modified = table.modified;\n                for (let i = 0, iEnd = modifiers.length, modifier; i < iEnd; ++i) {\n                    modifier = modifiers[i];\n                    modified = modifier.modifyTable(modified, eventDetail).modified;\n                }\n                table.modified = modified;\n                chain.emit({\n                    type: 'afterModify',\n                    detail: eventDetail,\n                    table\n                });\n                return table;\n            }\n            /**\n             * Removes a configured modifier from all positions in the modifier chain.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to remove.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            remove(modifier, eventDetail) {\n                const modifiers = this.chain;\n                this.emit({\n                    type: 'removeModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n                modifiers.splice(modifiers.indexOf(modifier), 1);\n                this.emit({\n                    type: 'afterRemoveModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default option for the ordered modifier chain.\n         */\n        ChainModifier.defaultOptions = {\n            type: 'Chain'\n        };\n        DataModifier.registerType('Chain', ChainModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChainModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/InvertModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Inverts columns and rows in a table.\n         *\n         * @private\n         */\n        class InvertModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the invert modifier.\n             *\n             * @param {Partial<InvertModifier.Options>} [options]\n             * Options to configure the invert modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(InvertModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modified = table.modified, modifiedRowIndex = modified.getRowIndexBy('columnNames', columnName);\n                if (typeof modifiedRowIndex === 'undefined') {\n                    modified.setColumns(this.modifyTable(table.clone()).getColumns(), void 0, eventDetail);\n                }\n                else {\n                    modified.setCell(`${rowIndex}`, modifiedRowIndex, cellValue, eventDetail);\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                let columnNames = table.getColumnNames(), reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                columnNames = Object.keys(columns);\n                for (let i = 0, iEnd = columnNames.length, column, columnName, modifiedRowIndex; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    modifiedRowIndex = (modified.getRowIndexBy('columnNames', columnName) ||\n                        modified.getRowCount());\n                    for (let j = 0, j2 = rowIndex, jEnd = column.length; j < jEnd; ++j, ++j2) {\n                        modified.setCell(`${j2}`, modifiedRowIndex, column[j], eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const columnNames = table.getColumnNames(), modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                let reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                for (let i = 0, i2 = rowIndex, iEnd = rows.length, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i];\n                    if (row instanceof Array) {\n                        modified.setColumn(`${i2}`, row);\n                    }\n                    else {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            modified.setCell(`${i2}`, j, row[columnNames[j]], eventDetail);\n                        }\n                    }\n                }\n                return table;\n            }\n            /**\n             * Inverts rows and columns in the table.\n             *\n             * @param {DataTable} table\n             * Table to invert.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with inverted `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const modified = table.modified;\n                if (table.hasColumns(['columnNames'])) { // Inverted table\n                    const columnNames = ((table.deleteColumns(['columnNames']) || {})\n                        .columnNames || []).map((column) => `${column}`), columns = {};\n                    for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[columnNames[i]] = row;\n                        }\n                    }\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                else { // Regular table\n                    const columns = {};\n                    for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[`${i}`] = row;\n                        }\n                    }\n                    columns.columnNames = table.getColumnNames();\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for the invert modifier.\n         */\n        InvertModifier.defaultOptions = {\n            type: 'Invert'\n        };\n        DataModifier.registerType('Invert', InvertModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return InvertModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/MathModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/Formula/FormulaParser.js'], _modules['Data/Formula/FormulaProcessor.js']], function (DataModifier, FormulaParser, FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Replaces formula strings in a table with calculated values.\n         *\n         * @private\n         * @class\n         * @name Highcharts.DataModifier.types.MathModifier\n         * @augments Highcharts.DataModifier\n         */\n        class MathModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options) {\n                super();\n                this.options = {\n                    ...MathModifier.defaultOptions,\n                    ...options\n                };\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const alternativeSeparators = modifier.options.alternativeSeparators, formulaColumns = (modifier.options.formulaColumns ||\n                    table.getColumnNames()), modified = table.modified;\n                for (let i = 0, iEnd = formulaColumns.length, columnName; i < iEnd; ++i) {\n                    columnName = formulaColumns[i];\n                    if (formulaColumns.indexOf(columnName) >= 0) {\n                        modified.setColumn(columnName, modifier.processColumn(table, columnName));\n                    }\n                }\n                const columnFormulas = (modifier.options.columnFormulas || []);\n                for (let i = 0, iEnd = columnFormulas.length, columnFormula, formula; i < iEnd; ++i) {\n                    columnFormula = columnFormulas[i];\n                    formula = FormulaParser.parseFormula(columnFormula.formula, alternativeSeparators);\n                    modified.setColumn(columnFormula.column, modifier.processColumnFormula(formula, table, columnFormula.rowStart, columnFormula.rowEnd));\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n            /**\n             * Process a column by replacing formula strings with calculated values.\n             *\n             * @private\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to extract column from and use as reference.\n             *\n             * @param {string} columnNameOrAlias\n             * Name or alias of column to process.\n             *\n             * @param {number} rowIndex\n             * Row index to start the replacing process from.\n             *\n             * @return {Highcharts.DataTableColumn}\n             * Returns the processed table column.\n             */\n            processColumn(table, columnNameOrAlias, rowIndex = 0) {\n                const alternativeSeparators = this.options.alternativeSeparators, column = (table.getColumn(columnNameOrAlias, true) || [])\n                    .slice(rowIndex > 0 ? rowIndex : 0);\n                for (let i = 0, iEnd = column.length, cacheFormula = [], cacheString = '', cell; i < iEnd; ++i) {\n                    cell = column[i];\n                    if (typeof cell === 'string' &&\n                        cell[0] === '=') {\n                        try {\n                            // Use cache while formula string is repetitive\n                            cacheFormula = (cacheString === cell ?\n                                cacheFormula :\n                                FormulaParser.parseFormula(cell.substring(1), alternativeSeparators));\n                            // Process parsed formula string\n                            column[i] =\n                                FormulaProcessor.processFormula(cacheFormula, table);\n                        }\n                        catch {\n                            column[i] = NaN;\n                        }\n                    }\n                }\n                return column;\n            }\n            /**\n             * Process a column by replacing cell values with calculated values from a\n             * given formula.\n             *\n             * @private\n             *\n             * @param {Highcharts.Formula} formula\n             * Formula to use for processing.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to extract column from and use as reference.\n             *\n             * @param {number} rowStart\n             * Row index to start the replacing process from.\n             *\n             * @param {number} rowEnd\n             * Row index to end the replacing process.\n             *\n             * @return {Highcharts.DataTableColumn}\n             * Returns the processed table column.\n             */\n            processColumnFormula(formula, table, rowStart = 0, rowEnd = table.getRowCount()) {\n                rowStart = rowStart >= 0 ? rowStart : 0;\n                rowEnd = rowEnd >= 0 ? rowEnd : table.getRowCount() + rowEnd;\n                const column = [], modified = table.modified;\n                for (let i = 0, iEnd = (rowEnd - rowStart); i < iEnd; ++i) {\n                    try {\n                        column[i] = FormulaProcessor.processFormula(formula, modified);\n                    }\n                    catch {\n                        column[i] = NaN;\n                    }\n                    finally {\n                        formula = FormulaProcessor.translateReferences(formula, 0, 1);\n                    }\n                }\n                return column;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options of MathModifier.\n         * @private\n         */\n        MathModifier.defaultOptions = {\n            type: 'Math',\n            alternativeSeparators: false\n        };\n        DataModifier.registerType('Math', MathModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MathModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/RangeModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Filters out table rows with a specific value range.\n         *\n         * @private\n         */\n        class RangeModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(RangeModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Replaces table rows with filtered rows.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const { additive, ranges, strict } = modifier.options;\n                if (ranges.length) {\n                    const modified = table.modified;\n                    let columns = table.getColumns(), rows = [];\n                    for (let i = 0, iEnd = ranges.length, range, rangeColumn; i < iEnd; ++i) {\n                        range = ranges[i];\n                        if (strict &&\n                            typeof range.minValue !== typeof range.maxValue) {\n                            continue;\n                        }\n                        if (i > 0 && !additive) {\n                            modified.deleteRows();\n                            modified.setRows(rows);\n                            columns = modified.getColumns();\n                            rows = [];\n                        }\n                        rangeColumn = (columns[range.column] || []);\n                        for (let j = 0, jEnd = rangeColumn.length, cell, row; j < jEnd; ++j) {\n                            cell = rangeColumn[j];\n                            switch (typeof cell) {\n                                default:\n                                    continue;\n                                case 'boolean':\n                                case 'number':\n                                case 'string':\n                                    break;\n                            }\n                            if (strict &&\n                                typeof cell !== typeof range.minValue) {\n                                continue;\n                            }\n                            if (cell >= range.minValue &&\n                                cell <= range.maxValue) {\n                                row = (additive ?\n                                    table.getRow(j) :\n                                    modified.getRow(j));\n                                if (row) {\n                                    rows.push(row);\n                                }\n                            }\n                        }\n                    }\n                    modified.deleteRows();\n                    modified.setRows(rows);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for the range modifier.\n         */\n        RangeModifier.defaultOptions = {\n            type: 'Range',\n            ranges: []\n        };\n        DataModifier.registerType('Range', RangeModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return RangeModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/SortModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Sort table rows according to values of a column.\n         *\n         * @private\n         */\n        class SortModifier extends DataModifier {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static ascending(a, b) {\n                return ((a || 0) < (b || 0) ? -1 :\n                    (a || 0) > (b || 0) ? 1 :\n                        0);\n            }\n            static descending(a, b) {\n                return ((b || 0) < (a || 0) ? -1 :\n                    (b || 0) > (a || 0) ? 1 :\n                        0);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeDataModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(SortModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns index and row for sort reference.\n             *\n             * @private\n             *\n             * @param {Highcharts.DataTable} table\n             * Table with rows to reference.\n             *\n             * @return {Array<SortModifier.RowReference>}\n             * Array of row references.\n             */\n            getRowReferences(table) {\n                const rows = table.getRows(), rowReferences = [];\n                for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    rowReferences.push({\n                        index: i,\n                        row: rows[i]\n                    });\n                }\n                return rowReferences;\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n                if (columnName === orderByColumn) {\n                    if (orderInColumn) {\n                        table.modified.setCell(columnName, rowIndex, cellValue);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options, columnNames = Object.keys(columns);\n                if (columnNames.indexOf(orderByColumn) > -1) {\n                    if (orderInColumn &&\n                        columns[columnNames[0]].length) {\n                        table.modified.setColumns(columns, rowIndex);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n                if (orderInColumn &&\n                    rows.length) {\n                    table.modified.setRows(rows, rowIndex);\n                    table.modified.setColumn(orderInColumn, modifier\n                        .modifyTable(new DataTable({\n                        columns: table\n                            .getColumns([orderByColumn, orderInColumn])\n                    }))\n                        .modified\n                        .getColumn(orderInColumn));\n                }\n                else {\n                    modifier.modifyTable(table, eventDetail);\n                }\n                return table;\n            }\n            /**\n             * Sorts rows in the table.\n             *\n             * @param {DataTable} table\n             * Table to sort in.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const columnNames = table.getColumnNames(), rowCount = table.getRowCount(), rowReferences = this.getRowReferences(table), { direction, orderByColumn, orderInColumn } = modifier.options, compare = (direction === 'asc' ?\n                    SortModifier.ascending :\n                    SortModifier.descending), orderByColumnIndex = columnNames.indexOf(orderByColumn), modified = table.modified;\n                if (orderByColumnIndex !== -1) {\n                    rowReferences.sort((a, b) => compare(a.row[orderByColumnIndex], b.row[orderByColumnIndex]));\n                }\n                if (orderInColumn) {\n                    const column = [];\n                    for (let i = 0; i < rowCount; ++i) {\n                        column[rowReferences[i].index] = i;\n                    }\n                    modified.setColumns({ [orderInColumn]: column });\n                }\n                else {\n                    const rows = [];\n                    for (let i = 0; i < rowCount; ++i) {\n                        rows.push(rowReferences[i].row);\n                    }\n                    modified.setRows(rows, 0);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options to group table rows.\n         */\n        SortModifier.defaultOptions = {\n            type: 'Sort',\n            direction: 'desc',\n            orderByColumn: 'y'\n        };\n        DataModifier.registerType('Sort', SortModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SortModifier;\n    });\n    _registerModule(_modules, 'masters/modules/data-tools.src.js', [_modules['Core/Globals.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/DataConverter.js'], _modules['Data/DataCursor.js'], _modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataPool.js'], _modules['Data/DataTable.js'], _modules['Data/Formula/Formula.js']], function (Highcharts, DataConnector, DataConverter, DataCursor, DataModifier, DataPool, DataTable, Formula) {\n\n        const G = Highcharts;\n        G.DataConnector = G.DataConnector || DataConnector;\n        G.DataConverter = G.DataConverter || DataConverter;\n        G.DataCursor = G.DataCursor || DataCursor;\n        G.DataModifier = G.DataModifier || DataModifier;\n        G.DataPool = G.DataPool || DataPool;\n        G.DataTable = G.DataTable || DataTable;\n        G.Formula = G.Formula || Formula;\n\n        return Highcharts;\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","U","DataModifier","addEvent","fireEvent","merge","benchmark","dataTable","options","results","modifier","execute","modifyTable","emit","type","iterations","on","length","times","startTime","endTime","performance","now","push","e","modify","table","eventDetail","Promise","resolve","reject","modified","clone","modifyCell","columnName","rowIndex","cellValue","modifyColumns","columns","modifyRows","rows","callback","types","registerType","key","DataModifierClass","uniqueKey","DataTable","isNull","row","NULL","Array","i","iEnd","columnNames","Object","keys","constructor","aliases","JSON","parse","stringify","autoId","id","rowCount","versionTag","thisColumns","column","slice","Math","max","aliasKeys","thisAliases","alias","skipColumns","tableOptions","tableClone","deleteColumnAlias","deletedAlias","deleteColumns","deletedColumns","modifiedColumns","deleteRows","deletedRows","modifiedRows","deletedCells","splice","j","jEnd","getCell","columnNameOrAlias","getCellAsBoolean","getCellAsNumber","useNaN","isNaN","parseFloat","getCellAsString","getColumn","asReference","getColumns","getColumnAsNumbers","columnAsNumber","columnLength","getColumnNames","columnNamesOrAliases","tableAliasMap","tableColumns","getModifier","getRow","getRows","getRowCount","getRowIndexBy","rowIndexOffset","indexOf","getRowObject","getRowObjects","i2","min","getVersionTag","hasColumns","hasRowWith","renameColumn","newColumnName","setCell","setColumn","setColumns","tableModifier","reset","tableColumn","tableColumnNames","setModifier","promise","then","error","setRow","setRows","rowColumnNames","rowColumnName","indexRowCount","version","DataConnector","pick","metadata","polling","describeColumn","name","columnMeta","connector","describeColumns","pop","getColumnOrder","usePresentationState","names","sort","a","b","index","getSortedColumns","usePresentationOrder","load","save","Error","setColumnOrder","setModifierOptions","modifierOptions","ModifierClass","startPolling","refreshTime","clearTimeout","_polling","setTimeout","stopPolling","whatIs","DataConnectorClass","isNumber","DataConverter","dateFormats","regex","parser","match","Date","UTC","NaN","alternative","d","year","getFullYear","mergedOptions","defaultOptions","regExpPoint","decimalPoint","decimalRegExp","RegExp","asBoolean","value","asNumber","asDate","timestamp","parseDate","asString","asGuessedType","typeMap","converter","guessType","call","decimalRegex","replace","test","getDate","deduceDateFormat","data","limit","stable","format","thing","guessedFormat","madeDeduction","elem","trim","split","parseInt","join","dateFormat","export","headers","getTable","result","trimedValue","innerTrimedValue","floatValue","dateFormatProp","getTime","getTimezoneOffset","str","inside","alternativeFormat","startColumn","endColumn","Number","MAX_VALUE","startRow","endRow","firstRowAsNames","switchRowsAndColumns","getTableFromColumns","DataCursor","stateMap","emittingRegister","listenerMap","addListener","tableId","state","listener","listeners","buildEmittingTag","cursor","firstRow","lastRow","emitCursor","groupOrCursor","cursorOrEvent","eventOrLasting","lasting","event","group","cursors","getIndex","emittingTag","remitCursor","removeListener","toRange","defaultRange","range","needle","columnNeedle","isEqual","cursorA","cursorB","isInRange","needleColumns","rangeColumns","every","toPositions","positions","rowEnd","columnEnd","connectors","DataPoolDefaults","DataPool","waiting","getConnector","connectorId","waitingList","connectorOptions","getConnectorOptions","loadConnector","getConnectorIds","connectorIds","getConnectorTable","isNewConnector","ConnectorClass","setConnectorOptions","instances","booleanRegExp","decimal1RegExp","decimal2RegExp","functionRegExp","operatorRegExp","rangeA1RegExp","rangeR1C1RegExp","referenceA1RegExp","referenceR1C1RegExp","extractParantheses","text","parantheseLevel","char","parantheseStart","substring","extractString","start","escaping","parseArgument","alternativeSeparators","beginColumnRelative","beginRowRelative","endColumnRelative","endRowRelative","beginColumn","beginRow","parseReferenceColumn","formula","parseFormula","next","columnRelative","rowRelative","reference","string","parantheses","parseArguments","argumentsSeparator","term","paranteses","position","code","factor","charCodeAt","pow","operators","isFormula","item","isFunction","isOperator","isRange","isReference","isValue","FormulaTypes","asLogicalStringRegExp","MAX_FALSE","MAX_STRING","MAX_TRUE","operatorPriority","processorFunctions","processorFunctionNameRegExp","asLogicalNumber","asLogicalString","toLowerCase","basicOperation","operator","x","y","round","getArgumentValue","arg","getRangeValues","processFunction","processFormula","values","cell","cells","getReferenceValue","operator2","formulaFunction","processor","getArgumentsValues","registerProcessorFunction","processorFunction","translateReferences","columnDelta","rowDelta","FormulaProcessor","ABS","abs","value2","AND","AVERAGE","count","AVERAGEA","COUNT","COUNTA","IF","ISNA","MAX","NEGATIVE_INFINITY","isFinite","MEDIAN","median","half","floor","MIN","POSITIVE_INFINITY","MOD","value1","getModeMap","modeMap","MULT","modeKeys","modeCount","SNGL","modeKey","keyValue","NOT","OR","PRODUCT","calculated","SUM","XOR","lastValue","FormulaParser","FormulaType","CSVConverter","dataTypes","useLocalDecimalPoint","lineDelimiter","exportNames","itemDelimiter","toLocaleString","csvRows","columnsCount","rowArray","map","columnIndex","columnDataType","dataType","String","cellVal","parserOptions","beforeParse","lines","rowIt","csv","guessedItemDelimiter","guessDelimiter","offset","parseCSVRow","columnStr","rowNumber","guessedDecimalPoint","c","token","actualColumn","read","pushType","initialValue","points","commas","guessed","potDelimiters","linesCount","inStr","cn","cl","CSVConnector","enablePolling","dataRefreshRate","csvURL","dataModifier","fetch","response","isArray","objectEach","JSONConverter","orientation","shift","toString","newRow","arrayWithPath","reduce","acc","JSONConnector","dataUrl","json","GoogleSheetsConverter","header","parseOptions","GoogleSheetsConnector","googleAPIKey","googleSpreadsheetKey","url","buildFetchURL","message","status","worksheet","alphabet","buildQueryRange","googleSpreadsheetRange","apiKey","sheetKey","onlyColumnNames","HTMLTableConverter","tableElement","tableElementID","useMultiLevelHeaders","htmlRows","tableHead","subcategories","subhead","getTableHeaderHTML","getCellHTMLFromValue","caption","tableCaption","tag","classes","attrs","val","className","topheaders","subheaders","useRowspanHeaders","html","len","cur","curColspan","rowspan","isRowEqual","row1","row2","tableHTML","HTMLElement","getElementsByTagName","rowsCount","items","children","itemsLength","tagName","innerHTML","columnsInRow","columnsInRowLength","relativeColumnIndex","H","win","HTMLTableConnector","tableID","document","getElementById","ChainModifier","chain","optionsChain","add","clear","modifiers","reverse","promiseChain","chainTable","remove","InvertModifier","modifiedRowIndex","modifiedColumnNames","j2","MathModifier","formulaColumns","processColumn","columnFormulas","columnFormula","processColumnFormula","rowStart","cacheFormula","cacheString","RangeModifier","additive","ranges","strict","rangeColumn","minValue","maxValue","SortModifier","ascending","descending","getRowReferences","rowReferences","orderByColumn","orderInColumn","direction","compare","orderByColumnIndex","Formula","G"],"mappings":"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"}