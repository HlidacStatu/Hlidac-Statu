{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.1 (2024-04-04)\n *\n * Force directed graph module\n *\n * (c) 2010-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/networkgraph', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/DragNodesComposition.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { addEvent, pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass) {\n            if (pushUnique(composed, 'DragNodes')) {\n                addEvent(ChartClass, 'load', onChartLoad);\n            }\n        }\n        /**\n         * Draggable mode:\n         * @private\n         */\n        function onChartLoad() {\n            const chart = this;\n            let mousedownUnbinder, mousemoveUnbinder, mouseupUnbinder;\n            if (chart.container) {\n                mousedownUnbinder = addEvent(chart.container, 'mousedown', (event) => {\n                    const point = chart.hoverPoint;\n                    if (point &&\n                        point.series &&\n                        point.series.hasDraggableNodes &&\n                        point.series.options.draggable) {\n                        point.series.onMouseDown(point, event);\n                        mousemoveUnbinder = addEvent(chart.container, 'mousemove', (e) => (point &&\n                            point.series &&\n                            point.series.onMouseMove(point, e)));\n                        mouseupUnbinder = addEvent(chart.container.ownerDocument, 'mouseup', (e) => {\n                            mousemoveUnbinder();\n                            mouseupUnbinder();\n                            return point &&\n                                point.series &&\n                                point.series.onMouseUp(point, e);\n                        });\n                    }\n                });\n            }\n            addEvent(chart, 'destroy', function () {\n                mousedownUnbinder();\n            });\n        }\n        /**\n         * Mouse down action, initializing drag&drop mode.\n         *\n         * @private\n         * @param {Highcharts.Point} point\n         *        The point that event occurred.\n         * @param {Highcharts.PointerEventObject} event\n         *        Browser event, before normalization.\n         */\n        function onMouseDown(point, event) {\n            const normalizedEvent = this.chart.pointer?.normalize(event) || event;\n            point.fixedPosition = {\n                chartX: normalizedEvent.chartX,\n                chartY: normalizedEvent.chartY,\n                plotX: point.plotX,\n                plotY: point.plotY\n            };\n            point.inDragMode = true;\n        }\n        /**\n         * Mouse move action during drag&drop.\n         *\n         * @private\n         *\n         * @param {Highcharts.Point} point\n         *        The point that event occurred.\n         * @param {global.Event} event\n         *        Browser event, before normalization.\n         */\n        function onMouseMove(point, event) {\n            if (point.fixedPosition && point.inDragMode) {\n                const series = this, chart = series.chart, normalizedEvent = chart.pointer?.normalize(event) || event, diffX = point.fixedPosition.chartX - normalizedEvent.chartX, diffY = point.fixedPosition.chartY - normalizedEvent.chartY, graphLayoutsLookup = chart.graphLayoutsLookup;\n                let newPlotX, newPlotY;\n                // At least 5px to apply change (avoids simple click):\n                if (Math.abs(diffX) > 5 || Math.abs(diffY) > 5) {\n                    newPlotX = point.fixedPosition.plotX - diffX;\n                    newPlotY = point.fixedPosition.plotY - diffY;\n                    if (chart.isInsidePlot(newPlotX, newPlotY)) {\n                        point.plotX = newPlotX;\n                        point.plotY = newPlotY;\n                        point.hasDragged = true;\n                        this.redrawHalo(point);\n                        graphLayoutsLookup.forEach((layout) => {\n                            layout.restartSimulation();\n                        });\n                    }\n                }\n            }\n        }\n        /**\n         * Mouse up action, finalizing drag&drop.\n         *\n         * @private\n         * @param {Highcharts.Point} point\n         *        The point that event occurred.\n         */\n        function onMouseUp(point) {\n            if (point.fixedPosition) {\n                if (point.hasDragged) {\n                    if (this.layout.enableSimulation) {\n                        this.layout.start();\n                    }\n                    else {\n                        this.chart.redraw();\n                    }\n                }\n                point.inDragMode = point.hasDragged = false;\n                if (!this.options.fixedDraggable) {\n                    delete point.fixedPosition;\n                }\n            }\n        }\n        /**\n         * Redraw halo on mousemove during the drag&drop action.\n         *\n         * @private\n         * @param {Highcharts.Point} point\n         *        The point that should show halo.\n         */\n        function redrawHalo(point) {\n            if (point && this.halo) {\n                this.halo.attr({\n                    d: point.haloPath(this.options.states.hover.halo.size)\n                });\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DragNodesComposition = {\n            compose,\n            onMouseDown,\n            onMouseMove,\n            onMouseUp,\n            redrawHalo\n        };\n\n        return DragNodesComposition;\n    });\n    _registerModule(_modules, 'Series/GraphLayoutComposition.js', [_modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (A, H, U) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { setAnimation } = A;\n        const { composed } = H;\n        const { addEvent, pushUnique } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const integrations = {};\n        const layouts = {};\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass) {\n            if (pushUnique(composed, 'GraphLayout')) {\n                addEvent(ChartClass, 'afterPrint', onChartAfterPrint);\n                addEvent(ChartClass, 'beforePrint', onChartBeforePrint);\n                addEvent(ChartClass, 'predraw', onChartPredraw);\n                addEvent(ChartClass, 'render', onChartRender);\n            }\n        }\n        /**\n         * Re-enable simulation after print.\n         * @private\n         */\n        function onChartAfterPrint() {\n            if (this.graphLayoutsLookup) {\n                this.graphLayoutsLookup.forEach((layout) => {\n                    // Return to default simulation\n                    layout.updateSimulation();\n                });\n                this.redraw();\n            }\n        }\n        /**\n         * Disable simulation before print if enabled.\n         * @private\n         */\n        function onChartBeforePrint() {\n            if (this.graphLayoutsLookup) {\n                this.graphLayoutsLookup.forEach((layout) => {\n                    layout.updateSimulation(false);\n                });\n                this.redraw();\n            }\n        }\n        /**\n         * Clear previous layouts.\n         * @private\n         */\n        function onChartPredraw() {\n            if (this.graphLayoutsLookup) {\n                this.graphLayoutsLookup.forEach((layout) => {\n                    layout.stop();\n                });\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartRender() {\n            let systemsStable, afterRender = false;\n            const layoutStep = (layout) => {\n                if (layout.maxIterations-- &&\n                    isFinite(layout.temperature) &&\n                    !layout.isStable() &&\n                    !layout.enableSimulation) {\n                    // Hook similar to build-in addEvent, but instead of\n                    // creating whole events logic, use just a function.\n                    // It's faster which is important for rAF code.\n                    // Used e.g. in packed-bubble series for bubble radius\n                    // calculations\n                    if (layout.beforeStep) {\n                        layout.beforeStep();\n                    }\n                    layout.step();\n                    systemsStable = false;\n                    afterRender = true;\n                }\n            };\n            if (this.graphLayoutsLookup) {\n                setAnimation(false, this);\n                // Start simulation\n                this.graphLayoutsLookup.forEach((layout) => layout.start());\n                // Just one sync step, to run different layouts similar to\n                // async mode.\n                while (!systemsStable) {\n                    systemsStable = true;\n                    this.graphLayoutsLookup.forEach(layoutStep);\n                }\n                if (afterRender) {\n                    this.series.forEach((series) => {\n                        if (series && series.layout) {\n                            series.render();\n                        }\n                    });\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const GraphLayoutComposition = {\n            compose,\n            integrations,\n            layouts\n        };\n\n        return GraphLayoutComposition;\n    });\n    _registerModule(_modules, 'Series/NodesComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { series: { prototype: seriesProto, prototype: { pointClass: { prototype: pointProto } } } } = SeriesRegistry;\n        const { defined, extend, find, merge, pick } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var NodesComposition;\n        (function (NodesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function compose(PointClass, SeriesClass) {\n                const pointProto = PointClass.prototype, seriesProto = SeriesClass.prototype;\n                pointProto.setNodeState = setNodeState;\n                pointProto.setState = setNodeState;\n                pointProto.update = updateNode;\n                seriesProto.destroy = destroy;\n                seriesProto.setData = setData;\n                return SeriesClass;\n            }\n            NodesComposition.compose = compose;\n            /**\n             * Create a single node that holds information on incoming and outgoing\n             * links.\n             * @private\n             */\n            function createNode(id) {\n                const PointClass = this.pointClass, findById = (nodes, id) => find(nodes, (node) => node.id === id);\n                let node = findById(this.nodes, id), options;\n                if (!node) {\n                    options = this.options.nodes && findById(this.options.nodes, id);\n                    const newNode = new PointClass(this, extend({\n                        className: 'highcharts-node',\n                        isNode: true,\n                        id: id,\n                        y: 1 // Pass isNull test\n                    }, options));\n                    newNode.linksTo = [];\n                    newNode.linksFrom = [];\n                    /**\n                     * Return the largest sum of either the incoming or outgoing links.\n                     * @private\n                     */\n                    newNode.getSum = function () {\n                        let sumTo = 0, sumFrom = 0;\n                        newNode.linksTo.forEach((link) => {\n                            sumTo += link.weight || 0;\n                        });\n                        newNode.linksFrom.forEach((link) => {\n                            sumFrom += link.weight || 0;\n                        });\n                        return Math.max(sumTo, sumFrom);\n                    };\n                    /**\n                     * Get the offset in weight values of a point/link.\n                     * @private\n                     */\n                    newNode.offset = function (point, coll) {\n                        let offset = 0;\n                        for (let i = 0; i < newNode[coll].length; i++) {\n                            if (newNode[coll][i] === point) {\n                                return offset;\n                            }\n                            offset += newNode[coll][i].weight;\n                        }\n                    };\n                    // Return true if the node has a shape, otherwise all links are\n                    // outgoing.\n                    newNode.hasShape = function () {\n                        let outgoing = 0;\n                        newNode.linksTo.forEach((link) => {\n                            if (link.outgoing) {\n                                outgoing++;\n                            }\n                        });\n                        return (!newNode.linksTo.length ||\n                            outgoing !== newNode.linksTo.length);\n                    };\n                    newNode.index = this.nodes.push(newNode) - 1;\n                    node = newNode;\n                }\n                node.formatPrefix = 'node';\n                // For use in formats\n                node.name = node.name || node.options.id || '';\n                // Mass is used in networkgraph:\n                node.mass = pick(\n                // Node:\n                node.options.mass, node.options.marker && node.options.marker.radius, \n                // Series:\n                this.options.marker && this.options.marker.radius, \n                // Default:\n                4);\n                return node;\n            }\n            NodesComposition.createNode = createNode;\n            /**\n             * Destroy all nodes and links.\n             * @private\n             */\n            function destroy() {\n                // Nodes must also be destroyed (#8682, #9300)\n                this.data = []\n                    .concat(this.points || [], this.nodes);\n                return seriesProto.destroy.apply(this, arguments);\n            }\n            NodesComposition.destroy = destroy;\n            /**\n             * Extend generatePoints by adding the nodes, which are Point objects but\n             * pushed to the this.nodes array.\n             * @private\n             */\n            function generatePoints() {\n                const chart = this.chart, nodeLookup = {};\n                seriesProto.generatePoints.call(this);\n                if (!this.nodes) {\n                    this.nodes = []; // List of Point-like node items\n                }\n                this.colorCounter = 0;\n                // Reset links from previous run\n                this.nodes.forEach((node) => {\n                    node.linksFrom.length = 0;\n                    node.linksTo.length = 0;\n                    node.level = node.options.level;\n                });\n                // Create the node list and set up links\n                this.points.forEach((point) => {\n                    if (defined(point.from)) {\n                        if (!nodeLookup[point.from]) {\n                            nodeLookup[point.from] = this.createNode(point.from);\n                        }\n                        nodeLookup[point.from].linksFrom.push(point);\n                        point.fromNode = nodeLookup[point.from];\n                        // Point color defaults to the fromNode's color\n                        if (chart.styledMode) {\n                            point.colorIndex = pick(point.options.colorIndex, nodeLookup[point.from].colorIndex);\n                        }\n                        else {\n                            point.color =\n                                point.options.color || nodeLookup[point.from].color;\n                        }\n                    }\n                    if (defined(point.to)) {\n                        if (!nodeLookup[point.to]) {\n                            nodeLookup[point.to] = this.createNode(point.to);\n                        }\n                        nodeLookup[point.to].linksTo.push(point);\n                        point.toNode = nodeLookup[point.to];\n                    }\n                    point.name = point.name || point.id; // For use in formats\n                }, this);\n                // Store lookup table for later use\n                this.nodeLookup = nodeLookup;\n            }\n            NodesComposition.generatePoints = generatePoints;\n            /**\n             * Destroy all nodes on setting new data\n             * @private\n             */\n            function setData() {\n                if (this.nodes) {\n                    this.nodes.forEach((node) => {\n                        node.destroy();\n                    });\n                    this.nodes.length = 0;\n                }\n                seriesProto.setData.apply(this, arguments);\n            }\n            /**\n             * When hovering node, highlight all connected links. When hovering a link,\n             * highlight all connected nodes.\n             * @private\n             */\n            function setNodeState(state) {\n                const args = arguments, others = this.isNode ? this.linksTo.concat(this.linksFrom) :\n                    [this.fromNode, this.toNode];\n                if (state !== 'select') {\n                    others.forEach((linkOrNode) => {\n                        if (linkOrNode && linkOrNode.series) {\n                            pointProto.setState.apply(linkOrNode, args);\n                            if (!linkOrNode.isNode) {\n                                if (linkOrNode.fromNode.graphic) {\n                                    pointProto.setState.apply(linkOrNode.fromNode, args);\n                                }\n                                if (linkOrNode.toNode && linkOrNode.toNode.graphic) {\n                                    pointProto.setState.apply(linkOrNode.toNode, args);\n                                }\n                            }\n                        }\n                    });\n                }\n                pointProto.setState.apply(this, args);\n            }\n            NodesComposition.setNodeState = setNodeState;\n            /**\n             * When updating a node, don't update `series.options.data`, but\n             * `series.options.nodes`\n             * @private\n             */\n            function updateNode(options, redraw, animation, runEvent) {\n                const nodes = this.series.options.nodes, data = this.series.options.data, dataLength = data && data.length || 0, linkConfig = data && data[this.index];\n                pointProto.update.call(this, options, this.isNode ? false : redraw, // Hold the redraw for nodes\n                animation, runEvent);\n                if (this.isNode) {\n                    // `this.index` refers to `series.nodes`, not `options.nodes` array\n                    const nodeIndex = (nodes || [])\n                        .reduce(// Array.findIndex needs a polyfill\n                    (prevIndex, n, index) => (this.id === n.id ? index : prevIndex), -1), \n                    // Merge old config with new config. New config is stored in\n                    // options.data, because of default logic in point.update()\n                    nodeConfig = merge(nodes && nodes[nodeIndex] || {}, data && data[this.index] || {});\n                    // Restore link config\n                    if (data) {\n                        if (linkConfig) {\n                            data[this.index] = linkConfig;\n                        }\n                        else {\n                            // Remove node from config if there's more nodes than links\n                            data.length = dataLength;\n                        }\n                    }\n                    // Set node config\n                    if (nodes) {\n                        if (nodeIndex >= 0) {\n                            nodes[nodeIndex] = nodeConfig;\n                        }\n                        else {\n                            nodes.push(nodeConfig);\n                        }\n                    }\n                    else {\n                        this.series.options.nodes = [nodeConfig];\n                    }\n                    if (pick(redraw, true)) {\n                        this.series.chart.redraw(animation);\n                    }\n                }\n            }\n            NodesComposition.updateNode = updateNode;\n        })(NodesComposition || (NodesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NodesComposition;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/NetworkgraphPoint.js', [_modules['Series/NodesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (NodesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { series: { prototype: seriesProto, prototype: { pointClass: Point } } } = SeriesRegistry;\n        const { addEvent, css, defined, extend, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class NetworkgraphPoint extends Point {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Destroy point. If it's a node, remove all links coming out of this\n             * node. Then remove point from the layout.\n             * @private\n             */\n            destroy() {\n                if (this.isNode) {\n                    this.linksFrom.concat(this.linksTo).forEach(function (link) {\n                        // Removing multiple nodes at the same time\n                        // will try to remove link between nodes twice\n                        if (link.destroyElements) {\n                            link.destroyElements();\n                        }\n                    });\n                }\n                this.series.layout.removeElementFromCollection(this, this.series.layout[this.isNode ? 'nodes' : 'links']);\n                return Point.prototype.destroy.apply(this, arguments);\n            }\n            /**\n             * Return degree of a node. If node has no connections, it still has\n             * deg=1.\n             * @private\n             */\n            getDegree() {\n                const deg = this.isNode ?\n                    this.linksFrom.length + this.linksTo.length :\n                    0;\n                return deg === 0 ? 1 : deg;\n            }\n            /**\n             * Get presentational attributes of link connecting two nodes.\n             * @private\n             */\n            getLinkAttributes() {\n                const linkOptions = this.series.options.link, pointOptions = this.options;\n                return {\n                    'stroke-width': pick(pointOptions.width, linkOptions.width),\n                    stroke: (pointOptions.color || linkOptions.color),\n                    dashstyle: (pointOptions.dashStyle || linkOptions.dashStyle),\n                    opacity: pick(pointOptions.opacity, linkOptions.opacity, 1)\n                };\n            }\n            /**\n             * Get link path connecting two nodes.\n             * @private\n             * @return {Array<Highcharts.SVGPathArray>}\n             *         Path: `['M', x, y, 'L', x, y]`\n             */\n            getLinkPath() {\n                let left = this.fromNode, right = this.toNode;\n                // Start always from left to the right node, to prevent rendering\n                // labels upside down\n                if (left.plotX > right.plotX) {\n                    left = this.toNode;\n                    right = this.fromNode;\n                }\n                return [\n                    ['M', left.plotX || 0, left.plotY || 0],\n                    ['L', right.plotX || 0, right.plotY || 0]\n                ];\n                /*\n                IDEA: different link shapes?\n                return [\n                    'M',\n                    from.plotX,\n                    from.plotY,\n                    'Q',\n                    (to.plotX + from.plotX) / 2,\n                    (to.plotY + from.plotY) / 2 + 15,\n                    to.plotX,\n                    to.plotY\n                ];*/\n            }\n            /**\n             * Get mass fraction applied on two nodes connected to each other. By\n             * default, when mass is equal to `1`, mass fraction for both nodes\n             * equal to 0.5.\n             * @private\n             * @return {Highcharts.Dictionary<number>}\n             *         For example `{ fromNode: 0.5, toNode: 0.5 }`\n             */\n            getMass() {\n                const m1 = this.fromNode.mass, m2 = this.toNode.mass, sum = m1 + m2;\n                return {\n                    fromNode: 1 - m1 / sum,\n                    toNode: 1 - m2 / sum\n                };\n            }\n            /**\n             * Basic `point.init()` and additional styles applied when\n             * `series.draggable` is enabled.\n             * @private\n             */\n            constructor(series, options, x) {\n                super(series, options, x);\n                if (this.series.options.draggable &&\n                    !this.series.chart.styledMode) {\n                    addEvent(this, 'mouseOver', function () {\n                        css(this.series.chart.container, { cursor: 'move' });\n                    });\n                    addEvent(this, 'mouseOut', function () {\n                        css(this.series.chart.container, { cursor: 'default' });\n                    });\n                }\n            }\n            /**\n             * @private\n             */\n            isValid() {\n                return !this.isNode || defined(this.id);\n            }\n            /**\n             * Redraw link's path.\n             * @private\n             */\n            redrawLink() {\n                const path = this.getLinkPath();\n                let attribs;\n                if (this.graphic) {\n                    this.shapeArgs = {\n                        d: path\n                    };\n                    if (!this.series.chart.styledMode) {\n                        attribs = this.series.pointAttribs(this);\n                        this.graphic.attr(attribs);\n                        (this.dataLabels || []).forEach(function (label) {\n                            if (label) {\n                                label.attr({\n                                    opacity: attribs.opacity\n                                });\n                            }\n                        });\n                    }\n                    this.graphic.animate(this.shapeArgs);\n                    // Required for dataLabels\n                    const start = path[0];\n                    const end = path[1];\n                    if (start[0] === 'M' && end[0] === 'L') {\n                        this.plotX = (start[1] + end[1]) / 2;\n                        this.plotY = (start[2] + end[2]) / 2;\n                    }\n                }\n            }\n            /**\n             * Common method for removing points and nodes in networkgraph. To\n             * remove `link`, use `series.data[index].remove()`. To remove `node`\n             * with all connections, use `series.nodes[index].remove()`.\n             * @private\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or wait for an explicit call. When\n             *        doing more operations on the chart, for example running\n             *        `point.remove()` in a loop, it is best practice to set\n             *        `redraw` to false and call `chart.redraw()` after.\n             * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation=false]\n             *        Whether to apply animation, and optionally animation\n             *        configuration.\n             */\n            remove(redraw, animation) {\n                const point = this, series = point.series, nodesOptions = series.options.nodes || [];\n                let index, i = nodesOptions.length;\n                // For nodes, remove all connected links:\n                if (point.isNode) {\n                    // Temporary disable series.points array, because\n                    // Series.removePoint() modifies it\n                    series.points = [];\n                    // Remove link from all nodes collections:\n                    []\n                        .concat(point.linksFrom)\n                        .concat(point.linksTo)\n                        .forEach(function (linkFromTo) {\n                        // Incoming links\n                        index = linkFromTo.fromNode.linksFrom.indexOf(linkFromTo);\n                        if (index > -1) {\n                            linkFromTo.fromNode.linksFrom.splice(index, 1);\n                        }\n                        // Outcoming links\n                        index = linkFromTo.toNode.linksTo.indexOf(linkFromTo);\n                        if (index > -1) {\n                            linkFromTo.toNode.linksTo.splice(index, 1);\n                        }\n                        // Remove link from data/points collections\n                        seriesProto.removePoint.call(series, series.data.indexOf(linkFromTo), false, false);\n                    });\n                    // Restore points array, after links are removed\n                    series.points = series.data.slice();\n                    // Proceed with removing node. It's similar to\n                    // Series.removePoint() method, but doesn't modify other arrays\n                    series.nodes.splice(series.nodes.indexOf(point), 1);\n                    // Remove node options from config\n                    while (i--) {\n                        if (nodesOptions[i].id === point.options.id) {\n                            series.options.nodes.splice(i, 1);\n                            break;\n                        }\n                    }\n                    if (point) {\n                        point.destroy();\n                    }\n                    // Run redraw if requested\n                    series.isDirty = true;\n                    series.isDirtyData = true;\n                    if (redraw) {\n                        series.chart.redraw(redraw);\n                    }\n                }\n                else {\n                    series.removePoint(series.data.indexOf(point), redraw, animation);\n                }\n            }\n            /**\n             * Render link and add it to the DOM.\n             * @private\n             */\n            renderLink() {\n                let attribs;\n                if (!this.graphic) {\n                    this.graphic = this.series.chart.renderer\n                        .path(this.getLinkPath())\n                        .addClass(this.getClassName(), true)\n                        .add(this.series.group);\n                    if (!this.series.chart.styledMode) {\n                        attribs = this.series.pointAttribs(this);\n                        this.graphic.attr(attribs);\n                        (this.dataLabels || []).forEach(function (label) {\n                            if (label) {\n                                label.attr({\n                                    opacity: attribs.opacity\n                                });\n                            }\n                        });\n                    }\n                }\n            }\n        }\n        extend(NetworkgraphPoint.prototype, {\n            setState: NodesComposition.setNodeState\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NetworkgraphPoint;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/NetworkgraphSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * A networkgraph is a type of relationship chart, where connnections\n         * (links) attracts nodes (points) and other nodes repulse each other.\n         *\n         * @extends      plotOptions.line\n         * @product      highcharts\n         * @sample       highcharts/demo/network-graph/\n         *               Networkgraph\n         * @since        7.0.0\n         * @excluding    boostThreshold, animation, animationLimit, connectEnds,\n         *               colorAxis, colorKey, connectNulls, cropThreshold, dragDrop,\n         *               getExtremesFromAll, label, linecap, negativeColor,\n         *               pointInterval, pointIntervalUnit, pointPlacement,\n         *               pointStart, softThreshold, stack, stacking, step,\n         *               threshold, xAxis, yAxis, zoneAxis, dataSorting,\n         *               boostBlending\n         * @requires     modules/networkgraph\n         * @optionparent plotOptions.networkgraph\n         *\n         * @private\n         */\n        const NetworkgraphSeriesDefaults = {\n            stickyTracking: false,\n            /**\n             * @default   true\n             * @extends   plotOptions.series.inactiveOtherPoints\n             * @private\n             */\n            inactiveOtherPoints: true,\n            marker: {\n                enabled: true,\n                states: {\n                    /**\n                     * The opposite state of a hover for a single point node.\n                     * Applied to all not connected nodes to the hovered one.\n                     *\n                     * @declare Highcharts.PointStatesInactiveOptionsObject\n                     */\n                    inactive: {\n                        /**\n                         * Opacity of inactive markers.\n                         */\n                        opacity: 0.3,\n                        /**\n                         * Animation when not hovering over the node.\n                         *\n                         * @type {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                         */\n                        animation: {\n                            /** @internal */\n                            duration: 50\n                        }\n                    }\n                }\n            },\n            states: {\n                /**\n                 * The opposite state of a hover for a single point link. Applied\n                 * to all links that are not coming from the hovered node.\n                 *\n                 * @declare Highcharts.SeriesStatesInactiveOptionsObject\n                 */\n                inactive: {\n                    /**\n                     * Opacity of inactive links.\n                     */\n                    linkOpacity: 0.3,\n                    /**\n                     * Animation when not hovering over the node.\n                     *\n                     * @type {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                     */\n                    animation: {\n                        /** @internal */\n                        duration: 50\n                    }\n                }\n            },\n            /**\n             * @sample highcharts/series-networkgraph/link-datalabels\n             *         Networkgraph with labels on links\n             * @sample highcharts/series-networkgraph/textpath-datalabels\n             *         Networkgraph with labels around nodes\n             * @sample highcharts/series-networkgraph/link-datalabels\n             *         Data labels moved into the nodes\n             * @sample highcharts/series-networkgraph/link-datalabels\n             *         Data labels moved under the links\n             *\n             * @declare Highcharts.SeriesNetworkgraphDataLabelsOptionsObject\n             *\n             * @private\n             */\n            dataLabels: {\n                /**\n                 * The\n                 * [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * specifying what to show for _node_ in the networkgraph. In v7.0\n                 * defaults to `{key}`, since v7.1 defaults to `undefined` and\n                 * `formatter` is used instead.\n                 *\n                 * @type      {string}\n                 * @since     7.0.0\n                 * @apioption plotOptions.networkgraph.dataLabels.format\n                 */\n                // eslint-disable-next-line valid-jsdoc\n                /**\n                 * Callback JavaScript function to format the data label for a node.\n                 * Note that if a `format` is defined, the format takes precedence\n                 * and the formatter is ignored.\n                 *\n                 * @type  {Highcharts.SeriesNetworkgraphDataLabelsFormatterCallbackFunction}\n                 * @since 7.0.0\n                 */\n                formatter: function () {\n                    return this.key;\n                },\n                /**\n                 * The\n                 * [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * specifying what to show for _links_ in the networkgraph.\n                 * (Default: `undefined`)\n                 *\n                 * @type      {string}\n                 * @since     7.1.0\n                 * @apioption plotOptions.networkgraph.dataLabels.linkFormat\n                 */\n                // eslint-disable-next-line valid-jsdoc\n                /**\n                 * Callback to format data labels for _links_ in the sankey diagram.\n                 * The `linkFormat` option takes precedence over the\n                 * `linkFormatter`.\n                 *\n                 * @type  {Highcharts.SeriesNetworkgraphDataLabelsFormatterCallbackFunction}\n                 * @since 7.1.0\n                 */\n                linkFormatter: function () {\n                    return (this.point.fromNode.name +\n                        '<br>' +\n                        this.point.toNode.name);\n                },\n                /**\n                 * Options for a _link_ label text which should follow link\n                 * connection. Border and background are disabled for a label that\n                 * follows a path.\n                 *\n                 * **Note:** Only SVG-based renderer supports this option. Setting\n                 * `useHTML` to true will disable this option.\n                 *\n                 * @extends plotOptions.networkgraph.dataLabels.textPath\n                 * @since   7.1.0\n                 */\n                linkTextPath: {\n                    enabled: true\n                },\n                textPath: {\n                    enabled: false\n                },\n                style: {\n                    transition: 'opacity 2000ms'\n                },\n                defer: true,\n                animation: {\n                    defer: 1000\n                }\n            },\n            /**\n             * Link style options\n             * @private\n             */\n            link: {\n                /**\n                 * A name for the dash style to use for links.\n                 *\n                 * @type      {string}\n                 * @apioption plotOptions.networkgraph.link.dashStyle\n                 */\n                /**\n                 * Opacity of the link between two nodes.\n                 *\n                 * @type      {number}\n                 * @default   1\n                 * @apioption plotOptions.networkgraph.link.opacity\n                 */\n                /**\n                 * Color of the link between two nodes.\n                 */\n                color: 'rgba(100, 100, 100, 0.5)',\n                /**\n                 * Width (px) of the link between two nodes.\n                 */\n                width: 1\n            },\n            /**\n             * Flag to determine if nodes are draggable or not.\n             * @private\n             */\n            draggable: true,\n            layoutAlgorithm: {\n                /**\n                 * Repulsive force applied on a node. Passed are two arguments:\n                 * - `d` - which is current distance between two nodes\n                 * - `k` - which is desired distance between two nodes\n                 *\n                 * In `verlet` integration, defaults to:\n                 * `function (d, k) { return (k - d) / d * (k > d ? 1 : 0) }`\n                 *\n                 * @see [layoutAlgorithm.integration](#series.networkgraph.layoutAlgorithm.integration)\n                 *\n                 * @sample highcharts/series-networkgraph/forces/\n                 *         Custom forces with Euler integration\n                 * @sample highcharts/series-networkgraph/cuboids/\n                 *         Custom forces with Verlet integration\n                 *\n                 * @type      {Function}\n                 * @default   function (d, k) { return k * k / d; }\n                 * @apioption plotOptions.networkgraph.layoutAlgorithm.repulsiveForce\n                 */\n                /**\n                 * Attraction force applied on a node which is conected to another\n                 * node by a link. Passed are two arguments:\n                 * - `d` - which is current distance between two nodes\n                 * - `k` - which is desired distance between two nodes\n                 *\n                 * In `verlet` integration, defaults to:\n                 * `function (d, k) { return (k - d) / d; }`\n                 *\n                 * @see [layoutAlgorithm.integration](#series.networkgraph.layoutAlgorithm.integration)\n                 *\n                 * @sample highcharts/series-networkgraph/forces/\n                 *         Custom forces with Euler integration\n                 * @sample highcharts/series-networkgraph/cuboids/\n                 *         Custom forces with Verlet integration\n                 *\n                 * @type      {Function}\n                 * @default   function (d, k) { return k * k / d; }\n                 * @apioption plotOptions.networkgraph.layoutAlgorithm.attractiveForce\n                 */\n                /**\n                 * Ideal length (px) of the link between two nodes. When not\n                 * defined, length is calculated as:\n                 * `Math.pow(availableWidth * availableHeight / nodesLength, 0.4);`\n                 *\n                 * Note: Because of the algorithm specification, length of each link\n                 * might be not exactly as specified.\n                 *\n                 * @sample highcharts/series-networkgraph/styled-links/\n                 *         Numerical values\n                 *\n                 * @type      {number}\n                 * @apioption plotOptions.networkgraph.layoutAlgorithm.linkLength\n                 */\n                /**\n                 * Initial layout algorithm for positioning nodes. Can be one of\n                 * built-in options (\"circle\", \"random\") or a function where\n                 * positions should be set on each node (`this.nodes`) as\n                 * `node.plotX` and `node.plotY`\n                 *\n                 * @sample highcharts/series-networkgraph/initial-positions/\n                 *         Initial positions with callback\n                 *\n                 * @type {\"circle\"|\"random\"|Function}\n                 */\n                initialPositions: 'circle',\n                /**\n                 * When `initialPositions` are set to 'circle',\n                 * `initialPositionRadius` is a distance from the center of circle,\n                 * in which nodes are created.\n                 *\n                 * @type    {number}\n                 * @default 1\n                 * @since   7.1.0\n                 */\n                initialPositionRadius: 1,\n                /**\n                 * Experimental. Enables live simulation of the algorithm\n                 * implementation. All nodes are animated as the forces applies on\n                 * them.\n                 *\n                 * @sample highcharts/demo/network-graph/\n                 *         Live simulation enabled\n                 */\n                enableSimulation: false,\n                /**\n                 * Barnes-Hut approximation only.\n                 * Deteremines when distance between cell and node is small enough\n                 * to calculate forces. Value of `theta` is compared directly with\n                 * quotient `s / d`, where `s` is the size of the cell, and `d` is\n                 * distance between center of cell's mass and currently compared\n                 * node.\n                 *\n                 * @see [layoutAlgorithm.approximation](#series.networkgraph.layoutAlgorithm.approximation)\n                 *\n                 * @since 7.1.0\n                 */\n                theta: 0.5,\n                /**\n                 * Verlet integration only.\n                 * Max speed that node can get in one iteration. In terms of\n                 * simulation, it's a maximum translation (in pixels) that node can\n                 * move (in both, x and y, dimensions). While `friction` is applied\n                 * on all nodes, max speed is applied only for nodes that move very\n                 * fast, for example small or disconnected ones.\n                 *\n                 * @see [layoutAlgorithm.integration](#series.networkgraph.layoutAlgorithm.integration)\n                 * @see [layoutAlgorithm.friction](#series.networkgraph.layoutAlgorithm.friction)\n                 *\n                 * @since 7.1.0\n                 */\n                maxSpeed: 10,\n                /**\n                 * Approximation used to calculate repulsive forces affecting nodes.\n                 * By default, when calculating net force, nodes are compared\n                 * against each other, which gives O(N^2) complexity. Using\n                 * Barnes-Hut approximation, we decrease this to O(N log N), but the\n                 * resulting graph will have different layout. Barnes-Hut\n                 * approximation divides space into rectangles via quad tree, where\n                 * forces exerted on nodes are calculated directly for nearby cells,\n                 * and for all others, cells are treated as a separate node with\n                 * center of mass.\n                 *\n                 * @see [layoutAlgorithm.theta](#series.networkgraph.layoutAlgorithm.theta)\n                 *\n                 * @sample highcharts/series-networkgraph/barnes-hut-approximation/\n                 *         A graph with Barnes-Hut approximation\n                 *\n                 * @type       {string}\n                 * @validvalue [\"barnes-hut\", \"none\"]\n                 * @since      7.1.0\n                 */\n                approximation: 'none',\n                /**\n                 * Type of the algorithm used when positioning nodes.\n                 *\n                 * @type       {string}\n                 * @validvalue [\"reingold-fruchterman\"]\n                 */\n                type: 'reingold-fruchterman',\n                /**\n                 * Integration type. Available options are `'euler'` and `'verlet'`.\n                 * Integration determines how forces are applied on particles. In\n                 * Euler integration, force is applied direct as\n                 * `newPosition += velocity;`.\n                 * In Verlet integration, new position is based on a previous\n                 * position without velocity:\n                 * `newPosition += previousPosition - newPosition`.\n                 *\n                 * Note that different integrations give different results as forces\n                 * are different.\n                 *\n                 * In Highcharts v7.0.x only `'euler'` integration was supported.\n                 *\n                 * @sample highcharts/series-networkgraph/integration-comparison/\n                 *         Comparison of Verlet and Euler integrations\n                 *\n                 * @type       {string}\n                 * @validvalue [\"euler\", \"verlet\"]\n                 * @since      7.1.0\n                 */\n                integration: 'euler',\n                /**\n                 * Max number of iterations before algorithm will stop. In general,\n                 * algorithm should find positions sooner, but when rendering huge\n                 * number of nodes, it is recommended to increase this value as\n                 * finding perfect graph positions can require more time.\n                 */\n                maxIterations: 1000,\n                /**\n                 * Gravitational const used in the barycenter force of the\n                 * algorithm.\n                 *\n                 * @sample highcharts/series-networkgraph/forces/\n                 *         Custom forces with Euler integration\n                 */\n                gravitationalConstant: 0.0625,\n                /**\n                 * Friction applied on forces to prevent nodes rushing to fast to\n                 * the desired positions.\n                 */\n                friction: -0.981\n            },\n            showInLegend: false\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Fires after the simulation is ended and the layout is stable.\n         *\n         * @type      {Highcharts.NetworkgraphAfterSimulationCallbackFunction}\n         * @product   highcharts\n         * @apioption series.networkgraph.events.afterSimulation\n         */\n        /**\n         * A `networkgraph` series. If the [type](#series.networkgraph.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.networkgraph\n         * @excluding boostThreshold, animation, animationLimit, connectEnds,\n         *            connectNulls, cropThreshold, dragDrop, getExtremesFromAll, label,\n         *            linecap, negativeColor, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointStart, softThreshold, stack, stacking,\n         *            step, threshold, xAxis, yAxis, zoneAxis, dataSorting,\n         *            boostBlending\n         * @product   highcharts\n         * @requires  modules/networkgraph\n         * @apioption series.networkgraph\n         */\n        /**\n         * An array of data points for the series. For the `networkgraph` series type,\n         * points can be given in the following way:\n         *\n         * An array of objects with named values. The following snippet shows only a\n         * few settings, see the complete options set below. If the total number of\n         * data points exceeds the series'\n         * [turboThreshold](#series.area.turboThreshold), this option is not available.\n         *\n         *  ```js\n         *     data: [{\n         *         from: 'Category1',\n         *         to: 'Category2'\n         *     }, {\n         *         from: 'Category1',\n         *         to: 'Category3'\n         *     }]\n         *  ```\n         *\n         * @type      {Array<Object|Array|number>}\n         * @extends   series.line.data\n         * @excluding drilldown,marker,x,y,draDrop\n         * @sample    {highcharts} highcharts/chart/reflow-true/\n         *            Numerical values\n         * @sample    {highcharts} highcharts/series/data-array-of-arrays/\n         *            Arrays of numeric x and y\n         * @sample    {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *            Arrays of datetime x and y\n         * @sample    {highcharts} highcharts/series/data-array-of-name-value/\n         *            Arrays of point.name and y\n         * @sample    {highcharts} highcharts/series/data-array-of-objects/\n         *            Config objects\n         * @product   highcharts\n         * @apioption series.networkgraph.data\n         */\n        /**\n         * @type      {Highcharts.SeriesNetworkgraphDataLabelsOptionsObject|Array<Highcharts.SeriesNetworkgraphDataLabelsOptionsObject>}\n         * @product   highcharts\n         * @apioption series.networkgraph.data.dataLabels\n         */\n        /**\n         * The node that the link runs from.\n         *\n         * @type      {string}\n         * @product   highcharts\n         * @apioption series.networkgraph.data.from\n         */\n        /**\n         * The node that the link runs to.\n         *\n         * @type      {string}\n         * @product   highcharts\n         * @apioption series.networkgraph.data.to\n         */\n        /**\n         * A collection of options for the individual nodes. The nodes in a\n         * networkgraph diagram are auto-generated instances of `Highcharts.Point`,\n         * but options can be applied here and linked by the `id`.\n         *\n         * @sample highcharts/series-networkgraph/data-options/\n         *         Networkgraph diagram with node options\n         *\n         * @type      {Array<*>}\n         * @product   highcharts\n         * @apioption series.networkgraph.nodes\n         */\n        /**\n         * The id of the auto-generated node, referring to the `from` or `to` setting of\n         * the link.\n         *\n         * @type      {string}\n         * @product   highcharts\n         * @apioption series.networkgraph.nodes.id\n         */\n        /**\n         * The color of the auto generated node.\n         *\n         * @type      {Highcharts.ColorString}\n         * @product   highcharts\n         * @apioption series.networkgraph.nodes.color\n         */\n        /**\n         * The color index of the auto generated node, especially for use in styled\n         * mode.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.networkgraph.nodes.colorIndex\n         */\n        /**\n         * The name to display for the node in data labels and tooltips. Use this when\n         * the name is different from the `id`. Where the id must be unique for each\n         * node, this is not necessary for the name.\n         *\n         * @sample highcharts/series-networkgraph/data-options/\n         *         Networkgraph diagram with node options\n         *\n         * @type      {string}\n         * @product   highcharts\n         * @apioption series.networkgraph.nodes.name\n         */\n        /**\n         * Mass of the node. By default, each node has mass equal to it's marker radius\n         * . Mass is used to determine how two connected nodes should affect\n         * each other:\n         *\n         * Attractive force is multiplied by the ratio of two connected\n         * nodes; if a big node has weights twice as the small one, then the small one\n         * will move towards the big one twice faster than the big one to the small one\n         * .\n         *\n         * @sample highcharts/series-networkgraph/ragdoll/\n         *         Mass determined by marker.radius\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.networkgraph.nodes.mass\n         */\n        /**\n         * Options for the node markers.\n         *\n         * @extends   plotOptions.networkgraph.marker\n         * @apioption series.networkgraph.nodes.marker\n         */\n        /**\n         * Individual data label for each node. The options are the same as\n         * the ones for [series.networkgraph.dataLabels](#series.networkgraph.dataLabels).\n         *\n         * @type      {Highcharts.SeriesNetworkgraphDataLabelsOptionsObject|Array<Highcharts.SeriesNetworkgraphDataLabelsOptionsObject>}\n         *\n         * @apioption series.networkgraph.nodes.dataLabels\n         */\n        ''; // Adds doclets above to transpiled file\n\n        return NetworkgraphSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/EulerIntegration.js', [], function () {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Attractive force.\n         *\n         * In Euler integration, force is stored in a node, not changing it's\n         * position. Later, in `integrate()` forces are applied on nodes.\n         *\n         * @private\n         * @param {Highcharts.Point} link\n         *        Link that connects two nodes\n         * @param {number} force\n         *        Force calculated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distanceXY\n         *        Distance between two nodes e.g. `{x, y}`\n         * @param {number} distanceR\n             */\n        function attractive(link, force, distanceXY, distanceR) {\n            const massFactor = link.getMass(), translatedX = (distanceXY.x / distanceR) * force, translatedY = (distanceXY.y / distanceR) * force;\n            if (!link.fromNode.fixedPosition) {\n                link.fromNode.dispX -=\n                    translatedX * massFactor.fromNode / link.fromNode.degree;\n                link.fromNode.dispY -=\n                    translatedY * massFactor.fromNode / link.fromNode.degree;\n            }\n            if (!link.toNode.fixedPosition) {\n                link.toNode.dispX +=\n                    translatedX * massFactor.toNode / link.toNode.degree;\n                link.toNode.dispY +=\n                    translatedY * massFactor.toNode / link.toNode.degree;\n            }\n        }\n        /**\n         * Attractive force function. Can be replaced by API's\n         * `layoutAlgorithm.attractiveForce`\n         *\n         * Other forces that can be used:\n         *\n         * basic, not recommended:\n         *    `function (d, k) { return d / k }`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function attractiveForceFunction(d, k) {\n            return d * d / k;\n        }\n        /**\n         * Barycenter force. Calculate and applys barycenter forces on the\n         * nodes. Making them closer to the center of their barycenter point.\n         *\n         * In Euler integration, force is stored in a node, not changing it's\n         * position. Later, in `integrate()` forces are applied on nodes.\n         *\n         * @private\n         */\n        function barycenter() {\n            const gravitationalConstant = this.options.gravitationalConstant, xFactor = this.barycenter.xFactor, yFactor = this.barycenter.yFactor;\n            this.nodes.forEach(function (node) {\n                if (!node.fixedPosition) {\n                    const degree = node.getDegree(), phi = degree * (1 + degree / 2);\n                    node.dispX += ((xFactor - node.plotX) *\n                        gravitationalConstant *\n                        phi / node.degree);\n                    node.dispY += ((yFactor - node.plotY) *\n                        gravitationalConstant *\n                        phi / node.degree);\n                }\n            });\n        }\n        /**\n         * Estimate the best possible distance between two nodes, making graph\n         * readable.\n         * @private\n         */\n        function getK(layout) {\n            return Math.pow(layout.box.width * layout.box.height / layout.nodes.length, 0.3);\n        }\n        /**\n         * Integration method.\n         *\n         * In Euler integration, force were stored in a node, not changing it's\n         * position. Now, in the integrator method, we apply changes.\n         *\n         * Euler:\n         *\n         * Basic form: `x(n+1) = x(n) + v(n)`\n         *\n         * With Rengoild-Fruchterman we get:\n         * `x(n+1) = x(n) + v(n) / length(v(n)) * min(v(n), temperature(n))`\n         * where:\n         * - `x(n+1)`: next position\n         * - `x(n)`: current position\n         * - `v(n)`: velocity (comes from net force)\n         * - `temperature(n)`: current temperature\n         *\n         * Known issues:\n         * Oscillations when force vector has the same magnitude but opposite\n         * direction in the next step. Potentially solved by decreasing force by\n         * `v * (1 / node.degree)`\n         *\n         * Note:\n         * Actually `min(v(n), temperature(n))` replaces simulated annealing.\n         *\n         * @private\n         * @param {Highcharts.NetworkgraphLayout} layout\n         *        Layout object\n         * @param {Highcharts.Point} node\n         *        Node that should be translated\n         */\n        function integrate(layout, node) {\n            node.dispX +=\n                node.dispX * layout.options.friction;\n            node.dispY +=\n                node.dispY * layout.options.friction;\n            const distanceR = node.temperature = layout.vectorLength({\n                x: node.dispX,\n                y: node.dispY\n            });\n            if (distanceR !== 0) {\n                node.plotX += (node.dispX / distanceR *\n                    Math.min(Math.abs(node.dispX), layout.temperature));\n                node.plotY += (node.dispY / distanceR *\n                    Math.min(Math.abs(node.dispY), layout.temperature));\n            }\n        }\n        /**\n         * Repulsive force.\n         *\n         * @private\n         * @param {Highcharts.Point} node\n         *        Node that should be translated by force.\n         * @param {number} force\n         *        Force calculated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distanceXY\n         *        Distance between two nodes e.g. `{x, y}`\n         */\n        function repulsive(node, force, distanceXY, distanceR) {\n            node.dispX +=\n                (distanceXY.x / distanceR) * force / node.degree;\n            node.dispY +=\n                (distanceXY.y / distanceR) * force / node.degree;\n        }\n        /**\n         * Repulsive force function. Can be replaced by API's\n         * `layoutAlgorithm.repulsiveForce`.\n         *\n         * Other forces that can be used:\n         *\n         * basic, not recommended:\n         *    `function (d, k) { return k / d }`\n         *\n         * standard:\n         *    `function (d, k) { return k * k / d }`\n         *\n         * grid-variant:\n         *    `function (d, k) { return k * k / d * (2 * k - d > 0 ? 1 : 0) }`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function repulsiveForceFunction(d, k) {\n            return k * k / d;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const EulerIntegration = {\n            attractive,\n            attractiveForceFunction,\n            barycenter,\n            getK,\n            integrate,\n            repulsive,\n            repulsiveForceFunction\n        };\n\n        return EulerIntegration;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/QuadTreeNode.js', [], function () {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The QuadTree node class. Used in Networkgraph chart as a base for Barnes-Hut\n         * approximation.\n         *\n         * @private\n         * @class\n         * @name Highcharts.QuadTreeNode\n         *\n         * @param {Highcharts.Dictionary<number>} box\n         *        Available space for the node\n         */\n        class QuadTreeNode {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(box) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                /**\n                 * Read only. If QuadTreeNode is an external node, Point is stored in\n                 * `this.body`.\n                 *\n                 * @name Highcharts.QuadTreeNode#body\n                 * @type {boolean|Highcharts.Point}\n                 */\n                this.body = false;\n                /**\n                 * Read only. Internal nodes when created are empty to reserve the\n                 * space. If Point is added to this QuadTreeNode, QuadTreeNode is no\n                 * longer empty.\n                 *\n                 * @name Highcharts.QuadTreeNode#isEmpty\n                 * @type {boolean}\n                 */\n                this.isEmpty = false;\n                /**\n                 * Read only. Flag to determine if QuadTreeNode is internal (and has\n                 * subnodes with mass and central position) or external (bound to\n                 * Point).\n                 *\n                 * @name Highcharts.QuadTreeNode#isInternal\n                 * @type {boolean}\n                 */\n                this.isInternal = false;\n                /**\n                 * Read only. Array of subnodes. Empty if QuadTreeNode has just one\n                 * Point. When added another Point to this QuadTreeNode, array is\n                 * filled with four subnodes.\n                 *\n                 * @name Highcharts.QuadTreeNode#nodes\n                 * @type {Array<Highcharts.QuadTreeNode>}\n                 */\n                this.nodes = [];\n                /**\n                 * Read only. The available space for node.\n                 *\n                 * @name Highcharts.QuadTreeNode#box\n                 * @type {Highcharts.Dictionary<number>}\n                 */\n                this.box = box;\n                /**\n                 * Read only. The minium of width and height values.\n                 *\n                 * @name Highcharts.QuadTreeNode#boxSize\n                 * @type {number}\n                 */\n                this.boxSize = Math.min(box.width, box.height);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * When inserting another node into the box, that already hove one node,\n             * divide the available space into another four quadrants.\n             *\n             * Indexes of quadrants are:\n             * ```\n             * -------------               -------------\n             * |           |               |     |     |\n             * |           |               |  0  |  1  |\n             * |           |   divide()    |     |     |\n             * |     1     | ----------->  -------------\n             * |           |               |     |     |\n             * |           |               |  3  |  2  |\n             * |           |               |     |     |\n             * -------------               -------------\n             * ```\n             */\n            divideBox() {\n                const halfWidth = this.box.width / 2, halfHeight = this.box.height / 2;\n                // Top left\n                this.nodes[0] = new QuadTreeNode({\n                    left: this.box.left,\n                    top: this.box.top,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n                // Top right\n                this.nodes[1] = new QuadTreeNode({\n                    left: this.box.left + halfWidth,\n                    top: this.box.top,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n                // Bottom right\n                this.nodes[2] = new QuadTreeNode({\n                    left: this.box.left + halfWidth,\n                    top: this.box.top + halfHeight,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n                // Bottom left\n                this.nodes[3] = new QuadTreeNode({\n                    left: this.box.left,\n                    top: this.box.top + halfHeight,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n            }\n            /**\n             * Determine which of the quadrants should be used when placing node in\n             * the QuadTree. Returned index is always in range `< 0 , 3 >`.\n             * @private\n             */\n            getBoxPosition(point) {\n                const left = point.plotX < this.box.left + this.box.width / 2, top = point.plotY < this.box.top + this.box.height / 2;\n                let index;\n                if (left) {\n                    if (top) {\n                        // Top left\n                        index = 0;\n                    }\n                    else {\n                        // Bottom left\n                        index = 3;\n                    }\n                }\n                else {\n                    if (top) {\n                        // Top right\n                        index = 1;\n                    }\n                    else {\n                        // Bottom right\n                        index = 2;\n                    }\n                }\n                return index;\n            }\n            /**\n             * Insert recursively point(node) into the QuadTree. If the given\n             * quadrant is already occupied, divide it into smaller quadrants.\n             *\n             * @param {Highcharts.Point} point\n             *        Point/node to be inserted\n             * @param {number} depth\n             *        Max depth of the QuadTree\n             */\n            insert(point, depth) {\n                let newQuadTreeNode;\n                if (this.isInternal) {\n                    // Internal node:\n                    this.nodes[this.getBoxPosition(point)].insert(point, depth - 1);\n                }\n                else {\n                    this.isEmpty = false;\n                    if (!this.body) {\n                        // First body in a quadrant:\n                        this.isInternal = false;\n                        this.body = point;\n                    }\n                    else {\n                        if (depth) {\n                            // Every other body in a quadrant:\n                            this.isInternal = true;\n                            this.divideBox();\n                            // Reinsert main body only once:\n                            if (this.body !== true) {\n                                this.nodes[this.getBoxPosition(this.body)]\n                                    .insert(this.body, depth - 1);\n                                this.body = true;\n                            }\n                            // Add second body:\n                            this.nodes[this.getBoxPosition(point)]\n                                .insert(point, depth - 1);\n                        }\n                        else {\n                            // We are below max allowed depth. That means either:\n                            // - really huge number of points\n                            // - falling two points into exactly the same position\n                            // In this case, create another node in the QuadTree.\n                            //\n                            // Alternatively we could add some noise to the\n                            // position, but that could result in different\n                            // rendered chart in exporting.\n                            newQuadTreeNode = new QuadTreeNode({\n                                top: point.plotX || NaN,\n                                left: point.plotY || NaN,\n                                // Width/height below 1px\n                                width: 0.1,\n                                height: 0.1\n                            });\n                            newQuadTreeNode.body = point;\n                            newQuadTreeNode.isInternal = false;\n                            this.nodes.push(newQuadTreeNode);\n                        }\n                    }\n                }\n            }\n            /**\n             * Each quad node requires it's mass and center position. That mass and\n             * position is used to imitate real node in the layout by approximation.\n             */\n            updateMassAndCenter() {\n                let mass = 0, plotX = 0, plotY = 0;\n                if (this.isInternal) {\n                    // Calculate weightened mass of the quad node:\n                    for (const pointMass of this.nodes) {\n                        if (!pointMass.isEmpty) {\n                            mass += pointMass.mass;\n                            plotX += pointMass.plotX * pointMass.mass;\n                            plotY += pointMass.plotY * pointMass.mass;\n                        }\n                    }\n                    plotX /= mass;\n                    plotY /= mass;\n                }\n                else if (this.body) {\n                    // Just one node, use coordinates directly:\n                    mass = this.body.mass;\n                    plotX = this.body.plotX;\n                    plotY = this.body.plotY;\n                }\n                // Store details:\n                this.mass = mass;\n                this.plotX = plotX;\n                this.plotY = plotY;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return QuadTreeNode;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/QuadTree.js', [_modules['Series/Networkgraph/QuadTreeNode.js']], function (QuadTreeNode) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The QuadTree class. Used in Networkgraph chart as a base for Barnes-Hut\n         * approximation.\n         *\n         * @private\n         * @class\n         * @name Highcharts.QuadTree\n         *\n         * @param {number} x\n         *        Left position of the plotting area\n         * @param {number} y\n         *        Top position of the plotting area\n         * @param {number} width\n         *        Width of the plotting area\n         * @param {number} height\n         *        Height of the plotting area\n         */\n        class QuadTree {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(x, y, width, height) {\n                // Boundary rectangle:\n                this.box = {\n                    left: x,\n                    top: y,\n                    width: width,\n                    height: height\n                };\n                this.maxDepth = 25;\n                this.root = new QuadTreeNode(this.box);\n                this.root.isInternal = true;\n                this.root.isRoot = true;\n                this.root.divideBox();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Calculate mass of the each QuadNode in the tree.\n             */\n            calculateMassAndCenter() {\n                this.visitNodeRecursive(null, null, function (node) {\n                    node.updateMassAndCenter();\n                });\n            }\n            /**\n             * Insert nodes into the QuadTree\n             *\n             * @param {Array<Highcharts.Point>} points\n             *        Points as nodes\n             */\n            insertNodes(points) {\n                for (const point of points) {\n                    this.root.insert(point, this.maxDepth);\n                }\n            }\n            /**\n             * Depth first treversal (DFS). Using `before` and `after` callbacks,\n             * we can get two results: preorder and postorder traversals, reminder:\n             *\n             * ```\n             *     (a)\n             *     / \\\n             *   (b) (c)\n             *   / \\\n             * (d) (e)\n             * ```\n             *\n             * DFS (preorder): `a -> b -> d -> e -> c`\n             *\n             * DFS (postorder): `d -> e -> b -> c -> a`\n             *\n             * @param {Highcharts.QuadTreeNode|null} node\n             *        QuadTree node\n             * @param {Function} [beforeCallback]\n             *        Function to be called before visiting children nodes.\n             * @param {Function} [afterCallback]\n             *        Function to be called after visiting children nodes.\n             */\n            visitNodeRecursive(node, beforeCallback, afterCallback) {\n                let goFurther;\n                if (!node) {\n                    node = this.root;\n                }\n                if (node === this.root && beforeCallback) {\n                    goFurther = beforeCallback(node);\n                }\n                if (goFurther === false) {\n                    return;\n                }\n                for (const qtNode of node.nodes) {\n                    if (qtNode.isInternal) {\n                        if (beforeCallback) {\n                            goFurther = beforeCallback(qtNode);\n                        }\n                        if (goFurther === false) {\n                            continue;\n                        }\n                        this.visitNodeRecursive(qtNode, beforeCallback, afterCallback);\n                    }\n                    else if (qtNode.body) {\n                        if (beforeCallback) {\n                            beforeCallback(qtNode.body);\n                        }\n                    }\n                    if (afterCallback) {\n                        afterCallback(qtNode);\n                    }\n                }\n                if (node === this.root && afterCallback) {\n                    afterCallback(node);\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return QuadTree;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/VerletIntegration.js', [], function () {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Attractive force.\n         *\n         * In Verlet integration, force is applied on a node immediately to it's\n         * `plotX` and `plotY` position.\n         *\n         * @private\n         * @param {Highcharts.Point} link\n         *        Link that connects two nodes\n         * @param {number} force\n         *        Force calculated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distanceXY\n         *        Distance between two nodes e.g. `{x, y}`\n         */\n        function attractive(link, force, distanceXY) {\n            const massFactor = link.getMass(), translatedX = -distanceXY.x * force * this.diffTemperature, translatedY = -distanceXY.y * force * this.diffTemperature;\n            if (!link.fromNode.fixedPosition) {\n                link.fromNode.plotX -=\n                    translatedX * massFactor.fromNode / link.fromNode.degree;\n                link.fromNode.plotY -=\n                    translatedY * massFactor.fromNode / link.fromNode.degree;\n            }\n            if (!link.toNode.fixedPosition) {\n                link.toNode.plotX +=\n                    translatedX * massFactor.toNode / link.toNode.degree;\n                link.toNode.plotY +=\n                    translatedY * massFactor.toNode / link.toNode.degree;\n            }\n        }\n        /**\n         * Attractive force function. Can be replaced by API's\n         * `layoutAlgorithm.attractiveForce`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function attractiveForceFunction(d, k) {\n            // Used in API:\n            return (k - d) / d;\n        }\n        /**\n         * Barycenter force. Calculate and applys barycenter forces on the\n         * nodes. Making them closer to the center of their barycenter point.\n         *\n         * In Verlet integration, force is applied on a node immediately to it's\n         * `plotX` and `plotY` position.\n         *\n         * @private\n         */\n        function barycenter() {\n            const gravitationalConstant = this.options.gravitationalConstant || 0, xFactor = (this.barycenter.xFactor -\n                (this.box.left + this.box.width) / 2) * gravitationalConstant, yFactor = (this.barycenter.yFactor -\n                (this.box.top + this.box.height) / 2) * gravitationalConstant;\n            this.nodes.forEach(function (node) {\n                if (!node.fixedPosition) {\n                    node.plotX -=\n                        xFactor / node.mass / node.degree;\n                    node.plotY -=\n                        yFactor / node.mass / node.degree;\n                }\n            });\n        }\n        /**\n         * Estiamte the best possible distance between two nodes, making graph\n         * readable.\n         * @private\n         */\n        function getK(layout) {\n            return Math.pow(layout.box.width * layout.box.height / layout.nodes.length, 0.5);\n        }\n        /**\n         * Integration method.\n         *\n         * In Verlet integration, forces are applied on node immediately to it's\n         * `plotX` and `plotY` position.\n         *\n         * Verlet without velocity:\n         *\n         *    x(n+1) = 2 * x(n) - x(n-1) + A(T) * deltaT ^ 2\n         *\n         * where:\n         *     - x(n+1) - new position\n         *     - x(n) - current position\n         *     - x(n-1) - previous position\n         *\n         * Assuming A(t) = 0 (no acceleration) and (deltaT = 1) we get:\n         *\n         *     x(n+1) = x(n) + (x(n) - x(n-1))\n         *\n         * where:\n         *     - (x(n) - x(n-1)) - position change\n         *\n         * TO DO:\n         * Consider Verlet with velocity to support additional\n         * forces. Or even Time-Corrected Verlet by Jonathan\n         * \"lonesock\" Dummer\n         *\n         * @private\n         * @param {Highcharts.NetworkgraphLayout} layout layout object\n         * @param {Highcharts.Point} node node that should be translated\n         */\n        function integrate(layout, node) {\n            const friction = -layout.options.friction, maxSpeed = layout.options.maxSpeed, prevX = node.prevX, prevY = node.prevY, \n            // Apply friction:\n            frictionX = ((node.plotX + node.dispX -\n                prevX) * friction), frictionY = ((node.plotY + node.dispY -\n                prevY) * friction), abs = Math.abs, signX = abs(frictionX) / (frictionX || 1), // Need to deal with 0\n            signY = abs(frictionY) / (frictionY || 1), \n            // Apply max speed:\n            diffX = signX * Math.min(maxSpeed, Math.abs(frictionX)), diffY = signY * Math.min(maxSpeed, Math.abs(frictionY));\n            // Store for the next iteration:\n            node.prevX = node.plotX + node.dispX;\n            node.prevY = node.plotY + node.dispY;\n            // Update positions:\n            node.plotX += diffX;\n            node.plotY += diffY;\n            node.temperature = layout.vectorLength({\n                x: diffX,\n                y: diffY\n            });\n        }\n        /**\n         * Repulsive force.\n         *\n         * In Verlet integration, force is applied on a node immediately to it's\n         * `plotX` and `plotY` position.\n         *\n         * @private\n         * @param {Highcharts.Point} node\n         *        Node that should be translated by force.\n         * @param {number} force\n         *        Force calculated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distanceXY\n         *        Distance between two nodes e.g. `{x, y}`\n         */\n        function repulsive(node, force, distanceXY) {\n            const factor = force * this.diffTemperature / node.mass / node.degree;\n            if (!node.fixedPosition) {\n                node.plotX += distanceXY.x * factor;\n                node.plotY += distanceXY.y * factor;\n            }\n        }\n        /**\n         * Repulsive force function. Can be replaced by API's\n         * `layoutAlgorithm.repulsiveForce`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function repulsiveForceFunction(d, k) {\n            // Used in API:\n            return (k - d) / d * (k > d ? 1 : 0); // Force only for close nodes\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const VerletIntegration = {\n            attractive,\n            attractiveForceFunction,\n            barycenter,\n            getK,\n            integrate,\n            repulsive,\n            repulsiveForceFunction\n        };\n\n        return VerletIntegration;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/ReingoldFruchtermanLayout.js', [_modules['Series/Networkgraph/EulerIntegration.js'], _modules['Core/Globals.js'], _modules['Series/GraphLayoutComposition.js'], _modules['Series/Networkgraph/QuadTree.js'], _modules['Core/Utilities.js'], _modules['Series/Networkgraph/VerletIntegration.js']], function (EulerIntegration, H, GraphLayout, QuadTree, U, VerletIntegration) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { win } = H;\n        const { clamp, defined, isFunction, fireEvent, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Reingold-Fruchterman algorithm from\n         * \"Graph Drawing by Force-directed Placement\" paper.\n         * @private\n         */\n        class ReingoldFruchtermanLayout {\n            constructor() {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                this.box = {};\n                this.currentStep = 0;\n                this.initialRendering = true;\n                this.links = [];\n                this.nodes = [];\n                this.series = [];\n                this.simulation = false;\n            }\n            static compose(ChartClass) {\n                GraphLayout.compose(ChartClass);\n                GraphLayout.integrations.euler = EulerIntegration;\n                GraphLayout.integrations.verlet = VerletIntegration;\n                GraphLayout.layouts['reingold-fruchterman'] =\n                    ReingoldFruchtermanLayout;\n            }\n            init(options) {\n                this.options = options;\n                this.nodes = [];\n                this.links = [];\n                this.series = [];\n                this.box = {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0\n                };\n                this.setInitialRendering(true);\n                this.integration =\n                    GraphLayout.integrations[options.integration];\n                this.enableSimulation = options.enableSimulation;\n                this.attractiveForce = pick(options.attractiveForce, this.integration.attractiveForceFunction);\n                this.repulsiveForce = pick(options.repulsiveForce, this.integration.repulsiveForceFunction);\n                this.approximation = options.approximation;\n            }\n            updateSimulation(enable) {\n                this.enableSimulation = pick(enable, this.options.enableSimulation);\n            }\n            start() {\n                const layout = this, series = this.series, options = this.options;\n                layout.currentStep = 0;\n                layout.forces = series[0] && series[0].forces || [];\n                layout.chart = series[0] && series[0].chart;\n                if (layout.initialRendering) {\n                    layout.initPositions();\n                    // Render elements in initial positions:\n                    series.forEach(function (s) {\n                        s.finishedAnimating = true; // #13169\n                        s.render();\n                    });\n                }\n                layout.setK();\n                layout.resetSimulation(options);\n                if (layout.enableSimulation) {\n                    layout.step();\n                }\n            }\n            step() {\n                const anyLayout = this, allSeries = this.series;\n                // Algorithm:\n                this.currentStep++;\n                if (this.approximation === 'barnes-hut') {\n                    this.createQuadTree();\n                    this.quadTree.calculateMassAndCenter();\n                }\n                for (const forceName of this.forces || []) {\n                    anyLayout[forceName + 'Forces'](this.temperature);\n                }\n                // Limit to the plotting area and cool down:\n                this.applyLimits();\n                // Cool down the system:\n                this.temperature = this.coolDown(this.startTemperature, this.diffTemperature, this.currentStep);\n                this.prevSystemTemperature = this.systemTemperature;\n                this.systemTemperature = this.getSystemTemperature();\n                if (this.enableSimulation) {\n                    for (const series of allSeries) {\n                        // Chart could be destroyed during the simulation\n                        if (series.chart) {\n                            series.render();\n                        }\n                    }\n                    if (this.maxIterations-- &&\n                        isFinite(this.temperature) &&\n                        !this.isStable()) {\n                        if (this.simulation) {\n                            win.cancelAnimationFrame(this.simulation);\n                        }\n                        this.simulation = win.requestAnimationFrame(() => this.step());\n                    }\n                    else {\n                        this.simulation = false;\n                        this.series.forEach((s) => {\n                            fireEvent(s, 'afterSimulation');\n                        });\n                    }\n                }\n            }\n            stop() {\n                if (this.simulation) {\n                    win.cancelAnimationFrame(this.simulation);\n                }\n            }\n            setArea(x, y, w, h) {\n                this.box = {\n                    left: x,\n                    top: y,\n                    width: w,\n                    height: h\n                };\n            }\n            setK() {\n                // Optimal distance between nodes,\n                // available space around the node:\n                this.k = this.options.linkLength || this.integration.getK(this);\n            }\n            addElementsToCollection(elements, collection) {\n                for (const element of elements) {\n                    if (collection.indexOf(element) === -1) {\n                        collection.push(element);\n                    }\n                }\n            }\n            removeElementFromCollection(element, collection) {\n                const index = collection.indexOf(element);\n                if (index !== -1) {\n                    collection.splice(index, 1);\n                }\n            }\n            clear() {\n                this.nodes.length = 0;\n                this.links.length = 0;\n                this.series.length = 0;\n                this.resetSimulation();\n            }\n            resetSimulation() {\n                this.forcedStop = false;\n                this.systemTemperature = 0;\n                this.setMaxIterations();\n                this.setTemperature();\n                this.setDiffTemperature();\n            }\n            restartSimulation() {\n                if (!this.simulation) {\n                    // When dragging nodes, we don't need to calculate\n                    // initial positions and rendering nodes:\n                    this.setInitialRendering(false);\n                    // Start new simulation:\n                    if (!this.enableSimulation) {\n                        // Run only one iteration to speed things up:\n                        this.setMaxIterations(1);\n                    }\n                    else {\n                        this.start();\n                    }\n                    if (this.chart) {\n                        this.chart.redraw();\n                    }\n                    // Restore defaults:\n                    this.setInitialRendering(true);\n                }\n                else {\n                    // Extend current simulation:\n                    this.resetSimulation();\n                }\n            }\n            setMaxIterations(maxIterations) {\n                this.maxIterations = pick(maxIterations, this.options.maxIterations);\n            }\n            setTemperature() {\n                this.temperature = this.startTemperature =\n                    Math.sqrt(this.nodes.length);\n            }\n            setDiffTemperature() {\n                this.diffTemperature = this.startTemperature /\n                    (this.options.maxIterations + 1);\n            }\n            setInitialRendering(enable) {\n                this.initialRendering = enable;\n            }\n            createQuadTree() {\n                this.quadTree = new QuadTree(this.box.left, this.box.top, this.box.width, this.box.height);\n                this.quadTree.insertNodes(this.nodes);\n            }\n            initPositions() {\n                const initialPositions = this.options.initialPositions;\n                if (isFunction(initialPositions)) {\n                    initialPositions.call(this);\n                    for (const node of this.nodes) {\n                        if (!defined(node.prevX)) {\n                            node.prevX = node.plotX;\n                        }\n                        if (!defined(node.prevY)) {\n                            node.prevY = node.plotY;\n                        }\n                        node.dispX = 0;\n                        node.dispY = 0;\n                    }\n                }\n                else if (initialPositions === 'circle') {\n                    this.setCircularPositions();\n                }\n                else {\n                    this.setRandomPositions();\n                }\n            }\n            setCircularPositions() {\n                const box = this.box, nodes = this.nodes, nodesLength = nodes.length + 1, angle = 2 * Math.PI / nodesLength, rootNodes = nodes.filter(function (node) {\n                    return node.linksTo.length === 0;\n                }), visitedNodes = {}, radius = this.options.initialPositionRadius, addToNodes = (node) => {\n                    for (const link of node.linksFrom || []) {\n                        if (!visitedNodes[link.toNode.id]) {\n                            visitedNodes[link.toNode.id] = true;\n                            sortedNodes.push(link.toNode);\n                            addToNodes(link.toNode);\n                        }\n                    }\n                };\n                let sortedNodes = [];\n                // Start with identified root nodes an sort the nodes by their\n                // hierarchy. In trees, this ensures that branches don't cross\n                // eachother.\n                for (const rootNode of rootNodes) {\n                    sortedNodes.push(rootNode);\n                    addToNodes(rootNode);\n                }\n                // Cyclic tree, no root node found\n                if (!sortedNodes.length) {\n                    sortedNodes = nodes;\n                    // Dangling, cyclic trees\n                }\n                else {\n                    for (const node of nodes) {\n                        if (sortedNodes.indexOf(node) === -1) {\n                            sortedNodes.push(node);\n                        }\n                    }\n                }\n                let node;\n                // Initial positions are laid out along a small circle, appearing\n                // as a cluster in the middle\n                for (let i = 0, iEnd = sortedNodes.length; i < iEnd; ++i) {\n                    node = sortedNodes[i];\n                    node.plotX = node.prevX = pick(node.plotX, box.width / 2 + radius * Math.cos(i * angle));\n                    node.plotY = node.prevY = pick(node.plotY, box.height / 2 + radius * Math.sin(i * angle));\n                    node.dispX = 0;\n                    node.dispY = 0;\n                }\n            }\n            setRandomPositions() {\n                const box = this.box, nodes = this.nodes, nodesLength = nodes.length + 1, \n                /**\n                 * Return a repeatable, quasi-random number based on an integer\n                 * input. For the initial positions\n                 * @private\n                 */\n                unrandom = (n) => {\n                    let rand = n * n / Math.PI;\n                    rand = rand - Math.floor(rand);\n                    return rand;\n                };\n                let node;\n                // Initial positions:\n                for (let i = 0, iEnd = nodes.length; i < iEnd; ++i) {\n                    node = nodes[i];\n                    node.plotX = node.prevX = pick(node.plotX, box.width * unrandom(i));\n                    node.plotY = node.prevY = pick(node.plotY, box.height * unrandom(nodesLength + i));\n                    node.dispX = 0;\n                    node.dispY = 0;\n                }\n            }\n            force(name, ...args) {\n                this.integration[name].apply(this, args);\n            }\n            barycenterForces() {\n                this.getBarycenter();\n                this.force('barycenter');\n            }\n            getBarycenter() {\n                let systemMass = 0, cx = 0, cy = 0;\n                for (const node of this.nodes) {\n                    cx += node.plotX * node.mass;\n                    cy += node.plotY * node.mass;\n                    systemMass += node.mass;\n                }\n                this.barycenter = {\n                    x: cx,\n                    y: cy,\n                    xFactor: cx / systemMass,\n                    yFactor: cy / systemMass\n                };\n                return this.barycenter;\n            }\n            barnesHutApproximation(node, quadNode) {\n                const distanceXY = this.getDistXY(node, quadNode), distanceR = this.vectorLength(distanceXY);\n                let goDeeper, force;\n                if (node !== quadNode && distanceR !== 0) {\n                    if (quadNode.isInternal) {\n                        // Internal node:\n                        if (quadNode.boxSize / distanceR <\n                            this.options.theta &&\n                            distanceR !== 0) {\n                            // Treat as an external node:\n                            force = this.repulsiveForce(distanceR, this.k);\n                            this.force('repulsive', node, force * quadNode.mass, distanceXY, distanceR);\n                            goDeeper = false;\n                        }\n                        else {\n                            // Go deeper:\n                            goDeeper = true;\n                        }\n                    }\n                    else {\n                        // External node, direct force:\n                        force = this.repulsiveForce(distanceR, this.k);\n                        this.force('repulsive', node, force * quadNode.mass, distanceXY, distanceR);\n                    }\n                }\n                return goDeeper;\n            }\n            repulsiveForces() {\n                if (this.approximation === 'barnes-hut') {\n                    for (const node of this.nodes) {\n                        this.quadTree.visitNodeRecursive(null, (quadNode) => (this.barnesHutApproximation(node, quadNode)));\n                    }\n                }\n                else {\n                    let force, distanceR, distanceXY;\n                    for (const node of this.nodes) {\n                        for (const repNode of this.nodes) {\n                            if (\n                            // Node cannot repulse itself:\n                            node !== repNode &&\n                                // Only close nodes affect each other:\n                                // layout.getDistR(node, repNode) < 2 * k &&\n                                // Not dragged:\n                                !node.fixedPosition) {\n                                distanceXY = this.getDistXY(node, repNode);\n                                distanceR = this.vectorLength(distanceXY);\n                                if (distanceR !== 0) {\n                                    force = this.repulsiveForce(distanceR, this.k);\n                                    this.force('repulsive', node, force * repNode.mass, distanceXY, distanceR);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            attractiveForces() {\n                let distanceXY, distanceR, force;\n                for (const link of this.links) {\n                    if (link.fromNode && link.toNode) {\n                        distanceXY = this.getDistXY(link.fromNode, link.toNode);\n                        distanceR = this.vectorLength(distanceXY);\n                        if (distanceR !== 0) {\n                            force = this.attractiveForce(distanceR, this.k);\n                            this.force('attractive', link, force, distanceXY, distanceR);\n                        }\n                    }\n                }\n            }\n            applyLimits() {\n                const nodes = this.nodes;\n                for (const node of nodes) {\n                    if (node.fixedPosition) {\n                        return;\n                    }\n                    this.integration.integrate(this, node);\n                    this.applyLimitBox(node, this.box);\n                    // Reset displacement:\n                    node.dispX = 0;\n                    node.dispY = 0;\n                }\n            }\n            /**\n             * External box that nodes should fall. When hitting an edge, node\n             * should stop or bounce.\n             * @private\n             */\n            applyLimitBox(node, box) {\n                const radius = node.radius;\n                /*\n                TO DO: Consider elastic collision instead of stopping.\n                o' means end position when hitting plotting area edge:\n\n                - \"inelastic\":\n                o\n                    \\\n                ______\n                |  o'\n                |   \\\n                |    \\\n\n                - \"elastic\"/\"bounced\":\n                o\n                    \\\n                ______\n                |  ^\n                | / \\\n                |o'  \\\n\n                Euler sample:\n                if (plotX < 0) {\n                    plotX = 0;\n                    dispX *= -1;\n                }\n\n                if (plotX > box.width) {\n                    plotX = box.width;\n                    dispX *= -1;\n                }\n\n                */\n                // Limit X-coordinates:\n                node.plotX = clamp(node.plotX, box.left + radius, box.width - radius);\n                // Limit Y-coordinates:\n                node.plotY = clamp(node.plotY, box.top + radius, box.height - radius);\n            }\n            /**\n             * From \"A comparison of simulated annealing cooling strategies\" by\n             * Nourani and Andresen work.\n             * @private\n             */\n            coolDown(temperature, temperatureStep, currentStep) {\n                // Logarithmic:\n                /*\n                return Math.sqrt(this.nodes.length) -\n                    Math.log(\n                        currentStep * layout.diffTemperature\n                    );\n                */\n                // Exponential:\n                /*\n                let alpha = 0.1;\n                layout.temperature = Math.sqrt(layout.nodes.length) *\n                    Math.pow(alpha, layout.diffTemperature);\n                */\n                // Linear:\n                return temperature - temperatureStep * currentStep;\n            }\n            isStable() {\n                return Math.abs(this.systemTemperature -\n                    this.prevSystemTemperature) < 0.00001 || this.temperature <= 0;\n            }\n            getSystemTemperature() {\n                let value = 0;\n                for (const node of this.nodes) {\n                    value += node.temperature;\n                }\n                return value;\n            }\n            vectorLength(vector) {\n                return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n            }\n            getDistR(nodeA, nodeB) {\n                const distance = this.getDistXY(nodeA, nodeB);\n                return this.vectorLength(distance);\n            }\n            getDistXY(nodeA, nodeB) {\n                const xDist = nodeA.plotX - nodeB.plotX, yDist = nodeA.plotY - nodeB.plotY;\n                return {\n                    x: xDist,\n                    y: yDist,\n                    absX: Math.abs(xDist),\n                    absY: Math.abs(yDist)\n                };\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ReingoldFruchtermanLayout;\n    });\n    _registerModule(_modules, 'Series/SimulationSeriesUtilities.js', [_modules['Core/Utilities.js'], _modules['Core/Animation/AnimationUtilities.js']], function (U, A) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { merge, syncTimeout } = U;\n        const { animObject } = A;\n        /**\n         * Create a setTimeout for the first drawDataLabels()\n         * based on the dataLabels.animation.defer value\n         * for series which have enabled simulation.\n         * @private\n         */\n        function initDataLabelsDefer() {\n            const dlOptions = this.options.dataLabels;\n            // Method drawDataLabels() fires for the first time after\n            // dataLabels.animation.defer time unless\n            // the dataLabels.animation = false or dataLabels.defer = false\n            // or if the simulation is disabled\n            if (!dlOptions?.defer ||\n                !this.options.layoutAlgorithm?.enableSimulation) {\n                this.deferDataLabels = false;\n            }\n            else {\n                syncTimeout(() => {\n                    this.deferDataLabels = false;\n                }, dlOptions ? animObject(dlOptions.animation).defer : 0);\n            }\n        }\n        /**\n         * Initialize the SVG group for the DataLabels with correct opacities\n         * and correct styles so that the animation for the series that have\n         * simulation enabled works fine.\n         * @private\n         */\n        function initDataLabels() {\n            const series = this, dlOptions = series.options.dataLabels;\n            if (!series.dataLabelsGroup) {\n                const dataLabelsGroup = this.initDataLabelsGroup();\n                // Apply the dataLabels.style not only to the\n                // individual dataLabels but also to the entire group\n                if (!series.chart.styledMode && dlOptions?.style) {\n                    dataLabelsGroup.css(dlOptions.style);\n                }\n                // Initialize the opacity of the group to 0 (start of animation)\n                dataLabelsGroup.attr({ opacity: 0 });\n                if (series.visible) { // #2597, #3023, #3024\n                    dataLabelsGroup.show();\n                }\n                return dataLabelsGroup;\n            }\n            // Place it on first and subsequent (redraw) calls\n            series.dataLabelsGroup.attr(merge({ opacity: 1 }, this.getPlotBox('data-labels')));\n            return series.dataLabelsGroup;\n        }\n        const DataLabelsDeferUtils = {\n            initDataLabels,\n            initDataLabelsDefer\n        };\n\n        return DataLabelsDeferUtils;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/NetworkgraphSeries.js', [_modules['Series/DragNodesComposition.js'], _modules['Series/GraphLayoutComposition.js'], _modules['Core/Globals.js'], _modules['Series/Networkgraph/NetworkgraphPoint.js'], _modules['Series/Networkgraph/NetworkgraphSeriesDefaults.js'], _modules['Series/NodesComposition.js'], _modules['Series/Networkgraph/ReingoldFruchtermanLayout.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/SimulationSeriesUtilities.js'], _modules['Core/Utilities.js']], function (DragNodesComposition, GraphLayout, H, NetworkgraphPoint, NetworkgraphSeriesDefaults, NodesComposition, ReingoldFruchtermanLayout, SeriesRegistry, D, U) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { series: Series, seriesTypes: { column: { prototype: columnProto }, line: { prototype: lineProto } } } = SeriesRegistry;\n        const { initDataLabels, initDataLabelsDefer } = D;\n        const { addEvent, defined, extend, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.networkgraph\n         *\n         * @extends Highcharts.Series\n         */\n        class NetworkgraphSeries extends Series {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                this.deferDataLabels = true;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(ChartClass) {\n                DragNodesComposition.compose(ChartClass);\n                ReingoldFruchtermanLayout.compose(ChartClass);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Defer the layout.\n             * Each series first registers all nodes and links, then layout\n             * calculates all nodes positions and calls `series.render()` in every\n             * simulation step.\n             *\n             * Note:\n             * Animation is done through `requestAnimationFrame` directly, without\n             * `Highcharts.animate()` use.\n             * @private\n             */\n            deferLayout() {\n                const layoutOptions = this.options.layoutAlgorithm, chartOptions = this.chart.options.chart;\n                let layout, graphLayoutsStorage = this.chart.graphLayoutsStorage, graphLayoutsLookup = this.chart.graphLayoutsLookup;\n                if (!this.visible) {\n                    return;\n                }\n                if (!graphLayoutsStorage) {\n                    this.chart.graphLayoutsStorage = graphLayoutsStorage = {};\n                    this.chart.graphLayoutsLookup = graphLayoutsLookup = [];\n                }\n                layout = graphLayoutsStorage[layoutOptions.type];\n                if (!layout) {\n                    layoutOptions.enableSimulation =\n                        !defined(chartOptions.forExport) ?\n                            layoutOptions.enableSimulation :\n                            !chartOptions.forExport;\n                    graphLayoutsStorage[layoutOptions.type] = layout =\n                        new GraphLayout.layouts[layoutOptions.type]();\n                    layout.init(layoutOptions);\n                    graphLayoutsLookup.splice(layout.index, 0, layout);\n                }\n                this.layout = layout;\n                layout.setArea(0, 0, this.chart.plotWidth, this.chart.plotHeight);\n                layout.addElementsToCollection([this], layout.series);\n                layout.addElementsToCollection(this.nodes, layout.nodes);\n                layout.addElementsToCollection(this.points, layout.links);\n            }\n            /**\n             * @private\n             */\n            destroy() {\n                if (this.layout) {\n                    this.layout.removeElementFromCollection(this, this.layout.series);\n                }\n                NodesComposition.destroy.call(this);\n            }\n            /**\n             * Networkgraph has two separate collections of nodes and lines, render\n             * dataLabels for both sets:\n             * @private\n             */\n            drawDataLabels() {\n                // We defer drawing the dataLabels\n                // until dataLabels.animation.defer time passes\n                if (this.deferDataLabels) {\n                    return;\n                }\n                const dlOptions = this.options.dataLabels;\n                let textPath;\n                if (dlOptions?.textPath) {\n                    textPath = dlOptions.textPath;\n                }\n                // Render node labels:\n                Series.prototype.drawDataLabels.call(this, this.nodes);\n                // Render link labels:\n                if (dlOptions?.linkTextPath) {\n                    // If linkTextPath is set, render link labels with linkTextPath\n                    dlOptions.textPath = dlOptions.linkTextPath;\n                }\n                Series.prototype.drawDataLabels.call(this, this.data);\n                // Go back to textPath for nodes\n                if (dlOptions?.textPath) {\n                    dlOptions.textPath = textPath;\n                }\n            }\n            /**\n             * Extend generatePoints by adding the nodes, which are Point objects\n             * but pushed to the this.nodes array.\n             * @private\n             */\n            generatePoints() {\n                let node, i;\n                NodesComposition.generatePoints.apply(this, arguments);\n                // In networkgraph, it's fine to define standalone nodes, create\n                // them:\n                if (this.options.nodes) {\n                    this.options.nodes.forEach(function (nodeOptions) {\n                        if (!this.nodeLookup[nodeOptions.id]) {\n                            this.nodeLookup[nodeOptions.id] =\n                                this.createNode(nodeOptions.id);\n                        }\n                    }, this);\n                }\n                for (i = this.nodes.length - 1; i >= 0; i--) {\n                    node = this.nodes[i];\n                    node.degree = node.getDegree();\n                    node.radius = pick(node.marker && node.marker.radius, this.options.marker && this.options.marker.radius, 0);\n                    // If node exists, but it's not available in nodeLookup,\n                    // then it's leftover from previous runs (e.g. setData)\n                    if (!this.nodeLookup[node.id]) {\n                        node.remove();\n                    }\n                }\n                this.data.forEach(function (link) {\n                    link.formatPrefix = 'link';\n                });\n                this.indexateNodes();\n            }\n            /**\n             * In networkgraph, series.points refers to links,\n             * but series.nodes refers to actual points.\n             * @private\n             */\n            getPointsCollection() {\n                return this.nodes || [];\n            }\n            /**\n             * Set index for each node. Required for proper `node.update()`.\n             * Note that links are indexated out of the box in `generatePoints()`.\n             *\n             * @private\n             */\n            indexateNodes() {\n                this.nodes.forEach(function (node, index) {\n                    node.index = index;\n                });\n            }\n            /**\n             * Extend init with base event, which should stop simulation during\n             * update. After data is updated, `chart.render` resumes the simulation.\n             * @private\n             */\n            init(chart, options) {\n                super.init(chart, options);\n                initDataLabelsDefer.call(this);\n                addEvent(this, 'updatedData', () => {\n                    if (this.layout) {\n                        this.layout.stop();\n                    }\n                });\n                addEvent(this, 'afterUpdate', () => {\n                    this.nodes.forEach((node) => {\n                        if (node && node.series) {\n                            node.resolveColor();\n                        }\n                    });\n                });\n                // If the dataLabels.animation.defer time is longer than\n                // the time it takes for the layout to become stable then\n                // drawDataLabels would never be called (that's why we force it here)\n                addEvent(this, 'afterSimulation', function () {\n                    this.deferDataLabels = false;\n                    this.drawDataLabels();\n                });\n                return this;\n            }\n            /**\n             * Extend the default marker attribs by using a non-rounded X position,\n             * otherwise the nodes will jump from pixel to pixel which looks a bit\n             * jaggy when approaching equilibrium.\n             * @private\n             */\n            markerAttribs(point, state) {\n                const attribs = Series.prototype.markerAttribs.call(this, point, state);\n                // Series.render() is called before initial positions are set:\n                if (!defined(point.plotY)) {\n                    attribs.y = 0;\n                }\n                attribs.x = (point.plotX || 0) - (attribs.width || 0) / 2;\n                return attribs;\n            }\n            /**\n             * Return the presentational attributes.\n             * @private\n             */\n            pointAttribs(point, state) {\n                // By default, only `selected` state is passed on\n                const pointState = state || point && point.state || 'normal', stateOptions = this.options.states[pointState];\n                let attribs = Series.prototype.pointAttribs.call(this, point, pointState);\n                if (point && !point.isNode) {\n                    attribs = point.getLinkAttributes();\n                    // For link, get prefixed names:\n                    if (stateOptions) {\n                        attribs = {\n                            // TO DO: API?\n                            stroke: stateOptions.linkColor || attribs.stroke,\n                            dashstyle: (stateOptions.linkDashStyle || attribs.dashstyle),\n                            opacity: pick(stateOptions.linkOpacity, attribs.opacity),\n                            'stroke-width': stateOptions.linkColor ||\n                                attribs['stroke-width']\n                        };\n                    }\n                }\n                return attribs;\n            }\n            /**\n             * Extend the render function to also render this.nodes together with\n             * the points.\n             * @private\n             */\n            render() {\n                const series = this, points = series.points, hoverPoint = series.chart.hoverPoint, dataLabels = [];\n                // Render markers:\n                series.points = series.nodes;\n                lineProto.render.call(this);\n                series.points = points;\n                points.forEach(function (point) {\n                    if (point.fromNode && point.toNode) {\n                        point.renderLink();\n                        point.redrawLink();\n                    }\n                });\n                if (hoverPoint && hoverPoint.series === series) {\n                    series.redrawHalo(hoverPoint);\n                }\n                if (series.chart.hasRendered &&\n                    !series.options.dataLabels.allowOverlap) {\n                    series.nodes.concat(series.points).forEach(function (node) {\n                        if (node.dataLabel) {\n                            dataLabels.push(node.dataLabel);\n                        }\n                    });\n                    series.chart.hideOverlappingLabels(dataLabels);\n                }\n            }\n            /**\n             * When state should be passed down to all points, concat nodes and\n             * links and apply this state to all of them.\n             * @private\n             */\n            setState(state, inherit) {\n                if (inherit) {\n                    this.points = this.nodes.concat(this.data);\n                    Series.prototype.setState.apply(this, arguments);\n                    this.points = this.data;\n                }\n                else {\n                    Series.prototype.setState.apply(this, arguments);\n                }\n                // If simulation is done, re-render points with new states:\n                if (!this.layout.simulation && !state) {\n                    this.render();\n                }\n            }\n            /**\n             * Run pre-translation and register nodes&links to the deffered layout.\n             * @private\n             */\n            translate() {\n                if (!this.processedXData) {\n                    this.processData();\n                }\n                this.generatePoints();\n                this.deferLayout();\n                this.nodes.forEach(function (node) {\n                    // Draw the links from this node\n                    node.isInside = true;\n                    node.linksFrom.forEach(function (point) {\n                        point.shapeType = 'path';\n                        // Pass test in drawPoints\n                        point.y = 1;\n                    });\n                });\n            }\n        }\n        NetworkgraphSeries.defaultOptions = merge(Series.defaultOptions, NetworkgraphSeriesDefaults);\n        extend(NetworkgraphSeries.prototype, {\n            pointClass: NetworkgraphPoint,\n            animate: void 0,\n            directTouch: true,\n            drawGraph: void 0,\n            forces: ['barycenter', 'repulsive', 'attractive'],\n            hasDraggableNodes: true,\n            isCartesian: false,\n            noSharedTooltip: true,\n            pointArrayMap: ['from', 'to'],\n            requireSorting: false,\n            trackerGroups: ['group', 'markerGroup', 'dataLabelsGroup'],\n            initDataLabels: initDataLabels,\n            buildKDTree: noop,\n            createNode: NodesComposition.createNode,\n            drawTracker: columnProto.drawTracker,\n            onMouseDown: DragNodesComposition.onMouseDown,\n            onMouseMove: DragNodesComposition.onMouseMove,\n            onMouseUp: DragNodesComposition.onMouseUp,\n            redrawHalo: DragNodesComposition.redrawHalo\n        });\n        SeriesRegistry.registerSeriesType('networkgraph', NetworkgraphSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Formatter callback function.\n         *\n         * @callback Highcharts.SeriesNetworkgraphDataLabelsFormatterCallbackFunction\n         *\n         * @param {Highcharts.SeriesNetworkgraphDataLabelsFormatterContextObject|Highcharts.PointLabelObject} this\n         *        Data label context to format\n         *\n         * @return {string}\n         *         Formatted data label text\n         */\n        /**\n         * Context for the formatter function.\n         *\n         * @interface Highcharts.SeriesNetworkgraphDataLabelsFormatterContextObject\n         * @extends Highcharts.PointLabelObject\n         * @since 7.0.0\n         */ /**\n        * The color of the node.\n        * @name Highcharts.SeriesNetworkgraphDataLabelsFormatterContextObject#color\n        * @type {Highcharts.ColorString}\n        * @since 7.0.0\n        */ /**\n        * The point (node) object. The node name, if defined, is available through\n        * `this.point.name`. Arrays: `this.point.linksFrom` and `this.point.linksTo`\n        * contains all nodes connected to this point.\n        * @name Highcharts.SeriesNetworkgraphDataLabelsFormatterContextObject#point\n        * @type {Highcharts.Point}\n        * @since 7.0.0\n        */ /**\n        * The ID of the node.\n        * @name Highcharts.SeriesNetworkgraphDataLabelsFormatterContextObject#key\n        * @type {string}\n        * @since 7.0.0\n        */\n        /**\n         * Callback that fires after the end of Networkgraph series simulation\n         * when the layout is stable.\n         *\n         * @callback Highcharts.NetworkgraphAfterSimulationCallbackFunction\n         *\n         * @param {Highcharts.Series} this\n         *        The series where the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        ''; // Detach doclets above\n\n        return NetworkgraphSeries;\n    });\n    _registerModule(_modules, 'masters/modules/networkgraph.src.js', [_modules['Core/Globals.js'], _modules['Series/Networkgraph/NetworkgraphSeries.js']], function (Highcharts, NetworkgraphSeries) {\n\n        const G = Highcharts;\n        NetworkgraphSeries.compose(G.Chart);\n\n        return Highcharts;\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","H","U","composed","addEvent","pushUnique","onChartLoad","mousedownUnbinder","mousemoveUnbinder","mouseupUnbinder","chart","container","event","point","hoverPoint","series","hasDraggableNodes","options","draggable","onMouseDown","e","onMouseMove","ownerDocument","onMouseUp","compose","ChartClass","normalizedEvent","pointer","normalize","fixedPosition","chartX","chartY","plotX","plotY","inDragMode","newPlotX","newPlotY","diffX","diffY","graphLayoutsLookup","Math","abs","isInsidePlot","hasDragged","redrawHalo","forEach","layout","restartSimulation","enableSimulation","start","redraw","fixedDraggable","halo","attr","d","haloPath","states","hover","size","A","setAnimation","onChartAfterPrint","updateSimulation","onChartBeforePrint","onChartPredraw","stop","onChartRender","systemsStable","afterRender","layoutStep","maxIterations","isFinite","temperature","isStable","beforeStep","step","render","integrations","layouts","SeriesRegistry","NodesComposition","prototype","seriesProto","pointClass","pointProto","defined","extend","find","merge","pick","destroy","data","concat","points","nodes","arguments","setData","node","length","setNodeState","state","others","isNode","linksTo","linksFrom","fromNode","toNode","linkOrNode","setState","graphic","updateNode","animation","runEvent","dataLength","linkConfig","index","update","call","nodeIndex","reduce","prevIndex","n","id","nodeConfig","push","PointClass","SeriesClass","createNode","findById","newNode","className","y","getSum","sumTo","sumFrom","link","weight","max","offset","coll","i","hasShape","outgoing","formatPrefix","name","mass","marker","radius","generatePoints","nodeLookup","colorCounter","level","from","styledMode","colorIndex","color","to","Point","css","NetworkgraphPoint","destroyElements","removeElementFromCollection","getDegree","deg","getLinkAttributes","linkOptions","pointOptions","width","stroke","dashstyle","dashStyle","opacity","getLinkPath","left","right","getMass","m1","m2","sum","constructor","x","cursor","isValid","redrawLink","attribs","shapeArgs","pointAttribs","dataLabels","label","animate","end","remove","nodesOptions","linkFromTo","indexOf","splice","removePoint","slice","isDirty","isDirtyData","renderLink","renderer","addClass","getClassName","add","group","stickyTracking","inactiveOtherPoints","enabled","inactive","duration","linkOpacity","formatter","key","linkFormatter","linkTextPath","textPath","style","transition","defer","layoutAlgorithm","initialPositions","initialPositionRadius","theta","maxSpeed","approximation","type","integration","gravitationalConstant","friction","showInLegend","attractive","force","distanceXY","distanceR","massFactor","translatedX","translatedY","dispX","degree","dispY","attractiveForceFunction","k","barycenter","xFactor","yFactor","phi","getK","pow","box","height","integrate","vectorLength","min","repulsive","repulsiveForceFunction","QuadTreeNode","body","isEmpty","isInternal","boxSize","divideBox","halfWidth","halfHeight","top","getBoxPosition","insert","depth","newQuadTreeNode","NaN","updateMassAndCenter","pointMass","maxDepth","root","isRoot","calculateMassAndCenter","visitNodeRecursive","insertNodes","beforeCallback","afterCallback","goFurther","qtNode","diffTemperature","prevX","prevY","frictionX","frictionY","signX","signY","factor","EulerIntegration","GraphLayout","QuadTree","VerletIntegration","win","clamp","isFunction","fireEvent","ReingoldFruchtermanLayout","currentStep","initialRendering","links","simulation","euler","verlet","init","setInitialRendering","attractiveForce","repulsiveForce","enable","forces","initPositions","s","finishedAnimating","setK","resetSimulation","allSeries","forceName","createQuadTree","quadTree","anyLayout","applyLimits","coolDown","startTemperature","prevSystemTemperature","systemTemperature","getSystemTemperature","cancelAnimationFrame","requestAnimationFrame","setArea","w","h","linkLength","addElementsToCollection","elements","collection","element","clear","forcedStop","setMaxIterations","setTemperature","setDiffTemperature","sqrt","setCircularPositions","setRandomPositions","angle","PI","rootNodes","filter","visitedNodes","addToNodes","sortedNodes","rootNode","iEnd","cos","sin","nodesLength","unrandom","rand","floor","barycenterForces","getBarycenter","systemMass","cx","cy","barnesHutApproximation","quadNode","goDeeper","getDistXY","repulsiveForces","repNode","attractiveForces","applyLimitBox","temperatureStep","value","vector","getDistR","nodeA","nodeB","distance","xDist","yDist","absX","absY","syncTimeout","animObject","initDataLabels","dlOptions","dataLabelsGroup","initDataLabelsGroup","visible","show","getPlotBox","initDataLabelsDefer","deferDataLabels","DragNodesComposition","NetworkgraphSeriesDefaults","D","noop","Series","seriesTypes","column","columnProto","line","lineProto","NetworkgraphSeries","deferLayout","layoutOptions","chartOptions","graphLayoutsStorage","forExport","plotWidth","plotHeight","drawDataLabels","nodeOptions","indexateNodes","getPointsCollection","resolveColor","markerAttribs","pointState","stateOptions","linkColor","linkDashStyle","hasRendered","allowOverlap","dataLabel","hideOverlappingLabels","inherit","translate","processedXData","processData","isInside","shapeType","defaultOptions","directTouch","drawGraph","isCartesian","noSharedTooltip","pointArrayMap","requireSorting","trackerGroups","buildKDTree","drawTracker","registerSeriesType","G","Chart"],"mappings":"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"}