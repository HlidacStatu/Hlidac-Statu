{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.4.1 (2024-04-04)\n *\n * Highcharts Stock as a plugin for Highcharts\n *\n * (c) 2010-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/stock', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/DataModifyComposition.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Series/Point.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (Axis, Point, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { tooltipFormatter: pointTooltipFormatter } = Point.prototype;\n        const { addEvent, arrayMax, arrayMin, correctFloat, defined, isArray, isNumber, isString, pick } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var DataModifyComposition;\n        (function (DataModifyComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Extends the series, axis and point classes with\n             * compare and cumulative support.\n             *\n             * @private\n             *\n             * @param SeriesClass\n             * Series class to use.\n             *\n             * @param AxisClass\n             * Axis class to extend.\n             *\n             * @param PointClass\n             * Point class to use.\n             */\n            function compose(SeriesClass, AxisClass, PointClass) {\n                const axisProto = AxisClass.prototype, pointProto = PointClass.prototype, seriesProto = SeriesClass.prototype;\n                if (!seriesProto.setCompare) {\n                    seriesProto.setCompare = seriesSetCompare;\n                    seriesProto.setCumulative = seriesSetCumulative;\n                    addEvent(SeriesClass, 'afterInit', afterInit);\n                    addEvent(SeriesClass, 'afterGetExtremes', afterGetExtremes);\n                    addEvent(SeriesClass, 'afterProcessData', afterProcessData);\n                }\n                if (!axisProto.setCompare) {\n                    axisProto.setCompare = axisSetCompare;\n                    axisProto.setModifier = setModifier;\n                    axisProto.setCumulative = axisSetCumulative;\n                    pointProto.tooltipFormatter = tooltipFormatter;\n                }\n                return SeriesClass;\n            }\n            DataModifyComposition.compose = compose;\n            /* ********************************************************************** *\n             *  Start shared compare and cumulative logic                             *\n             * ********************************************************************** */\n            /**\n             * Shared code for the axis.setCompare() and the axis.setCumulative()\n             * methods. Inits the 'compare' or the 'cumulative' mode.\n             * @private\n             */\n            function setModifier(mode, modeState, redraw) {\n                if (!this.isXAxis) {\n                    this.series.forEach(function (series) {\n                        if (mode === 'compare' &&\n                            typeof modeState !== 'boolean') {\n                            series.setCompare(modeState, false);\n                        }\n                        else if (mode === 'cumulative' &&\n                            !isString(modeState)) {\n                            series.setCumulative(modeState, false);\n                        }\n                    });\n                    if (pick(redraw, true)) {\n                        this.chart.redraw();\n                    }\n                }\n            }\n            /**\n             * Extend the tooltip formatter by adding support for the point.change\n             * variable as well as the changeDecimals option.\n             *\n             * @ignore\n             * @function Highcharts.Point#tooltipFormatter\n             *\n             * @param {string} pointFormat\n             */\n            function tooltipFormatter(pointFormat) {\n                const point = this, { numberFormatter } = point.series.chart, replace = function (value) {\n                    pointFormat = pointFormat.replace('{point.' + value + '}', (point[value] > 0 && value === 'change' ? '+' : '') +\n                        numberFormatter(point[value], pick(point.series.tooltipOptions.changeDecimals, 2)));\n                };\n                if (defined(point.change)) {\n                    replace('change');\n                }\n                if (defined(point.cumulativeSum)) {\n                    replace('cumulativeSum');\n                }\n                return pointTooltipFormatter.apply(this, [pointFormat]);\n            }\n            /**\n             * Extend series.init by adding a methods to modify the y values used\n             * for plotting on the y axis. For compare mode, this method is called both\n             * from the axis when finding dataMin and dataMax,\n             * and from the series.translate method.\n             *\n             * @ignore\n             * @function Highcharts.Series#init\n             */\n            function afterInit() {\n                const compare = this.options.compare;\n                let dataModify;\n                if (compare === 'percent' ||\n                    compare === 'value' ||\n                    this.options.cumulative) {\n                    dataModify = new Additions(this);\n                    if (compare === 'percent' || compare === 'value') {\n                        // Set comparison mode\n                        dataModify.initCompare(compare);\n                    }\n                    else {\n                        // Set Cumulative Sum mode\n                        dataModify.initCumulative();\n                    }\n                }\n                this.dataModify = dataModify;\n            }\n            /**\n             * Adjust the extremes (compare and cumulative modify the data).\n             * @private\n             */\n            function afterGetExtremes(e) {\n                const dataExtremes = e.dataExtremes, activeYData = dataExtremes.activeYData;\n                if (this.dataModify && dataExtremes) {\n                    let extremes;\n                    if (this.options.compare) {\n                        extremes = [\n                            this.dataModify.modifyValue(dataExtremes.dataMin),\n                            this.dataModify.modifyValue(dataExtremes.dataMax)\n                        ];\n                    }\n                    else if (this.options.cumulative &&\n                        isArray(activeYData) &&\n                        // If only one y visible, sum doesn't change\n                        // so no need to change extremes\n                        activeYData.length >= 2) {\n                        extremes = Additions.getCumulativeExtremes(activeYData);\n                    }\n                    if (extremes) {\n                        dataExtremes.dataMin = arrayMin(extremes);\n                        dataExtremes.dataMax = arrayMax(extremes);\n                    }\n                }\n            }\n            /* ********************************************************************** *\n             *  End shared compare and cumulative logic                               *\n             * ********************************************************************** */\n            /* ********************************************************************** *\n             *  Start value compare logic                                             *\n             * ********************************************************************** */\n            /**\n             * Highcharts Stock only. Set the\n             * [compare](https://api.highcharts.com/highstock/plotOptions.series.compare)\n             * mode of the series after render time.\n             * In most cases it is more useful running\n             * {@link Axis#setCompare} on the X axis to update all its series.\n             *\n             * @function Highcharts.Series#setCompare\n             *\n             * @param {string|null} [compare]\n             *        Can be one of `undefined` (default), `null`, `\"percent\"`\n             *        or `\"value\"`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function seriesSetCompare(compare, redraw) {\n                // Survive to export, #5485 (and for options generally)\n                this.options.compare = this.userOptions.compare = compare;\n                // Fire series.init() that will set or delete series.dataModify\n                this.update({}, pick(redraw, true));\n                if (this.dataModify && (compare === 'value' || compare === 'percent')) {\n                    this.dataModify.initCompare(compare);\n                }\n                else {\n                    // When disabling, clear the points\n                    this.points.forEach((point) => {\n                        delete point.change;\n                    });\n                }\n            }\n            /**\n             * Extend series.processData by finding the first y value in the plot area,\n             * used for comparing the following values\n             *\n             * @ignore\n             * @function Highcharts.Series#processData\n             */\n            function afterProcessData() {\n                const series = this;\n                if (series.xAxis && // Not pies\n                    series.processedYData &&\n                    series.dataModify) {\n                    const processedXData = series.processedXData, processedYData = series.processedYData, length = processedYData.length, compareStart = series.options.compareStart === true ? 0 : 1;\n                    let keyIndex = -1, i;\n                    // For series with more than one value (range, OHLC etc), compare\n                    // against close or the pointValKey (#4922, #3112, #9854)\n                    if (series.pointArrayMap) {\n                        keyIndex = series.pointArrayMap.indexOf(series.options.pointValKey || series.pointValKey || 'y');\n                    }\n                    // Find the first value for comparison\n                    for (i = 0; i < length - compareStart; i++) {\n                        const compareValue = processedYData[i] && keyIndex > -1 ?\n                            processedYData[i][keyIndex] : processedYData[i];\n                        if (isNumber(compareValue) &&\n                            compareValue !== 0 &&\n                            processedXData[i + compareStart] >= (series.xAxis.min || 0)) {\n                            series.dataModify.compareValue = compareValue;\n                            break;\n                        }\n                    }\n                }\n            }\n            /**\n             * Highcharts Stock only. Set the compare mode on all series\n             * belonging to a Y axis.\n             *\n             * @see [plotOptions.series.compare](https://api.highcharts.com/highstock/plotOptions.series.compare)\n             *\n             * @sample stock/members/axis-setcompare/\n             *         Set compare\n             *\n             * @function Highcharts.Axis#setCompare\n             *\n             * @param {string|null} [compare]\n             *        The compare mode. Can be one of `undefined` (default), `null`,\n             *        `\"value\"` or `\"percent\"`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function axisSetCompare(compare, redraw) {\n                this.setModifier('compare', compare, redraw);\n            }\n            /* ********************************************************************** *\n             *  End value compare logic                                               *\n             * ********************************************************************** */\n            /* ********************************************************************** *\n             *  Start Cumulative Sum logic, author: Rafal Sebestjanski                *\n             * ********************************************************************** */\n            /**\n             * Highcharts Stock only. Set the\n             * [cumulative](https://api.highcharts.com/highstock/plotOptions.series.cumulative)\n             * mode of the series after render time.\n             * In most cases it is more useful running\n             * {@link Axis#setCumulative} on the Y axis to update all its series.\n             *\n             * @function Highcharts.Series#setCumulative\n             *\n             * @param {boolean} [cumulative=false]\n             *        Either enable or disable Cumulative Sum mode.\n             *        Can be one of `false` (default) or `true`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function seriesSetCumulative(cumulative, redraw) {\n                // Set default value to false\n                cumulative = pick(cumulative, false);\n                // Survive to export, #5485 (and for options generally)\n                this.options.cumulative = this.userOptions.cumulative = cumulative;\n                // Fire series.init() that will set or delete series.dataModify\n                this.update({}, pick(redraw, true));\n                // If should, turn on the Cumulative Sum mode\n                if (this.dataModify) {\n                    this.dataModify.initCumulative();\n                }\n                else {\n                    // When disabling, clear the points\n                    this.points.forEach((point) => {\n                        delete point.cumulativeSum;\n                    });\n                }\n            }\n            /**\n             * Highcharts Stock only. Set the cumulative mode on all series\n             * belonging to a Y axis.\n             *\n             * @see [plotOptions.series.cumulative](https://api.highcharts.com/highstock/plotOptions.series.cumulative)\n             *\n             * @sample stock/members/axis-setcumulative/\n             *         Set cumulative\n             *\n             * @function Highcharts.Axis#setCumulative\n             *\n             * @param {boolean} [cumulative]\n             *        Whether to disable or enable the cumulative mode.\n             *        Can be one of `undefined` (default, treated as `false`),\n             *        `false` or `true`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function axisSetCumulative(cumulative, redraw) {\n                this.setModifier('cumulative', cumulative, redraw);\n            }\n            /* *\n             *\n             *  Classes\n             *\n             * */\n            /**\n             * @private\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                constructor(series) {\n                    this.series = series;\n                }\n                /* *\n                *\n                *  Functions\n                *\n                * */\n                /**\n                 * @private\n                 */\n                modifyValue() {\n                    return 0;\n                }\n                /**\n                 * @ignore\n                 * @function Highcharts.Series#getCumulativeExtremes\n                 *\n                 * @param {Array} [activeYData]\n                 *        An array cointaining all the points' y values\n                 *        in a visible range.\n                 */\n                static getCumulativeExtremes(activeYData) {\n                    let cumulativeDataMin = Infinity, cumulativeDataMax = -Infinity;\n                    activeYData.reduce((prev, cur) => {\n                        const sum = prev + cur;\n                        cumulativeDataMin = Math.min(cumulativeDataMin, sum, prev);\n                        cumulativeDataMax = Math.max(cumulativeDataMax, sum, prev);\n                        return sum;\n                    });\n                    return [cumulativeDataMin, cumulativeDataMax];\n                }\n                /**\n                 * @ignore\n                 * @function Highcharts.Series#initCompare\n                 *\n                 * @param {string} [compare]\n                 *        Can be one of `\"percent\"` or `\"value\"`.\n                 */\n                initCompare(compare) {\n                    // Set the modifyValue method\n                    this.modifyValue = function (value, index) {\n                        if (value === null) {\n                            value = 0;\n                        }\n                        const compareValue = this.compareValue;\n                        if (typeof value !== 'undefined' &&\n                            typeof compareValue !== 'undefined') { // #2601, #5814\n                            // Get the modified value\n                            if (compare === 'value') {\n                                value -= compareValue;\n                                // Compare percent\n                            }\n                            else {\n                                const compareBase = this.series.options.compareBase;\n                                value = 100 * (value / compareValue) -\n                                    (compareBase === 100 ? 0 : 100);\n                            }\n                            // Record for tooltip etc.\n                            if (typeof index !== 'undefined') {\n                                const point = this.series.points[index];\n                                if (point) {\n                                    point.change = value;\n                                }\n                            }\n                            return value;\n                        }\n                        return 0;\n                    };\n                }\n                /**\n                 * @ignore\n                 * @function Highcharts.Series#initCumulative\n                 */\n                initCumulative() {\n                    // Set the modifyValue method\n                    this.modifyValue = function (value, index) {\n                        if (value === null) {\n                            value = 0;\n                        }\n                        if (value !== void 0 && index !== void 0) {\n                            const prevPoint = index > 0 ?\n                                this.series.points[index - 1] : null;\n                            // Get the modified value\n                            if (prevPoint && prevPoint.cumulativeSum) {\n                                value = correctFloat(prevPoint.cumulativeSum + value);\n                            }\n                            // Record for tooltip etc.\n                            const point = this.series.points[index];\n                            if (point) {\n                                point.cumulativeSum = value;\n                            }\n                            return value;\n                        }\n                        return 0;\n                    };\n                }\n            }\n            DataModifyComposition.Additions = Additions;\n        })(DataModifyComposition || (DataModifyComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Compare the values of the series against the first non-null, non-\n         * zero value in the visible range. The y axis will show percentage\n         * or absolute change depending on whether `compare` is set to `\"percent\"`\n         * or `\"value\"`. When this is applied to multiple series, it allows\n         * comparing the development of the series against each other. Adds\n         * a `change` field to every point object.\n         *\n         * @see [compareBase](#plotOptions.series.compareBase)\n         * @see [Axis.setCompare()](/class-reference/Highcharts.Axis#setCompare)\n         * @see [Series.setCompare()](/class-reference/Highcharts.Series#setCompare)\n         *\n         * @sample {highstock} stock/plotoptions/series-compare-percent/\n         *         Percent\n         * @sample {highstock} stock/plotoptions/series-compare-value/\n         *         Value\n         *\n         * @type      {string}\n         * @since     1.0.1\n         * @product   highstock\n         * @validvalue [\"percent\", \"value\"]\n         * @apioption plotOptions.series.compare\n         */\n        /**\n         * Defines if comparison should start from the first point within the visible\n         * range or should start from the first point **before** the range.\n         *\n         * In other words, this flag determines if first point within the visible range\n         * will have 0% (`compareStart=true`) or should have been already calculated\n         * according to the previous point (`compareStart=false`).\n         *\n         * @sample {highstock} stock/plotoptions/series-comparestart/\n         *         Calculate compare within visible range\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     6.0.0\n         * @product   highstock\n         * @apioption plotOptions.series.compareStart\n         */\n        /**\n         * When [compare](#plotOptions.series.compare) is `percent`, this option\n         * dictates whether to use 0 or 100 as the base of comparison.\n         *\n         * @sample {highstock} stock/plotoptions/series-comparebase/\n         *         Compare base is 100\n         *\n         * @type       {number}\n         * @default    0\n         * @since      5.0.6\n         * @product    highstock\n         * @validvalue [0, 100]\n         * @apioption  plotOptions.series.compareBase\n         */\n        /**\n         * Cumulative Sum feature replaces points' values with the following formula:\n         * `sum of all previous points' values + current point's value`.\n         * Works only for points in a visible range.\n         * Adds the `cumulativeSum` field to each point object that can be accessed\n         * e.g. in the [tooltip.pointFormat](https://api.highcharts.com/highstock/tooltip.pointFormat).\n         *\n         * With `dataGrouping` enabled, default grouping approximation is set to `sum`.\n         *\n         * @see [Axis.setCumulative()](/class-reference/Highcharts.Axis#setCumulative)\n         * @see [Series.setCumulative()](/class-reference/Highcharts.Series#setCumulative)\n         *\n         * @sample {highstock} stock/plotoptions/series-cumulative-sum/\n         *         Cumulative Sum\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since 9.3.0\n         * @product   highstock\n         * @apioption plotOptions.series.cumulative\n         */\n        ''; // Keeps doclets above in transpiled file\n\n        return DataModifyComposition;\n    });\n    _registerModule(_modules, 'Stock/Navigator/ChartNavigatorComposition.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        const { addEvent, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let NavigatorConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass, NavigatorClass) {\n            if (U.pushUnique(composedMembers, ChartClass)) {\n                const chartProto = ChartClass.prototype;\n                NavigatorConstructor = NavigatorClass;\n                chartProto.callbacks.push(onChartCallback);\n                addEvent(ChartClass, 'afterAddSeries', onChartAfterAddSeries);\n                addEvent(ChartClass, 'afterSetChartSize', onChartAfterSetChartSize);\n                addEvent(ChartClass, 'afterUpdate', onChartAfterUpdate);\n                addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                addEvent(ChartClass, 'beforeShowResetZoom', onChartBeforeShowResetZoom);\n                addEvent(ChartClass, 'update', onChartUpdate);\n            }\n        }\n        /**\n         * Handle adding new series.\n         * @private\n         */\n        function onChartAfterAddSeries() {\n            if (this.navigator) {\n                // Recompute which series should be shown in navigator, and add them\n                this.navigator.setBaseSeries(null, false);\n            }\n        }\n        /**\n         * For stock charts, extend the Chart.setChartSize method so that we can set the\n         * final top position of the navigator once the height of the chart, including\n         * the legend, is determined. #367. We can't use Chart.getMargins, because\n         * labels offsets are not calculated yet.\n         * @private\n         */\n        function onChartAfterSetChartSize() {\n            const legend = this.legend, navigator = this.navigator;\n            let legendOptions, xAxis, yAxis;\n            if (navigator) {\n                legendOptions = legend && legend.options;\n                xAxis = navigator.xAxis;\n                yAxis = navigator.yAxis;\n                const { scrollbarHeight, scrollButtonSize } = navigator;\n                // Compute the top position\n                if (this.inverted) {\n                    navigator.left = navigator.opposite ?\n                        this.chartWidth - scrollbarHeight -\n                            navigator.height :\n                        this.spacing[3] + scrollbarHeight;\n                    navigator.top = this.plotTop + scrollButtonSize;\n                }\n                else {\n                    navigator.left = pick(xAxis.left, this.plotLeft + scrollButtonSize);\n                    navigator.top = navigator.navigatorOptions.top ||\n                        this.chartHeight -\n                            navigator.height -\n                            scrollbarHeight -\n                            (this.scrollbar?.options.margin || 0) -\n                            this.spacing[2] -\n                            (this.rangeSelector && this.extraBottomMargin ?\n                                this.rangeSelector.getHeight() :\n                                0) -\n                            ((legendOptions &&\n                                legendOptions.verticalAlign === 'bottom' &&\n                                legendOptions.layout !== 'proximate' && // #13392\n                                legendOptions.enabled &&\n                                !legendOptions.floating) ?\n                                legend.legendHeight +\n                                    pick(legendOptions.margin, 10) :\n                                0) -\n                            (this.titleOffset ? this.titleOffset[2] : 0);\n                }\n                if (xAxis && yAxis) { // False if navigator is disabled (#904)\n                    if (this.inverted) {\n                        xAxis.options.left = yAxis.options.left = navigator.left;\n                    }\n                    else {\n                        xAxis.options.top = yAxis.options.top = navigator.top;\n                    }\n                    xAxis.setAxisSize();\n                    yAxis.setAxisSize();\n                }\n            }\n        }\n        /**\n         * Initialize navigator, if no scrolling exists yet.\n         * @private\n         */\n        function onChartAfterUpdate(event) {\n            if (!this.navigator && !this.scroller &&\n                (this.options.navigator.enabled ||\n                    this.options.scrollbar.enabled)) {\n                this.scroller = this.navigator = new NavigatorConstructor(this);\n                if (pick(event.redraw, true)) {\n                    this.redraw(event.animation); // #7067\n                }\n            }\n        }\n        /**\n         * Initialize navigator for stock charts\n         * @private\n         */\n        function onChartBeforeRender() {\n            const options = this.options;\n            if (options.navigator.enabled ||\n                options.scrollbar.enabled) {\n                this.scroller = this.navigator = new NavigatorConstructor(this);\n            }\n        }\n        /**\n         * For Stock charts. For x only zooming, do not to create the zoom button\n         * because X axis zooming is already allowed by the Navigator and Range\n         * selector. (#9285)\n         * @private\n         */\n        function onChartBeforeShowResetZoom() {\n            const chartOptions = this.options, navigator = chartOptions.navigator, rangeSelector = chartOptions.rangeSelector;\n            if (((navigator && navigator.enabled) ||\n                (rangeSelector && rangeSelector.enabled)) &&\n                ((!isTouchDevice &&\n                    this.zooming.type === 'x') ||\n                    (isTouchDevice && this.zooming.pinchType === 'x'))) {\n                return false;\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartCallback(chart) {\n            const navigator = chart.navigator;\n            // Initialize the navigator\n            if (navigator && chart.xAxis[0]) {\n                const extremes = chart.xAxis[0].getExtremes();\n                navigator.render(extremes.min, extremes.max);\n            }\n        }\n        /**\n         * Merge options, if no scrolling exists yet\n         * @private\n         */\n        function onChartUpdate(e) {\n            const navigatorOptions = (e.options.navigator || {}), scrollbarOptions = (e.options.scrollbar || {});\n            if (!this.navigator && !this.scroller &&\n                (navigatorOptions.enabled || scrollbarOptions.enabled)) {\n                merge(true, this.options.navigator, navigatorOptions);\n                merge(true, this.options.scrollbar, scrollbarOptions);\n                delete e.options.navigator;\n                delete e.options.scrollbar;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ChartNavigatorComposition = {\n            compose\n        };\n\n        return ChartNavigatorComposition;\n    });\n    _registerModule(_modules, 'Core/Axis/NavigatorAxisComposition.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        const { addEvent, correctFloat, defined, isNumber, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onAxisInit() {\n            const axis = this;\n            if (!axis.navigatorAxis) {\n                axis.navigatorAxis = new NavigatorAxisAdditions(axis);\n            }\n        }\n        /**\n         * For Stock charts, override selection zooming with some special features\n         * because X axis zooming is already allowed by the Navigator and Range\n         * selector.\n         * @private\n         */\n        function onAxisSetExtremes(e) {\n            const axis = this, chart = axis.chart, chartOptions = chart.options, navigator = chartOptions.navigator, navigatorAxis = axis.navigatorAxis, pinchType = chart.zooming.pinchType, rangeSelector = chartOptions.rangeSelector, zoomType = chart.zooming.type;\n            let zoomed;\n            if (axis.isXAxis &&\n                (navigator?.enabled || rangeSelector?.enabled)) {\n                // For y only zooming, ignore the X axis completely\n                if (zoomType === 'y' && e.trigger === 'zoom') {\n                    zoomed = false;\n                    // For xy zooming, record the state of the zoom before zoom selection,\n                    // then when the reset button is pressed, revert to this state. This\n                    // should apply only if the chart is initialized with a range (#6612),\n                    // otherwise zoom all the way out.\n                }\n                else if (((e.trigger === 'zoom' && zoomType === 'xy') ||\n                    (isTouchDevice && pinchType === 'xy')) &&\n                    axis.options.range) {\n                    const previousZoom = navigatorAxis.previousZoom;\n                    // Minimum defined, zooming in\n                    if (defined(e.min)) {\n                        navigatorAxis.previousZoom = [axis.min, axis.max];\n                        // Minimum undefined, resetting zoom\n                    }\n                    else if (previousZoom) {\n                        e.min = previousZoom[0];\n                        e.max = previousZoom[1];\n                        navigatorAxis.previousZoom = void 0;\n                    }\n                }\n            }\n            if (typeof zoomed !== 'undefined') {\n                e.preventDefault();\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class NavigatorAxisAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass) {\n                if (!AxisClass.keepProps.includes('navigatorAxis')) {\n                    AxisClass.keepProps.push('navigatorAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'setExtremes', onAxisSetExtremes);\n                }\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(axis) {\n                this.axis = axis;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            destroy() {\n                this.axis = void 0;\n            }\n            /**\n             * Add logic to normalize the zoomed range in order to preserve the pressed\n             * state of range selector buttons\n             *\n             * @private\n             * @function Highcharts.Axis#toFixedRange\n             */\n            toFixedRange(pxMin, pxMax, fixedMin, fixedMax) {\n                const axis = this.axis, halfPointRange = (axis.pointRange || 0) / 2;\n                let newMin = pick(fixedMin, axis.translate(pxMin, true, !axis.horiz)), newMax = pick(fixedMax, axis.translate(pxMax, true, !axis.horiz));\n                // Add/remove half point range to/from the extremes (#1172)\n                if (!defined(fixedMin)) {\n                    newMin = correctFloat(newMin + halfPointRange);\n                }\n                if (!defined(fixedMax)) {\n                    newMax = correctFloat(newMax - halfPointRange);\n                }\n                if (!isNumber(newMin) || !isNumber(newMax)) { // #1195, #7411\n                    newMin = newMax = void 0;\n                }\n                return {\n                    min: newMin,\n                    max: newMax\n                };\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorAxisAdditions;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorDefaults.js', [_modules['Core/Color/Color.js'], _modules['Core/Series/SeriesRegistry.js']], function (Color, SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { seriesTypes } = SeriesRegistry;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The navigator is a small series below the main series, displaying\n         * a view of the entire data set. It provides tools to zoom in and\n         * out on parts of the data as well as panning across the dataset.\n         *\n         * @product      highstock gantt\n         * @optionparent navigator\n         */\n        const NavigatorDefaults = {\n            /**\n             * Whether the navigator and scrollbar should adapt to updated data\n             * in the base X axis. When loading data async, as in the demo below,\n             * this should be `false`. Otherwise new data will trigger navigator\n             * redraw, which will cause unwanted looping. In the demo below, the\n             * data in the navigator is set only once. On navigating, only the main\n             * chart content is updated.\n             *\n             * @sample {highstock} stock/demo/lazy-loading/\n             *         Set to false with async data loading\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption navigator.adaptToUpdatedData\n             */\n            /**\n             * An integer identifying the index to use for the base series, or a\n             * string representing the id of the series.\n             *\n             * **Note**: As of Highcharts 5.0, this is now a deprecated option.\n             * Prefer [series.showInNavigator](#plotOptions.series.showInNavigator).\n             *\n             * @see [series.showInNavigator](#plotOptions.series.showInNavigator)\n             *\n             * @deprecated\n             * @type      {number|string}\n             * @default   0\n             * @apioption navigator.baseSeries\n             */\n            /**\n             * Enable or disable the navigator.\n             *\n             * @sample {highstock} stock/navigator/enabled/\n             *         Disable the navigator\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption navigator.enabled\n             */\n            /**\n             * When the chart is inverted, whether to draw the navigator on the\n             * opposite side.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     5.0.8\n             * @apioption navigator.opposite\n             */\n            /**\n             * The height of the navigator.\n             *\n             * @sample {highstock} stock/navigator/height/\n             *         A higher navigator\n             */\n            height: 40,\n            /**\n             * The distance from the nearest element, the X axis or X axis labels.\n             *\n             * @sample {highstock} stock/navigator/margin/\n             *         A margin of 2 draws the navigator closer to the X axis labels\n             */\n            margin: 25,\n            /**\n             * Whether the mask should be inside the range marking the zoomed\n             * range, or outside. In Highcharts Stock 1.x it was always `false`.\n             *\n             * @sample {highstock} stock/demo/maskinside-false/\n             *         False, mask outside\n             *\n             * @since   2.0\n             */\n            maskInside: true,\n            /**\n             * Options for the handles for dragging the zoomed area.\n             *\n             * @sample {highstock} stock/navigator/handles/\n             *         Colored handles\n             */\n            handles: {\n                /**\n                 * Width for handles.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since   6.0.0\n                 */\n                width: 7,\n                /**\n                 * Height for handles.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since   6.0.0\n                 */\n                height: 15,\n                /**\n                 * Array to define shapes of handles. 0-index for left, 1-index for\n                 * right.\n                 *\n                 * Additionally, the URL to a graphic can be given on this form:\n                 * `url(graphic.png)`. Note that for the image to be applied to\n                 * exported charts, its URL needs to be accessible by the export\n                 * server.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols`. The callback is then\n                 * used by its method name, as shown in the demo.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"navigator-handle\", \"navigator-handle\"]\n                 * @since   6.0.0\n                 */\n                symbols: ['navigator-handle', 'navigator-handle'],\n                /**\n                 * Allows to enable/disable handles.\n                 *\n                 * @since   6.0.0\n                 */\n                enabled: true,\n                /**\n                 * The width for the handle border and the stripes inside.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since     6.0.0\n                 * @apioption navigator.handles.lineWidth\n                 */\n                lineWidth: 1,\n                /**\n                 * The fill for the handle.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                backgroundColor: \"#f2f2f2\" /* Palette.neutralColor5 */,\n                /**\n                 * The stroke for the handle border and the stripes inside.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: \"#999999\" /* Palette.neutralColor40 */\n            },\n            /**\n             * The color of the mask covering the areas of the navigator series\n             * that are currently not visible in the main series. The default\n             * color is bluish with an opacity of 0.3 to see the series below.\n             *\n             * @see In styled mode, the mask is styled with the\n             *      `.highcharts-navigator-mask` and\n             *      `.highcharts-navigator-mask-inside` classes.\n             *\n             * @sample {highstock} stock/navigator/maskfill/\n             *         Blue, semi transparent mask\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default rgba(102,133,194,0.3)\n             */\n            maskFill: color(\"#667aff\" /* Palette.highlightColor60 */).setOpacity(0.3).get(),\n            /**\n             * The color of the line marking the currently zoomed area in the\n             * navigator.\n             *\n             * @sample {highstock} stock/navigator/outline/\n             *         2px blue outline\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #cccccc\n             */\n            outlineColor: \"#999999\" /* Palette.neutralColor40 */,\n            /**\n             * The width of the line marking the currently zoomed area in the\n             * navigator.\n             *\n             * @see In styled mode, the outline stroke width is set with the\n             *      `.highcharts-navigator-outline` class.\n             *\n             * @sample {highstock} stock/navigator/outline/\n             *         2px blue outline\n             *\n             * @type    {number}\n             */\n            outlineWidth: 1,\n            /**\n             * Options for the navigator series. Available options are the same\n             * as any series, documented at [plotOptions](#plotOptions.series)\n             * and [series](#series).\n             *\n             * Unless data is explicitly defined on navigator.series, the data\n             * is borrowed from the first series in the chart.\n             *\n             * Default series options for the navigator series are:\n             * ```js\n             * series: {\n             *     type: 'areaspline',\n             *     fillOpacity: 0.05,\n             *     dataGrouping: {\n             *         smoothed: true\n             *     },\n             *     lineWidth: 1,\n             *     marker: {\n             *         enabled: false\n             *     }\n             * }\n             * ```\n             *\n             * @see In styled mode, the navigator series is styled with the\n             *      `.highcharts-navigator-series` class.\n             *\n             * @sample {highstock} stock/navigator/series-data/\n             *         Using a separate data set for the navigator\n             * @sample {highstock} stock/navigator/series/\n             *         A green navigator series\n             *\n             * @type {*|Array<*>|Highcharts.SeriesOptionsType|Array<Highcharts.SeriesOptionsType>}\n             */\n            series: {\n                /**\n                 * The type of the navigator series.\n                 *\n                 * Heads up:\n                 * In column-type navigator, zooming is limited to at least one\n                 * point with its `pointRange`.\n                 *\n                 * @sample {highstock} stock/navigator/column/\n                 *         Column type navigator\n                 *\n                 * @type    {string}\n                 * @default {highstock} `areaspline` if defined, otherwise `line`\n                 * @default {gantt} gantt\n                 */\n                type: (typeof seriesTypes.areaspline === 'undefined' ?\n                    'line' :\n                    'areaspline'),\n                /**\n                 * The fill opacity of the navigator series.\n                 */\n                fillOpacity: 0.05,\n                /**\n                 * The pixel line width of the navigator series.\n                 */\n                lineWidth: 1,\n                /**\n                 * @ignore-option\n                 */\n                compare: null,\n                /**\n                 * @ignore-option\n                 */\n                sonification: {\n                    enabled: false\n                },\n                /**\n                 * Unless data is explicitly defined, the data is borrowed from the\n                 * first series in the chart.\n                 *\n                 * @type      {Array<number|Array<number|string|null>|object|null>}\n                 * @product   highstock\n                 * @apioption navigator.series.data\n                 */\n                /**\n                 * Data grouping options for the navigator series.\n                 *\n                 * @extends plotOptions.series.dataGrouping\n                 */\n                dataGrouping: {\n                    approximation: 'average',\n                    enabled: true,\n                    groupPixelWidth: 2,\n                    // Replace smoothed property by anchors, #12455.\n                    firstAnchor: 'firstPoint',\n                    anchor: 'middle',\n                    lastAnchor: 'lastPoint',\n                    // Day and week differs from plotOptions.series.dataGrouping\n                    units: [\n                        ['millisecond', [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]],\n                        ['second', [1, 2, 5, 10, 15, 30]],\n                        ['minute', [1, 2, 5, 10, 15, 30]],\n                        ['hour', [1, 2, 3, 4, 6, 8, 12]],\n                        ['day', [1, 2, 3, 4]],\n                        ['week', [1, 2, 3]],\n                        ['month', [1, 3, 6]],\n                        ['year', null]\n                    ]\n                },\n                /**\n                 * Data label options for the navigator series. Data labels are\n                 * disabled by default on the navigator series.\n                 *\n                 * @extends plotOptions.series.dataLabels\n                 */\n                dataLabels: {\n                    enabled: false,\n                    zIndex: 2 // #1839\n                },\n                id: 'highcharts-navigator-series',\n                className: 'highcharts-navigator-series',\n                /**\n                 * Sets the fill color of the navigator series.\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption navigator.series.color\n                 */\n                /**\n                 * Line color for the navigator series. Allows setting the color\n                 * while disallowing the default candlestick setting.\n                 *\n                 * @type {Highcharts.ColorString|null}\n                 */\n                lineColor: null,\n                marker: {\n                    enabled: false\n                },\n                /**\n                 * Since Highcharts Stock v8, default value is the same as default\n                 * `pointRange` defined for a specific type (e.g. `null` for\n                 * column type).\n                 *\n                 * In Highcharts Stock version < 8, defaults to 0.\n                 *\n                 * @extends plotOptions.series.pointRange\n                 * @type {number|null}\n                 * @apioption navigator.series.pointRange\n                 */\n                /**\n                 * The threshold option. Setting it to 0 will make the default\n                 * navigator area series draw its area from the 0 value and up.\n                 *\n                 * @type {number|null}\n                 */\n                threshold: null\n            },\n            /**\n             * Enable or disable navigator sticking to right, while adding new\n             * points. If `undefined`, the navigator sticks to the axis maximum only\n             * if it was already at the maximum prior to adding points.\n             *\n             * @type      {boolean}\n             * @default   undefined\n             * @since 10.2.1\n             * @sample {highstock} stock/navigator/sticktomax-false/\n             * stickToMax set to false\n             * @apioption navigator.stickToMax\n             */\n            /**\n             * Options for the navigator X axis. Default series options for the\n             * navigator xAxis are:\n             * ```js\n             * xAxis: {\n             *     tickWidth: 0,\n             *     lineWidth: 0,\n             *     gridLineWidth: 1,\n             *     tickPixelInterval: 200,\n             *     labels: {\n             *            align: 'left',\n             *         style: {\n             *             color: '#888'\n             *         },\n             *         x: 3,\n             *         y: -4\n             *     }\n             * }\n             * ```\n             *\n             * @extends   xAxis\n             * @excluding linkedTo, maxZoom, minRange, opposite, range, scrollbar,\n             *            showEmpty, maxRange\n             */\n            xAxis: {\n                /**\n                 * Additional range on the right side of the xAxis. Works similar to\n                 * `xAxis.maxPadding`, but the value is set in terms of axis values,\n                 * percentage or pixels.\n                 *\n                 * If it's a number, it is interpreted as axis values, which in a\n                 * datetime axis equals milliseconds.\n                 *\n                 * If it's a percentage string, is interpreted as percentages of the\n                 * axis length. An overscroll of 50% will make a 100px axis 50px longer.\n                 *\n                 * If it's a pixel string, it is interpreted as a fixed pixel value, but\n                 * limited to 90% of the axis length.\n                 *\n                 * If it's undefined, the value is inherited from `xAxis.overscroll`.\n                 *\n                 * Can be set for both, main xAxis and navigator's xAxis.\n                 *\n                 * @type    {number | string | undefined}\n                 * @since   6.0.0\n                 * @apioption navigator.xAxis.overscroll\n                 */\n                className: 'highcharts-navigator-xaxis',\n                tickLength: 0,\n                lineWidth: 0,\n                gridLineColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n                gridLineWidth: 1,\n                tickPixelInterval: 200,\n                labels: {\n                    align: 'left',\n                    /**\n                     * @type {Highcharts.CSSObject}\n                     */\n                    style: {\n                        /** @ignore */\n                        color: \"#000000\" /* Palette.neutralColor100 */,\n                        /** @ignore */\n                        fontSize: '0.7em',\n                        /** @ignore */\n                        opacity: 0.6,\n                        /** @ignore */\n                        textOutline: '2px contrast'\n                    },\n                    x: 3,\n                    y: -4\n                },\n                crosshair: false\n            },\n            /**\n             * Options for the navigator Y axis. Default series options for the\n             * navigator yAxis are:\n             * ```js\n             * yAxis: {\n             *     gridLineWidth: 0,\n             *     startOnTick: false,\n             *     endOnTick: false,\n             *     minPadding: 0.1,\n             *     maxPadding: 0.1,\n             *     labels: {\n             *         enabled: false\n             *     },\n             *     title: {\n             *         text: null\n             *     },\n             *     tickWidth: 0\n             * }\n             * ```\n             *\n             * @extends   yAxis\n             * @excluding height, linkedTo, maxZoom, minRange, ordinal, range,\n             *            showEmpty, scrollbar, top, units, maxRange, minLength,\n             *            maxLength, resize\n             */\n            yAxis: {\n                className: 'highcharts-navigator-yaxis',\n                gridLineWidth: 0,\n                startOnTick: false,\n                endOnTick: false,\n                minPadding: 0.1,\n                maxPadding: 0.1,\n                labels: {\n                    enabled: false\n                },\n                crosshair: false,\n                title: {\n                    text: null\n                },\n                tickLength: 0,\n                tickWidth: 0\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Maximum range which can be set using the navigator's handles.\n         * Opposite of [xAxis.minRange](#xAxis.minRange).\n         *\n         * @sample {highstock} stock/navigator/maxrange/\n         *         Defined max and min range\n         *\n         * @type      {number}\n         * @since     6.0.0\n         * @product   highstock gantt\n         * @apioption xAxis.maxRange\n         */\n        (''); // Keeps doclets above in JS file\n\n        return NavigatorDefaults;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorSymbols.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Draw one of the handles on the side of the zoomed range in the navigator.\n         * @private\n         */\n        function navigatorHandle(_x, _y, width, height, options = {}) {\n            const halfWidth = options.width ? options.width / 2 : width, markerPosition = Math.round(halfWidth / 3) + 0.5;\n            height = options.height || height;\n            return [\n                ['M', -halfWidth - 1, 0.5],\n                ['L', halfWidth, 0.5],\n                ['L', halfWidth, height + 0.5],\n                ['L', -halfWidth - 1, height + 0.5],\n                ['L', -halfWidth - 1, 0.5],\n                ['M', -markerPosition, 4],\n                ['L', -markerPosition, height - 3],\n                ['M', markerPosition - 1, 4],\n                ['L', markerPosition - 1, height - 3]\n            ];\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigatorSymbols = {\n            'navigator-handle': navigatorHandle\n        };\n\n        return NavigatorSymbols;\n    });\n    _registerModule(_modules, 'Stock/Utilities/StockUtilities.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defined } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Sets the chart.fixedRange to the specified value. If the value is larger\n         * than actual range, sets it to the maximum possible range. (#20327)\n         *\n         * @private\n         * @function Highcharts.StockChart#setFixedRange\n         * @param {number|undefined} range\n         *        Range to set in axis units.\n         */\n        function setFixedRange(range) {\n            const xAxis = this.xAxis[0];\n            if (defined(xAxis.dataMax) &&\n                defined(xAxis.dataMin) &&\n                range) {\n                this.fixedRange = Math.min(range, xAxis.dataMax - xAxis.dataMin);\n            }\n            else {\n                this.fixedRange = range;\n            }\n        }\n        const StockUtilities = {\n            setFixedRange\n        };\n\n        return StockUtilities;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorComposition.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/NavigatorAxisComposition.js'], _modules['Stock/Navigator/NavigatorDefaults.js'], _modules['Stock/Navigator/NavigatorSymbols.js'], _modules['Core/Renderer/RendererRegistry.js'], _modules['Stock/Utilities/StockUtilities.js'], _modules['Core/Utilities.js']], function (D, H, NavigatorAxisAdditions, NavigatorDefaults, NavigatorSymbols, RendererRegistry, StockUtilities, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { setOptions } = D;\n        const { composed } = H;\n        const { getRendererType } = RendererRegistry;\n        const { setFixedRange } = StockUtilities;\n        const { addEvent, extend, pushUnique } = U;\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass, AxisClass, SeriesClass) {\n            NavigatorAxisAdditions.compose(AxisClass);\n            if (pushUnique(composed, 'Navigator')) {\n                ChartClass.prototype.setFixedRange = setFixedRange;\n                extend(getRendererType().prototype.symbols, NavigatorSymbols);\n                addEvent(SeriesClass, 'afterUpdate', onSeriesAfterUpdate);\n                setOptions({ navigator: NavigatorDefaults });\n            }\n        }\n        /**\n         * Handle updating series\n         * @private\n         */\n        function onSeriesAfterUpdate() {\n            if (this.chart.navigator && !this.options.isInternal) {\n                this.chart.navigator.setBaseSeries(null, false);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigatorComposition = {\n            compose\n        };\n\n        return NavigatorComposition;\n    });\n    _registerModule(_modules, 'Core/Axis/ScrollbarAxis.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { addEvent, defined, pick, pushUnique } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ScrollbarAxis;\n        (function (ScrollbarAxis) {\n            /* *\n             *\n             *  Variables\n             *\n             * */\n            let Scrollbar;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Attaches to axis events to create scrollbars if enabled.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} AxisClass\n             * Axis class to extend.\n             *\n             * @param {Highcharts.Scrollbar} ScrollbarClass\n             * Scrollbar class to use.\n             */\n            function compose(AxisClass, ScrollbarClass) {\n                if (pushUnique(composed, 'Axis.Scrollbar')) {\n                    Scrollbar = ScrollbarClass;\n                    addEvent(AxisClass, 'afterGetOffset', onAxisAfterGetOffset);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterRender', onAxisAfterRender);\n                }\n            }\n            ScrollbarAxis.compose = compose;\n            /** @private */\n            function getExtremes(axis) {\n                const axisMin = pick(axis.options && axis.options.min, axis.min);\n                const axisMax = pick(axis.options && axis.options.max, axis.max);\n                return {\n                    axisMin,\n                    axisMax,\n                    scrollMin: defined(axis.dataMin) ?\n                        Math.min(axisMin, axis.min, axis.dataMin, pick(axis.threshold, Infinity)) : axisMin,\n                    scrollMax: defined(axis.dataMax) ?\n                        Math.max(axisMax, axis.max, axis.dataMax, pick(axis.threshold, -Infinity)) : axisMax\n                };\n            }\n            /**\n             * Make space for a scrollbar.\n             * @private\n             */\n            function onAxisAfterGetOffset() {\n                const axis = this, scrollbar = axis.scrollbar, opposite = scrollbar && !scrollbar.options.opposite, index = axis.horiz ? 2 : opposite ? 3 : 1;\n                if (scrollbar) {\n                    // Reset scrollbars offsets\n                    axis.chart.scrollbarsOffsets = [0, 0];\n                    axis.chart.axisOffset[index] +=\n                        scrollbar.size + (scrollbar.options.margin || 0);\n                }\n            }\n            /**\n             * Wrap axis initialization and create scrollbar if enabled.\n             * @private\n             */\n            function onAxisAfterInit() {\n                const axis = this;\n                if (axis.options &&\n                    axis.options.scrollbar &&\n                    axis.options.scrollbar.enabled) {\n                    // Predefined options:\n                    axis.options.scrollbar.vertical = !axis.horiz;\n                    axis.options.startOnTick = axis.options.endOnTick = false;\n                    axis.scrollbar = new Scrollbar(axis.chart.renderer, axis.options.scrollbar, axis.chart);\n                    addEvent(axis.scrollbar, 'changed', function (e) {\n                        const { axisMin, axisMax, scrollMin: unitedMin, scrollMax: unitedMax } = getExtremes(axis), range = unitedMax - unitedMin;\n                        let to, from;\n                        // #12834, scroll when show/hide series, wrong extremes\n                        if (!defined(axisMin) || !defined(axisMax)) {\n                            return;\n                        }\n                        if ((axis.horiz && !axis.reversed) ||\n                            (!axis.horiz && axis.reversed)) {\n                            to = unitedMin + range * this.to;\n                            from = unitedMin + range * this.from;\n                        }\n                        else {\n                            // Y-values in browser are reversed, but this also\n                            // applies for reversed horizontal axis:\n                            to = unitedMin + range * (1 - this.from);\n                            from = unitedMin + range * (1 - this.to);\n                        }\n                        if (this.shouldUpdateExtremes(e.DOMType)) {\n                            // #17977, set animation to undefined instead of true\n                            const animate = e.DOMType === 'mousemove' ||\n                                e.DOMType === 'touchmove' ? false : void 0;\n                            axis.setExtremes(from, to, true, animate, e);\n                        }\n                        else {\n                            // When live redraw is disabled, don't change extremes\n                            // Only change the position of the scrollbar thumb\n                            this.setRange(this.from, this.to);\n                        }\n                    });\n                }\n            }\n            /**\n             * Wrap rendering axis, and update scrollbar if one is created.\n             * @private\n             */\n            function onAxisAfterRender() {\n                const axis = this, { scrollMin, scrollMax } = getExtremes(axis), scrollbar = axis.scrollbar, offset = (axis.axisTitleMargin + (axis.titleOffset || 0)), scrollbarsOffsets = axis.chart.scrollbarsOffsets, axisMargin = axis.options.margin || 0;\n                let offsetsIndex, from, to;\n                if (scrollbar && scrollbarsOffsets) {\n                    if (axis.horiz) {\n                        // Reserve space for labels/title\n                        if (!axis.opposite) {\n                            scrollbarsOffsets[1] += offset;\n                        }\n                        scrollbar.position(axis.left, (axis.top +\n                            axis.height +\n                            2 +\n                            scrollbarsOffsets[1] -\n                            (axis.opposite ? axisMargin : 0)), axis.width, axis.height);\n                        // Next scrollbar should reserve space for margin (if set)\n                        if (!axis.opposite) {\n                            scrollbarsOffsets[1] += axisMargin;\n                        }\n                        offsetsIndex = 1;\n                    }\n                    else {\n                        // Reserve space for labels/title\n                        if (axis.opposite) {\n                            scrollbarsOffsets[0] += offset;\n                        }\n                        let xPosition;\n                        if (!scrollbar.options.opposite) {\n                            xPosition = axis.opposite ? 0 : axisMargin;\n                        }\n                        else {\n                            xPosition = axis.left +\n                                axis.width +\n                                2 +\n                                scrollbarsOffsets[0] -\n                                (axis.opposite ? 0 : axisMargin);\n                        }\n                        scrollbar.position(xPosition, axis.top, axis.width, axis.height);\n                        // Next scrollbar should reserve space for margin (if set)\n                        if (axis.opposite) {\n                            scrollbarsOffsets[0] += axisMargin;\n                        }\n                        offsetsIndex = 0;\n                    }\n                    scrollbarsOffsets[offsetsIndex] += scrollbar.size +\n                        (scrollbar.options.margin || 0);\n                    if (isNaN(scrollMin) ||\n                        isNaN(scrollMax) ||\n                        !defined(axis.min) ||\n                        !defined(axis.max) ||\n                        axis.min === axis.max // #10733\n                    ) {\n                        // Default action: when extremes are the same or there is\n                        // not extremes on the axis, but scrollbar exists, make it\n                        // full size\n                        scrollbar.setRange(0, 1);\n                    }\n                    else {\n                        from = ((axis.min - scrollMin) /\n                            (scrollMax - scrollMin));\n                        to = ((axis.max - scrollMin) /\n                            (scrollMax - scrollMin));\n                        if ((axis.horiz && !axis.reversed) ||\n                            (!axis.horiz && axis.reversed)) {\n                            scrollbar.setRange(from, to);\n                        }\n                        else {\n                            // Inverse vertical axis\n                            scrollbar.setRange(1 - to, 1 - from);\n                        }\n                    }\n                }\n            }\n        })(ScrollbarAxis || (ScrollbarAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ScrollbarAxis;\n    });\n    _registerModule(_modules, 'Stock/Scrollbar/ScrollbarDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constant\n         *\n         * */\n        /**\n         *\n         * The scrollbar is a means of panning over the X axis of a stock chart.\n         * Scrollbars can also be applied to other types of axes.\n         *\n         * Another approach to scrollable charts is the [chart.scrollablePlotArea](\n         * https://api.highcharts.com/highcharts/chart.scrollablePlotArea) option that\n         * is especially suitable for simpler cartesian charts on mobile.\n         *\n         * In styled mode, all the presentational options for the\n         * scrollbar are replaced by the classes `.highcharts-scrollbar-thumb`,\n         * `.highcharts-scrollbar-arrow`, `.highcharts-scrollbar-button`,\n         * `.highcharts-scrollbar-rifles` and `.highcharts-scrollbar-track`.\n         *\n         * @sample stock/yaxis/inverted-bar-scrollbar/\n         *         A scrollbar on a simple bar chart\n         *\n         * @product highstock gantt\n         * @optionparent scrollbar\n         *\n         * @private\n         */\n        const ScrollbarDefaults = {\n            /**\n             * The height of the scrollbar. If `buttonsEnabled` is true , the height\n             * also applies to the width of the scroll arrows so that they are always\n             * squares.\n             *\n             * @sample stock/scrollbar/style/\n             *         Non-default height\n             *\n             * @type    {number}\n             */\n            height: 10,\n            /**\n             * The border rounding radius of the bar.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            barBorderRadius: 5,\n            /**\n             * The corner radius of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            buttonBorderRadius: 0,\n            /**\n             * Enable or disable the buttons at the end of the scrollbar.\n             *\n             * @since 11.0.0\n             */\n            buttonsEnabled: false,\n            /**\n             * Enable or disable the scrollbar.\n             *\n             * @sample stock/scrollbar/enabled/\n             *         Disable the scrollbar, only use navigator\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption scrollbar.enabled\n             */\n            /**\n             * Whether to redraw the main chart as the scrollbar or the navigator\n             * zoomed window is moved. Defaults to `true` for modern browsers and\n             * `false` for legacy IE browsers as well as mobile devices.\n             *\n             * @sample stock/scrollbar/liveredraw\n             *         Setting live redraw to false\n             *\n             * @type  {boolean}\n             * @since 1.3\n             */\n            liveRedraw: void 0,\n            /**\n             * The margin between the scrollbar and its axis when the scrollbar is\n             * applied directly to an axis, or the navigator in case that is enabled.\n             * Defaults to 10 for axis, 0 for navigator.\n             *\n             * @type {number|undefined}\n             */\n            margin: void 0,\n            /**\n             * The minimum width of the scrollbar.\n             *\n             * @since 1.2.5\n             */\n            minWidth: 6,\n            /** @ignore-option */\n            opposite: true,\n            /**\n             * Whether to show or hide the scrollbar when the scrolled content is\n             * zoomed out to it full extent.\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption scrollbar.showFull\n             */\n            step: 0.2,\n            /**\n             * The z index of the scrollbar group.\n             */\n            zIndex: 3,\n            /**\n             * The background color of the scrollbar itself.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            barBackgroundColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The width of the bar's border.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            barBorderWidth: 0,\n            /**\n             * The color of the scrollbar's border.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            barBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The color of the small arrow inside the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonArrowColor: \"#333333\" /* Palette.neutralColor80 */,\n            /**\n             * The color of scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonBackgroundColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n            /**\n             * The color of the border of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The border width of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            buttonBorderWidth: 1,\n            /**\n             * The color of the small rifles in the middle of the scrollbar.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            rifleColor: 'none',\n            /**\n             * The color of the track background.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            trackBackgroundColor: 'rgba(255, 255, 255, 0.001)',\n            /**\n             * The color of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            trackBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The corner radius of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            trackBorderRadius: 5,\n            /**\n             * The width of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            trackBorderWidth: 1\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ScrollbarDefaults;\n    });\n    _registerModule(_modules, 'Stock/Scrollbar/Scrollbar.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/ScrollbarAxis.js'], _modules['Stock/Scrollbar/ScrollbarDefaults.js'], _modules['Core/Utilities.js']], function (D, H, ScrollbarAxis, ScrollbarDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { addEvent, correctFloat, defined, destroyObjectProperties, fireEvent, merge, pick, removeEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * A reusable scrollbar, internally used in Highcharts Stock's\n         * navigator and optionally on individual axes.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Scrollbar\n         * @param {Highcharts.SVGRenderer} renderer\n         * @param {Highcharts.ScrollbarOptions} options\n         * @param {Highcharts.Chart} chart\n         */\n        class Scrollbar {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass) {\n                ScrollbarAxis.compose(AxisClass, Scrollbar);\n            }\n            /**\n             * When we have vertical scrollbar, rifles and arrow in buttons should be\n             * rotated. The same method is used in Navigator's handles, to rotate them.\n             *\n             * @function Highcharts.swapXY\n             *\n             * @param {Highcharts.SVGPathArray} path\n             * Path to be rotated.\n             *\n             * @param {boolean} [vertical]\n             * If vertical scrollbar, swap x-y values.\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Rotated path.\n             *\n             * @requires modules/stock\n             */\n            static swapXY(path, vertical) {\n                if (vertical) {\n                    path.forEach((seg) => {\n                        const len = seg.length;\n                        let temp;\n                        for (let i = 0; i < len; i += 2) {\n                            temp = seg[i + 1];\n                            if (typeof temp === 'number') {\n                                seg[i + 1] = seg[i + 2];\n                                seg[i + 2] = temp;\n                            }\n                        }\n                    });\n                }\n                return path;\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(renderer, options, chart) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this._events = [];\n                this.chartX = 0;\n                this.chartY = 0;\n                this.from = 0;\n                this.scrollbarButtons = [];\n                this.scrollbarLeft = 0;\n                this.scrollbarStrokeWidth = 1;\n                this.scrollbarTop = 0;\n                this.size = 0;\n                this.to = 0;\n                this.trackBorderWidth = 1;\n                this.x = 0;\n                this.y = 0;\n                this.init(renderer, options, chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Set up the mouse and touch events for the Scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#addEvents\n             */\n            addEvents() {\n                const buttonsOrder = this.options.inverted ? [1, 0] : [0, 1], buttons = this.scrollbarButtons, bar = this.scrollbarGroup.element, track = this.track.element, mouseDownHandler = this.mouseDownHandler.bind(this), mouseMoveHandler = this.mouseMoveHandler.bind(this), mouseUpHandler = this.mouseUpHandler.bind(this);\n                const _events = [\n                    // Mouse events\n                    [\n                        buttons[buttonsOrder[0]].element,\n                        'click',\n                        this.buttonToMinClick.bind(this)\n                    ],\n                    [\n                        buttons[buttonsOrder[1]].element,\n                        'click',\n                        this.buttonToMaxClick.bind(this)\n                    ],\n                    [track, 'click', this.trackClick.bind(this)],\n                    [bar, 'mousedown', mouseDownHandler],\n                    [bar.ownerDocument, 'mousemove', mouseMoveHandler],\n                    [bar.ownerDocument, 'mouseup', mouseUpHandler],\n                    // Touch events\n                    [bar, 'touchstart', mouseDownHandler],\n                    [bar.ownerDocument, 'touchmove', mouseMoveHandler],\n                    [bar.ownerDocument, 'touchend', mouseUpHandler]\n                ];\n                // Add them all\n                _events.forEach(function (args) {\n                    addEvent.apply(null, args);\n                });\n                this._events = _events;\n            }\n            buttonToMaxClick(e) {\n                const scroller = this;\n                const range = ((scroller.to - scroller.from) *\n                    pick(scroller.options.step, 0.2));\n                scroller.updatePosition(scroller.from + range, scroller.to + range);\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            buttonToMinClick(e) {\n                const scroller = this;\n                const range = correctFloat(scroller.to - scroller.from) *\n                    pick(scroller.options.step, 0.2);\n                scroller.updatePosition(correctFloat(scroller.from - range), correctFloat(scroller.to - range));\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            /**\n             * Get normalized (0-1) cursor position over the scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#cursorToScrollbarPosition\n             *\n             * @param  {*} normalizedEvent\n             *         normalized event, with chartX and chartY values\n             *\n             * @return {Highcharts.Dictionary<number>}\n             *         Local position {chartX, chartY}\n             */\n            cursorToScrollbarPosition(normalizedEvent) {\n                const scroller = this, options = scroller.options, minWidthDifference = options.minWidth > scroller.calculatedWidth ?\n                    options.minWidth :\n                    0; // `minWidth` distorts translation\n                return {\n                    chartX: (normalizedEvent.chartX - scroller.x -\n                        scroller.xOffset) /\n                        (scroller.barWidth - minWidthDifference),\n                    chartY: (normalizedEvent.chartY - scroller.y -\n                        scroller.yOffset) /\n                        (scroller.barWidth - minWidthDifference)\n                };\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#destroy\n             */\n            destroy() {\n                const scroller = this, navigator = scroller.chart.scroller;\n                // Disconnect events added in addEvents\n                scroller.removeEvents();\n                // Destroy properties\n                [\n                    'track',\n                    'scrollbarRifles',\n                    'scrollbar',\n                    'scrollbarGroup',\n                    'group'\n                ].forEach(function (prop) {\n                    if (scroller[prop] && scroller[prop].destroy) {\n                        scroller[prop] = scroller[prop].destroy();\n                    }\n                });\n                // #6421, chart may have more scrollbars\n                if (navigator && scroller === navigator.scrollbar) {\n                    navigator.scrollbar = null;\n                    // Destroy elements in collection\n                    destroyObjectProperties(navigator.scrollbarButtons);\n                }\n            }\n            /**\n             * Draw the scrollbar buttons with arrows\n             *\n             * @private\n             * @function Highcharts.Scrollbar#drawScrollbarButton\n             * @param {number} index\n             *        0 is left, 1 is right\n             */\n            drawScrollbarButton(index) {\n                const scroller = this, renderer = scroller.renderer, scrollbarButtons = scroller.scrollbarButtons, options = scroller.options, size = scroller.size, group = renderer.g().add(scroller.group);\n                scrollbarButtons.push(group);\n                if (options.buttonsEnabled) {\n                    // Create a rectangle for the scrollbar button\n                    const rect = renderer.rect()\n                        .addClass('highcharts-scrollbar-button')\n                        .add(group);\n                    // Presentational attributes\n                    if (!scroller.chart.styledMode) {\n                        rect.attr({\n                            stroke: options.buttonBorderColor,\n                            'stroke-width': options.buttonBorderWidth,\n                            fill: options.buttonBackgroundColor\n                        });\n                    }\n                    // Place the rectangle based on the rendered stroke width\n                    rect.attr(rect.crisp({\n                        x: -0.5,\n                        y: -0.5,\n                        // +1 to compensate for crispifying in rect method\n                        width: size + 1,\n                        height: size + 1,\n                        r: options.buttonBorderRadius\n                    }, rect.strokeWidth()));\n                    // Button arrow\n                    const arrow = renderer\n                        .path(Scrollbar.swapXY([[\n                            'M',\n                            size / 2 + (index ? -1 : 1),\n                            size / 2 - 3\n                        ], [\n                            'L',\n                            size / 2 + (index ? -1 : 1),\n                            size / 2 + 3\n                        ], [\n                            'L',\n                            size / 2 + (index ? 2 : -2),\n                            size / 2\n                        ]], options.vertical))\n                        .addClass('highcharts-scrollbar-arrow')\n                        .add(scrollbarButtons[index]);\n                    if (!scroller.chart.styledMode) {\n                        arrow.attr({\n                            fill: options.buttonArrowColor\n                        });\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.Scrollbar#init\n             * @param {Highcharts.SVGRenderer} renderer\n             * @param {Highcharts.ScrollbarOptions} options\n             * @param {Highcharts.Chart} chart\n             */\n            init(renderer, options, chart) {\n                const scroller = this;\n                scroller.scrollbarButtons = [];\n                scroller.renderer = renderer;\n                scroller.userOptions = options;\n                scroller.options = merge(ScrollbarDefaults, defaultOptions.scrollbar, options);\n                scroller.options.margin = pick(scroller.options.margin, 10);\n                scroller.chart = chart;\n                // Backward compatibility\n                scroller.size = pick(scroller.options.size, scroller.options.height);\n                // Init\n                if (options.enabled) {\n                    scroller.render();\n                    scroller.addEvents();\n                }\n            }\n            mouseDownHandler(e) {\n                const scroller = this, normalizedEvent = scroller.chart.pointer?.normalize(e) || e, mousePosition = scroller.cursorToScrollbarPosition(normalizedEvent);\n                scroller.chartX = mousePosition.chartX;\n                scroller.chartY = mousePosition.chartY;\n                scroller.initPositions = [scroller.from, scroller.to];\n                scroller.grabbedCenter = true;\n            }\n            /**\n             * Event handler for the mouse move event.\n             * @private\n             */\n            mouseMoveHandler(e) {\n                const scroller = this, normalizedEvent = scroller.chart.pointer?.normalize(e) || e, options = scroller.options, direction = options.vertical ?\n                    'chartY' : 'chartX', initPositions = scroller.initPositions || [];\n                let scrollPosition, chartPosition, change;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when\n                // holding the finger down in the center of the scrollbar. This\n                // should be ignored.\n                if (scroller.grabbedCenter &&\n                    // #4696, scrollbar failed on Android\n                    (!e.touches || e.touches[0][direction] !== 0)) {\n                    chartPosition = scroller.cursorToScrollbarPosition(normalizedEvent)[direction];\n                    scrollPosition = scroller[direction];\n                    change = chartPosition - scrollPosition;\n                    scroller.hasDragged = true;\n                    scroller.updatePosition(initPositions[0] + change, initPositions[1] + change);\n                    if (scroller.hasDragged) {\n                        fireEvent(scroller, 'changed', {\n                            from: scroller.from,\n                            to: scroller.to,\n                            trigger: 'scrollbar',\n                            DOMType: e.type,\n                            DOMEvent: e\n                        });\n                    }\n                }\n            }\n            /**\n             * Event handler for the mouse up event.\n             * @private\n             */\n            mouseUpHandler(e) {\n                const scroller = this;\n                if (scroller.hasDragged) {\n                    fireEvent(scroller, 'changed', {\n                        from: scroller.from,\n                        to: scroller.to,\n                        trigger: 'scrollbar',\n                        DOMType: e.type,\n                        DOMEvent: e\n                    });\n                }\n                scroller.grabbedCenter =\n                    scroller.hasDragged =\n                        scroller.chartX =\n                            scroller.chartY = null;\n            }\n            /**\n             * Position the scrollbar, method called from a parent with defined\n             * dimensions.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#position\n             * @param {number} x\n             *        x-position on the chart\n             * @param {number} y\n             *        y-position on the chart\n             * @param {number} width\n             *        width of the scrollbar\n             * @param {number} height\n             *        height of the scrollbar\n             */\n            position(x, y, width, height) {\n                const scroller = this, options = scroller.options, { buttonsEnabled, margin = 0, vertical } = options, method = scroller.rendered ? 'animate' : 'attr';\n                let xOffset = height, yOffset = 0;\n                // Make the scrollbar visible when it is repositioned, #15763.\n                scroller.group.show();\n                scroller.x = x;\n                scroller.y = y + this.trackBorderWidth;\n                scroller.width = width; // Width with buttons\n                scroller.height = height;\n                scroller.xOffset = xOffset;\n                scroller.yOffset = yOffset;\n                // If Scrollbar is a vertical type, swap options:\n                if (vertical) {\n                    scroller.width = scroller.yOffset = width = yOffset = scroller.size;\n                    scroller.xOffset = xOffset = 0;\n                    scroller.yOffset = yOffset = buttonsEnabled ? scroller.size : 0;\n                    // Width without buttons\n                    scroller.barWidth = height - (buttonsEnabled ? width * 2 : 0);\n                    scroller.x = x = x + margin;\n                }\n                else {\n                    scroller.height = height = scroller.size;\n                    scroller.xOffset = xOffset = buttonsEnabled ? scroller.size : 0;\n                    // Width without buttons\n                    scroller.barWidth = width - (buttonsEnabled ? height * 2 : 0);\n                    scroller.y = scroller.y + margin;\n                }\n                // Set general position for a group:\n                scroller.group[method]({\n                    translateX: x,\n                    translateY: scroller.y\n                });\n                // Resize background/track:\n                scroller.track[method]({\n                    width: width,\n                    height: height\n                });\n                // Move right/bottom button to its place:\n                scroller.scrollbarButtons[1][method]({\n                    translateX: vertical ? 0 : width - xOffset,\n                    translateY: vertical ? height - yOffset : 0\n                });\n            }\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#removeEvents\n             */\n            removeEvents() {\n                this._events.forEach(function (args) {\n                    removeEvent.apply(null, args);\n                });\n                this._events.length = 0;\n            }\n            /**\n             * Render scrollbar with all required items.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#render\n             */\n            render() {\n                const scroller = this, renderer = scroller.renderer, options = scroller.options, size = scroller.size, styledMode = scroller.chart.styledMode, group = renderer.g('scrollbar')\n                    .attr({\n                    zIndex: options.zIndex\n                })\n                    .hide() // Initially hide the scrollbar #15863\n                    .add();\n                // Draw the scrollbar group\n                scroller.group = group;\n                // Draw the scrollbar track:\n                scroller.track = renderer.rect()\n                    .addClass('highcharts-scrollbar-track')\n                    .attr({\n                    r: options.trackBorderRadius || 0,\n                    height: size,\n                    width: size\n                }).add(group);\n                if (!styledMode) {\n                    scroller.track.attr({\n                        fill: options.trackBackgroundColor,\n                        stroke: options.trackBorderColor,\n                        'stroke-width': options.trackBorderWidth\n                    });\n                }\n                const trackBorderWidth = scroller.trackBorderWidth =\n                    scroller.track.strokeWidth();\n                scroller.track.attr({\n                    x: -trackBorderWidth % 2 / 2,\n                    y: -trackBorderWidth % 2 / 2\n                });\n                // Draw the scrollbar itself\n                scroller.scrollbarGroup = renderer.g().add(group);\n                scroller.scrollbar = renderer.rect()\n                    .addClass('highcharts-scrollbar-thumb')\n                    .attr({\n                    height: size - trackBorderWidth,\n                    width: size - trackBorderWidth,\n                    r: options.barBorderRadius || 0\n                }).add(scroller.scrollbarGroup);\n                scroller.scrollbarRifles = renderer\n                    .path(Scrollbar.swapXY([\n                    ['M', -3, size / 4],\n                    ['L', -3, 2 * size / 3],\n                    ['M', 0, size / 4],\n                    ['L', 0, 2 * size / 3],\n                    ['M', 3, size / 4],\n                    ['L', 3, 2 * size / 3]\n                ], options.vertical))\n                    .addClass('highcharts-scrollbar-rifles')\n                    .add(scroller.scrollbarGroup);\n                if (!styledMode) {\n                    scroller.scrollbar.attr({\n                        fill: options.barBackgroundColor,\n                        stroke: options.barBorderColor,\n                        'stroke-width': options.barBorderWidth\n                    });\n                    scroller.scrollbarRifles.attr({\n                        stroke: options.rifleColor,\n                        'stroke-width': 1\n                    });\n                }\n                scroller.scrollbarStrokeWidth = scroller.scrollbar.strokeWidth();\n                scroller.scrollbarGroup.translate(-scroller.scrollbarStrokeWidth % 2 / 2, -scroller.scrollbarStrokeWidth % 2 / 2);\n                // Draw the buttons:\n                scroller.drawScrollbarButton(0);\n                scroller.drawScrollbarButton(1);\n            }\n            /**\n             * Set scrollbar size, with a given scale.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#setRange\n             * @param {number} from\n             *        scale (0-1) where bar should start\n             * @param {number} to\n             *        scale (0-1) where bar should end\n             */\n            setRange(from, to) {\n                const scroller = this, options = scroller.options, vertical = options.vertical, minWidth = options.minWidth, fullWidth = scroller.barWidth, method = (this.rendered &&\n                    !this.hasDragged &&\n                    !(this.chart.navigator && this.chart.navigator.hasDragged)) ? 'animate' : 'attr';\n                if (!defined(fullWidth)) {\n                    return;\n                }\n                const toPX = fullWidth * Math.min(to, 1);\n                let fromPX, newSize;\n                from = Math.max(from, 0);\n                fromPX = Math.ceil(fullWidth * from);\n                scroller.calculatedWidth = newSize = correctFloat(toPX - fromPX);\n                // We need to recalculate position, if minWidth is used\n                if (newSize < minWidth) {\n                    fromPX = (fullWidth - minWidth + newSize) * from;\n                    newSize = minWidth;\n                }\n                const newPos = Math.floor(fromPX + scroller.xOffset + scroller.yOffset);\n                const newRiflesPos = newSize / 2 - 0.5; // -0.5 -> rifle line width / 2\n                // Store current position:\n                scroller.from = from;\n                scroller.to = to;\n                if (!vertical) {\n                    scroller.scrollbarGroup[method]({\n                        translateX: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        width: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateX: newRiflesPos\n                    });\n                    scroller.scrollbarLeft = newPos;\n                    scroller.scrollbarTop = 0;\n                }\n                else {\n                    scroller.scrollbarGroup[method]({\n                        translateY: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        height: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateY: newRiflesPos\n                    });\n                    scroller.scrollbarTop = newPos;\n                    scroller.scrollbarLeft = 0;\n                }\n                if (newSize <= 12) {\n                    scroller.scrollbarRifles.hide();\n                }\n                else {\n                    scroller.scrollbarRifles.show();\n                }\n                // Show or hide the scrollbar based on the showFull setting\n                if (options.showFull === false) {\n                    if (from <= 0 && to >= 1) {\n                        scroller.group.hide();\n                    }\n                    else {\n                        scroller.group.show();\n                    }\n                }\n                scroller.rendered = true;\n            }\n            /**\n             * Checks if the extremes should be updated in response to a scrollbar\n             * change event.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#shouldUpdateExtremes\n             */\n            shouldUpdateExtremes(eventType) {\n                return (pick(this.options.liveRedraw, H.svg &&\n                    !H.isTouchDevice &&\n                    !this.chart.boosted) ||\n                    // Mouseup always should change extremes\n                    eventType === 'mouseup' ||\n                    eventType === 'touchend' ||\n                    // Internal events\n                    !defined(eventType));\n            }\n            trackClick(e) {\n                const scroller = this;\n                const normalizedEvent = scroller.chart.pointer?.normalize(e) || e, range = scroller.to - scroller.from, top = scroller.y + scroller.scrollbarTop, left = scroller.x + scroller.scrollbarLeft;\n                if ((scroller.options.vertical && normalizedEvent.chartY > top) ||\n                    (!scroller.options.vertical && normalizedEvent.chartX > left)) {\n                    // On the top or on the left side of the track:\n                    scroller.updatePosition(scroller.from + range, scroller.to + range);\n                }\n                else {\n                    // On the bottom or the right side of the track:\n                    scroller.updatePosition(scroller.from - range, scroller.to - range);\n                }\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            /**\n             * Update the scrollbar with new options\n             *\n             * @private\n             * @function Highcharts.Scrollbar#update\n             * @param  {Highcharts.ScrollbarOptions} options\n             */\n            update(options) {\n                this.destroy();\n                this.init(this.chart.renderer, merge(true, this.options, options), this.chart);\n            }\n            /**\n             * Update position option in the Scrollbar, with normalized 0-1 scale\n             *\n             * @private\n             * @function Highcharts.Scrollbar#updatePosition\n             * @param  {number} from\n             * @param  {number} to\n             */\n            updatePosition(from, to) {\n                if (to > 1) {\n                    from = correctFloat(1 - correctFloat(to - from));\n                    to = 1;\n                }\n                if (from < 0) {\n                    to = correctFloat(to - from);\n                    from = 0;\n                }\n                this.from = from;\n                this.to = to;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        Scrollbar.defaultOptions = ScrollbarDefaults;\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        defaultOptions.scrollbar = merge(true, Scrollbar.defaultOptions, defaultOptions.scrollbar);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Scrollbar;\n    });\n    _registerModule(_modules, 'Stock/Navigator/Navigator.js', [_modules['Core/Axis/Axis.js'], _modules['Stock/Navigator/ChartNavigatorComposition.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/NavigatorAxisComposition.js'], _modules['Stock/Navigator/NavigatorComposition.js'], _modules['Stock/Scrollbar/Scrollbar.js'], _modules['Core/Utilities.js']], function (Axis, ChartNavigatorComposition, D, H, NavigatorAxisAdditions, NavigatorComposition, Scrollbar, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { isTouchDevice } = H;\n        const { addEvent, clamp, correctFloat, defined, destroyObjectProperties, erase, extend, find, fireEvent, isArray, isNumber, merge, pick, removeEvent, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Finding the min or max of a set of variables where we don't know if they are\n         * defined, is a pattern that is repeated several places in Highcharts. Consider\n         * making this a global utility method.\n         * @private\n         */\n        function numExt(extreme, ...args) {\n            const numbers = [].filter.call(args, isNumber);\n            if (numbers.length) {\n                return Math[extreme].apply(0, numbers);\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Navigator class\n         *\n         * @private\n         * @class\n         * @name Highcharts.Navigator\n         *\n         * @param {Highcharts.Chart} chart\n         *        Chart object\n         */\n        class Navigator {\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            static compose(ChartClass, AxisClass, SeriesClass) {\n                ChartNavigatorComposition.compose(ChartClass, Navigator);\n                NavigatorComposition.compose(ChartClass, AxisClass, SeriesClass);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart) {\n                this.scrollbarHeight = 0;\n                this.init(chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Draw one of the handles on the side of the zoomed range in the navigator.\n             *\n             * @private\n             * @function Highcharts.Navigator#drawHandle\n             *\n             * @param {number} x\n             *        The x center for the handle\n             *\n             * @param {number} index\n             *        0 for left and 1 for right\n             *\n             * @param {boolean|undefined} inverted\n             *        Flag for chart.inverted\n             *\n             * @param {string} verb\n             *        Use 'animate' or 'attr'\n             */\n            drawHandle(x, index, inverted, verb) {\n                const navigator = this, height = navigator.navigatorOptions.handles.height;\n                // Place it\n                navigator.handles[index][verb](inverted ? {\n                    translateX: Math.round(navigator.left + navigator.height / 2),\n                    translateY: Math.round(navigator.top + parseInt(x, 10) + 0.5 - height)\n                } : {\n                    translateX: Math.round(navigator.left + parseInt(x, 10)),\n                    translateY: Math.round(navigator.top + navigator.height / 2 - height / 2 - 1)\n                });\n            }\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawOutline\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            drawOutline(zoomedMin, zoomedMax, inverted, verb) {\n                const navigator = this, maskInside = navigator.navigatorOptions.maskInside, outlineWidth = navigator.outline.strokeWidth(), halfOutline = outlineWidth / 2, outlineCorrection = (outlineWidth % 2) / 2, // #5800\n                scrollButtonSize = navigator.scrollButtonSize, navigatorSize = navigator.size, navigatorTop = navigator.top, height = navigator.height, lineTop = navigatorTop - halfOutline, lineBtm = navigatorTop + height;\n                let left = navigator.left, verticalMin, path;\n                if (inverted) {\n                    verticalMin = navigatorTop + zoomedMax + outlineCorrection;\n                    zoomedMax = navigatorTop + zoomedMin + outlineCorrection;\n                    path = [\n                        [\n                            'M',\n                            left + height,\n                            navigatorTop - scrollButtonSize - outlineCorrection\n                        ],\n                        // Top right of zoomed range\n                        ['L', left + height, verticalMin],\n                        ['L', left, verticalMin],\n                        ['M', left, zoomedMax],\n                        ['L', left + height, zoomedMax],\n                        [\n                            'L',\n                            left + height,\n                            navigatorTop + navigatorSize + scrollButtonSize\n                        ]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // Upper left of zoomed range\n                        ['M', left + height, verticalMin - halfOutline], \n                        // Upper right of z.r.\n                        [\n                            'L',\n                            left + height,\n                            zoomedMax + halfOutline\n                        ]);\n                    }\n                }\n                else {\n                    left -= scrollButtonSize;\n                    zoomedMin += left + scrollButtonSize - outlineCorrection;\n                    zoomedMax += left + scrollButtonSize - outlineCorrection;\n                    path = [\n                        // Left\n                        ['M', left, lineTop],\n                        // Upper left of zoomed range\n                        ['L', zoomedMin, lineTop],\n                        // Lower left of z.r.\n                        ['L', zoomedMin, lineBtm],\n                        // Lower right of z.r.\n                        ['M', zoomedMax, lineBtm],\n                        // Upper right of z.r.\n                        ['L', zoomedMax, lineTop],\n                        // Right\n                        [\n                            'L',\n                            left + navigatorSize + scrollButtonSize * 2,\n                            navigatorTop + halfOutline\n                        ]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // Upper left of zoomed range\n                        ['M', zoomedMin - halfOutline, lineTop], \n                        // Upper right of z.r.\n                        ['L', zoomedMax + halfOutline, lineTop]);\n                    }\n                }\n                navigator.outline[verb]({\n                    d: path\n                });\n            }\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawMasks\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            drawMasks(zoomedMin, zoomedMax, inverted, verb) {\n                const navigator = this, left = navigator.left, top = navigator.top, navigatorHeight = navigator.height;\n                let height, width, x, y;\n                // Determine rectangle position & size\n                // According to (non)inverted position:\n                if (inverted) {\n                    x = [left, left, left];\n                    y = [top, top + zoomedMin, top + zoomedMax];\n                    width = [navigatorHeight, navigatorHeight, navigatorHeight];\n                    height = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                }\n                else {\n                    x = [left, left + zoomedMin, left + zoomedMax];\n                    y = [top, top, top];\n                    width = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                    height = [navigatorHeight, navigatorHeight, navigatorHeight];\n                }\n                navigator.shades.forEach((shade, i) => {\n                    shade[verb]({\n                        x: x[i],\n                        y: y[i],\n                        width: width[i],\n                        height: height[i]\n                    });\n                });\n            }\n            /**\n             * Generate DOM elements for a navigator:\n             *\n             * - main navigator group\n             *\n             * - all shades\n             *\n             * - outline\n             *\n             * - handles\n             *\n             * @private\n             * @function Highcharts.Navigator#renderElements\n             */\n            renderElements() {\n                const navigator = this, navigatorOptions = navigator.navigatorOptions, maskInside = navigatorOptions.maskInside, chart = navigator.chart, inverted = chart.inverted, renderer = chart.renderer, mouseCursor = {\n                    cursor: inverted ? 'ns-resize' : 'ew-resize'\n                }, \n                // Create the main navigator group\n                navigatorGroup = navigator.navigatorGroup = renderer\n                    .g('navigator')\n                    .attr({\n                    zIndex: 8,\n                    visibility: 'hidden'\n                })\n                    .add();\n                // Create masks, each mask will get events and fill:\n                [\n                    !maskInside,\n                    maskInside,\n                    !maskInside\n                ].forEach((hasMask, index) => {\n                    const shade = renderer.rect()\n                        .addClass('highcharts-navigator-mask' +\n                        (index === 1 ? '-inside' : '-outside'))\n                        .add(navigatorGroup);\n                    if (!chart.styledMode) {\n                        shade.attr({\n                            fill: hasMask ?\n                                navigatorOptions.maskFill :\n                                'rgba(0,0,0,0)'\n                        });\n                        if (index === 1) {\n                            shade.css(mouseCursor);\n                        }\n                    }\n                    navigator.shades[index] = shade;\n                });\n                // Create the outline:\n                navigator.outline = renderer.path()\n                    .addClass('highcharts-navigator-outline')\n                    .add(navigatorGroup);\n                if (!chart.styledMode) {\n                    navigator.outline.attr({\n                        'stroke-width': navigatorOptions.outlineWidth,\n                        stroke: navigatorOptions.outlineColor\n                    });\n                }\n                // Create the handlers:\n                if (navigatorOptions.handles && navigatorOptions.handles.enabled) {\n                    const handlesOptions = navigatorOptions.handles, { height, width } = handlesOptions;\n                    [0, 1].forEach((index) => {\n                        navigator.handles[index] = renderer.symbol(handlesOptions.symbols[index], -width / 2 - 1, 0, width, height, handlesOptions);\n                        if (chart.inverted) {\n                            navigator.handles[index].attr({\n                                rotation: 90,\n                                rotationOriginX: Math.floor(-width / 2),\n                                rotationOriginY: (height + width) / 2\n                            });\n                        }\n                        // Z index is 6 for right handle, 7 for left. Can't be 10,\n                        // because of the tooltip in inverted chart (#2908).\n                        navigator.handles[index].attr({ zIndex: 7 - index })\n                            .addClass('highcharts-navigator-handle ' +\n                            'highcharts-navigator-handle-' +\n                            ['left', 'right'][index]).add(navigatorGroup);\n                        if (!chart.styledMode) {\n                            navigator.handles[index]\n                                .attr({\n                                fill: handlesOptions.backgroundColor,\n                                stroke: handlesOptions.borderColor,\n                                'stroke-width': handlesOptions.lineWidth\n                            })\n                                .css(mouseCursor);\n                        }\n                    });\n                }\n            }\n            /**\n             * Update navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#update\n             *\n             * @param {Highcharts.NavigatorOptions} options\n             *        Options to merge in when updating navigator\n             */\n            update(options) {\n                // Remove references to old navigator series in base series\n                (this.series || []).forEach((series) => {\n                    if (series.baseSeries) {\n                        delete series.baseSeries.navigatorSeries;\n                    }\n                });\n                // Destroy and rebuild navigator\n                this.destroy();\n                const chartOptions = this.chart.options;\n                merge(true, chartOptions.navigator, options);\n                this.init(this.chart);\n            }\n            /**\n             * Render the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#render\n             * @param {number} min\n             *        X axis value minimum\n             * @param {number} max\n             *        X axis value maximum\n             * @param {number} [pxMin]\n             *        Pixel value minimum\n             * @param {number} [pxMax]\n             *        Pixel value maximum\n             */\n            render(min, max, pxMin, pxMax) {\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, pointRange = xAxis.pointRange || 0, scrollbarXAxis = xAxis.navigatorAxis.fake ? chart.xAxis[0] : xAxis, navigatorEnabled = navigator.navigatorEnabled, rendered = navigator.rendered, inverted = chart.inverted, minRange = chart.xAxis[0].minRange, maxRange = chart.xAxis[0].options.maxRange, scrollButtonSize = navigator.scrollButtonSize;\n                let navigatorWidth, scrollbarLeft, scrollbarTop, scrollbarHeight = navigator.scrollbarHeight, navigatorSize, verb;\n                // Don't redraw while moving the handles (#4703).\n                if (this.hasDragged && !defined(pxMin)) {\n                    return;\n                }\n                min = correctFloat(min - pointRange / 2);\n                max = correctFloat(max + pointRange / 2);\n                // Don't render the navigator until we have data (#486, #4202, #5172).\n                if (!isNumber(min) || !isNumber(max)) {\n                    // However, if navigator was already rendered, we may need to resize\n                    // it. For example hidden series, but visible navigator (#6022).\n                    if (rendered) {\n                        pxMin = 0;\n                        pxMax = pick(xAxis.width, scrollbarXAxis.width);\n                    }\n                    else {\n                        return;\n                    }\n                }\n                navigator.left = pick(xAxis.left, \n                // In case of scrollbar only, without navigator\n                chart.plotLeft + scrollButtonSize +\n                    (inverted ? chart.plotWidth : 0));\n                let zoomedMax = navigator.size = navigatorSize = pick(xAxis.len, (inverted ? chart.plotHeight : chart.plotWidth) -\n                    2 * scrollButtonSize);\n                if (inverted) {\n                    navigatorWidth = scrollbarHeight;\n                }\n                else {\n                    navigatorWidth = navigatorSize + 2 * scrollButtonSize;\n                }\n                // Get the pixel position of the handles\n                pxMin = pick(pxMin, xAxis.toPixels(min, true));\n                pxMax = pick(pxMax, xAxis.toPixels(max, true));\n                // Verify (#1851, #2238)\n                if (!isNumber(pxMin) || Math.abs(pxMin) === Infinity) {\n                    pxMin = 0;\n                    pxMax = navigatorWidth;\n                }\n                // Are we below the minRange? (#2618, #6191)\n                const newMin = xAxis.toValue(pxMin, true), newMax = xAxis.toValue(pxMax, true), currentRange = Math.abs(correctFloat(newMax - newMin));\n                if (currentRange < minRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - minRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + minRange + pointRange, true);\n                    }\n                }\n                else if (defined(maxRange) &&\n                    correctFloat(currentRange - pointRange) > maxRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - maxRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + maxRange + pointRange, true);\n                    }\n                }\n                // Handles are allowed to cross, but never exceed the plot area\n                navigator.zoomedMax = clamp(Math.max(pxMin, pxMax), 0, zoomedMax);\n                navigator.zoomedMin = clamp(navigator.fixedWidth ?\n                    navigator.zoomedMax - navigator.fixedWidth :\n                    Math.min(pxMin, pxMax), 0, zoomedMax);\n                navigator.range = navigator.zoomedMax - navigator.zoomedMin;\n                zoomedMax = Math.round(navigator.zoomedMax);\n                const zoomedMin = Math.round(navigator.zoomedMin);\n                if (navigatorEnabled) {\n                    navigator.navigatorGroup.attr({\n                        visibility: 'inherit'\n                    });\n                    // Place elements\n                    verb = rendered && !navigator.hasDragged ? 'animate' : 'attr';\n                    navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    if (navigator.navigatorOptions.handles.enabled) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n                if (navigator.scrollbar) {\n                    if (inverted) {\n                        scrollbarTop = navigator.top - scrollButtonSize;\n                        scrollbarLeft = navigator.left - scrollbarHeight +\n                            (navigatorEnabled || !scrollbarXAxis.opposite ? 0 :\n                                // Multiple axes has offsets:\n                                (scrollbarXAxis.titleOffset || 0) +\n                                    // Self margin from the axis.title\n                                    scrollbarXAxis.axisTitleMargin);\n                        scrollbarHeight = navigatorSize + 2 * scrollButtonSize;\n                    }\n                    else {\n                        scrollbarTop = navigator.top + (navigatorEnabled ?\n                            navigator.height :\n                            -scrollbarHeight);\n                        scrollbarLeft = navigator.left - scrollButtonSize;\n                    }\n                    // Reposition scrollbar\n                    navigator.scrollbar.position(scrollbarLeft, scrollbarTop, navigatorWidth, scrollbarHeight);\n                    // Keep scale 0-1\n                    navigator.scrollbar.setRange(\n                    // Use real value, not rounded because range can be very small\n                    // (#1716)\n                    navigator.zoomedMin / (navigatorSize || 1), navigator.zoomedMax / (navigatorSize || 1));\n                }\n                navigator.rendered = true;\n                fireEvent(this, 'afterRender');\n            }\n            /**\n             * Set up the mouse and touch events for the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#addMouseEvents\n             */\n            addMouseEvents() {\n                const navigator = this, chart = navigator.chart, container = chart.container;\n                let eventsToUnbind = [], mouseMoveHandler, mouseUpHandler;\n                /**\n                 * Create mouse events' handlers.\n                 * Make them as separate functions to enable wrapping them:\n                 */\n                navigator.mouseMoveHandler = mouseMoveHandler = function (e) {\n                    navigator.onMouseMove(e);\n                };\n                navigator.mouseUpHandler = mouseUpHandler = function (e) {\n                    navigator.onMouseUp(e);\n                };\n                // Add shades and handles mousedown events\n                eventsToUnbind = navigator.getPartsEvents('mousedown');\n                eventsToUnbind.push(\n                // Add mouse move and mouseup events. These are bind to doc/div,\n                // because Navigator.grabbedSomething flags are stored in mousedown\n                // events\n                addEvent(chart.renderTo, 'mousemove', mouseMoveHandler), addEvent(container.ownerDocument, 'mouseup', mouseUpHandler), \n                // Touch events\n                addEvent(chart.renderTo, 'touchmove', mouseMoveHandler), addEvent(container.ownerDocument, 'touchend', mouseUpHandler));\n                eventsToUnbind.concat(navigator.getPartsEvents('touchstart'));\n                navigator.eventsToUnbind = eventsToUnbind;\n                // Data events\n                if (navigator.series && navigator.series[0]) {\n                    eventsToUnbind.push(addEvent(navigator.series[0].xAxis, 'foundExtremes', function () {\n                        chart.navigator.modifyNavigatorAxisExtremes();\n                    }));\n                }\n            }\n            /**\n             * Generate events for handles and masks\n             *\n             * @private\n             * @function Highcharts.Navigator#getPartsEvents\n             *\n             * @param {string} eventName\n             *        Event name handler, 'mousedown' or 'touchstart'\n             *\n             * @return {Array<Function>}\n             *         An array of functions to remove navigator functions from the\n             *         events again.\n             */\n            getPartsEvents(eventName) {\n                const navigator = this, events = [];\n                ['shades', 'handles'].forEach(function (name) {\n                    navigator[name].forEach(function (navigatorItem, index) {\n                        events.push(addEvent(navigatorItem.element, eventName, function (e) {\n                            navigator[name + 'Mousedown'](e, index);\n                        }));\n                    });\n                });\n                return events;\n            }\n            /**\n             * Mousedown on a shaded mask, either:\n             *\n             * - will be stored for future drag&drop\n             *\n             * - will directly shift to a new range\n             *\n             * @private\n             * @function Highcharts.Navigator#shadesMousedown\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             *\n             * @param {number} index\n             *        Index of a mask in Navigator.shades array\n             */\n            shadesMousedown(e, index) {\n                e = this.chart.pointer?.normalize(e) || e;\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, zoomedMin = navigator.zoomedMin, navigatorSize = navigator.size, range = navigator.range;\n                let navigatorPosition = navigator.left, chartX = e.chartX, fixedMax, fixedMin, ext, left;\n                // For inverted chart, swap some options:\n                if (chart.inverted) {\n                    chartX = e.chartY;\n                    navigatorPosition = navigator.top;\n                }\n                if (index === 1) {\n                    // Store information for drag&drop\n                    navigator.grabbedCenter = chartX;\n                    navigator.fixedWidth = range;\n                    navigator.dragOffset = chartX - zoomedMin;\n                }\n                else {\n                    // Shift the range by clicking on shaded areas\n                    left = chartX - navigatorPosition - range / 2;\n                    if (index === 0) {\n                        left = Math.max(0, left);\n                    }\n                    else if (index === 2 && left + range >= navigatorSize) {\n                        left = navigatorSize - range;\n                        if (navigator.reversedExtremes) {\n                            // #7713\n                            left -= range;\n                            fixedMin = navigator.getUnionExtremes().dataMin;\n                        }\n                        else {\n                            // #2293, #3543\n                            fixedMax = navigator.getUnionExtremes().dataMax;\n                        }\n                    }\n                    if (left !== zoomedMin) { // It has actually moved\n                        navigator.fixedWidth = range; // #1370\n                        ext = xAxis.navigatorAxis.toFixedRange(left, left + range, fixedMin, fixedMax);\n                        if (defined(ext.min)) { // #7411\n                            fireEvent(this, 'setRange', {\n                                min: Math.min(ext.min, ext.max),\n                                max: Math.max(ext.min, ext.max),\n                                redraw: true,\n                                eventArguments: {\n                                    trigger: 'navigator'\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n            /**\n             * Mousedown on a handle mask.\n             * Will store necessary information for drag&drop.\n             *\n             * @private\n             * @function Highcharts.Navigator#handlesMousedown\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             * @param {number} index\n             *        Index of a handle in Navigator.handles array\n             */\n            handlesMousedown(e, index) {\n                e = this.chart.pointer?.normalize(e) || e;\n                const navigator = this, chart = navigator.chart, baseXAxis = chart.xAxis[0], \n                // For reversed axes, min and max are changed,\n                // so the other extreme should be stored\n                reverse = navigator.reversedExtremes;\n                if (index === 0) {\n                    // Grab the left handle\n                    navigator.grabbedLeft = true;\n                    navigator.otherHandlePos = navigator.zoomedMax;\n                    navigator.fixedExtreme = reverse ? baseXAxis.min : baseXAxis.max;\n                }\n                else {\n                    // Grab the right handle\n                    navigator.grabbedRight = true;\n                    navigator.otherHandlePos = navigator.zoomedMin;\n                    navigator.fixedExtreme = reverse ? baseXAxis.max : baseXAxis.min;\n                }\n                chart.setFixedRange(void 0);\n            }\n            /**\n             * Mouse move event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseMove\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            onMouseMove(e) {\n                const navigator = this, chart = navigator.chart, navigatorSize = navigator.navigatorSize, range = navigator.range, dragOffset = navigator.dragOffset, inverted = chart.inverted;\n                let left = navigator.left, chartX;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when holding\n                // the finger down in the center of the scrollbar. This should be\n                // ignored.\n                if (!e.touches || e.touches[0].pageX !== 0) { // #4696\n                    e = chart.pointer?.normalize(e) || e;\n                    chartX = e.chartX;\n                    // Swap some options for inverted chart\n                    if (inverted) {\n                        left = navigator.top;\n                        chartX = e.chartY;\n                    }\n                    // Drag left handle or top handle\n                    if (navigator.grabbedLeft) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, chartX - left, navigator.otherHandlePos);\n                        // Drag right handle or bottom handle\n                    }\n                    else if (navigator.grabbedRight) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, navigator.otherHandlePos, chartX - left);\n                        // Drag scrollbar or open area in navigator\n                    }\n                    else if (navigator.grabbedCenter) {\n                        navigator.hasDragged = true;\n                        if (chartX < dragOffset) { // Outside left\n                            chartX = dragOffset;\n                            // Outside right\n                        }\n                        else if (chartX >\n                            navigatorSize + dragOffset - range) {\n                            chartX = navigatorSize + dragOffset - range;\n                        }\n                        navigator.render(0, 0, chartX - dragOffset, chartX - dragOffset + range);\n                    }\n                    if (navigator.hasDragged &&\n                        navigator.scrollbar &&\n                        pick(navigator.scrollbar.options.liveRedraw, \n                        // By default, don't run live redraw on touch\n                        // devices or if the chart is in boost.\n                        !isTouchDevice &&\n                            !this.chart.boosted)) {\n                        e.DOMType = e.type;\n                        setTimeout(function () {\n                            navigator.onMouseUp(e);\n                        }, 0);\n                    }\n                }\n            }\n            /**\n             * Mouse up event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseUp\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            onMouseUp(e) {\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, scrollbar = navigator.scrollbar, DOMEvent = e.DOMEvent || e, inverted = chart.inverted, verb = navigator.rendered && !navigator.hasDragged ?\n                    'animate' : 'attr';\n                let zoomedMax, zoomedMin, unionExtremes, fixedMin, fixedMax, ext;\n                if (\n                // MouseUp is called for both, navigator and scrollbar (that order),\n                // which causes calling afterSetExtremes twice. Prevent first call\n                // by checking if scrollbar is going to set new extremes (#6334)\n                (navigator.hasDragged && (!scrollbar || !scrollbar.hasDragged)) ||\n                    e.trigger === 'scrollbar') {\n                    unionExtremes = navigator.getUnionExtremes();\n                    // When dragging one handle, make sure the other one doesn't change\n                    if (navigator.zoomedMin === navigator.otherHandlePos) {\n                        fixedMin = navigator.fixedExtreme;\n                    }\n                    else if (navigator.zoomedMax === navigator.otherHandlePos) {\n                        fixedMax = navigator.fixedExtreme;\n                    }\n                    // Snap to right edge (#4076)\n                    if (navigator.zoomedMax === navigator.size) {\n                        fixedMax = navigator.reversedExtremes ?\n                            unionExtremes.dataMin :\n                            unionExtremes.dataMax;\n                    }\n                    // Snap to left edge (#7576)\n                    if (navigator.zoomedMin === 0) {\n                        fixedMin = navigator.reversedExtremes ?\n                            unionExtremes.dataMax :\n                            unionExtremes.dataMin;\n                    }\n                    ext = xAxis.navigatorAxis.toFixedRange(navigator.zoomedMin, navigator.zoomedMax, fixedMin, fixedMax);\n                    if (defined(ext.min)) {\n                        fireEvent(this, 'setRange', {\n                            min: Math.min(ext.min, ext.max),\n                            max: Math.max(ext.min, ext.max),\n                            redraw: true,\n                            animation: navigator.hasDragged ? false : null,\n                            eventArguments: {\n                                trigger: 'navigator',\n                                triggerOp: 'navigator-drag',\n                                DOMEvent: DOMEvent // #1838\n                            }\n                        });\n                    }\n                }\n                if (e.DOMType !== 'mousemove' &&\n                    e.DOMType !== 'touchmove') {\n                    navigator.grabbedLeft = navigator.grabbedRight =\n                        navigator.grabbedCenter = navigator.fixedWidth =\n                            navigator.fixedExtreme = navigator.otherHandlePos =\n                                navigator.hasDragged = navigator.dragOffset = null;\n                }\n                // Update position of navigator shades, outline and handles (#12573)\n                if (navigator.navigatorEnabled &&\n                    isNumber(navigator.zoomedMin) &&\n                    isNumber(navigator.zoomedMax)) {\n                    zoomedMin = Math.round(navigator.zoomedMin);\n                    zoomedMax = Math.round(navigator.zoomedMax);\n                    if (navigator.shades) {\n                        navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.outline) {\n                        navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.navigatorOptions.handles.enabled &&\n                        Object.keys(navigator.handles).length ===\n                            navigator.handles.length) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n            }\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeEvents\n             */\n            removeEvents() {\n                if (this.eventsToUnbind) {\n                    this.eventsToUnbind.forEach(function (unbind) {\n                        unbind();\n                    });\n                    this.eventsToUnbind = void 0;\n                }\n                this.removeBaseSeriesEvents();\n            }\n            /**\n             * Remove data events.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeBaseSeriesEvents\n             */\n            removeBaseSeriesEvents() {\n                const baseSeries = this.baseSeries || [];\n                if (this.navigatorEnabled && baseSeries[0]) {\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        baseSeries.forEach(function (series) {\n                            removeEvent(series, 'updatedData', this.updatedDataHandler);\n                        }, this);\n                    }\n                    // We only listen for extremes-events on the first baseSeries\n                    if (baseSeries[0].xAxis) {\n                        removeEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes);\n                    }\n                }\n            }\n            /**\n             * Initialize the Navigator object\n             *\n             * @private\n             * @function Highcharts.Navigator#init\n             */\n            init(chart) {\n                const chartOptions = chart.options, navigatorOptions = chartOptions.navigator || {}, navigatorEnabled = navigatorOptions.enabled, scrollbarOptions = chartOptions.scrollbar || {}, scrollbarEnabled = scrollbarOptions.enabled, height = navigatorEnabled && navigatorOptions.height || 0, scrollbarHeight = scrollbarEnabled && scrollbarOptions.height || 0, scrollButtonSize = scrollbarOptions.buttonsEnabled && scrollbarHeight || 0;\n                this.handles = [];\n                this.shades = [];\n                this.chart = chart;\n                this.setBaseSeries();\n                this.height = height;\n                this.scrollbarHeight = scrollbarHeight;\n                this.scrollButtonSize = scrollButtonSize;\n                this.scrollbarEnabled = scrollbarEnabled;\n                this.navigatorEnabled = navigatorEnabled;\n                this.navigatorOptions = navigatorOptions;\n                this.scrollbarOptions = scrollbarOptions;\n                this.opposite = pick(navigatorOptions.opposite, Boolean(!navigatorEnabled && chart.inverted)); // #6262\n                const navigator = this, baseSeries = navigator.baseSeries, xAxisIndex = chart.xAxis.length, yAxisIndex = chart.yAxis.length, baseXaxis = baseSeries && baseSeries[0] && baseSeries[0].xAxis ||\n                    chart.xAxis[0] || { options: {} };\n                chart.isDirtyBox = true;\n                if (navigator.navigatorEnabled) {\n                    // An x axis is required for scrollbar also\n                    navigator.xAxis = new Axis(chart, merge({\n                        // Inherit base xAxis' break, ordinal options and overscroll\n                        breaks: baseXaxis.options.breaks,\n                        ordinal: baseXaxis.options.ordinal,\n                        overscroll: baseXaxis.options.overscroll\n                    }, navigatorOptions.xAxis, {\n                        id: 'navigator-x-axis',\n                        yAxis: 'navigator-y-axis',\n                        type: 'datetime',\n                        index: xAxisIndex,\n                        isInternal: true,\n                        offset: 0,\n                        keepOrdinalPadding: true,\n                        startOnTick: false,\n                        endOnTick: false,\n                        minPadding: 0,\n                        maxPadding: 0,\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        offsets: [scrollButtonSize, 0, -scrollButtonSize, 0],\n                        width: height\n                    } : {\n                        offsets: [0, -scrollButtonSize, 0, scrollButtonSize],\n                        height: height\n                    }), 'xAxis');\n                    navigator.yAxis = new Axis(chart, merge(navigatorOptions.yAxis, {\n                        id: 'navigator-y-axis',\n                        alignTicks: false,\n                        offset: 0,\n                        index: yAxisIndex,\n                        isInternal: true,\n                        reversed: pick((navigatorOptions.yAxis &&\n                            navigatorOptions.yAxis.reversed), (chart.yAxis[0] && chart.yAxis[0].reversed), false),\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        width: height\n                    } : {\n                        height: height\n                    }), 'yAxis');\n                    // If we have a base series, initialize the navigator series\n                    if (baseSeries || navigatorOptions.series.data) {\n                        navigator.updateNavigatorSeries(false);\n                        // If not, set up an event to listen for added series\n                    }\n                    else if (chart.series.length === 0) {\n                        navigator.unbindRedraw = addEvent(chart, 'beforeRedraw', function () {\n                            // We've got one, now add it as base\n                            if (chart.series.length > 0 && !navigator.series) {\n                                navigator.setBaseSeries();\n                                navigator.unbindRedraw(); // Reset\n                            }\n                        });\n                    }\n                    navigator.reversedExtremes = (chart.inverted && !navigator.xAxis.reversed) || (!chart.inverted && navigator.xAxis.reversed);\n                    // Render items, so we can bind events to them:\n                    navigator.renderElements();\n                    // Add mouse events\n                    navigator.addMouseEvents();\n                    // In case of scrollbar only, fake an x axis to get translation\n                }\n                else {\n                    navigator.xAxis = {\n                        chart,\n                        navigatorAxis: {\n                            fake: true\n                        },\n                        translate: function (value, reverse) {\n                            const axis = chart.xAxis[0], ext = axis.getExtremes(), scrollTrackWidth = axis.len - 2 * scrollButtonSize, min = numExt('min', axis.options.min, ext.dataMin), valueRange = numExt('max', axis.options.max, ext.dataMax) - min;\n                            return reverse ?\n                                // From pixel to value\n                                (value * valueRange / scrollTrackWidth) + min :\n                                // From value to pixel\n                                scrollTrackWidth * (value - min) / valueRange;\n                        },\n                        toPixels: function (value) {\n                            return this.translate(value);\n                        },\n                        toValue: function (value) {\n                            return this.translate(value, true);\n                        }\n                    };\n                    navigator.xAxis.navigatorAxis.axis = navigator.xAxis;\n                    navigator.xAxis.navigatorAxis.toFixedRange = (NavigatorAxisAdditions.prototype.toFixedRange.bind(navigator.xAxis.navigatorAxis));\n                }\n                // Initialize the scrollbar\n                if (chart.options.scrollbar.enabled) {\n                    const options = merge(chart.options.scrollbar, { vertical: chart.inverted });\n                    if (!isNumber(options.margin) && navigator.navigatorEnabled) {\n                        options.margin = chart.inverted ? -3 : 3;\n                    }\n                    chart.scrollbar = navigator.scrollbar = new Scrollbar(chart.renderer, options, chart);\n                    addEvent(navigator.scrollbar, 'changed', function (e) {\n                        const range = navigator.size, to = range * this.to, from = range * this.from;\n                        navigator.hasDragged = navigator.scrollbar.hasDragged;\n                        navigator.render(0, 0, from, to);\n                        if (this.shouldUpdateExtremes(e.DOMType)) {\n                            setTimeout(function () {\n                                navigator.onMouseUp(e);\n                            });\n                        }\n                    });\n                }\n                // Add data events\n                navigator.addBaseSeriesEvents();\n                // Add redraw events\n                navigator.addChartEvents();\n            }\n            /**\n             * Get the union data extremes of the chart - the outer data extremes of the\n             * base X axis and the navigator axis.\n             *\n             * @private\n             * @function Highcharts.Navigator#getUnionExtremes\n             */\n            getUnionExtremes(returnFalseOnNoBaseSeries) {\n                const baseAxis = this.chart.xAxis[0], navAxis = this.xAxis, navAxisOptions = navAxis.options, baseAxisOptions = baseAxis.options;\n                let ret;\n                if (!returnFalseOnNoBaseSeries || baseAxis.dataMin !== null) {\n                    ret = {\n                        dataMin: pick(// #4053\n                        navAxisOptions && navAxisOptions.min, numExt('min', baseAxisOptions.min, baseAxis.dataMin, navAxis.dataMin, navAxis.min)),\n                        dataMax: pick(navAxisOptions && navAxisOptions.max, numExt('max', baseAxisOptions.max, baseAxis.dataMax, navAxis.dataMax, navAxis.max))\n                    };\n                }\n                return ret;\n            }\n            /**\n             * Set the base series and update the navigator series from this. With a bit\n             * of modification we should be able to make this an API method to be called\n             * from the outside\n             *\n             * @private\n             * @function Highcharts.Navigator#setBaseSeries\n             * @param {Highcharts.SeriesOptionsType} [baseSeriesOptions]\n             *        Additional series options for a navigator\n             * @param {boolean} [redraw]\n             *        Whether to redraw after update.\n             */\n            setBaseSeries(baseSeriesOptions, redraw) {\n                const chart = this.chart, baseSeries = this.baseSeries = [];\n                baseSeriesOptions = (baseSeriesOptions ||\n                    chart.options && chart.options.navigator.baseSeries ||\n                    (chart.series.length ?\n                        // Find the first non-navigator series (#8430)\n                        find(chart.series, (s) => (!s.options.isInternal)).index :\n                        0));\n                // Iterate through series and add the ones that should be shown in\n                // navigator.\n                (chart.series || []).forEach((series, i) => {\n                    if (\n                    // Don't include existing nav series\n                    !series.options.isInternal &&\n                        (series.options.showInNavigator ||\n                            (i === baseSeriesOptions ||\n                                series.options.id === baseSeriesOptions) &&\n                                series.options.showInNavigator !== false)) {\n                        baseSeries.push(series);\n                    }\n                });\n                // When run after render, this.xAxis already exists\n                if (this.xAxis && !this.xAxis.navigatorAxis.fake) {\n                    this.updateNavigatorSeries(true, redraw);\n                }\n            }\n            /**\n             * Update series in the navigator from baseSeries, adding new if does not\n             * exist.\n             *\n             * @private\n             * @function Highcharts.Navigator.updateNavigatorSeries\n             */\n            updateNavigatorSeries(addEvents, redraw) {\n                const navigator = this, chart = navigator.chart, baseSeries = navigator.baseSeries, navSeriesMixin = {\n                    enableMouseTracking: false,\n                    index: null,\n                    linkedTo: null,\n                    group: 'nav',\n                    padXAxis: false,\n                    xAxis: 'navigator-x-axis',\n                    yAxis: 'navigator-y-axis',\n                    showInLegend: false,\n                    stacking: void 0,\n                    isInternal: true,\n                    states: {\n                        inactive: {\n                            opacity: 1\n                        }\n                    }\n                }, \n                // Remove navigator series that are no longer in the baseSeries\n                navigatorSeries = navigator.series =\n                    (navigator.series || []).filter((navSeries) => {\n                        const base = navSeries.baseSeries;\n                        if (baseSeries.indexOf(base) < 0) { // Not in array\n                            // If there is still a base series connected to this\n                            // series, remove event handler and reference.\n                            if (base) {\n                                removeEvent(base, 'updatedData', navigator.updatedDataHandler);\n                                delete base.navigatorSeries;\n                            }\n                            // Kill the nav series. It may already have been\n                            // destroyed (#8715).\n                            if (navSeries.chart) {\n                                navSeries.destroy();\n                            }\n                            return false;\n                        }\n                        return true;\n                    });\n                let baseOptions, mergedNavSeriesOptions, chartNavigatorSeriesOptions = navigator.navigatorOptions.series, baseNavigatorOptions;\n                // Go through each base series and merge the options to create new\n                // series\n                if (baseSeries && baseSeries.length) {\n                    baseSeries.forEach((base) => {\n                        const linkedNavSeries = base.navigatorSeries, userNavOptions = extend(\n                        // Grab color and visibility from base as default\n                        {\n                            color: base.color,\n                            visible: base.visible\n                        }, !isArray(chartNavigatorSeriesOptions) ?\n                            chartNavigatorSeriesOptions :\n                            defaultOptions.navigator.series);\n                        // Don't update if the series exists in nav and we have disabled\n                        // adaptToUpdatedData.\n                        if (linkedNavSeries &&\n                            navigator.navigatorOptions.adaptToUpdatedData === false) {\n                            return;\n                        }\n                        navSeriesMixin.name = 'Navigator ' + baseSeries.length;\n                        baseOptions = base.options || {};\n                        baseNavigatorOptions = baseOptions.navigatorOptions || {};\n                        // The dataLabels options are not merged correctly\n                        // if the settings are an array, #13847.\n                        userNavOptions.dataLabels = splat(userNavOptions.dataLabels);\n                        mergedNavSeriesOptions = merge(baseOptions, navSeriesMixin, userNavOptions, baseNavigatorOptions);\n                        // Once nav series type is resolved, pick correct pointRange\n                        mergedNavSeriesOptions.pointRange = pick(\n                        // Stricte set pointRange in options\n                        userNavOptions.pointRange, baseNavigatorOptions.pointRange, \n                        // Fallback to default values, e.g. `null` for column\n                        defaultOptions.plotOptions[mergedNavSeriesOptions.type || 'line'].pointRange);\n                        // Merge data separately. Do a slice to avoid mutating the\n                        // navigator options from base series (#4923).\n                        const navigatorSeriesData = baseNavigatorOptions.data || userNavOptions.data;\n                        navigator.hasNavigatorData =\n                            navigator.hasNavigatorData || !!navigatorSeriesData;\n                        mergedNavSeriesOptions.data =\n                            navigatorSeriesData ||\n                                baseOptions.data && baseOptions.data.slice(0);\n                        // Update or add the series\n                        if (linkedNavSeries && linkedNavSeries.options) {\n                            linkedNavSeries.update(mergedNavSeriesOptions, redraw);\n                        }\n                        else {\n                            base.navigatorSeries = chart.initSeries(mergedNavSeriesOptions);\n                            // Set data on initial run with dataSorting enabled (#20318)\n                            chart.setSortedData();\n                            base.navigatorSeries.baseSeries = base; // Store ref\n                            navigatorSeries.push(base.navigatorSeries);\n                        }\n                    });\n                }\n                // If user has defined data (and no base series) or explicitly defined\n                // navigator.series as an array, we create these series on top of any\n                // base series.\n                if (chartNavigatorSeriesOptions.data &&\n                    !(baseSeries && baseSeries.length) ||\n                    isArray(chartNavigatorSeriesOptions)) {\n                    navigator.hasNavigatorData = false;\n                    // Allow navigator.series to be an array\n                    chartNavigatorSeriesOptions =\n                        splat(chartNavigatorSeriesOptions);\n                    chartNavigatorSeriesOptions.forEach((userSeriesOptions, i) => {\n                        navSeriesMixin.name =\n                            'Navigator ' + (navigatorSeries.length + 1);\n                        mergedNavSeriesOptions = merge(defaultOptions.navigator.series, {\n                            // Since we don't have a base series to pull color from,\n                            // try to fake it by using color from series with same\n                            // index. Otherwise pull from the colors array. We need\n                            // an explicit color as otherwise updates will increment\n                            // color counter and we'll get a new color for each\n                            // update of the nav series.\n                            color: chart.series[i] &&\n                                !chart.series[i].options.isInternal &&\n                                chart.series[i].color ||\n                                chart.options.colors[i] ||\n                                chart.options.colors[0]\n                        }, navSeriesMixin, userSeriesOptions);\n                        mergedNavSeriesOptions.data = userSeriesOptions.data;\n                        if (mergedNavSeriesOptions.data) {\n                            navigator.hasNavigatorData = true;\n                            navigatorSeries.push(chart.initSeries(mergedNavSeriesOptions));\n                        }\n                    });\n                }\n                if (addEvents) {\n                    this.addBaseSeriesEvents();\n                }\n            }\n            /**\n             * Add data events.\n             * For example when main series is updated we need to recalculate extremes\n             *\n             * @private\n             * @function Highcharts.Navigator#addBaseSeriesEvent\n             */\n            addBaseSeriesEvents() {\n                const navigator = this, baseSeries = navigator.baseSeries || [];\n                // Bind modified extremes event to first base's xAxis only.\n                // In event of > 1 base-xAxes, the navigator will ignore those.\n                // Adding this multiple times to the same axis is no problem, as\n                // duplicates should be discarded by the browser.\n                if (baseSeries[0] && baseSeries[0].xAxis) {\n                    baseSeries[0].eventsToUnbind.push(addEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes));\n                }\n                baseSeries.forEach((base) => {\n                    // Link base series show/hide to navigator series visibility\n                    base.eventsToUnbind.push(addEvent(base, 'show', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(true, false);\n                        }\n                    }));\n                    base.eventsToUnbind.push(addEvent(base, 'hide', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(false, false);\n                        }\n                    }));\n                    // Respond to updated data in the base series, unless explicitly\n                    // not adapting to data changes.\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        if (base.xAxis) {\n                            base.eventsToUnbind.push(addEvent(base, 'updatedData', this.updatedDataHandler));\n                        }\n                    }\n                    // Handle series removal\n                    base.eventsToUnbind.push(addEvent(base, 'remove', function () {\n                        if (this.navigatorSeries) {\n                            erase(navigator.series, this.navigatorSeries);\n                            if (defined(this.navigatorSeries.options)) {\n                                this.navigatorSeries.remove(false);\n                            }\n                            delete this.navigatorSeries;\n                        }\n                    }));\n                });\n            }\n            /**\n             * Get minimum from all base series connected to the navigator\n             * @private\n             * @param {number} currentSeriesMin\n             *        Minium from the current series\n             * @return {number}\n             *         Minimum from all series\n             */\n            getBaseSeriesMin(currentSeriesMin) {\n                return this.baseSeries.reduce(function (min, series) {\n                    // (#10193)\n                    return Math.min(min, series.xData && series.xData.length ?\n                        series.xData[0] : min);\n                }, currentSeriesMin);\n            }\n            /**\n             * Set the navigator x axis extremes to reflect the total. The navigator\n             * extremes should always be the extremes of the union of all series in the\n             * chart as well as the navigator series.\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyNavigatorAxisExtremes\n             */\n            modifyNavigatorAxisExtremes() {\n                const xAxis = this.xAxis;\n                if (typeof xAxis.getExtremes !== 'undefined') {\n                    const unionExtremes = this.getUnionExtremes(true);\n                    if (unionExtremes &&\n                        (unionExtremes.dataMin !== xAxis.min ||\n                            unionExtremes.dataMax !== xAxis.max)) {\n                        xAxis.min = unionExtremes.dataMin;\n                        xAxis.max = unionExtremes.dataMax;\n                    }\n                }\n            }\n            /**\n             * Hook to modify the base axis extremes with information from the Navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyBaseAxisExtremes\n             */\n            modifyBaseAxisExtremes() {\n                const baseXAxis = this, navigator = baseXAxis.chart.navigator, baseExtremes = baseXAxis.getExtremes(), baseMin = baseExtremes.min, baseMax = baseExtremes.max, baseDataMin = baseExtremes.dataMin, baseDataMax = baseExtremes.dataMax, range = baseMax - baseMin, stickToMin = navigator.stickToMin, stickToMax = navigator.stickToMax, overscroll = pick(baseXAxis.ordinal?.convertOverscroll(baseXAxis.options.overscroll), 0), navigatorSeries = navigator.series && navigator.series[0], hasSetExtremes = !!baseXAxis.setExtremes, \n                // When the extremes have been set by range selector button, don't\n                // stick to min or max. The range selector buttons will handle the\n                // extremes. (#5489)\n                unmutable = baseXAxis.eventArgs &&\n                    baseXAxis.eventArgs.trigger === 'rangeSelectorButton';\n                let newMax, newMin;\n                if (!unmutable) {\n                    // If the zoomed range is already at the min, move it to the right\n                    // as new data comes in\n                    if (stickToMin) {\n                        newMin = baseDataMin;\n                        newMax = newMin + range;\n                    }\n                    // If the zoomed range is already at the max, move it to the right\n                    // as new data comes in\n                    if (stickToMax) {\n                        newMax = baseDataMax + overscroll;\n                        // If stickToMin is true, the new min value is set above\n                        if (!stickToMin) {\n                            newMin = Math.max(baseDataMin, // Don't go below data extremes (#13184)\n                            newMax - range, navigator.getBaseSeriesMin(navigatorSeries && navigatorSeries.xData ?\n                                navigatorSeries.xData[0] :\n                                -Number.MAX_VALUE));\n                        }\n                    }\n                    // Update the extremes\n                    if (hasSetExtremes && (stickToMin || stickToMax)) {\n                        if (isNumber(newMin)) {\n                            baseXAxis.min = baseXAxis.userMin = newMin;\n                            baseXAxis.max = baseXAxis.userMax = newMax;\n                        }\n                    }\n                }\n                // Reset\n                navigator.stickToMin =\n                    navigator.stickToMax = null;\n            }\n            /**\n             * Handler for updated data on the base series. When data is modified, the\n             * navigator series must reflect it. This is called from the Chart.redraw\n             * function before axis and series extremes are computed.\n             *\n             * @private\n             * @function Highcharts.Navigator#updateDataHandler\n             */\n            updatedDataHandler() {\n                const navigator = this.chart.navigator, baseSeries = this, navigatorSeries = this.navigatorSeries, shouldStickToMax = navigator.reversedExtremes ?\n                    Math.round(navigator.zoomedMin) === 0 :\n                    Math.round(navigator.zoomedMax) >= Math.round(navigator.size);\n                // If the scrollbar is scrolled all the way to the right, keep right as\n                // new data comes in, unless user set navigator.stickToMax to false.\n                navigator.stickToMax = pick(this.chart.options.navigator &&\n                    this.chart.options.navigator.stickToMax, shouldStickToMax);\n                navigator.stickToMin = navigator.shouldStickToMin(baseSeries, navigator);\n                // Set the navigator series data to the new data of the base series\n                if (navigatorSeries && !navigator.hasNavigatorData) {\n                    navigatorSeries.options.pointStart = baseSeries.xData[0];\n                    navigatorSeries.setData(baseSeries.options.data, false, null, false); // #5414\n                }\n            }\n            /**\n             * Detect if the zoomed area should stick to the minimum, #14742.\n             *\n             * @private\n             * @function Highcharts.Navigator#shouldStickToMin\n             */\n            shouldStickToMin(baseSeries, navigator) {\n                const xDataMin = navigator.getBaseSeriesMin(baseSeries.xData[0]), xAxis = baseSeries.xAxis, max = xAxis.max, min = xAxis.min, range = xAxis.options.range;\n                let stickToMin = true;\n                if (isNumber(max) && isNumber(min)) {\n                    // If range declared, stick to the minimum only if the range\n                    // is smaller than the data set range.\n                    if (range && max - xDataMin > 0) {\n                        stickToMin = max - xDataMin < range;\n                    }\n                    else {\n                        // If the current axis minimum falls outside the new\n                        // updated dataset, we must adjust.\n                        stickToMin = min <= xDataMin;\n                    }\n                }\n                else {\n                    stickToMin = false; // #15864\n                }\n                return stickToMin;\n            }\n            /**\n             * Add chart events, like redrawing navigator, when chart requires that.\n             *\n             * @private\n             * @function Highcharts.Navigator#addChartEvents\n             */\n            addChartEvents() {\n                if (!this.eventsToUnbind) {\n                    this.eventsToUnbind = [];\n                }\n                this.eventsToUnbind.push(\n                // Move the scrollbar after redraw, like after data updata even if\n                // axes don't redraw\n                addEvent(this.chart, 'redraw', function () {\n                    const navigator = this.navigator, xAxis = navigator && (navigator.baseSeries &&\n                        navigator.baseSeries[0] &&\n                        navigator.baseSeries[0].xAxis ||\n                        this.xAxis[0]); // #5709, #13114\n                    if (xAxis) {\n                        navigator.render(xAxis.min, xAxis.max);\n                    }\n                }), \n                // Make room for the navigator, can be placed around the chart:\n                addEvent(this.chart, 'getMargins', function () {\n                    const chart = this, navigator = chart.navigator;\n                    let marginName = navigator.opposite ?\n                        'plotTop' : 'marginBottom';\n                    if (chart.inverted) {\n                        marginName = navigator.opposite ?\n                            'marginRight' : 'plotLeft';\n                    }\n                    chart[marginName] =\n                        (chart[marginName] || 0) + (navigator.navigatorEnabled || !chart.inverted ?\n                            navigator.height + navigator.scrollbarHeight :\n                            0) + navigator.navigatorOptions.margin;\n                }), addEvent(Navigator, 'setRange', function (e) {\n                    this.chart.xAxis[0].setExtremes(e.min, e.max, e.redraw, e.animation, e.eventArguments);\n                }));\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Navigator#destroy\n             */\n            destroy() {\n                // Disconnect events added in addEvents\n                this.removeEvents();\n                if (this.xAxis) {\n                    erase(this.chart.xAxis, this.xAxis);\n                    erase(this.chart.axes, this.xAxis);\n                }\n                if (this.yAxis) {\n                    erase(this.chart.yAxis, this.yAxis);\n                    erase(this.chart.axes, this.yAxis);\n                }\n                // Destroy series\n                (this.series || []).forEach((s) => {\n                    if (s.destroy) {\n                        s.destroy();\n                    }\n                });\n                // Destroy properties\n                [\n                    'series', 'xAxis', 'yAxis', 'shades', 'outline', 'scrollbarTrack',\n                    'scrollbarRifles', 'scrollbarGroup', 'scrollbar', 'navigatorGroup',\n                    'rendered'\n                ].forEach((prop) => {\n                    if (this[prop] && this[prop].destroy) {\n                        this[prop].destroy();\n                    }\n                    this[prop] = null;\n                });\n                // Destroy elements in collection\n                [this.handles].forEach((coll) => {\n                    destroyObjectProperties(coll);\n                });\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Navigator;\n    });\n    _registerModule(_modules, 'Core/Axis/OrdinalAxis.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Globals.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (Axis, H, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, correctFloat, css, defined, error, isNumber, pick, timeUnits, isString } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Extends the axis with ordinal support.\n         * @private\n         */\n        var OrdinalAxis;\n        (function (OrdinalAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Extends the axis with ordinal support.\n             *\n             * @private\n             *\n             * @param AxisClass\n             * Axis class to extend.\n             *\n             * @param ChartClass\n             * Chart class to use.\n             *\n             * @param SeriesClass\n             * Series class to use.\n             */\n            function compose(AxisClass, SeriesClass, ChartClass) {\n                const axisProto = AxisClass.prototype;\n                if (!axisProto.ordinal2lin) {\n                    axisProto.getTimeTicks = getTimeTicks;\n                    axisProto.index2val = index2val;\n                    axisProto.lin2val = lin2val;\n                    axisProto.val2lin = val2lin;\n                    // Record this to prevent overwriting by broken-axis module (#5979)\n                    axisProto.ordinal2lin = axisProto.val2lin;\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'foundExtremes', onAxisFoundExtremes);\n                    addEvent(AxisClass, 'afterSetScale', onAxisAfterSetScale);\n                    addEvent(AxisClass, 'initialAxisTranslation', onAxisInitialAxisTranslation);\n                    addEvent(ChartClass, 'pan', onChartPan);\n                    addEvent(SeriesClass, 'updatedData', onSeriesUpdatedData);\n                }\n                return AxisClass;\n            }\n            OrdinalAxis.compose = compose;\n            /**\n             * In an ordinal axis, there might be areas with dense concentrations of\n             * points, then large gaps between some. Creating equally distributed\n             * ticks over this entire range may lead to a huge number of ticks that\n             * will later be removed. So instead, break the positions up in\n             * segments, find the tick positions for each segment then concatenize\n             * them. This method is used from both data grouping logic and X axis\n             * tick position logic.\n             * @private\n             */\n            function getTimeTicks(normalizedInterval, min, max, startOfWeek, positions = [], closestDistance = 0, findHigherRanks) {\n                const higherRanks = {}, tickPixelIntervalOption = this.options.tickPixelInterval, time = this.chart.time, \n                // Record all the start positions of a segment, to use when\n                // deciding what's a gap in the data.\n                segmentStarts = [];\n                let end, segmentPositions, hasCrossedHigherRank, info, outsideMax, start = 0, groupPositions = [], lastGroupPosition = -Number.MAX_VALUE;\n                // The positions are not always defined, for example for ordinal\n                // positions when data has regular interval (#1557, #2090)\n                if ((!this.options.ordinal && !this.options.breaks) ||\n                    !positions ||\n                    positions.length < 3 ||\n                    typeof min === 'undefined') {\n                    return time.getTimeTicks.apply(time, arguments);\n                }\n                // Analyze the positions array to split it into segments on gaps\n                // larger than 5 times the closest distance. The closest distance is\n                // already found at this point, so we reuse that instead of\n                // computing it again.\n                const posLength = positions.length;\n                for (end = 0; end < posLength; end++) {\n                    outsideMax = end && positions[end - 1] > max;\n                    if (positions[end] < min) { // Set the last position before min\n                        start = end;\n                    }\n                    if (end === posLength - 1 ||\n                        positions[end + 1] - positions[end] > closestDistance * 5 ||\n                        outsideMax) {\n                        // For each segment, calculate the tick positions from the\n                        // getTimeTicks utility function. The interval will be the\n                        // same regardless of how long the segment is.\n                        if (positions[end] > lastGroupPosition) { // #1475\n                            segmentPositions = time.getTimeTicks(normalizedInterval, positions[start], positions[end], startOfWeek);\n                            // Prevent duplicate groups, for example for multiple\n                            // segments within one larger time frame (#1475)\n                            while (segmentPositions.length &&\n                                segmentPositions[0] <= lastGroupPosition) {\n                                segmentPositions.shift();\n                            }\n                            if (segmentPositions.length) {\n                                lastGroupPosition =\n                                    segmentPositions[segmentPositions.length - 1];\n                            }\n                            segmentStarts.push(groupPositions.length);\n                            groupPositions = groupPositions.concat(segmentPositions);\n                        }\n                        // Set start of next segment\n                        start = end + 1;\n                    }\n                    if (outsideMax) {\n                        break;\n                    }\n                }\n                // Get the grouping info from the last of the segments. The info is\n                // the same for all segments.\n                if (segmentPositions) {\n                    info = segmentPositions.info;\n                    // Optionally identify ticks with higher rank, for example\n                    // when the ticks have crossed midnight.\n                    if (findHigherRanks && info.unitRange <= timeUnits.hour) {\n                        end = groupPositions.length - 1;\n                        // Compare points two by two\n                        for (start = 1; start < end; start++) {\n                            if (time.dateFormat('%d', groupPositions[start]) !==\n                                time.dateFormat('%d', groupPositions[start - 1])) {\n                                higherRanks[groupPositions[start]] = 'day';\n                                hasCrossedHigherRank = true;\n                            }\n                        }\n                        // If the complete array has crossed midnight, we want\n                        // to mark the first positions also as higher rank\n                        if (hasCrossedHigherRank) {\n                            higherRanks[groupPositions[0]] = 'day';\n                        }\n                        info.higherRanks = higherRanks;\n                    }\n                    // Save the info\n                    info.segmentStarts = segmentStarts;\n                    groupPositions.info = info;\n                }\n                else {\n                    error(12, false, this.chart);\n                }\n                // Don't show ticks within a gap in the ordinal axis, where the\n                // space between two points is greater than a portion of the tick\n                // pixel interval\n                if (findHigherRanks && defined(tickPixelIntervalOption)) {\n                    const length = groupPositions.length, translatedArr = [], distances = [];\n                    let itemToRemove, translated, lastTranslated, medianDistance, distance, i = length;\n                    // Find median pixel distance in order to keep a reasonably even\n                    // distance between ticks (#748)\n                    while (i--) {\n                        translated = this.translate(groupPositions[i]);\n                        if (lastTranslated) {\n                            distances[i] = lastTranslated - translated;\n                        }\n                        translatedArr[i] = lastTranslated = translated;\n                    }\n                    distances.sort();\n                    medianDistance = distances[Math.floor(distances.length / 2)];\n                    if (medianDistance < tickPixelIntervalOption * 0.6) {\n                        medianDistance = null;\n                    }\n                    // Now loop over again and remove ticks where needed\n                    i = groupPositions[length - 1] > max ? length - 1 : length; // #817\n                    lastTranslated = void 0;\n                    while (i--) {\n                        translated = translatedArr[i];\n                        distance = Math.abs(lastTranslated - translated);\n                        // #4175 - when axis is reversed, the distance, is negative but\n                        // tickPixelIntervalOption positive, so we need to compare the\n                        // same values\n                        // Remove ticks that are closer than 0.6 times the pixel\n                        // interval from the one to the right, but not if it is close to\n                        // the median distance (#748).\n                        if (lastTranslated &&\n                            distance < tickPixelIntervalOption * 0.8 &&\n                            (medianDistance === null || distance < medianDistance * 0.8)) {\n                            // Is this a higher ranked position with a normal\n                            // position to the right?\n                            if (higherRanks[groupPositions[i]] &&\n                                !higherRanks[groupPositions[i + 1]]) {\n                                // Yes: remove the lower ranked neighbour to the\n                                // right\n                                itemToRemove = i + 1;\n                                lastTranslated = translated; // #709\n                            }\n                            else {\n                                // No: remove this one\n                                itemToRemove = i;\n                            }\n                            groupPositions.splice(itemToRemove, 1);\n                        }\n                        else {\n                            lastTranslated = translated;\n                        }\n                    }\n                }\n                return groupPositions;\n            }\n            /**\n             * Get axis position of given index of the extended ordinal positions.\n             * Used only when panning an ordinal axis.\n             *\n             * @private\n             * @function Highcharts.Axis#index2val\n             * @param {number} index\n             * The index value of searched point\n             */\n            function index2val(index) {\n                const axis = this, ordinal = axis.ordinal, \n                // Context could be changed to extendedOrdinalPositions.\n                ordinalPositions = ordinal.positions;\n                // The visible range contains only equally spaced values.\n                if (!ordinalPositions) {\n                    return index;\n                }\n                let i = ordinalPositions.length - 1, distance;\n                if (index < 0) { // Out of range, in effect panning to the left\n                    index = ordinalPositions[0];\n                }\n                else if (index > i) { // Out of range, panning to the right\n                    index = ordinalPositions[i];\n                }\n                else { // Split it up\n                    i = Math.floor(index);\n                    distance = index - i; // The decimal\n                }\n                if (typeof distance !== 'undefined' &&\n                    typeof ordinalPositions[i] !== 'undefined') {\n                    return ordinalPositions[i] + (distance ?\n                        distance *\n                            (ordinalPositions[i + 1] - ordinalPositions[i]) :\n                        0);\n                }\n                return index;\n            }\n            /**\n             * Translate from linear (internal) to axis value.\n             *\n             * @private\n             * @function Highcharts.Axis#lin2val\n             * @param {number} val\n             * The linear abstracted value.\n             */\n            function lin2val(val) {\n                const axis = this, ordinal = axis.ordinal, localMin = axis.old ? axis.old.min : axis.min, localA = axis.old ? axis.old.transA : axis.transA;\n                // Always use extendedPositions (#19816)\n                const positions = ordinal.getExtendedPositions();\n                // In some cases (especially in early stages of the chart creation) the\n                // getExtendedPositions might return undefined.\n                if (positions && positions.length) {\n                    // Convert back from modivied value to pixels. // #15970\n                    const pixelVal = correctFloat((val - localMin) * localA +\n                        axis.minPixelPadding), index = correctFloat(ordinal.getIndexOfPoint(pixelVal, positions)), mantissa = correctFloat(index % 1);\n                    // Check if the index is inside position array. If true,\n                    // read/approximate value for that exact index.\n                    if (index >= 0 && index <= positions.length - 1) {\n                        const leftNeighbour = positions[Math.floor(index)], rightNeighbour = positions[Math.ceil(index)], distance = rightNeighbour - leftNeighbour;\n                        return positions[Math.floor(index)] + mantissa * distance;\n                    }\n                }\n                // If the value is outside positions array, return initial value\n                return val; // #16784\n            }\n            /**\n             * Internal function to calculate the precise index in ordinalPositions\n             * array.\n             * @private\n             */\n            function getIndexInArray(ordinalPositions, val) {\n                const index = OrdinalAxis.Additions.findIndexOf(ordinalPositions, val, true);\n                if (ordinalPositions[index] === val) {\n                    return index;\n                }\n                const percent = (val - ordinalPositions[index]) /\n                    (ordinalPositions[index + 1] - ordinalPositions[index]);\n                return index + percent;\n            }\n            /**\n            * @private\n            */\n            function onAxisAfterInit() {\n                const axis = this;\n                if (!axis.ordinal) {\n                    axis.ordinal = new OrdinalAxis.Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisFoundExtremes() {\n                const axis = this, { eventArgs, options } = axis;\n                if (axis.isXAxis &&\n                    defined(options.overscroll) &&\n                    options.overscroll !== 0 &&\n                    isNumber(axis.max) &&\n                    isNumber(axis.min)) {\n                    if (axis.options.ordinal && !axis.ordinal.originalOrdinalRange) {\n                        // Calculate the original ordinal range\n                        axis.ordinal.getExtendedPositions(false);\n                    }\n                    if (axis.max === axis.dataMax &&\n                        (\n                        // Panning is an exception. We don't want to apply\n                        // overscroll when panning over the dataMax\n                        eventArgs?.trigger !== 'pan' ||\n                            axis.isInternal) &&\n                        // Scrollbar buttons are the other execption\n                        eventArgs?.trigger !== 'navigator') {\n                        const overscroll = axis.ordinal.convertOverscroll(options.overscroll);\n                        axis.max += overscroll;\n                        // Live data and buttons require translation for the min:\n                        if (!axis.isInternal &&\n                            defined(axis.userMin) &&\n                            eventArgs?.trigger !== 'mousewheel') {\n                            axis.min += overscroll;\n                        }\n                    }\n                }\n            }\n            /**\n             * For ordinal axis, that loads data async, redraw axis after data is\n             * loaded. If we don't do that, axis will have the same extremes as\n             * previously, but ordinal positions won't be calculated. See #10290\n             * @private\n             */\n            function onAxisAfterSetScale() {\n                const axis = this;\n                if (axis.horiz && !axis.isDirty) {\n                    axis.isDirty = axis.isOrdinal &&\n                        axis.chart.navigator &&\n                        !axis.chart.navigator.adaptToUpdatedData;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInitialAxisTranslation() {\n                const axis = this;\n                if (axis.ordinal) {\n                    axis.ordinal.beforeSetTickPositions();\n                    axis.tickInterval = axis.ordinal.postProcessTickInterval(axis.tickInterval);\n                }\n            }\n            /**\n             * Extending the Chart.pan method for ordinal axes\n             * @private\n             */\n            function onChartPan(e) {\n                const chart = this, xAxis = chart.xAxis[0], overscroll = xAxis.ordinal.convertOverscroll(xAxis.options.overscroll), chartX = e.originalEvent.chartX, panning = chart.options.chart.panning;\n                let runBase = false;\n                if (panning &&\n                    panning.type !== 'y' &&\n                    xAxis.options.ordinal &&\n                    xAxis.series.length) {\n                    const mouseDownX = chart.mouseDownX, extremes = xAxis.getExtremes(), dataMin = extremes.dataMin, dataMax = extremes.dataMax, min = extremes.min, max = extremes.max, hoverPoints = chart.hoverPoints, closestPointRange = (xAxis.closestPointRange ||\n                        (xAxis.ordinal && xAxis.ordinal.overscrollPointsRange)), pointPixelWidth = (xAxis.translationSlope *\n                        (xAxis.ordinal.slope || closestPointRange)), \n                    // How many ordinal units did we move?\n                    movedUnits = Math.round((mouseDownX - chartX) / pointPixelWidth), \n                    // Get index of all the chart's points\n                    extendedOrdinalPositions = xAxis.ordinal.getExtendedPositions(), extendedAxis = {\n                        ordinal: {\n                            positions: extendedOrdinalPositions,\n                            extendedOrdinalPositions: extendedOrdinalPositions\n                        }\n                    }, index2val = xAxis.index2val, val2lin = xAxis.val2lin;\n                    let trimmedRange, ordinalPositions;\n                    // Make sure panning to the edges does not decrease the zoomed range\n                    if ((min <= dataMin && movedUnits < 0) ||\n                        (max + overscroll >= dataMax && movedUnits > 0)) {\n                        return;\n                    }\n                    // We have an ordinal axis, but the data is equally spaced\n                    if (!extendedAxis.ordinal.positions) {\n                        runBase = true;\n                    }\n                    else if (Math.abs(movedUnits) > 1) {\n                        // Remove active points for shared tooltip\n                        if (hoverPoints) {\n                            hoverPoints.forEach(function (point) {\n                                point.setState();\n                            });\n                        }\n                        // In grouped data series, the last ordinal position represents\n                        // the grouped data, which is to the left of the real data max.\n                        // If we don't compensate for this, we will be allowed to pan\n                        // grouped data series passed the right of the plot area.\n                        ordinalPositions = extendedAxis.ordinal.positions;\n                        if (dataMax >\n                            ordinalPositions[ordinalPositions.length - 1]) {\n                            ordinalPositions.push(dataMax);\n                        }\n                        // Get the new min and max values by getting the ordinal index\n                        // for the current extreme, then add the moved units and\n                        // translate back to values. This happens on the extended\n                        // ordinal positions if the new position is out of range, else\n                        // it happens on the current x axis which is smaller and faster.\n                        chart.setFixedRange(max - min);\n                        trimmedRange = xAxis.navigatorAxis\n                            .toFixedRange(void 0, void 0, index2val.apply(extendedAxis, [\n                            val2lin.apply(extendedAxis, [min, true]) +\n                                movedUnits\n                        ]), index2val.apply(extendedAxis, [\n                            val2lin.apply(extendedAxis, [max, true]) +\n                                movedUnits\n                        ]));\n                        // Apply it if it is within the available data range\n                        if (trimmedRange.min >= Math.min(extremes.dataMin, min) &&\n                            trimmedRange.max <= Math.max(dataMax, max) + overscroll) {\n                            xAxis.setExtremes(trimmedRange.min, trimmedRange.max, true, false, { trigger: 'pan' });\n                        }\n                        chart.mouseDownX = chartX; // Set new reference for next run\n                        css(chart.container, { cursor: 'move' });\n                    }\n                }\n                else {\n                    runBase = true;\n                }\n                // Revert to the linear chart.pan version\n                if (runBase || (panning && /y/.test(panning.type))) {\n                    if (overscroll) {\n                        xAxis.max = xAxis.dataMax + overscroll;\n                    }\n                }\n                else {\n                    e.preventDefault();\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesUpdatedData() {\n                const xAxis = this.xAxis;\n                // Destroy the extended ordinal index on updated data\n                // and destroy extendedOrdinalPositions, #16055.\n                if (xAxis && xAxis.options.ordinal) {\n                    delete xAxis.ordinal.index;\n                    delete xAxis.ordinal.originalOrdinalRange;\n                }\n            }\n            /**\n             * Translate from a linear axis value to the corresponding ordinal axis\n             * position. If there are no gaps in the ordinal axis this will be the\n             * same. The translated value is the value that the point would have if\n             * the axis was linear, using the same min and max.\n             *\n             * @private\n             * @function Highcharts.Axis#val2lin\n             * @param {number} val\n             * The axis value.\n             * @param {boolean} [toIndex]\n             * Whether to return the index in the ordinalPositions or the new value.\n             */\n            function val2lin(val, toIndex) {\n                const axis = this, ordinal = axis.ordinal, ordinalPositions = ordinal.positions;\n                let slope = ordinal.slope, extendedOrdinalPositions;\n                if (!ordinalPositions) {\n                    return val;\n                }\n                const ordinalLength = ordinalPositions.length;\n                let ordinalIndex;\n                // If the searched value is inside visible plotArea, ivastigate the\n                // value basing on ordinalPositions.\n                if (ordinalPositions[0] <= val &&\n                    ordinalPositions[ordinalLength - 1] >= val) {\n                    ordinalIndex = getIndexInArray(ordinalPositions, val);\n                    // Final return value is based on ordinalIndex\n                }\n                else {\n                    extendedOrdinalPositions =\n                        ordinal.getExtendedPositions &&\n                            ordinal.getExtendedPositions();\n                    if (!(extendedOrdinalPositions && extendedOrdinalPositions.length)) {\n                        return val;\n                    }\n                    const length = extendedOrdinalPositions.length;\n                    if (!slope) {\n                        slope =\n                            (extendedOrdinalPositions[length - 1] -\n                                extendedOrdinalPositions[0]) /\n                                length;\n                    }\n                    // `originalPointReference` is equal to the index of first point of\n                    // ordinalPositions in extendedOrdinalPositions.\n                    const originalPositionsReference = getIndexInArray(extendedOrdinalPositions, ordinalPositions[0]);\n                    // If the searched value is outside the visiblePlotArea,\n                    // check if it is inside extendedOrdinalPositions.\n                    if (val >= extendedOrdinalPositions[0] &&\n                        val <=\n                            extendedOrdinalPositions[length - 1]) {\n                        // Return Value\n                        ordinalIndex = getIndexInArray(extendedOrdinalPositions, val) -\n                            originalPositionsReference;\n                    }\n                    else {\n                        if (!toIndex) {\n                            // If the value is outside positions array,\n                            // return initial value, #16784\n                            return val;\n                        }\n                        // Since ordinal.slope is the average distance between 2\n                        // points on visible plotArea, this can be used to calculate\n                        // the approximate position of the point, which is outside\n                        // the extendedOrdinalPositions.\n                        if (val < extendedOrdinalPositions[0]) {\n                            const diff = extendedOrdinalPositions[0] - val, approximateIndexOffset = diff / slope;\n                            ordinalIndex =\n                                -originalPositionsReference -\n                                    approximateIndexOffset;\n                        }\n                        else {\n                            const diff = val -\n                                extendedOrdinalPositions[length - 1], approximateIndexOffset = diff / slope;\n                            ordinalIndex =\n                                approximateIndexOffset +\n                                    length -\n                                    originalPositionsReference;\n                        }\n                    }\n                }\n                return toIndex ? ordinalIndex : slope * (ordinalIndex || 0) +\n                    ordinal.offset;\n            }\n            /* *\n             *\n             *  Classes\n             *\n             * */\n            /**\n             * @private\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                constructor(axis) {\n                    this.index = {};\n                    this.axis = axis;\n                }\n                /* *\n                *\n                *  Functions\n                *\n                * */\n                /**\n                 * Calculate the ordinal positions before tick positions are calculated.\n                 * @private\n                 */\n                beforeSetTickPositions() {\n                    const axis = this.axis, ordinal = axis.ordinal, extremes = axis.getExtremes(), min = extremes.min, max = extremes.max, hasBreaks = axis.brokenAxis?.hasBreaks, isOrdinal = axis.options.ordinal;\n                    let len, uniqueOrdinalPositions, dist, minIndex, maxIndex, slope, i, ordinalPositions = [], overscrollPointsRange = Number.MAX_VALUE, useOrdinal = false, adjustOrdinalExtremesPoints = false, isBoosted = false;\n                    // Apply the ordinal logic\n                    if (isOrdinal || hasBreaks) { // #4167 YAxis is never ordinal ?\n                        let distanceBetweenPoint = 0;\n                        axis.series.forEach(function (series, i) {\n                            uniqueOrdinalPositions = [];\n                            // For an axis with multiple series, check if the distance\n                            // between points is identical throughout all series.\n                            if (i > 0 &&\n                                series.options.id !== 'highcharts-navigator-series' &&\n                                series.processedXData.length > 1) {\n                                adjustOrdinalExtremesPoints =\n                                    distanceBetweenPoint !== series.processedXData[1] -\n                                        series.processedXData[0];\n                            }\n                            distanceBetweenPoint =\n                                series.processedXData[1] - series.processedXData[0];\n                            if (series.boosted) {\n                                isBoosted = series.boosted;\n                            }\n                            if (series.reserveSpace() &&\n                                (series\n                                    .takeOrdinalPosition !== false || hasBreaks)) {\n                                // Concatenate the processed X data into the existing\n                                // positions, or the empty array\n                                ordinalPositions = ordinalPositions.concat(series.processedXData);\n                                len = ordinalPositions.length;\n                                // Remove duplicates (#1588)\n                                ordinalPositions.sort(function (a, b) {\n                                    // Without a custom function it is sorted as strings\n                                    return a - b;\n                                });\n                                overscrollPointsRange = Math.min(overscrollPointsRange, pick(\n                                // Check for a single-point series:\n                                series.closestPointRange, overscrollPointsRange));\n                                if (len) {\n                                    i = 0;\n                                    while (i < len - 1) {\n                                        if (ordinalPositions[i] !==\n                                            ordinalPositions[i + 1]) {\n                                            uniqueOrdinalPositions.push(ordinalPositions[i + 1]);\n                                        }\n                                        i++;\n                                    }\n                                    // Check first item:\n                                    if (uniqueOrdinalPositions[0] !==\n                                        ordinalPositions[0]) {\n                                        uniqueOrdinalPositions.unshift(ordinalPositions[0]);\n                                    }\n                                    ordinalPositions = uniqueOrdinalPositions;\n                                }\n                            }\n                        });\n                        if (!axis.ordinal.originalOrdinalRange) {\n                            // Calculate current originalOrdinalRange\n                            axis.ordinal.originalOrdinalRange =\n                                (ordinalPositions.length - 1) * overscrollPointsRange;\n                        }\n                        // If the distance between points is not identical throughout\n                        // all series, remove the first and last ordinal position to\n                        // avoid enabling ordinal logic when it is not needed, #17405.\n                        // Only for boosted series because changes are negligible.\n                        if (adjustOrdinalExtremesPoints && isBoosted) {\n                            ordinalPositions.pop();\n                            ordinalPositions.shift();\n                        }\n                        // Cache the length\n                        len = ordinalPositions.length;\n                        // Check if we really need the overhead of mapping axis data\n                        // against the ordinal positions. If the series consist of\n                        // evenly spaced data any way, we don't need any ordinal logic.\n                        if (len > 2) { // Two points have equal distance by default\n                            dist = ordinalPositions[1] - ordinalPositions[0];\n                            i = len - 1;\n                            while (i-- && !useOrdinal) {\n                                if (ordinalPositions[i + 1] - ordinalPositions[i] !==\n                                    dist) {\n                                    useOrdinal = true;\n                                }\n                            }\n                            // When zooming in on a week, prevent axis padding for\n                            // weekends even though the data within the week is evenly\n                            // spaced.\n                            if (!axis.options.keepOrdinalPadding &&\n                                (ordinalPositions[0] - min > dist ||\n                                    (max -\n                                        ordinalPositions[ordinalPositions.length - 1]) > dist)) {\n                                useOrdinal = true;\n                            }\n                        }\n                        else if (axis.options.overscroll) {\n                            if (len === 2) {\n                                // Exactly two points, distance for overscroll is fixed:\n                                overscrollPointsRange =\n                                    ordinalPositions[1] - ordinalPositions[0];\n                            }\n                            else if (len === 1) {\n                                // We have just one point, closest distance is unknown.\n                                // Assume then it is last point and overscrolled range:\n                                overscrollPointsRange = axis.ordinal.convertOverscroll(axis.options.overscroll);\n                                ordinalPositions = [\n                                    ordinalPositions[0],\n                                    ordinalPositions[0] + overscrollPointsRange\n                                ];\n                            }\n                            else {\n                                // In case of zooming in on overscrolled range, stick to\n                                // the old range:\n                                overscrollPointsRange = ordinal.overscrollPointsRange;\n                            }\n                        }\n                        // Record the slope and offset to compute the linear values from\n                        // the array index. Since the ordinal positions may exceed the\n                        // current range, get the start and end positions within it\n                        // (#719, #665b)\n                        if (useOrdinal || axis.forceOrdinal) {\n                            if (axis.options.overscroll) {\n                                ordinal.overscrollPointsRange = overscrollPointsRange;\n                                ordinalPositions = ordinalPositions.concat(ordinal.getOverscrollPositions());\n                            }\n                            // Register\n                            ordinal.positions = ordinalPositions;\n                            // This relies on the ordinalPositions being set. Use\n                            // Math.max and Math.min to prevent padding on either sides\n                            // of the data.\n                            minIndex = axis.ordinal2lin(// #5979\n                            Math.max(min, ordinalPositions[0]), true);\n                            maxIndex = Math.max(axis.ordinal2lin(Math.min(max, ordinalPositions[ordinalPositions.length - 1]), true), 1); // #3339\n                            // Set the slope and offset of the values compared to the\n                            // indices in the ordinal positions.\n                            ordinal.slope = slope =\n                                (max - min) / (maxIndex - minIndex);\n                            ordinal.offset = min - (minIndex * slope);\n                        }\n                        else {\n                            ordinal.overscrollPointsRange = pick(axis.closestPointRange, ordinal.overscrollPointsRange);\n                            ordinal.positions = axis.ordinal.slope = ordinal.offset =\n                                void 0;\n                        }\n                    }\n                    axis.isOrdinal = isOrdinal && useOrdinal; // #3818, #4196, #4926\n                    ordinal.groupIntervalFactor = null; // Reset for next run\n                }\n                /**\n                 * Faster way of using the Array.indexOf method.\n                 * Works for sorted arrays only with unique values.\n                 *\n                 * @param {Array} sortedArray\n                 *        The sorted array inside which we are looking for.\n                 * @param {number} key\n                 *        The key to being found.\n                 * @param {boolean} indirectSearch\n                 *        In case of lack of the point in the array, should return\n                 *        value be equal to -1 or the closest smaller index.\n                 *  @private\n                 */\n                static findIndexOf(sortedArray, key, indirectSearch) {\n                    let start = 0, end = sortedArray.length - 1, middle;\n                    while (start < end) {\n                        middle = Math.ceil((start + end) / 2);\n                        // Key found as the middle element.\n                        if (sortedArray[middle] <= key) {\n                            // Continue searching to the right.\n                            start = middle;\n                        }\n                        else {\n                            // Continue searching to the left.\n                            end = middle - 1;\n                        }\n                    }\n                    if (sortedArray[start] === key) {\n                        return start;\n                    }\n                    // Key could not be found.\n                    return !indirectSearch ? -1 : start;\n                }\n                /**\n                 * Get the ordinal positions for the entire data set. This is necessary\n                 * in chart panning because we need to find out what points or data\n                 * groups are available outside the visible range. When a panning\n                 * operation starts, if an index for the given grouping does not exists,\n                 * it is created and cached. This index is deleted on updated data, so\n                 * it will be regenerated the next time a panning operation starts.\n                 * @private\n                 */\n                getExtendedPositions(withOverscroll = true) {\n                    const ordinal = this, axis = ordinal.axis, axisProto = axis.constructor.prototype, chart = axis.chart, grouping = axis.series[0]?.currentDataGrouping, key = grouping ?\n                        grouping.count + grouping.unitName :\n                        'raw', overscroll = withOverscroll ?\n                        axis.ordinal.convertOverscroll(axis.options.overscroll) : 0, extremes = axis.getExtremes();\n                    let fakeAxis, fakeSeries = void 0, ordinalIndex = ordinal.index;\n                    // If this is the first time, or the ordinal index is deleted by\n                    // updatedData,\n                    // create it.\n                    if (!ordinalIndex) {\n                        ordinalIndex = ordinal.index = {};\n                    }\n                    if (!ordinalIndex[key]) {\n                        // Create a fake axis object where the extended ordinal\n                        // positions are emulated\n                        fakeAxis = {\n                            series: [],\n                            chart: chart,\n                            forceOrdinal: false,\n                            getExtremes: function () {\n                                return {\n                                    min: extremes.dataMin,\n                                    max: extremes.dataMax + overscroll\n                                };\n                            },\n                            applyGrouping: axisProto.applyGrouping,\n                            getGroupPixelWidth: axisProto.getGroupPixelWidth,\n                            getTimeTicks: axisProto.getTimeTicks,\n                            options: {\n                                ordinal: true\n                            },\n                            ordinal: {\n                                getGroupIntervalFactor: this.getGroupIntervalFactor\n                            },\n                            ordinal2lin: axisProto.ordinal2lin,\n                            getIndexOfPoint: axisProto.getIndexOfPoint,\n                            val2lin: axisProto.val2lin // #2590\n                        };\n                        fakeAxis.ordinal.axis = fakeAxis;\n                        // Add the fake series to hold the full data, then apply\n                        // processData to it\n                        axis.series.forEach(function (series) {\n                            fakeSeries = {\n                                xAxis: fakeAxis,\n                                xData: series.xData.slice(),\n                                chart: chart,\n                                groupPixelWidth: series.groupPixelWidth,\n                                destroyGroupedData: H.noop,\n                                getProcessedData: Series.prototype.getProcessedData,\n                                applyGrouping: Series.prototype.applyGrouping,\n                                reserveSpace: Series.prototype.reserveSpace,\n                                visible: series.visible\n                            };\n                            if (withOverscroll) {\n                                fakeSeries.xData = fakeSeries.xData.concat(ordinal.getOverscrollPositions());\n                            }\n                            fakeSeries.options = {\n                                dataGrouping: grouping ? {\n                                    firstAnchor: series.options.dataGrouping?.firstAnchor,\n                                    anchor: series.options.dataGrouping?.anchor,\n                                    lastAnchor: series.options.dataGrouping?.firstAnchor,\n                                    enabled: true,\n                                    forced: true,\n                                    // Doesn't matter which, use the fastest\n                                    approximation: 'open',\n                                    units: [[\n                                            grouping.unitName,\n                                            [grouping.count]\n                                        ]]\n                                } : {\n                                    enabled: false\n                                }\n                            };\n                            fakeAxis.series.push(fakeSeries);\n                            series.processData.apply(fakeSeries);\n                        });\n                        fakeAxis.applyGrouping({ hasExtremesChanged: true });\n                        // Force to use the ordinal when points are evenly spaced (e.g.\n                        // weeks), #3825.\n                        if ((fakeSeries?.closestPointRange !==\n                            fakeSeries?.basePointRange) &&\n                            fakeSeries.currentDataGrouping) {\n                            fakeAxis.forceOrdinal = true;\n                        }\n                        // Run beforeSetTickPositions to compute the ordinalPositions\n                        axis.ordinal.beforeSetTickPositions.apply({ axis: fakeAxis });\n                        if (!axis.ordinal.originalOrdinalRange &&\n                            fakeAxis.ordinal.originalOrdinalRange) {\n                            axis.ordinal.originalOrdinalRange =\n                                fakeAxis.ordinal.originalOrdinalRange;\n                        }\n                        // Cache it\n                        ordinalIndex[key] = fakeAxis.ordinal.positions;\n                    }\n                    return ordinalIndex[key];\n                }\n                /**\n                 * Find the factor to estimate how wide the plot area would have been if\n                 * ordinal gaps were included. This value is used to compute an imagined\n                 * plot width in order to establish the data grouping interval.\n                 *\n                 * A real world case is the intraday-candlestick example. Without this\n                 * logic, it would show the correct data grouping when viewing a range\n                 * within each day, but once moving the range to include the gap between\n                 * two days, the interval would include the cut-away night hours and the\n                 * data grouping would be wrong. So the below method tries to compensate\n                 * by identifying the most common point interval, in this case days.\n                 *\n                 * An opposite case is presented in issue #718. We have a long array of\n                 * daily data, then one point is appended one hour after the last point.\n                 * We expect the data grouping not to change.\n                 *\n                 * In the future, if we find cases where this estimation doesn't work\n                 * optimally, we might need to add a second pass to the data grouping\n                 * logic, where we do another run with a greater interval if the number\n                 * of data groups is more than a certain fraction of the desired group\n                 * count.\n                 * @private\n                 */\n                getGroupIntervalFactor(xMin, xMax, series) {\n                    const ordinal = this, processedXData = series.processedXData, len = processedXData.length, distances = [];\n                    let median, i, groupIntervalFactor = ordinal.groupIntervalFactor;\n                    // Only do this computation for the first series, let the other\n                    // inherit it (#2416)\n                    if (!groupIntervalFactor) {\n                        // Register all the distances in an array\n                        for (i = 0; i < len - 1; i++) {\n                            distances[i] = (processedXData[i + 1] -\n                                processedXData[i]);\n                        }\n                        // Sort them and find the median\n                        distances.sort(function (a, b) {\n                            return a - b;\n                        });\n                        median = distances[Math.floor(len / 2)];\n                        // Compensate for series that don't extend through the entire\n                        // axis extent. #1675.\n                        xMin = Math.max(xMin, processedXData[0]);\n                        xMax = Math.min(xMax, processedXData[len - 1]);\n                        ordinal.groupIntervalFactor = groupIntervalFactor =\n                            (len * median) / (xMax - xMin);\n                    }\n                    // Return the factor needed for data grouping\n                    return groupIntervalFactor;\n                }\n                /**\n                 * Get index of point inside the ordinal positions array.\n                 *\n                 * @private\n                 * @param {number} val\n                 * The pixel value of a point.\n                 *\n                 * @param {Array<number>} [ordinalArray]\n                 * An array of all points available on the axis for the given data set.\n                 * Either ordinalPositions if the value is inside the plotArea or\n                 * extendedOrdinalPositions if not.\n                 */\n                getIndexOfPoint(val, ordinalArray) {\n                    const ordinal = this, axis = ordinal.axis;\n                    let firstPointVal = 0;\n                    // Check whether the series has at least one point inside the chart\n                    const hasPointsInside = function (series) {\n                        const { min, max } = axis;\n                        if (defined(min) && defined(max)) {\n                            return series.points.some((point) => point.x >= min && point.x <= max);\n                        }\n                        return false;\n                    };\n                    let firstPointX;\n                    // When more series assign to axis, find the smallest one, #15987.\n                    axis.series.forEach((series) => {\n                        const firstPoint = series.points?.[0];\n                        if (defined(firstPoint?.plotX) &&\n                            (firstPoint.plotX < firstPointX ||\n                                !defined(firstPointX)) &&\n                            hasPointsInside(series)) {\n                            firstPointX = firstPoint.plotX;\n                            firstPointVal = firstPoint.x;\n                        }\n                    });\n                    // If undefined, give a default value\n                    firstPointX ?? (firstPointX = axis.minPixelPadding);\n                    // Distance in pixels between two points on the ordinal axis in the\n                    // current zoom.\n                    const ordinalPointPixelInterval = axis.translationSlope * (ordinal.slope ||\n                        axis.closestPointRange ||\n                        ordinal.overscrollPointsRange), \n                    // `toValue` for the first point.\n                    shiftIndex = correctFloat((val - firstPointX) / ordinalPointPixelInterval);\n                    return Additions.findIndexOf(ordinalArray, firstPointVal, true) + shiftIndex;\n                }\n                /**\n                 * Get ticks for an ordinal axis within a range where points don't\n                 * exist. It is required when overscroll is enabled. We can't base on\n                 * points, because we may not have any, so we use approximated\n                 * pointRange and generate these ticks between Axis.dataMax,\n                 * Axis.dataMax + Axis.overscroll evenly spaced. Used in panning and\n                 * navigator scrolling.\n                 * @private\n                 */\n                getOverscrollPositions() {\n                    const ordinal = this, axis = ordinal.axis, extraRange = ordinal.convertOverscroll(axis.options.overscroll), distance = ordinal.overscrollPointsRange, positions = [];\n                    let max = axis.dataMax;\n                    if (defined(distance)) {\n                        // Max + pointRange because we need to scroll to the last\n                        while (max <= axis.dataMax + extraRange) {\n                            max += distance;\n                            positions.push(max);\n                        }\n                    }\n                    return positions;\n                }\n                /**\n                 * Make the tick intervals closer because the ordinal gaps make the\n                 * ticks spread out or cluster.\n                 * @private\n                 */\n                postProcessTickInterval(tickInterval) {\n                    // Problem: https://jsfiddle.net/highcharts/FQm4E/1/. This is a case\n                    // where this algorithm doesn't work optimally. In this case, the\n                    // tick labels are spread out per week, but all the gaps reside\n                    // within weeks. So we have a situation where the labels are courser\n                    // than the ordinal gaps, and thus the tick interval should not be\n                    // altered.\n                    const ordinal = this, axis = ordinal.axis, ordinalSlope = ordinal.slope;\n                    let ret;\n                    if (ordinalSlope) {\n                        if (!axis.options.breaks) {\n                            ret = (tickInterval /\n                                (ordinalSlope / axis.closestPointRange));\n                        }\n                        else {\n                            ret = axis.closestPointRange || tickInterval; // #7275\n                        }\n                    }\n                    else {\n                        ret = tickInterval;\n                    }\n                    return ret;\n                }\n                /**\n                 * If overscroll is pixel or pecentage value, convert it to axis range.\n                 *\n                 * @private\n                 * @param {number | string} overscroll\n                 * Overscroll value in axis range, pixels or percentage value.\n                 * @return {number}\n                 * Overscroll value in axis range.\n                 */\n                convertOverscroll(overscroll = 0) {\n                    const ordinal = this, axis = ordinal.axis, calculateOverscroll = function (overscrollPercentage) {\n                        return pick(ordinal.originalOrdinalRange, defined(axis.dataMax) && defined(axis.dataMin) ?\n                            axis.dataMax - axis.dataMin : 0) * overscrollPercentage;\n                    };\n                    if (isString(overscroll)) {\n                        const overscrollValue = parseInt(overscroll, 10);\n                        if (/%$/.test(overscroll)) {\n                            // If overscroll is percentage\n                            return calculateOverscroll(overscrollValue / 100);\n                        }\n                        if (/px/.test(overscroll)) {\n                            // If overscroll is pixels, it is limited to 90% of the axis\n                            // length to prevent division by zero\n                            const limitedOverscrollValue = Math.min(overscrollValue, axis.len * 0.9), pixelToPercent = limitedOverscrollValue / axis.len;\n                            return calculateOverscroll(pixelToPercent / (1 - pixelToPercent));\n                        }\n                        // If overscroll is a string but not pixels or percentage,\n                        // return 0 as no overscroll\n                        return 0;\n                    }\n                    return overscroll;\n                }\n            }\n            OrdinalAxis.Additions = Additions;\n        })(OrdinalAxis || (OrdinalAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OrdinalAxis;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelectorDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Declarations\n         *\n         * */\n        /**\n         * Language object. The language object is global and it can't be set\n         * on each chart initialization. Instead, use `Highcharts.setOptions` to\n         * set it before any chart is initialized.\n         *\n         * ```js\n         * Highcharts.setOptions({\n         *     lang: {\n         *         months: [\n         *             'Janvier', 'Février', 'Mars', 'Avril',\n         *             'Mai', 'Juin', 'Juillet', 'Août',\n         *             'Septembre', 'Octobre', 'Novembre', 'Décembre'\n         *         ],\n         *         weekdays: [\n         *             'Dimanche', 'Lundi', 'Mardi', 'Mercredi',\n         *             'Jeudi', 'Vendredi', 'Samedi'\n         *         ]\n         *     }\n         * });\n         * ```\n         *\n         * @optionparent lang\n         */\n        const lang = {\n            /**\n             * The text for the label for the range selector buttons.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorZoom: 'Zoom',\n            /**\n             * The text for the label for the \"from\" input box in the range\n             * selector. Since v9.0, this string is empty as the label is not\n             * rendered by default.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorFrom: '',\n            /**\n             * The text for the label for the \"to\" input box in the range selector.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorTo: '→'\n        };\n        /**\n         * The range selector is a tool for selecting ranges to display within\n         * the chart. It provides buttons to select preconfigured ranges in\n         * the chart, like 1 day, 1 week, 1 month etc. It also provides input\n         * boxes where min and max dates can be manually input.\n         *\n         * @product      highstock gantt\n         * @optionparent rangeSelector\n         */\n        const rangeSelector = {\n            /**\n             * Whether to enable all buttons from the start. By default buttons are\n             * only enabled if the corresponding time range exists on the X axis,\n             * but enabling all buttons allows for dynamically loading different\n             * time ranges.\n             *\n             * @sample {highstock} stock/rangeselector/allbuttonsenabled-true/\n             *         All buttons enabled\n             *\n             * @since     2.0.3\n             */\n            allButtonsEnabled: false,\n            /**\n             * An array of configuration objects for the buttons.\n             *\n             * Defaults to:\n             * ```js\n             * buttons: [{\n             *     type: 'month',\n             *     count: 1,\n             *     text: '1m',\n             *     title: 'View 1 month'\n             * }, {\n             *     type: 'month',\n             *     count: 3,\n             *     text: '3m',\n             *     title: 'View 3 months'\n             * }, {\n             *     type: 'month',\n             *     count: 6,\n             *     text: '6m',\n             *     title: 'View 6 months'\n             * }, {\n             *     type: 'ytd',\n             *     text: 'YTD',\n             *     title: 'View year to date'\n             * }, {\n             *     type: 'year',\n             *     count: 1,\n             *     text: '1y',\n             *     title: 'View 1 year'\n             * }, {\n             *     type: 'all',\n             *     text: 'All',\n             *     title: 'View all'\n             * }]\n             * ```\n             *\n             * @sample {highstock} stock/demo/rangeselector-datagrouping/\n             *         Data grouping by buttons\n             *\n             * @type      {Array<*>}\n             */\n            buttons: void 0,\n            /**\n             * How many units of the defined type the button should span. If `type`\n             * is \"month\" and `count` is 3, the button spans three months.\n             *\n             * @type      {number}\n             * @default   1\n             * @apioption rangeSelector.buttons.count\n             */\n            /**\n             * Fires when clicking on the rangeSelector button. One parameter,\n             * event, is passed to the function, containing common event\n             * information.\n             *\n             * ```js\n             * click: function(e) {\n             *   console.log(this);\n             * }\n             * ```\n             *\n             * Return false to stop default button's click action.\n             *\n             * @sample {highstock} stock/rangeselector/button-click/\n             *         Click event on the button\n             *\n             * @type      {Highcharts.RangeSelectorClickCallbackFunction}\n             * @apioption rangeSelector.buttons.events.click\n             */\n            /**\n             * Additional range (in milliseconds) added to the end of the calculated\n             * time span.\n             *\n             * @sample {highstock} stock/rangeselector/min-max-offsets/\n             *         Button offsets\n             *\n             * @type      {number}\n             * @default   0\n             * @since     6.0.0\n             * @apioption rangeSelector.buttons.offsetMax\n             */\n            /**\n             * Additional range (in milliseconds) added to the start of the\n             * calculated time span.\n             *\n             * @sample {highstock} stock/rangeselector/min-max-offsets/\n             *         Button offsets\n             *\n             * @type      {number}\n             * @default   0\n             * @since     6.0.0\n             * @apioption rangeSelector.buttons.offsetMin\n             */\n            /**\n             * When buttons apply dataGrouping on a series, by default zooming\n             * in/out will deselect buttons and unset dataGrouping. Enable this\n             * option to keep buttons selected when extremes change.\n             *\n             * @sample {highstock} stock/rangeselector/preserve-datagrouping/\n             *         Different preserveDataGrouping settings\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     6.1.2\n             * @apioption rangeSelector.buttons.preserveDataGrouping\n             */\n            /**\n             * A custom data grouping object for each button.\n             *\n             * @see [series.dataGrouping](#plotOptions.series.dataGrouping)\n             *\n             * @sample {highstock} stock/demo/rangeselector-datagrouping/\n             *         Data grouping by range selector buttons\n             *\n             * @type      {*}\n             * @extends   plotOptions.series.dataGrouping\n             * @apioption rangeSelector.buttons.dataGrouping\n             */\n            /**\n             * The text for the button itself.\n             *\n             * @type      {string}\n             * @apioption rangeSelector.buttons.text\n             */\n            /**\n             * Explanation for the button, shown as a tooltip on hover, and used by\n             * assistive technology.\n             *\n             * @type      {string}\n             * @apioption rangeSelector.buttons.title\n             */\n            /**\n             * Defined the time span for the button. Can be one of `millisecond`,\n             * `second`, `minute`, `hour`, `day`, `week`, `month`, `year`, `ytd`,\n             * and `all`.\n             *\n             * @type       {Highcharts.RangeSelectorButtonTypeValue}\n             * @apioption  rangeSelector.buttons.type\n             */\n            /**\n             * The space in pixels between the buttons in the range selector.\n             */\n            buttonSpacing: 5,\n            /**\n             * Whether to collapse the range selector buttons into a dropdown when\n             * there is not enough room to show everything in a single row, instead\n             * of dividing the range selector into multiple rows.\n             * Can be one of the following:\n             *  - `always`: Always collapse\n             *  - `responsive`: Only collapse when there is not enough room\n             *  - `never`: Never collapse\n             *\n             * @sample {highstock} stock/rangeselector/dropdown/\n             *         Dropdown option\n             *\n             * @validvalue [\"always\", \"responsive\", \"never\"]\n             * @since 9.0.0\n             */\n            dropdown: 'responsive',\n            /**\n             * Enable or disable the range selector. Default to `true` for stock\n             * charts, using the `stockChart` factory.\n             *\n             * @sample {highstock} stock/rangeselector/enabled/\n             *         Disable the range selector\n             *\n             * @type {boolean|undefined}\n             * @default {highstock} true\n             */\n            enabled: void 0,\n            /**\n             * The vertical alignment of the rangeselector box. Allowed properties\n             * are `top`, `middle`, `bottom`.\n             *\n             * @sample {highstock} stock/rangeselector/vertical-align-middle/\n             *         Middle\n             * @sample {highstock} stock/rangeselector/vertical-align-bottom/\n             *         Bottom\n             *\n             * @type  {Highcharts.VerticalAlignValue}\n             * @since 6.0.0\n             */\n            verticalAlign: 'top',\n            /**\n             * A collection of attributes for the buttons. The object takes SVG\n             * attributes like `fill`, `stroke`, `stroke-width`, as well as `style`,\n             * a collection of CSS properties for the text.\n             *\n             * The object can also be extended with states, so you can set\n             * presentational options for `hover`, `select` or `disabled` button\n             * states.\n             *\n             * CSS styles for the text label.\n             *\n             * In styled mode, the buttons are styled by the\n             * `.highcharts-range-selector-buttons .highcharts-button` rule with its\n             * different states.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type {Highcharts.SVGAttributes}\n             */\n            buttonTheme: {\n                /** @ignore */\n                width: 28,\n                /** @ignore */\n                height: 18,\n                /** @ignore */\n                padding: 2,\n                /** @ignore */\n                zIndex: 7 // #484, #852\n            },\n            /**\n             * When the rangeselector is floating, the plot area does not reserve\n             * space for it. This opens for positioning anywhere on the chart.\n             *\n             * @sample {highstock} stock/rangeselector/floating/\n             *         Placing the range selector between the plot area and the\n             *         navigator\n             *\n             * @since 6.0.0\n             */\n            floating: false,\n            /**\n             * The x offset of the range selector relative to its horizontal\n             * alignment within `chart.spacingLeft` and `chart.spacingRight`.\n             *\n             * @since 6.0.0\n             */\n            x: 0,\n            /**\n             * The y offset of the range selector relative to its horizontal\n             * alignment within `chart.spacingLeft` and `chart.spacingRight`.\n             *\n             * @since 6.0.0\n             */\n            y: 0,\n            /**\n             * Deprecated. The height of the range selector. Currently it is\n             * calculated dynamically.\n             *\n             * @deprecated\n             * @type  {number|undefined}\n             * @since 2.1.9\n             */\n            height: void 0,\n            /**\n             * The border color of the date input boxes.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type      {Highcharts.ColorString}\n             * @since     1.3.7\n             */\n            inputBoxBorderColor: 'none',\n            /**\n             * The pixel height of the date input boxes.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @since     1.3.7\n             */\n            inputBoxHeight: 17,\n            /**\n             * The pixel width of the date input boxes. When `undefined`, the width\n             * is fitted to the rendered content.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type   {number|undefined}\n             * @since  1.3.7\n             */\n            inputBoxWidth: void 0,\n            /**\n             * The date format in the input boxes when not selected for editing.\n             * Defaults to `%e %b %Y`.\n             *\n             * This is used to determine which type of input to show,\n             * `datetime-local`, `date` or `time` and falling back to `text` when\n             * the browser does not support the input type or the format contains\n             * milliseconds.\n             *\n             * @sample {highstock} stock/rangeselector/input-type/\n             *         Input types\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             */\n            inputDateFormat: '%e %b %Y',\n            /**\n             * A custom callback function to parse values entered in the input boxes\n             * and return a valid JavaScript time as milliseconds since 1970.\n             * The first argument passed is a value to parse,\n             * second is a boolean indicating use of the UTC time.\n             *\n             * This will only get called for inputs of type `text`. Since v8.2.3,\n             * the input type is dynamically determined based on the granularity\n             * of the `inputDateFormat` and the browser support.\n             *\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             * @type      {Highcharts.RangeSelectorParseCallbackFunction}\n             * @since     1.3.3\n             */\n            inputDateParser: void 0,\n            /**\n             * The date format in the input boxes when they are selected for\n             * editing. This must be a format that is recognized by JavaScript\n             * Date.parse.\n             *\n             * This will only be used for inputs of type `text`. Since v8.2.3,\n             * the input type is dynamically determined based on the granularity\n             * of the `inputDateFormat` and the browser support.\n             *\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             */\n            inputEditDateFormat: '%Y-%m-%d',\n            /**\n             * Enable or disable the date input boxes.\n             */\n            inputEnabled: true,\n            /**\n             * Positioning for the input boxes. Allowed properties are `align`,\n             *  `x` and `y`.\n             *\n             * @since 1.2.4\n             */\n            inputPosition: {\n                /**\n                 * The alignment of the input box. Allowed properties are `left`,\n                 * `center`, `right`.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-button-position/\n                 *         Alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 6.0.0\n                 */\n                align: 'right',\n                /**\n                 * X offset of the input row.\n                 */\n                x: 0,\n                /**\n                 * Y offset of the input row.\n                 */\n                y: 0\n            },\n            /**\n             * The space in pixels between the labels and the date input boxes in\n             * the range selector.\n             *\n             * @since 9.0.0\n             */\n            inputSpacing: 5,\n            /**\n             * The index of the button to appear pre-selected. If the selected range\n             * exceeds the total data range and the 'all' option is available,\n             * the 'all' option, showing the full range, is automatically selected.\n             *\n             * @type      {number}\n             */\n            selected: void 0,\n            /**\n             * Positioning for the button row.\n             *\n             * @since 1.2.4\n             */\n            buttonPosition: {\n                /**\n                 * The alignment of the input box. Allowed properties are `left`,\n                 * `center`, `right`.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-button-position/\n                 *         Alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 6.0.0\n                 */\n                align: 'left',\n                /**\n                 * X offset of the button row.\n                 */\n                x: 0,\n                /**\n                 * Y offset of the button row.\n                 */\n                y: 0\n            },\n            /**\n             * CSS for the HTML inputs in the range selector.\n             *\n             * In styled mode, the inputs are styled by the\n             * `.highcharts-range-input text` rule in SVG mode, and\n             * `input.highcharts-range-selector` when active.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type      {Highcharts.CSSObject}\n             * @apioption rangeSelector.inputStyle\n             */\n            inputStyle: {\n                /** @ignore */\n                color: \"#334eff\" /* Palette.highlightColor80 */,\n                /** @ignore */\n                cursor: 'pointer',\n                /** @ignore */\n                fontSize: '0.8em'\n            },\n            /**\n             * CSS styles for the labels - the Zoom, From and To texts.\n             *\n             * In styled mode, the labels are styled by the\n             * `.highcharts-range-label` class.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type {Highcharts.CSSObject}\n             */\n            labelStyle: {\n                /** @ignore */\n                color: \"#666666\" /* Palette.neutralColor60 */,\n                /** @ignore */\n                fontSize: '0.8em'\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const RangeSelectorDefaults = {\n            lang,\n            rangeSelector\n        };\n\n        return RangeSelectorDefaults;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelectorComposition.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Stock/RangeSelector/RangeSelectorDefaults.js'], _modules['Core/Utilities.js']], function (D, H, RangeSelectorDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { composed } = H;\n        const { addEvent, defined, extend, find, isNumber, merge, pick, pushUnique } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const chartDestroyEvents = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let RangeSelectorConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get the axis min value based on the range option and the current max. For\n         * stock charts this is extended via the {@link RangeSelector} so that if the\n         * selected range is a multiple of months or years, it is compensated for\n         * various month lengths.\n         *\n         * @private\n         * @function Highcharts.Axis#minFromRange\n         * @return {number|undefined}\n         *         The new minimum value.\n         */\n        function axisMinFromRange() {\n            const rangeOptions = this.range, type = rangeOptions.type, max = this.max, time = this.chart.time, \n            // Get the true range from a start date\n            getTrueRange = function (base, count) {\n                const timeName = type === 'year' ?\n                    'FullYear' : 'Month';\n                const date = new time.Date(base);\n                const basePeriod = time.get(timeName, date);\n                time.set(timeName, date, basePeriod + count);\n                if (basePeriod === time.get(timeName, date)) {\n                    time.set('Date', date, 0); // #6537\n                }\n                return date.getTime() - base;\n            };\n            let min, range;\n            if (isNumber(rangeOptions)) {\n                min = max - rangeOptions;\n                range = rangeOptions;\n            }\n            else if (rangeOptions) {\n                min = max + getTrueRange(max, -(rangeOptions.count || 1));\n                // Let the fixedRange reflect initial settings (#5930)\n                if (this.chart) {\n                    this.chart.setFixedRange(max - min);\n                }\n            }\n            const dataMin = pick(this.dataMin, Number.MIN_VALUE);\n            if (!isNumber(min)) {\n                min = dataMin;\n            }\n            if (min <= dataMin) {\n                min = dataMin;\n                if (typeof range === 'undefined') { // #4501\n                    range = getTrueRange(min, rangeOptions.count);\n                }\n                this.newMax = Math.min(min + range, pick(this.dataMax, Number.MAX_VALUE));\n            }\n            if (!isNumber(max)) {\n                min = void 0;\n            }\n            else if (!isNumber(rangeOptions) &&\n                rangeOptions &&\n                rangeOptions._offsetMin) {\n                min += rangeOptions._offsetMin;\n            }\n            return min;\n        }\n        /**\n         * @private\n         */\n        function compose(AxisClass, ChartClass, RangeSelectorClass) {\n            RangeSelectorConstructor = RangeSelectorClass;\n            if (pushUnique(composed, 'RangeSelector')) {\n                const chartProto = ChartClass.prototype;\n                AxisClass.prototype.minFromRange = axisMinFromRange;\n                addEvent(ChartClass, 'afterGetContainer', onChartAfterGetContainer);\n                addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                addEvent(ChartClass, 'destroy', onChartDestroy);\n                addEvent(ChartClass, 'getMargins', onChartGetMargins);\n                addEvent(ChartClass, 'render', onChartRender);\n                addEvent(ChartClass, 'update', onChartUpdate);\n                chartProto.callbacks.push(onChartCallback);\n                extend(defaultOptions, { rangeSelector: RangeSelectorDefaults.rangeSelector });\n                extend(defaultOptions.lang, RangeSelectorDefaults.lang);\n            }\n        }\n        /**\n         * Initialize rangeselector for stock charts\n         * @private\n         */\n        function onChartAfterGetContainer() {\n            if (this.options.rangeSelector &&\n                this.options.rangeSelector.enabled) {\n                this.rangeSelector = new RangeSelectorConstructor(this);\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartBeforeRender() {\n            const chart = this, axes = chart.axes, rangeSelector = chart.rangeSelector;\n            if (rangeSelector) {\n                if (isNumber(rangeSelector.deferredYTDClick)) {\n                    rangeSelector.clickButton(rangeSelector.deferredYTDClick);\n                    delete rangeSelector.deferredYTDClick;\n                }\n                axes.forEach((axis) => {\n                    axis.updateNames();\n                    axis.setScale();\n                });\n                chart.getAxisMargins();\n                rangeSelector.render();\n                const verticalAlign = rangeSelector.options.verticalAlign;\n                if (!rangeSelector.options.floating) {\n                    if (verticalAlign === 'bottom') {\n                        this.extraBottomMargin = true;\n                    }\n                    else if (verticalAlign !== 'middle') {\n                        this.extraTopMargin = true;\n                    }\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartCallback(chart) {\n            let extremes, legend, alignTo, verticalAlign;\n            const rangeSelector = chart.rangeSelector, redraw = () => {\n                if (rangeSelector) {\n                    extremes = chart.xAxis[0].getExtremes();\n                    legend = chart.legend;\n                    verticalAlign = (rangeSelector &&\n                        rangeSelector.options.verticalAlign);\n                    if (isNumber(extremes.min)) {\n                        rangeSelector.render(extremes.min, extremes.max);\n                    }\n                    // Re-align the legend so that it's below the rangeselector\n                    if (legend.display &&\n                        verticalAlign === 'top' &&\n                        verticalAlign === legend.options.verticalAlign) {\n                        // Create a new alignment box for the legend.\n                        alignTo = merge(chart.spacingBox);\n                        if (legend.options.layout === 'vertical') {\n                            alignTo.y = chart.plotTop;\n                        }\n                        else {\n                            alignTo.y += rangeSelector.getHeight();\n                        }\n                        legend.group.placed = false; // Don't animate the alignment.\n                        legend.align(alignTo);\n                    }\n                }\n            };\n            if (rangeSelector) {\n                const events = find(chartDestroyEvents, (e) => e[0] === chart);\n                if (!events) {\n                    chartDestroyEvents.push([chart, [\n                            // Redraw the scroller on setExtremes\n                            addEvent(chart.xAxis[0], 'afterSetExtremes', function (e) {\n                                if (rangeSelector) {\n                                    rangeSelector.render(e.min, e.max);\n                                }\n                            }),\n                            // Redraw the scroller chart resize\n                            addEvent(chart, 'redraw', redraw)\n                        ]]);\n                }\n                // Do it now\n                redraw();\n            }\n        }\n        /**\n         * Remove resize/afterSetExtremes at chart destroy.\n         * @private\n         */\n        function onChartDestroy() {\n            for (let i = 0, iEnd = chartDestroyEvents.length; i < iEnd; ++i) {\n                const events = chartDestroyEvents[i];\n                if (events[0] === this) {\n                    events[1].forEach((unbind) => unbind());\n                    chartDestroyEvents.splice(i, 1);\n                    return;\n                }\n            }\n        }\n        /**\n         *\n         */\n        function onChartGetMargins() {\n            const rangeSelector = this.rangeSelector;\n            if (rangeSelector) {\n                const rangeSelectorHeight = rangeSelector.getHeight();\n                if (this.extraTopMargin) {\n                    this.plotTop += rangeSelectorHeight;\n                }\n                if (this.extraBottomMargin) {\n                    this.marginBottom += rangeSelectorHeight;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartRender() {\n            const chart = this, rangeSelector = chart.rangeSelector;\n            if (rangeSelector && !rangeSelector.options.floating) {\n                rangeSelector.render();\n                const verticalAlign = rangeSelector.options.verticalAlign;\n                if (verticalAlign === 'bottom') {\n                    this.extraBottomMargin = true;\n                }\n                else if (verticalAlign !== 'middle') {\n                    this.extraTopMargin = true;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartUpdate(e) {\n            const chart = this, options = e.options, optionsRangeSelector = options.rangeSelector, extraBottomMarginWas = this.extraBottomMargin, extraTopMarginWas = this.extraTopMargin;\n            let rangeSelector = chart.rangeSelector;\n            if (optionsRangeSelector &&\n                optionsRangeSelector.enabled &&\n                !defined(rangeSelector) &&\n                this.options.rangeSelector) {\n                this.options.rangeSelector.enabled = true;\n                this.rangeSelector = rangeSelector = new RangeSelectorConstructor(this);\n            }\n            this.extraBottomMargin = false;\n            this.extraTopMargin = false;\n            if (rangeSelector) {\n                onChartCallback(this);\n                const verticalAlign = (optionsRangeSelector &&\n                    optionsRangeSelector.verticalAlign) || (rangeSelector.options && rangeSelector.options.verticalAlign);\n                if (!rangeSelector.options.floating) {\n                    if (verticalAlign === 'bottom') {\n                        this.extraBottomMargin = true;\n                    }\n                    else if (verticalAlign !== 'middle') {\n                        this.extraTopMargin = true;\n                    }\n                }\n                if (this.extraBottomMargin !== extraBottomMarginWas ||\n                    this.extraTopMargin !== extraTopMarginWas) {\n                    this.isDirtyBox = true;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const RangeSelectorComposition = {\n            compose\n        };\n\n        return RangeSelectorComposition;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelector.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Stock/RangeSelector/RangeSelectorComposition.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Core/Utilities.js']], function (Axis, D, H, RangeSelectorComposition, SVGElement, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { addEvent, createElement, css, defined, destroyObjectProperties, discardElement, extend, fireEvent, isNumber, merge, objectEach, pad, pick, pInt, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get the preferred input type based on a date format string.\n         *\n         * @private\n         * @function preferredInputType\n         */\n        function preferredInputType(format) {\n            const ms = format.indexOf('%L') !== -1;\n            if (ms) {\n                return 'text';\n            }\n            const date = ['a', 'A', 'd', 'e', 'w', 'b', 'B', 'm', 'o', 'y', 'Y']\n                .some((char) => format.indexOf('%' + char) !== -1);\n            const time = ['H', 'k', 'I', 'l', 'M', 'S']\n                .some((char) => format.indexOf('%' + char) !== -1);\n            if (date && time) {\n                return 'datetime-local';\n            }\n            if (date) {\n                return 'date';\n            }\n            if (time) {\n                return 'time';\n            }\n            return 'text';\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The range selector.\n         *\n         * @private\n         * @class\n         * @name Highcharts.RangeSelector\n         * @param {Highcharts.Chart} chart\n         */\n        class RangeSelector {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass, ChartClass) {\n                RangeSelectorComposition.compose(AxisClass, ChartClass, RangeSelector);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart) {\n                this.buttonOptions = RangeSelector.prototype.defaultButtons;\n                this.initialButtonGroupWidth = 0;\n                this.chart = chart;\n                this.init(chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * The method to run when one of the buttons in the range selectors is\n             * clicked\n             *\n             * @private\n             * @function Highcharts.RangeSelector#clickButton\n             * @param {number} i\n             *        The index of the button\n             * @param {boolean} [redraw]\n             */\n            clickButton(i, redraw) {\n                const rangeSelector = this, chart = rangeSelector.chart, rangeOptions = rangeSelector.buttonOptions[i], baseAxis = chart.xAxis[0], unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || baseAxis || {}, type = rangeOptions.type, dataGrouping = rangeOptions.dataGrouping;\n                let dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax, newMin, newMax = baseAxis && Math.round(Math.min(baseAxis.max, pick(dataMax, baseAxis.max))), // #1568\n                baseXAxisOptions, range = rangeOptions._range, rangeMin, minSetting, rangeSetting, ctx, ytdExtremes, addOffsetMin = true;\n                // Chart has no data, base series is removed\n                if (dataMin === null || dataMax === null) {\n                    return;\n                }\n                rangeSelector.setSelected(i);\n                // Apply dataGrouping associated to button\n                if (dataGrouping) {\n                    this.forcedDataGrouping = true;\n                    Axis.prototype.setDataGrouping.call(baseAxis || { chart: this.chart }, dataGrouping, false);\n                    this.frozenStates = rangeOptions.preserveDataGrouping;\n                }\n                // Apply range\n                if (type === 'month' || type === 'year') {\n                    if (!baseAxis) {\n                        // This is set to the user options and picked up later when the\n                        // axis is instantiated so that we know the min and max.\n                        range = rangeOptions;\n                    }\n                    else {\n                        ctx = {\n                            range: rangeOptions,\n                            max: newMax,\n                            chart: chart,\n                            dataMin: dataMin,\n                            dataMax: dataMax\n                        };\n                        newMin = baseAxis.minFromRange.call(ctx);\n                        if (isNumber(ctx.newMax)) {\n                            newMax = ctx.newMax;\n                        }\n                        // #15799: offsetMin is added in minFromRange so that it works\n                        // with pre-selected buttons as well\n                        addOffsetMin = false;\n                    }\n                    // Fixed times like minutes, hours, days\n                }\n                else if (range) {\n                    newMin = Math.max(newMax - range, dataMin);\n                    newMax = Math.min(newMin + range, dataMax);\n                    addOffsetMin = false;\n                }\n                else if (type === 'ytd') {\n                    // On user clicks on the buttons, or a delayed action running from\n                    // the beforeRender event (below), the baseAxis is defined.\n                    if (baseAxis) {\n                        // When \"ytd\" is the pre-selected button for the initial view,\n                        // its calculation is delayed and rerun in the beforeRender\n                        // event (below). When the series are initialized, but before\n                        // the chart is rendered, we have access to the xData array\n                        // (#942).\n                        if (typeof dataMax === 'undefined' ||\n                            typeof dataMin === 'undefined') {\n                            dataMin = Number.MAX_VALUE;\n                            dataMax = Number.MIN_VALUE;\n                            chart.series.forEach((series) => {\n                                // Reassign it to the last item\n                                const xData = series.xData;\n                                if (xData) {\n                                    dataMin = Math.min(xData[0], dataMin);\n                                    dataMax = Math.max(xData[xData.length - 1], dataMax);\n                                }\n                            });\n                            redraw = false;\n                        }\n                        ytdExtremes = rangeSelector.getYTDExtremes(dataMax, dataMin, chart.time.useUTC);\n                        newMin = rangeMin = ytdExtremes.min;\n                        newMax = ytdExtremes.max;\n                        // \"ytd\" is pre-selected. We don't yet have access to processed\n                        // point and extremes data (things like pointStart and pointInterval\n                        // are missing), so we delay the process (#942)\n                    }\n                    else {\n                        rangeSelector.deferredYTDClick = i;\n                        return;\n                    }\n                }\n                else if (type === 'all' && baseAxis) {\n                    // If the navigator exist and the axis range is declared reset that\n                    // range and from now on only use the range set by a user, #14742.\n                    if (chart.navigator && chart.navigator.baseSeries[0]) {\n                        chart.navigator.baseSeries[0].xAxis.options.range = void 0;\n                    }\n                    newMin = dataMin;\n                    newMax = dataMax;\n                }\n                if (addOffsetMin && rangeOptions._offsetMin && defined(newMin)) {\n                    newMin += rangeOptions._offsetMin;\n                }\n                if (rangeOptions._offsetMax && defined(newMax)) {\n                    newMax += rangeOptions._offsetMax;\n                }\n                if (this.dropdown) {\n                    this.dropdown.selectedIndex = i + 1;\n                }\n                // Update the chart\n                if (!baseAxis) {\n                    // Axis not yet instantiated. Temporarily set min and range\n                    // options and remove them on chart load (#4317).\n                    baseXAxisOptions = splat(chart.options.xAxis)[0];\n                    rangeSetting = baseXAxisOptions.range;\n                    baseXAxisOptions.range = range;\n                    minSetting = baseXAxisOptions.min;\n                    baseXAxisOptions.min = rangeMin;\n                    addEvent(chart, 'load', function resetMinAndRange() {\n                        chart.setFixedRange(rangeOptions._range);\n                        baseXAxisOptions.range = rangeSetting;\n                        baseXAxisOptions.min = minSetting;\n                    });\n                }\n                else {\n                    // Existing axis object. Set extremes after render time.\n                    baseAxis.setExtremes(newMin, newMax, pick(redraw, true), void 0, // Auto animation\n                    {\n                        trigger: 'rangeSelectorButton',\n                        rangeSelectorButton: rangeOptions\n                    });\n                    chart.setFixedRange(rangeOptions._range);\n                }\n                fireEvent(this, 'afterBtnClick');\n            }\n            /**\n             * Set the selected option. This method only sets the internal flag, it\n             * doesn't update the buttons or the actual zoomed range.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setSelected\n             * @param {number} [selected]\n             */\n            setSelected(selected) {\n                this.selected = this.options.selected = selected;\n            }\n            /**\n             * Initialize the range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#init\n             * @param {Highcharts.Chart} chart\n             */\n            init(chart) {\n                const rangeSelector = this, options = chart.options.rangeSelector, buttonOptions = (options.buttons || rangeSelector.defaultButtons.slice()), selectedOption = options.selected, blurInputs = function () {\n                    const minInput = rangeSelector.minInput, maxInput = rangeSelector.maxInput;\n                    // #3274 in some case blur is not defined\n                    if (minInput && !!minInput.blur) {\n                        fireEvent(minInput, 'blur');\n                    }\n                    if (maxInput && !!maxInput.blur) {\n                        fireEvent(maxInput, 'blur');\n                    }\n                };\n                rangeSelector.chart = chart;\n                rangeSelector.options = options;\n                rangeSelector.buttons = [];\n                rangeSelector.buttonOptions = buttonOptions;\n                this.eventsToUnbind = [];\n                this.eventsToUnbind.push(addEvent(chart.container, 'mousedown', blurInputs));\n                this.eventsToUnbind.push(addEvent(chart, 'resize', blurInputs));\n                // Extend the buttonOptions with actual range\n                buttonOptions.forEach(rangeSelector.computeButtonRange);\n                // Zoomed range based on a pre-selected button index\n                if (typeof selectedOption !== 'undefined' &&\n                    buttonOptions[selectedOption]) {\n                    this.clickButton(selectedOption, false);\n                }\n                this.eventsToUnbind.push(addEvent(chart, 'load', function () {\n                    // If a data grouping is applied to the current button, release it\n                    // when extremes change\n                    if (chart.xAxis && chart.xAxis[0]) {\n                        addEvent(chart.xAxis[0], 'setExtremes', function (e) {\n                            if (isNumber(this.max) &&\n                                isNumber(this.min) &&\n                                this.max - this.min !== chart.fixedRange &&\n                                e.trigger !== 'rangeSelectorButton' &&\n                                e.trigger !== 'updatedData' &&\n                                rangeSelector.forcedDataGrouping &&\n                                !rangeSelector.frozenStates) {\n                                this.setDataGrouping(false, false);\n                            }\n                        });\n                    }\n                }));\n            }\n            /**\n             * Dynamically update the range selector buttons after a new range has been\n             * set\n             *\n             * @private\n             * @function Highcharts.RangeSelector#updateButtonStates\n             */\n            updateButtonStates() {\n                const rangeSelector = this, chart = this.chart, dropdown = this.dropdown, baseAxis = chart.xAxis[0], actualRange = Math.round(baseAxis.max - baseAxis.min), hasNoData = !baseAxis.hasVisibleSeries, day = 24 * 36e5, // A single day in milliseconds\n                unionExtremes = (chart.scroller &&\n                    chart.scroller.getUnionExtremes()) || baseAxis, dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax, ytdExtremes = rangeSelector.getYTDExtremes(dataMax, dataMin, chart.time.useUTC), ytdMin = ytdExtremes.min, ytdMax = ytdExtremes.max, selected = rangeSelector.selected, allButtonsEnabled = rangeSelector.options.allButtonsEnabled, buttons = rangeSelector.buttons;\n                let selectedExists = isNumber(selected), isSelectedTooGreat = false;\n                rangeSelector.buttonOptions.forEach((rangeOptions, i) => {\n                    const range = rangeOptions._range, type = rangeOptions.type, count = rangeOptions.count || 1, button = buttons[i], offsetRange = rangeOptions._offsetMax -\n                        rangeOptions._offsetMin, isSelected = i === selected, \n                    // Disable buttons where the range exceeds what is allowed in\n                    // the current view\n                    isTooGreatRange = range >\n                        dataMax - dataMin, \n                    // Disable buttons where the range is smaller than the minimum\n                    // range\n                    isTooSmallRange = range < baseAxis.minRange;\n                    let state = 0, \n                    // Do not select the YTD button if not explicitly told so\n                    isYTDButNotSelected = false, \n                    // Disable the All button if we're already showing all\n                    isAllButAlreadyShowingAll = false, isSameRange = range === actualRange;\n                    if (isSelected && isTooGreatRange) {\n                        isSelectedTooGreat = true;\n                    }\n                    if (baseAxis.isOrdinal &&\n                        baseAxis.ordinal?.positions &&\n                        range &&\n                        actualRange < range) {\n                        // Handle ordinal ranges\n                        const positions = baseAxis.ordinal.positions;\n                        if (positions[positions.length - 1] - positions[0] > range) {\n                            isSameRange = true;\n                        }\n                    }\n                    else if (\n                    // Months and years have variable range so we check the extremes\n                    (type === 'month' || type === 'year') &&\n                        (actualRange + 36e5 >=\n                            { month: 28, year: 365 }[type] * day * count - offsetRange) &&\n                        (actualRange - 36e5 <=\n                            { month: 31, year: 366 }[type] * day * count + offsetRange)) {\n                        isSameRange = true;\n                    }\n                    else if (type === 'ytd') {\n                        isSameRange = (ytdMax - ytdMin + offsetRange) === actualRange;\n                        isYTDButNotSelected = !isSelected;\n                    }\n                    else if (type === 'all') {\n                        isSameRange = (baseAxis.max - baseAxis.min >=\n                            dataMax - dataMin);\n                        isAllButAlreadyShowingAll = (!isSelected &&\n                            selectedExists &&\n                            isSameRange);\n                    }\n                    // The new zoom area happens to match the range for a button - mark\n                    // it selected. This happens when scrolling across an ordinal gap.\n                    // It can be seen in the intraday demos when selecting 1h and scroll\n                    // across the night gap.\n                    const disable = (!allButtonsEnabled &&\n                        !(isSelectedTooGreat && type === 'all') &&\n                        (isTooGreatRange ||\n                            isTooSmallRange ||\n                            isAllButAlreadyShowingAll ||\n                            hasNoData));\n                    const select = ((isSelectedTooGreat && type === 'all') ||\n                        (isSelected && isSameRange) ||\n                        (isSameRange && !selectedExists && !isYTDButNotSelected) ||\n                        (isSelected && rangeSelector.frozenStates));\n                    if (disable) {\n                        state = 3;\n                    }\n                    else if (select) {\n                        selectedExists = true; // Only one button can be selected\n                        state = 2;\n                    }\n                    // If state has changed, update the button\n                    if (button.state !== state) {\n                        button.setState(state);\n                        if (dropdown) {\n                            dropdown.options[i + 1].disabled = disable;\n                            if (state === 2) {\n                                dropdown.selectedIndex = i + 1;\n                            }\n                        }\n                        // Reset (#9209)\n                        if (state === 0 && selected === i) {\n                            rangeSelector.setSelected();\n                        }\n                        else if ((state === 2 && !defined(selected)) ||\n                            isSelectedTooGreat) {\n                            rangeSelector.setSelected(i);\n                        }\n                    }\n                });\n            }\n            /**\n             * Compute and cache the range for an individual button\n             *\n             * @private\n             * @function Highcharts.RangeSelector#computeButtonRange\n             * @param {Highcharts.RangeSelectorButtonsOptions} rangeOptions\n             */\n            computeButtonRange(rangeOptions) {\n                const type = rangeOptions.type, count = rangeOptions.count || 1, \n                // These time intervals have a fixed number of milliseconds, as\n                // opposed to month, ytd and year\n                fixedTimes = {\n                    millisecond: 1,\n                    second: 1000,\n                    minute: 60 * 1000,\n                    hour: 3600 * 1000,\n                    day: 24 * 3600 * 1000,\n                    week: 7 * 24 * 3600 * 1000\n                };\n                // Store the range on the button object\n                if (fixedTimes[type]) {\n                    rangeOptions._range = fixedTimes[type] * count;\n                }\n                else if (type === 'month' || type === 'year') {\n                    rangeOptions._range = {\n                        month: 30,\n                        year: 365\n                    }[type] * 24 * 36e5 * count;\n                }\n                rangeOptions._offsetMin = pick(rangeOptions.offsetMin, 0);\n                rangeOptions._offsetMax = pick(rangeOptions.offsetMax, 0);\n                rangeOptions._range +=\n                    rangeOptions._offsetMax - rangeOptions._offsetMin;\n            }\n            /**\n             * Get the unix timestamp of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getInputValue\n             */\n            getInputValue(name) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                const options = this.chart.options\n                    .rangeSelector;\n                const time = this.chart.time;\n                if (input) {\n                    return ((input.type === 'text' && options.inputDateParser) ||\n                        this.defaultInputDateParser)(input.value, time.useUTC, time);\n                }\n                return 0;\n            }\n            /**\n             * Set the internal and displayed value of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setInputValue\n             */\n            setInputValue(name, inputTime) {\n                const options = this.options, time = this.chart.time, input = name === 'min' ? this.minInput : this.maxInput, dateBox = name === 'min' ? this.minDateBox : this.maxDateBox;\n                if (input) {\n                    const hcTimeAttr = input.getAttribute('data-hc-time');\n                    let updatedTime = defined(hcTimeAttr) ? Number(hcTimeAttr) : void 0;\n                    if (defined(inputTime)) {\n                        const previousTime = updatedTime;\n                        if (defined(previousTime)) {\n                            input.setAttribute('data-hc-time-previous', previousTime);\n                        }\n                        input.setAttribute('data-hc-time', inputTime);\n                        updatedTime = inputTime;\n                    }\n                    input.value = time.dateFormat((this.inputTypeFormats[input.type] ||\n                        options.inputEditDateFormat), updatedTime);\n                    if (dateBox) {\n                        dateBox.attr({\n                            text: time.dateFormat(options.inputDateFormat, updatedTime)\n                        });\n                    }\n                }\n            }\n            /**\n             * Set the min and max value of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setInputExtremes\n             */\n            setInputExtremes(name, min, max) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                if (input) {\n                    const format = this.inputTypeFormats[input.type];\n                    const time = this.chart.time;\n                    if (format) {\n                        const newMin = time.dateFormat(format, min);\n                        if (input.min !== newMin) {\n                            input.min = newMin;\n                        }\n                        const newMax = time.dateFormat(format, max);\n                        if (input.max !== newMax) {\n                            input.max = newMax;\n                        }\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#showInput\n             * @param {string} name\n             */\n            showInput(name) {\n                const dateBox = name === 'min' ? this.minDateBox : this.maxDateBox, input = name === 'min' ? this.minInput : this.maxInput;\n                if (input && dateBox && this.inputGroup) {\n                    const isTextInput = input.type === 'text', { translateX = 0, translateY = 0 } = this.inputGroup, { x = 0, width = 0, height = 0 } = dateBox, { inputBoxWidth } = this.options;\n                    css(input, {\n                        width: isTextInput ?\n                            ((width + (inputBoxWidth ? -2 : 20)) + 'px') :\n                            'auto',\n                        height: (height - 2) + 'px',\n                        border: '2px solid silver'\n                    });\n                    if (isTextInput && inputBoxWidth) {\n                        css(input, {\n                            left: (translateX + x) + 'px',\n                            top: translateY + 'px'\n                        });\n                        // Inputs of types date, time or datetime-local should be centered\n                        // on top of the dateBox\n                    }\n                    else {\n                        css(input, {\n                            left: Math.min(Math.round(x +\n                                translateX -\n                                (input.offsetWidth - width) / 2), this.chart.chartWidth - input.offsetWidth) + 'px',\n                            top: (translateY - (input.offsetHeight - height) / 2) + 'px'\n                        });\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#hideInput\n             * @param {string} name\n             */\n            hideInput(name) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                if (input) {\n                    css(input, {\n                        top: '-9999em',\n                        border: 0,\n                        width: '1px',\n                        height: '1px'\n                    });\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#defaultInputDateParser\n             */\n            defaultInputDateParser(inputDate, useUTC, time) {\n                const hasTimezone = (str) => str.length > 6 &&\n                    (str.lastIndexOf('-') === str.length - 6 ||\n                        str.lastIndexOf('+') === str.length - 6);\n                let input = inputDate.split('/').join('-').split(' ').join('T');\n                if (input.indexOf('T') === -1) {\n                    input += 'T00:00';\n                }\n                if (useUTC) {\n                    input += 'Z';\n                }\n                else if (H.isSafari && !hasTimezone(input)) {\n                    const offset = new Date(input).getTimezoneOffset() / 60;\n                    input += offset <= 0 ? `+${pad(-offset)}:00` : `-${pad(offset)}:00`;\n                }\n                let date = Date.parse(input);\n                // If the value isn't parsed directly to a value by the\n                // browser's Date.parse method, try\n                // parsing it a different way\n                if (!isNumber(date)) {\n                    const parts = inputDate.split('-');\n                    date = Date.UTC(pInt(parts[0]), pInt(parts[1]) - 1, pInt(parts[2]));\n                }\n                if (time && useUTC && isNumber(date)) {\n                    date += time.getTimezoneOffset(date);\n                }\n                return date;\n            }\n            /**\n             * Draw either the 'from' or the 'to' HTML input box of the range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#drawInput\n             */\n            drawInput(name) {\n                const { chart, div, inputGroup } = this;\n                const rangeSelector = this, chartStyle = chart.renderer.style || {}, renderer = chart.renderer, options = chart.options.rangeSelector, lang = defaultOptions.lang, isMin = name === 'min';\n                /**\n                 * @private\n                 */\n                function updateExtremes() {\n                    const { maxInput, minInput } = rangeSelector, chartAxis = chart.xAxis[0], unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || chartAxis, dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax;\n                    let value = rangeSelector.getInputValue(name);\n                    if (value !== Number(input.getAttribute('data-hc-time-previous')) &&\n                        isNumber(value)) {\n                        input.setAttribute('data-hc-time-previous', value);\n                        // Validate the extremes. If it goes beyond the data min or\n                        // max, use the actual data extreme (#2438).\n                        if (isMin && maxInput && isNumber(dataMin)) {\n                            if (value > Number(maxInput.getAttribute('data-hc-time'))) {\n                                value = void 0;\n                            }\n                            else if (value < dataMin) {\n                                value = dataMin;\n                            }\n                        }\n                        else if (minInput && isNumber(dataMax)) {\n                            if (value < Number(minInput.getAttribute('data-hc-time'))) {\n                                value = void 0;\n                            }\n                            else if (value > dataMax) {\n                                value = dataMax;\n                            }\n                        }\n                        // Set the extremes\n                        if (typeof value !== 'undefined') { // @todo typeof undefined\n                            chartAxis.setExtremes(isMin ? value : chartAxis.min, isMin ? chartAxis.max : value, void 0, void 0, { trigger: 'rangeSelectorInput' });\n                        }\n                    }\n                }\n                // Create the text label\n                const text = lang[isMin ? 'rangeSelectorFrom' : 'rangeSelectorTo'] || '';\n                const label = renderer\n                    .label(text, 0)\n                    .addClass('highcharts-range-label')\n                    .attr({\n                    padding: text ? 2 : 0,\n                    height: text ? options.inputBoxHeight : 0\n                })\n                    .add(inputGroup);\n                // Create an SVG label that shows updated date ranges and records click\n                // events that bring in the HTML input.\n                const dateBox = renderer\n                    .label('', 0)\n                    .addClass('highcharts-range-input')\n                    .attr({\n                    padding: 2,\n                    width: options.inputBoxWidth,\n                    height: options.inputBoxHeight,\n                    'text-align': 'center'\n                })\n                    .on('click', function () {\n                    // If it is already focused, the onfocus event doesn't fire\n                    // (#3713)\n                    rangeSelector.showInput(name);\n                    rangeSelector[name + 'Input'].focus();\n                });\n                if (!chart.styledMode) {\n                    dateBox.attr({\n                        stroke: options.inputBoxBorderColor,\n                        'stroke-width': 1\n                    });\n                }\n                dateBox.add(inputGroup);\n                // Create the HTML input element. This is rendered as 1x1 pixel then set\n                // to the right size when focused.\n                const input = createElement('input', {\n                    name: name,\n                    className: 'highcharts-range-selector'\n                }, void 0, div);\n                // #14788: Setting input.type to an unsupported type throws in IE, so\n                // we need to use setAttribute instead\n                input.setAttribute('type', preferredInputType(options.inputDateFormat || '%e %b %Y'));\n                if (!chart.styledMode) {\n                    // Styles\n                    label.css(merge(chartStyle, options.labelStyle));\n                    dateBox.css(merge({\n                        color: \"#333333\" /* Palette.neutralColor80 */\n                    }, chartStyle, options.inputStyle));\n                    css(input, extend({\n                        position: 'absolute',\n                        border: 0,\n                        boxShadow: '0 0 15px rgba(0,0,0,0.3)',\n                        width: '1px',\n                        height: '1px',\n                        padding: 0,\n                        textAlign: 'center',\n                        fontSize: chartStyle.fontSize,\n                        fontFamily: chartStyle.fontFamily,\n                        top: '-9999em' // #4798\n                    }, options.inputStyle));\n                }\n                // Blow up the input box\n                input.onfocus = () => {\n                    rangeSelector.showInput(name);\n                };\n                // Hide away the input box\n                input.onblur = () => {\n                    // Update extremes only when inputs are active\n                    if (input === H.doc.activeElement) { // Only when focused\n                        // Update also when no `change` event is triggered, like when\n                        // clicking inside the SVG (#4710)\n                        updateExtremes();\n                    }\n                    // #10404 - move hide and blur outside focus\n                    rangeSelector.hideInput(name);\n                    rangeSelector.setInputValue(name);\n                    input.blur(); // #4606\n                };\n                let keyDown = false;\n                // Handle changes in the input boxes\n                input.onchange = () => {\n                    // Update extremes and blur input when clicking date input calendar\n                    if (!keyDown) {\n                        updateExtremes();\n                        rangeSelector.hideInput(name);\n                        input.blur();\n                    }\n                };\n                input.onkeypress = (event) => {\n                    // IE does not fire onchange on enter\n                    if (event.keyCode === 13) {\n                        updateExtremes();\n                    }\n                };\n                input.onkeydown = (event) => {\n                    keyDown = true;\n                    // Arrow keys\n                    if (event.keyCode === 38 || event.keyCode === 40) {\n                        updateExtremes();\n                    }\n                };\n                input.onkeyup = () => {\n                    keyDown = false;\n                };\n                return { dateBox, input, label };\n            }\n            /**\n             * Get the position of the range selector buttons and inputs. This can be\n             * overridden from outside for custom positioning.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getPosition\n             */\n            getPosition() {\n                const chart = this.chart, options = chart.options.rangeSelector, top = options.verticalAlign === 'top' ?\n                    chart.plotTop - chart.axisOffset[0] :\n                    0; // Set offset only for verticalAlign top\n                return {\n                    buttonTop: top + options.buttonPosition.y,\n                    inputTop: top + options.inputPosition.y - 10\n                };\n            }\n            /**\n             * Get the extremes of YTD. Will choose dataMax if its value is lower than\n             * the current timestamp. Will choose dataMin if its value is higher than\n             * the timestamp for the start of current year.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getYTDExtremes\n             * @return {*}\n             * Returns min and max for the YTD\n             */\n            getYTDExtremes(dataMax, dataMin, useUTC) {\n                const time = this.chart.time, now = new time.Date(dataMax), year = time.get('FullYear', now), startOfYear = useUTC ?\n                    time.Date.UTC(year, 0, 1) : // eslint-disable-line new-cap\n                    +new time.Date(year, 0, 1), min = Math.max(dataMin, startOfYear), ts = now.getTime();\n                return {\n                    max: Math.min(dataMax || ts, ts),\n                    min\n                };\n            }\n            /**\n             * Render the range selector including the buttons and the inputs. The first\n             * time render is called, the elements are created and positioned. On\n             * subsequent calls, they are moved and updated.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#render\n             * @param {number} [min]\n             *        X axis minimum\n             * @param {number} [max]\n             *        X axis maximum\n             */\n            render(min, max) {\n                const chart = this.chart, renderer = chart.renderer, container = chart.container, chartOptions = chart.options, options = chartOptions.rangeSelector, \n                // Place inputs above the container\n                inputsZIndex = pick(chartOptions.chart.style &&\n                    chartOptions.chart.style.zIndex, 0) + 1, inputEnabled = options.inputEnabled, rendered = this.rendered;\n                if (options.enabled === false) {\n                    return;\n                }\n                // Create the elements\n                if (!rendered) {\n                    this.group = renderer.g('range-selector-group')\n                        .attr({\n                        zIndex: 7\n                    })\n                        .add();\n                    this.div = createElement('div', void 0, {\n                        position: 'relative',\n                        height: 0,\n                        zIndex: inputsZIndex\n                    });\n                    if (this.buttonOptions.length) {\n                        this.renderButtons();\n                    }\n                    // First create a wrapper outside the container in order to make\n                    // the inputs work and make export correct\n                    if (container.parentNode) {\n                        container.parentNode.insertBefore(this.div, container);\n                    }\n                    if (inputEnabled) {\n                        // Create the group to keep the inputs\n                        this.inputGroup = renderer.g('input-group').add(this.group);\n                        const minElems = this.drawInput('min');\n                        this.minDateBox = minElems.dateBox;\n                        this.minLabel = minElems.label;\n                        this.minInput = minElems.input;\n                        const maxElems = this.drawInput('max');\n                        this.maxDateBox = maxElems.dateBox;\n                        this.maxLabel = maxElems.label;\n                        this.maxInput = maxElems.input;\n                    }\n                }\n                if (inputEnabled) {\n                    // Set or reset the input values\n                    this.setInputValue('min', min);\n                    this.setInputValue('max', max);\n                    const unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || chart.xAxis[0] || {};\n                    if (defined(unionExtremes.dataMin) &&\n                        defined(unionExtremes.dataMax)) {\n                        const minRange = chart.xAxis[0].minRange || 0;\n                        this.setInputExtremes('min', unionExtremes.dataMin, Math.min(unionExtremes.dataMax, this.getInputValue('max')) - minRange);\n                        this.setInputExtremes('max', Math.max(unionExtremes.dataMin, this.getInputValue('min')) + minRange, unionExtremes.dataMax);\n                    }\n                    // Reflow\n                    if (this.inputGroup) {\n                        let x = 0;\n                        [\n                            this.minLabel,\n                            this.minDateBox,\n                            this.maxLabel,\n                            this.maxDateBox\n                        ].forEach((label) => {\n                            if (label) {\n                                const { width } = label.getBBox();\n                                if (width) {\n                                    label.attr({ x });\n                                    x += width + options.inputSpacing;\n                                }\n                            }\n                        });\n                    }\n                }\n                this.alignElements();\n                this.rendered = true;\n            }\n            /**\n             * Render the range buttons. This only runs the first time, later the\n             * positioning is laid out in alignElements.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#renderButtons\n             */\n            renderButtons() {\n                const { buttons, chart, options } = this;\n                const lang = defaultOptions.lang;\n                const renderer = chart.renderer;\n                const buttonTheme = merge(options.buttonTheme);\n                const states = buttonTheme && buttonTheme.states;\n                // Prevent the button from resetting the width when the button state\n                // changes since we need more control over the width when collapsing\n                // the buttons\n                const width = buttonTheme.width || 28;\n                delete buttonTheme.width;\n                delete buttonTheme.states;\n                this.buttonGroup = renderer.g('range-selector-buttons').add(this.group);\n                const dropdown = this.dropdown = createElement('select', void 0, {\n                    position: 'absolute',\n                    width: '1px',\n                    height: '1px',\n                    padding: 0,\n                    border: 0,\n                    top: '-9999em',\n                    cursor: 'pointer',\n                    opacity: 0.0001\n                }, this.div);\n                // Prevent page zoom on iPhone\n                addEvent(dropdown, 'touchstart', () => {\n                    dropdown.style.fontSize = '16px';\n                });\n                // Forward events from select to button\n                [\n                    [H.isMS ? 'mouseover' : 'mouseenter'],\n                    [H.isMS ? 'mouseout' : 'mouseleave'],\n                    ['change', 'click']\n                ].forEach(([from, to]) => {\n                    addEvent(dropdown, from, () => {\n                        const button = buttons[this.currentButtonIndex()];\n                        if (button) {\n                            fireEvent(button.element, to || from);\n                        }\n                    });\n                });\n                this.zoomText = renderer\n                    .label((lang && lang.rangeSelectorZoom) || '', 0)\n                    .attr({\n                    padding: options.buttonTheme.padding,\n                    height: options.buttonTheme.height,\n                    paddingLeft: 0,\n                    paddingRight: 0\n                })\n                    .add(this.buttonGroup);\n                if (!this.chart.styledMode) {\n                    this.zoomText.css(options.labelStyle);\n                    buttonTheme['stroke-width'] = pick(buttonTheme['stroke-width'], 0);\n                }\n                createElement('option', {\n                    textContent: this.zoomText.textStr,\n                    disabled: true\n                }, void 0, dropdown);\n                this.buttonOptions.forEach((rangeOptions, i) => {\n                    createElement('option', {\n                        textContent: rangeOptions.title || rangeOptions.text\n                    }, void 0, dropdown);\n                    buttons[i] = renderer\n                        .button(rangeOptions.text, 0, 0, (e) => {\n                        // Extract events from button object and call\n                        const buttonEvents = (rangeOptions.events && rangeOptions.events.click);\n                        let callDefaultEvent;\n                        if (buttonEvents) {\n                            callDefaultEvent =\n                                buttonEvents.call(rangeOptions, e);\n                        }\n                        if (callDefaultEvent !== false) {\n                            this.clickButton(i);\n                        }\n                        this.isActive = true;\n                    }, buttonTheme, states && states.hover, states && states.select, states && states.disabled)\n                        .attr({\n                        'text-align': 'center',\n                        width\n                    })\n                        .add(this.buttonGroup);\n                    if (rangeOptions.title) {\n                        buttons[i].attr('title', rangeOptions.title);\n                    }\n                });\n            }\n            /**\n             * Align the elements horizontally and vertically.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#alignElements\n             */\n            alignElements() {\n                const { buttonGroup, buttons, chart, group, inputGroup, options, zoomText } = this;\n                const chartOptions = chart.options;\n                const navButtonOptions = (chartOptions.exporting &&\n                    chartOptions.exporting.enabled !== false &&\n                    chartOptions.navigation &&\n                    chartOptions.navigation.buttonOptions);\n                const { buttonPosition, inputPosition, verticalAlign } = options;\n                // Get the X offset required to avoid overlapping with the exporting\n                // button. This is used both by the buttonGroup and the inputGroup.\n                const getXOffsetForExportButton = (group, position) => {\n                    if (navButtonOptions &&\n                        this.titleCollision(chart) &&\n                        verticalAlign === 'top' &&\n                        position.align === 'right' && ((position.y -\n                        group.getBBox().height - 12) <\n                        ((navButtonOptions.y || 0) +\n                            (navButtonOptions.height || 0) +\n                            chart.spacing[0]))) {\n                        return -40;\n                    }\n                    return 0;\n                };\n                let plotLeft = chart.plotLeft;\n                if (group && buttonPosition && inputPosition) {\n                    let translateX = buttonPosition.x - chart.spacing[3];\n                    if (buttonGroup) {\n                        this.positionButtons();\n                        if (!this.initialButtonGroupWidth) {\n                            let width = 0;\n                            if (zoomText) {\n                                width += zoomText.getBBox().width + 5;\n                            }\n                            buttons.forEach((button, i) => {\n                                width += button.width || 0;\n                                if (i !== buttons.length - 1) {\n                                    width += options.buttonSpacing;\n                                }\n                            });\n                            this.initialButtonGroupWidth = width;\n                        }\n                        plotLeft -= chart.spacing[3];\n                        this.updateButtonStates();\n                        // Detect collision between button group and exporting\n                        const xOffsetForExportButton = getXOffsetForExportButton(buttonGroup, buttonPosition);\n                        this.alignButtonGroup(xOffsetForExportButton);\n                        // Skip animation\n                        group.placed = buttonGroup.placed = chart.hasLoaded;\n                    }\n                    let xOffsetForExportButton = 0;\n                    if (inputGroup) {\n                        // Detect collision between the input group and exporting button\n                        xOffsetForExportButton = getXOffsetForExportButton(inputGroup, inputPosition);\n                        if (inputPosition.align === 'left') {\n                            translateX = plotLeft;\n                        }\n                        else if (inputPosition.align === 'right') {\n                            translateX = -Math.max(chart.axisOffset[1], -xOffsetForExportButton);\n                        }\n                        // Update the alignment to the updated spacing box\n                        inputGroup.align({\n                            y: inputPosition.y,\n                            width: inputGroup.getBBox().width,\n                            align: inputPosition.align,\n                            // Fix wrong getBBox() value on right align\n                            x: inputPosition.x + translateX - 2\n                        }, true, chart.spacingBox);\n                        // Skip animation\n                        inputGroup.placed = chart.hasLoaded;\n                    }\n                    this.handleCollision(xOffsetForExportButton);\n                    // Vertical align\n                    group.align({\n                        verticalAlign\n                    }, true, chart.spacingBox);\n                    const alignTranslateY = group.alignAttr.translateY;\n                    // Set position\n                    let groupHeight = group.getBBox().height + 20; // # 20 padding\n                    let translateY = 0;\n                    // Calculate bottom position\n                    if (verticalAlign === 'bottom') {\n                        const legendOptions = chart.legend && chart.legend.options;\n                        const legendHeight = (legendOptions &&\n                            legendOptions.verticalAlign === 'bottom' &&\n                            legendOptions.enabled &&\n                            !legendOptions.floating ?\n                            (chart.legend.legendHeight +\n                                pick(legendOptions.margin, 10)) :\n                            0);\n                        groupHeight = groupHeight + legendHeight - 20;\n                        translateY = (alignTranslateY -\n                            groupHeight -\n                            (options.floating ? 0 : options.y) -\n                            (chart.titleOffset ? chart.titleOffset[2] : 0) -\n                            10 // 10 spacing\n                        );\n                    }\n                    if (verticalAlign === 'top') {\n                        if (options.floating) {\n                            translateY = 0;\n                        }\n                        if (chart.titleOffset && chart.titleOffset[0]) {\n                            translateY = chart.titleOffset[0];\n                        }\n                        translateY += ((chart.margin[0] - chart.spacing[0]) || 0);\n                    }\n                    else if (verticalAlign === 'middle') {\n                        if (inputPosition.y === buttonPosition.y) {\n                            translateY = alignTranslateY;\n                        }\n                        else if (inputPosition.y || buttonPosition.y) {\n                            if (inputPosition.y < 0 ||\n                                buttonPosition.y < 0) {\n                                translateY -= Math.min(inputPosition.y, buttonPosition.y);\n                            }\n                            else {\n                                translateY = alignTranslateY - groupHeight;\n                            }\n                        }\n                    }\n                    group.translate(options.x, options.y + Math.floor(translateY));\n                    // Translate HTML inputs\n                    const { minInput, maxInput, dropdown } = this;\n                    if (options.inputEnabled && minInput && maxInput) {\n                        minInput.style.marginTop = group.translateY + 'px';\n                        maxInput.style.marginTop = group.translateY + 'px';\n                    }\n                    if (dropdown) {\n                        dropdown.style.marginTop = group.translateY + 'px';\n                    }\n                }\n            }\n            /**\n             * Align the button group horizontally and vertically.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#alignButtonGroup\n             * @param {number} xOffsetForExportButton\n             * @param {number} [width]\n             */\n            alignButtonGroup(xOffsetForExportButton, width) {\n                const { chart, options, buttonGroup } = this;\n                const { buttonPosition } = options;\n                const plotLeft = chart.plotLeft - chart.spacing[3];\n                let translateX = buttonPosition.x - chart.spacing[3];\n                if (buttonPosition.align === 'right') {\n                    translateX += xOffsetForExportButton - plotLeft; // #13014\n                }\n                else if (buttonPosition.align === 'center') {\n                    translateX -= plotLeft / 2;\n                }\n                if (buttonGroup) {\n                    // Align button group\n                    buttonGroup.align({\n                        y: buttonPosition.y,\n                        width: pick(width, this.initialButtonGroupWidth),\n                        align: buttonPosition.align,\n                        x: translateX\n                    }, true, chart.spacingBox);\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#positionButtons\n             */\n            positionButtons() {\n                const { buttons, chart, options, zoomText } = this;\n                const verb = chart.hasLoaded ? 'animate' : 'attr';\n                const { buttonPosition } = options;\n                const plotLeft = chart.plotLeft;\n                let buttonLeft = plotLeft;\n                if (zoomText && zoomText.visibility !== 'hidden') {\n                    // #8769, allow dynamically updating margins\n                    zoomText[verb]({\n                        x: pick(plotLeft + buttonPosition.x, plotLeft)\n                    });\n                    // Button start position\n                    buttonLeft += buttonPosition.x +\n                        zoomText.getBBox().width + 5;\n                }\n                for (let i = 0, iEnd = this.buttonOptions.length; i < iEnd; ++i) {\n                    if (buttons[i].visibility !== 'hidden') {\n                        buttons[i][verb]({ x: buttonLeft });\n                        // Increase the button position for the next button\n                        buttonLeft += (buttons[i].width || 0) + options.buttonSpacing;\n                    }\n                    else {\n                        buttons[i][verb]({ x: plotLeft });\n                    }\n                }\n            }\n            /**\n             * Handle collision between the button group and the input group\n             *\n             * @private\n             * @function Highcharts.RangeSelector#handleCollision\n             *\n             * @param  {number} xOffsetForExportButton\n             *                  The X offset of the group required to make room for the\n             *                  exporting button\n             */\n            handleCollision(xOffsetForExportButton) {\n                const { chart, buttonGroup, inputGroup } = this;\n                const { buttonPosition, dropdown, inputPosition } = this.options;\n                const maxButtonWidth = () => {\n                    let buttonWidth = 0;\n                    this.buttons.forEach((button) => {\n                        const bBox = button.getBBox();\n                        if (bBox.width > buttonWidth) {\n                            buttonWidth = bBox.width;\n                        }\n                    });\n                    return buttonWidth;\n                };\n                const groupsOverlap = (buttonGroupWidth) => {\n                    if (inputGroup && buttonGroup) {\n                        const inputGroupX = (inputGroup.alignAttr.translateX +\n                            inputGroup.alignOptions.x -\n                            xOffsetForExportButton +\n                            // `getBBox` for detecing left margin\n                            inputGroup.getBBox().x +\n                            // 2px padding to not overlap input and label\n                            2);\n                        const inputGroupWidth = inputGroup.alignOptions.width;\n                        const buttonGroupX = buttonGroup.alignAttr.translateX +\n                            buttonGroup.getBBox().x;\n                        return (buttonGroupX + buttonGroupWidth > inputGroupX) &&\n                            (inputGroupX + inputGroupWidth > buttonGroupX) &&\n                            (buttonPosition.y <\n                                (inputPosition.y +\n                                    inputGroup.getBBox().height));\n                    }\n                    return false;\n                };\n                const moveInputsDown = () => {\n                    if (inputGroup && buttonGroup) {\n                        inputGroup.attr({\n                            translateX: inputGroup.alignAttr.translateX + (chart.axisOffset[1] >= -xOffsetForExportButton ?\n                                0 :\n                                -xOffsetForExportButton),\n                            translateY: inputGroup.alignAttr.translateY +\n                                buttonGroup.getBBox().height + 10\n                        });\n                    }\n                };\n                if (buttonGroup) {\n                    if (dropdown === 'always') {\n                        this.collapseButtons(xOffsetForExportButton);\n                        if (groupsOverlap(maxButtonWidth())) {\n                            // Move the inputs down if there is still a collision\n                            // after collapsing the buttons\n                            moveInputsDown();\n                        }\n                        return;\n                    }\n                    if (dropdown === 'never') {\n                        this.expandButtons();\n                    }\n                }\n                // Detect collision\n                if (inputGroup && buttonGroup) {\n                    if ((inputPosition.align === buttonPosition.align) ||\n                        // 20 is minimal spacing between elements\n                        groupsOverlap(this.initialButtonGroupWidth + 20)) {\n                        if (dropdown === 'responsive') {\n                            this.collapseButtons(xOffsetForExportButton);\n                            if (groupsOverlap(maxButtonWidth())) {\n                                moveInputsDown();\n                            }\n                        }\n                        else {\n                            moveInputsDown();\n                        }\n                    }\n                    else if (dropdown === 'responsive') {\n                        this.expandButtons();\n                    }\n                }\n                else if (buttonGroup && dropdown === 'responsive') {\n                    if (this.initialButtonGroupWidth > chart.plotWidth) {\n                        this.collapseButtons(xOffsetForExportButton);\n                    }\n                    else {\n                        this.expandButtons();\n                    }\n                }\n            }\n            /**\n             * Collapse the buttons and put the select element on top.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#collapseButtons\n             * @param {number} xOffsetForExportButton\n             */\n            collapseButtons(xOffsetForExportButton) {\n                const { buttons, buttonOptions, chart, dropdown, options, zoomText } = this;\n                // If the buttons are already collapsed do nothing.\n                if (this.isCollapsed === true) {\n                    return;\n                }\n                this.isCollapsed = true;\n                const userButtonTheme = (chart.userOptions.rangeSelector &&\n                    chart.userOptions.rangeSelector.buttonTheme) || {};\n                const getAttribs = (text) => ({\n                    text: text ? `${text} ▾` : '▾',\n                    width: 'auto',\n                    paddingLeft: pick(options.buttonTheme.paddingLeft, userButtonTheme.padding, 8),\n                    paddingRight: pick(options.buttonTheme.paddingRight, userButtonTheme.padding, 8)\n                });\n                if (zoomText) {\n                    zoomText.hide();\n                }\n                let hasActiveButton = false;\n                buttonOptions.forEach((rangeOptions, i) => {\n                    const button = buttons[i];\n                    if (button.state !== 2) {\n                        button.hide();\n                    }\n                    else {\n                        button.show();\n                        button.attr(getAttribs(rangeOptions.text));\n                        hasActiveButton = true;\n                    }\n                });\n                if (!hasActiveButton) {\n                    if (dropdown) {\n                        dropdown.selectedIndex = 0;\n                    }\n                    buttons[0].show();\n                    buttons[0].attr(getAttribs(this.zoomText && this.zoomText.textStr));\n                }\n                const { align } = options.buttonPosition;\n                this.positionButtons();\n                if (align === 'right' || align === 'center') {\n                    this.alignButtonGroup(xOffsetForExportButton, buttons[this.currentButtonIndex()].getBBox().width);\n                }\n                this.showDropdown();\n            }\n            /**\n             * Show all the buttons and hide the select element.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#expandButtons\n             */\n            expandButtons() {\n                const { buttons, buttonOptions, options, zoomText } = this;\n                this.hideDropdown();\n                // If buttons are already not collapsed, do nothing.\n                if (this.isCollapsed === false) {\n                    return;\n                }\n                this.isCollapsed = false;\n                if (zoomText) {\n                    zoomText.show();\n                }\n                buttonOptions.forEach((rangeOptions, i) => {\n                    const button = buttons[i];\n                    button.show();\n                    button.attr({\n                        text: rangeOptions.text,\n                        width: options.buttonTheme.width || 28,\n                        paddingLeft: pick(options.buttonTheme.paddingLeft, 'unset'),\n                        paddingRight: pick(options.buttonTheme.paddingRight, 'unset')\n                    });\n                    if (button.state < 2) {\n                        button.setState(0);\n                    }\n                });\n                this.positionButtons();\n            }\n            /**\n             * Get the index of the visible button when the buttons are collapsed.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#currentButtonIndex\n             */\n            currentButtonIndex() {\n                const { dropdown } = this;\n                if (dropdown && dropdown.selectedIndex > 0) {\n                    return dropdown.selectedIndex - 1;\n                }\n                return 0;\n            }\n            /**\n             * Position the select element on top of the button.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#showDropdown\n             */\n            showDropdown() {\n                const { buttonGroup, buttons, chart, dropdown } = this;\n                if (buttonGroup && dropdown) {\n                    const { translateX = 0, translateY = 0 } = buttonGroup, bBox = buttons[this.currentButtonIndex()].getBBox();\n                    css(dropdown, {\n                        left: (chart.plotLeft + translateX) + 'px',\n                        top: (translateY + 0.5) + 'px',\n                        width: bBox.width + 'px',\n                        height: bBox.height + 'px'\n                    });\n                    this.hasVisibleDropdown = true;\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#hideDropdown\n             */\n            hideDropdown() {\n                const { dropdown } = this;\n                if (dropdown) {\n                    css(dropdown, {\n                        top: '-9999em',\n                        width: '1px',\n                        height: '1px'\n                    });\n                    this.hasVisibleDropdown = false;\n                }\n            }\n            /**\n             * Extracts height of range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getHeight\n             * @return {number}\n             * Returns rangeSelector height\n             */\n            getHeight() {\n                const rangeSelector = this, options = rangeSelector.options, rangeSelectorGroup = rangeSelector.group, inputPosition = options.inputPosition, buttonPosition = options.buttonPosition, yPosition = options.y, buttonPositionY = buttonPosition.y, inputPositionY = inputPosition.y;\n                let rangeSelectorHeight = 0;\n                if (options.height) {\n                    return options.height;\n                }\n                // Align the elements before we read the height in case we're switching\n                // between wrapped and non-wrapped layout\n                this.alignElements();\n                rangeSelectorHeight = rangeSelectorGroup ?\n                    // 13px to keep back compatibility\n                    (rangeSelectorGroup.getBBox(true).height) + 13 +\n                        yPosition :\n                    0;\n                const minPosition = Math.min(inputPositionY, buttonPositionY);\n                if ((inputPositionY < 0 && buttonPositionY < 0) ||\n                    (inputPositionY > 0 && buttonPositionY > 0)) {\n                    rangeSelectorHeight += Math.abs(minPosition);\n                }\n                return rangeSelectorHeight;\n            }\n            /**\n             * Detect collision with title or subtitle\n             *\n             * @private\n             * @function Highcharts.RangeSelector#titleCollision\n             * @return {boolean}\n             * Returns collision status\n             */\n            titleCollision(chart) {\n                return !(chart.options.title.text ||\n                    chart.options.subtitle.text);\n            }\n            /**\n             * Update the range selector with new options\n             *\n             * @private\n             * @function Highcharts.RangeSelector#update\n             * @param {Highcharts.RangeSelectorOptions} options\n             */\n            update(options) {\n                const chart = this.chart;\n                merge(true, chart.options.rangeSelector, options);\n                this.destroy();\n                this.init(chart);\n                this.render();\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#destroy\n             */\n            destroy() {\n                const rSelector = this, minInput = rSelector.minInput, maxInput = rSelector.maxInput;\n                if (rSelector.eventsToUnbind) {\n                    rSelector.eventsToUnbind.forEach((unbind) => unbind());\n                    rSelector.eventsToUnbind = void 0;\n                }\n                // Destroy elements in collections\n                destroyObjectProperties(rSelector.buttons);\n                // Clear input element events\n                if (minInput) {\n                    minInput.onfocus = minInput.onblur = minInput.onchange = null;\n                }\n                if (maxInput) {\n                    maxInput.onfocus = maxInput.onblur = maxInput.onchange = null;\n                }\n                // Destroy HTML and SVG elements\n                objectEach(rSelector, function (val, key) {\n                    if (val && key !== 'chart') {\n                        if (val instanceof SVGElement) {\n                            // SVGElement\n                            val.destroy();\n                        }\n                        else if (val instanceof window.HTMLElement) {\n                            // HTML element\n                            discardElement(val);\n                        }\n                    }\n                    if (val !== RangeSelector.prototype[key]) {\n                        rSelector[key] = null;\n                    }\n                }, this);\n            }\n        }\n        extend(RangeSelector.prototype, {\n            /**\n             * The default buttons for pre-selecting time frames.\n             * @private\n             */\n            defaultButtons: [{\n                    type: 'month',\n                    count: 1,\n                    text: '1m',\n                    title: 'View 1 month'\n                }, {\n                    type: 'month',\n                    count: 3,\n                    text: '3m',\n                    title: 'View 3 months'\n                }, {\n                    type: 'month',\n                    count: 6,\n                    text: '6m',\n                    title: 'View 6 months'\n                }, {\n                    type: 'ytd',\n                    text: 'YTD',\n                    title: 'View year to date'\n                }, {\n                    type: 'year',\n                    count: 1,\n                    text: '1y',\n                    title: 'View 1 year'\n                }, {\n                    type: 'all',\n                    text: 'All',\n                    title: 'View all'\n                }],\n            /**\n             * The date formats to use when setting min, max and value on date inputs.\n             * @private\n             */\n            inputTypeFormats: {\n                'datetime-local': '%Y-%m-%dT%H:%M:%S',\n                'date': '%Y-%m-%d',\n                'time': '%H:%M:%S'\n            }\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Define the time span for the button\n         *\n         * @typedef {\"all\"|\"day\"|\"hour\"|\"millisecond\"|\"minute\"|\"month\"|\"second\"|\"week\"|\"year\"|\"ytd\"} Highcharts.RangeSelectorButtonTypeValue\n         */\n        /**\n         * Callback function to react on button clicks.\n         *\n         * @callback Highcharts.RangeSelectorClickCallbackFunction\n         *\n         * @param {global.Event} e\n         *        Event arguments.\n         *\n         * @param {boolean|undefined}\n         *        Return false to cancel the default button event.\n         */\n        /**\n         * Callback function to parse values entered in the input boxes and return a\n         * valid JavaScript time as milliseconds since 1970.\n         *\n         * @callback Highcharts.RangeSelectorParseCallbackFunction\n         *\n         * @param {string} value\n         *        Input value to parse.\n         *\n         * @return {number}\n         *         Parsed JavaScript time value.\n         */\n        (''); // Keeps doclets above in JS file\n\n        return RangeSelector;\n    });\n    _registerModule(_modules, 'Core/Chart/StockChart.js', [_modules['Core/Chart/Chart.js'], _modules['Core/Templating.js'], _modules['Core/Defaults.js'], _modules['Stock/Navigator/NavigatorDefaults.js'], _modules['Stock/RangeSelector/RangeSelectorDefaults.js'], _modules['Stock/Scrollbar/ScrollbarDefaults.js'], _modules['Stock/Utilities/StockUtilities.js'], _modules['Core/Utilities.js']], function (Chart, F, D, NavigatorDefaults, RangeSelectorDefaults, ScrollbarDefaults, StockUtilities, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { format } = F;\n        const { getOptions } = D;\n        const { setFixedRange } = StockUtilities;\n        const { addEvent, clamp, defined, extend, find, isNumber, isString, merge, pick, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get stock-specific default axis options.\n         *\n         * @private\n         * @function getDefaultAxisOptions\n         */\n        function getDefaultAxisOptions(coll, options, defaultOptions) {\n            if (coll === 'xAxis') {\n                return {\n                    minPadding: 0,\n                    maxPadding: 0,\n                    overscroll: 0,\n                    ordinal: true\n                };\n            }\n            if (coll === 'yAxis') {\n                return {\n                    labels: {\n                        y: -2\n                    },\n                    opposite: defaultOptions.opposite ?? options.opposite ?? true,\n                    showLastLabel: !!(\n                    // #6104, show last label by default for category axes\n                    options.categories ||\n                        options.type === 'category'),\n                    title: {\n                        text: defaultOptions.title?.text !== 'Values' ?\n                            defaultOptions.title?.text :\n                            null\n                    }\n                };\n            }\n            return {};\n        }\n        /**\n         * Get stock-specific forced axis options.\n         *\n         * @private\n         * @function getForcedAxisOptions\n         */\n        function getForcedAxisOptions(type, chartOptions) {\n            if (type === 'xAxis') {\n                // Always disable startOnTick:true on the main axis when the navigator\n                // is enabled (#1090)\n                const navigatorEnabled = pick(chartOptions.navigator && chartOptions.navigator.enabled, NavigatorDefaults.enabled, true);\n                const axisOptions = {\n                    type: 'datetime',\n                    categories: void 0\n                };\n                if (navigatorEnabled) {\n                    axisOptions.startOnTick = false;\n                    axisOptions.endOnTick = false;\n                }\n                return axisOptions;\n            }\n            return {};\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Stock-optimized chart. Use {@link Highcharts.Chart|Chart} for common charts.\n         *\n         * @requires modules/stock\n         *\n         * @class\n         * @name Highcharts.StockChart\n         * @extends Highcharts.Chart\n         */\n        class StockChart extends Chart {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initializes the chart. The constructor's arguments are passed on\n             * directly.\n             *\n             * @function Highcharts.StockChart#init\n             *\n             * @param {Highcharts.Options} userOptions\n             *        Custom options.\n             *\n             * @param {Function} [callback]\n             *        Function to run when the chart has loaded and all external\n             *        images are loaded.\n             *\n             *\n             * @emits Highcharts.StockChart#event:init\n             * @emits Highcharts.StockChart#event:afterInit\n             */\n            init(userOptions, callback) {\n                const defaultOptions = getOptions(), xAxisOptions = userOptions.xAxis, yAxisOptions = userOptions.yAxis, \n                // Always disable startOnTick:true on the main axis when the\n                // navigator is enabled (#1090)\n                navigatorEnabled = pick(userOptions.navigator && userOptions.navigator.enabled, NavigatorDefaults.enabled, true);\n                // Avoid doing these twice\n                userOptions.xAxis = userOptions.yAxis = void 0;\n                const options = merge({\n                    chart: {\n                        panning: {\n                            enabled: true,\n                            type: 'x'\n                        },\n                        zooming: {\n                            pinchType: 'x',\n                            mouseWheel: {\n                                type: 'x'\n                            }\n                        }\n                    },\n                    navigator: {\n                        enabled: navigatorEnabled\n                    },\n                    scrollbar: {\n                        // #4988 - check if setOptions was called\n                        enabled: pick(ScrollbarDefaults.enabled, true)\n                    },\n                    rangeSelector: {\n                        // #4988 - check if setOptions was called\n                        enabled: pick(RangeSelectorDefaults.rangeSelector.enabled, true)\n                    },\n                    title: {\n                        text: null\n                    },\n                    tooltip: {\n                        split: pick(defaultOptions.tooltip && defaultOptions.tooltip.split, true),\n                        crosshairs: true\n                    },\n                    legend: {\n                        enabled: false\n                    }\n                }, userOptions, // User's options\n                {\n                    isStock: true // Internal flag\n                });\n                userOptions.xAxis = xAxisOptions;\n                userOptions.yAxis = yAxisOptions;\n                // Apply X axis options to both single and multi y axes\n                options.xAxis = splat(userOptions.xAxis || {}).map((xAxisOptions) => merge(getDefaultAxisOptions('xAxis', xAxisOptions, defaultOptions.xAxis), \n                // #7690\n                xAxisOptions, // User options\n                getForcedAxisOptions('xAxis', userOptions)));\n                // Apply Y axis options to both single and multi y axes\n                options.yAxis = splat(userOptions.yAxis || {}).map((yAxisOptions) => merge(getDefaultAxisOptions('yAxis', yAxisOptions, defaultOptions.yAxis), \n                // #7690\n                yAxisOptions // User options\n                ));\n                super.init(options, callback);\n            }\n            /**\n             * Factory for creating different axis types.\n             * Extended to add stock defaults.\n             *\n             * @private\n             * @function Highcharts.StockChart#createAxis\n             * @param {string} coll\n             * An axis type.\n             * @param {Chart.CreateAxisOptionsObject} options\n             * The axis creation options.\n             */\n            createAxis(coll, options) {\n                options.axis = merge(getDefaultAxisOptions(coll, options.axis, getOptions()[coll]), options.axis, getForcedAxisOptions(coll, this.userOptions));\n                return super.createAxis(coll, options);\n            }\n        }\n        addEvent(Chart, 'update', function (e) {\n            const chart = this, options = e.options;\n            // Use case: enabling scrollbar from a disabled state.\n            // Scrollbar needs to be initialized from a controller, Navigator in this\n            // case (#6615)\n            if ('scrollbar' in options && chart.navigator) {\n                merge(true, chart.options.scrollbar, options.scrollbar);\n                chart.navigator.update({});\n                delete options.scrollbar;\n            }\n        });\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        (function (StockChart) {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            function compose(ChartClass, AxisClass, SeriesClass, SVGRendererClass) {\n                const seriesProto = SeriesClass.prototype;\n                if (!seriesProto.forceCropping) {\n                    addEvent(AxisClass, 'afterDrawCrosshair', onAxisAfterDrawCrosshair);\n                    addEvent(AxisClass, 'afterHideCrosshair', onAxisAfterHideCrosshair);\n                    addEvent(AxisClass, 'autoLabelAlign', onAxisAutoLabelAlign);\n                    addEvent(AxisClass, 'destroy', onAxisDestroy);\n                    addEvent(AxisClass, 'getPlotLinePath', onAxisGetPlotLinePath);\n                    ChartClass.prototype.setFixedRange = setFixedRange;\n                    seriesProto.forceCropping = seriesForceCropping;\n                    addEvent(SeriesClass, 'setOptions', onSeriesSetOptions);\n                    SVGRendererClass.prototype.crispPolyLine = svgRendererCrispPolyLine;\n                }\n            }\n            StockChart.compose = compose;\n            /**\n             * Extend crosshairs to also draw the label.\n             * @private\n             */\n            function onAxisAfterDrawCrosshair(event) {\n                const axis = this;\n                // Check if the label has to be drawn\n                if (!axis.crosshair ||\n                    !axis.crosshair.label ||\n                    !axis.crosshair.label.enabled ||\n                    !axis.cross ||\n                    !isNumber(axis.min) ||\n                    !isNumber(axis.max)) {\n                    return;\n                }\n                const chart = axis.chart, log = axis.logarithmic, options = axis.crosshair.label, // The label's options\n                horiz = axis.horiz, // Axis orientation\n                opposite = axis.opposite, // Axis position\n                left = axis.left, // Left position\n                top = axis.top, // Top position\n                width = axis.width, tickInside = axis.options.tickPosition === 'inside', snap = axis.crosshair.snap !== false, e = event.e || (axis.cross && axis.cross.e), point = event.point;\n                let crossLabel = axis.crossLabel, // The svgElement\n                posx, posy, formatOption = options.format, formatFormat = '', limit, offset = 0, \n                // Use last available event (#5287)\n                min = axis.min, max = axis.max;\n                if (log) {\n                    min = log.lin2log(axis.min);\n                    max = log.lin2log(axis.max);\n                }\n                const align = (horiz ? 'center' : opposite ?\n                    (axis.labelAlign === 'right' ? 'right' : 'left') :\n                    (axis.labelAlign === 'left' ? 'left' : 'center'));\n                // If the label does not exist yet, create it.\n                if (!crossLabel) {\n                    crossLabel = axis.crossLabel = chart.renderer\n                        .label('', 0, void 0, options.shape || 'callout')\n                        .addClass('highcharts-crosshair-label highcharts-color-' + (point && point.series ?\n                        point.series.colorIndex :\n                        axis.series[0] && this.series[0].colorIndex))\n                        .attr({\n                        align: options.align || align,\n                        padding: pick(options.padding, 8),\n                        r: pick(options.borderRadius, 3),\n                        zIndex: 2\n                    })\n                        .add(axis.labelGroup);\n                    // Presentational\n                    if (!chart.styledMode) {\n                        crossLabel\n                            .attr({\n                            fill: options.backgroundColor ||\n                                ( // #14888\n                                point && point.series &&\n                                    point.series.color) ||\n                                \"#666666\" /* Palette.neutralColor60 */,\n                            stroke: options.borderColor || '',\n                            'stroke-width': options.borderWidth || 0\n                        })\n                            .css(extend({\n                            color: \"#ffffff\" /* Palette.backgroundColor */,\n                            fontWeight: 'normal',\n                            fontSize: '0.7em',\n                            textAlign: 'center'\n                        }, options.style || {}));\n                    }\n                }\n                if (horiz) {\n                    posx = snap ? (point.plotX || 0) + left : e.chartX;\n                    posy = top + (opposite ? 0 : axis.height);\n                }\n                else {\n                    posx = left + axis.offset + (opposite ? width : 0);\n                    posy = snap ? (point.plotY || 0) + top : e.chartY;\n                }\n                if (!formatOption && !options.formatter) {\n                    if (axis.dateTime) {\n                        formatFormat = '%b %d, %Y';\n                    }\n                    formatOption =\n                        '{value' + (formatFormat ? ':' + formatFormat : '') + '}';\n                }\n                // Show the label\n                const value = snap ?\n                    (axis.isXAxis ? point.x : point.y) :\n                    axis.toValue(horiz ? e.chartX : e.chartY);\n                // Crosshair should be rendered within Axis range (#7219) and the point\n                // of currentPriceIndicator should be inside the plot area (#14879).\n                const isInside = point && point.series ?\n                    point.series.isPointInside(point) :\n                    (isNumber(value) && value > min && value < max);\n                let text = '';\n                if (formatOption) {\n                    text = format(formatOption, { value }, chart);\n                }\n                else if (options.formatter && isNumber(value)) {\n                    text = options.formatter.call(axis, value);\n                }\n                crossLabel.attr({\n                    text,\n                    x: posx,\n                    y: posy,\n                    visibility: isInside ? 'inherit' : 'hidden'\n                });\n                const crossBox = crossLabel.getBBox();\n                // Now it is placed we can correct its position\n                if (isNumber(crossLabel.x) && !horiz && !opposite) {\n                    posx = crossLabel.x - (crossBox.width / 2);\n                }\n                if (isNumber(crossLabel.y)) {\n                    if (horiz) {\n                        if ((tickInside && !opposite) || (!tickInside && opposite)) {\n                            posy = crossLabel.y - crossBox.height;\n                        }\n                    }\n                    else {\n                        posy = crossLabel.y - (crossBox.height / 2);\n                    }\n                }\n                // Check the edges\n                if (horiz) {\n                    limit = {\n                        left,\n                        right: left + axis.width\n                    };\n                }\n                else {\n                    limit = {\n                        left: axis.labelAlign === 'left' ? left : 0,\n                        right: axis.labelAlign === 'right' ?\n                            left + axis.width :\n                            chart.chartWidth\n                    };\n                }\n                const translateX = crossLabel.translateX || 0;\n                // Left edge\n                if (translateX < limit.left) {\n                    offset = limit.left - translateX;\n                }\n                // Right edge\n                if (translateX + crossBox.width >= limit.right) {\n                    offset = -(translateX + crossBox.width - limit.right);\n                }\n                // Show the crosslabel\n                crossLabel.attr({\n                    x: posx + offset,\n                    y: posy,\n                    // First set x and y, then anchorX and anchorY, when box is actually\n                    // calculated, #5702\n                    anchorX: horiz ?\n                        posx :\n                        (axis.opposite ? 0 : chart.chartWidth),\n                    anchorY: horiz ?\n                        (axis.opposite ? chart.chartHeight : 0) :\n                        posy + crossBox.height / 2\n                });\n            }\n            /**\n             * Wrapper to hide the label.\n             * @private\n             */\n            function onAxisAfterHideCrosshair() {\n                const axis = this;\n                if (axis.crossLabel) {\n                    axis.crossLabel = axis.crossLabel.hide();\n                }\n            }\n            /**\n             * Override the automatic label alignment so that the first Y axis' labels\n             * are drawn on top of the grid line, and subsequent axes are drawn outside.\n             * @private\n             */\n            function onAxisAutoLabelAlign(e) {\n                const axis = this, chart = axis.chart, options = axis.options, panes = chart._labelPanes = chart._labelPanes || {}, labelOptions = options.labels;\n                if (chart.options.isStock && axis.coll === 'yAxis') {\n                    const key = options.top + ',' + options.height;\n                    // Do it only for the first Y axis of each pane\n                    if (!panes[key] && labelOptions.enabled) {\n                        if (labelOptions.distance === 15 && // Default\n                            axis.side === 1) {\n                            labelOptions.distance = 0;\n                        }\n                        if (typeof labelOptions.align === 'undefined') {\n                            labelOptions.align = 'right';\n                        }\n                        panes[key] = axis;\n                        e.align = 'right';\n                        e.preventDefault();\n                    }\n                }\n            }\n            /**\n             * Clear axis from label panes. (#6071)\n             * @private\n             */\n            function onAxisDestroy() {\n                const axis = this, chart = axis.chart, key = (axis.options &&\n                    (axis.options.top + ',' + axis.options.height));\n                if (key && chart._labelPanes && chart._labelPanes[key] === axis) {\n                    delete chart._labelPanes[key];\n                }\n            }\n            /**\n             * Override getPlotLinePath to allow for multipane charts.\n             * @private\n             */\n            function onAxisGetPlotLinePath(e) {\n                const axis = this, series = (axis.isLinked && !axis.series && axis.linkedParent ?\n                    axis.linkedParent.series :\n                    axis.series), chart = axis.chart, renderer = chart.renderer, axisLeft = axis.left, axisTop = axis.top, result = [], translatedValue = e.translatedValue, value = e.value, force = e.force, \n                /**\n                 * Return the other axis based on either the axis option or on\n                 * related series.\n                 * @private\n                 */\n                getAxis = (coll) => {\n                    const otherColl = coll === 'xAxis' ? 'yAxis' : 'xAxis', opt = axis.options[otherColl];\n                    // Other axis indexed by number\n                    if (isNumber(opt)) {\n                        return [chart[otherColl][opt]];\n                    }\n                    // Other axis indexed by id (like navigator)\n                    if (isString(opt)) {\n                        return [chart.get(opt)];\n                    }\n                    // Auto detect based on existing series\n                    return series.map((s) => s[otherColl]);\n                };\n                let x1, y1, x2, y2, axes = [], // #3416 need a default array\n                axes2, uniqueAxes, transVal;\n                if ( // For stock chart, by default render paths across the panes\n                // except the case when `acrossPanes` is disabled by user (#6644)\n                (chart.options.isStock && e.acrossPanes !== false) &&\n                    // Ignore in case of colorAxis or zAxis. #3360, #3524, #6720\n                    axis.coll === 'xAxis' || axis.coll === 'yAxis') {\n                    e.preventDefault();\n                    // Get the related axes based on series\n                    axes = getAxis(axis.coll);\n                    // Get the related axes based options.*Axis setting #2810\n                    axes2 = (axis.isXAxis ? chart.yAxis : chart.xAxis);\n                    for (const A of axes2) {\n                        if (defined(A.options.id) ?\n                            A.options.id.indexOf('navigator') === -1 :\n                            true) {\n                            const a = (A.isXAxis ? 'yAxis' : 'xAxis'), rax = (defined(A.options[a]) ?\n                                chart[a][A.options[a]] :\n                                chart[a][0]);\n                            if (axis === rax) {\n                                axes.push(A);\n                            }\n                        }\n                    }\n                    // Remove duplicates in the axes array. If there are no axes in the\n                    // axes array, we are adding an axis without data, so we need to\n                    // populate this with grid lines (#2796).\n                    uniqueAxes = axes.length ?\n                        [] :\n                        [axis.isXAxis ? chart.yAxis[0] : chart.xAxis[0]]; // #3742\n                    for (const axis2 of axes) {\n                        if (uniqueAxes.indexOf(axis2) === -1 &&\n                            // Do not draw on axis which overlap completely. #5424\n                            !find(uniqueAxes, (unique) => (unique.pos === axis2.pos &&\n                                unique.len === axis2.len))) {\n                            uniqueAxes.push(axis2);\n                        }\n                    }\n                    transVal = pick(translatedValue, axis.translate(value || 0, void 0, void 0, e.old));\n                    if (isNumber(transVal)) {\n                        if (axis.horiz) {\n                            for (const axis2 of uniqueAxes) {\n                                let skip;\n                                y1 = axis2.pos;\n                                y2 = y1 + axis2.len;\n                                x1 = x2 = Math.round(transVal + axis.transB);\n                                // Outside plot area\n                                if (force !== 'pass' &&\n                                    (x1 < axisLeft || x1 > axisLeft + axis.width)) {\n                                    if (force) {\n                                        x1 = x2 = clamp(x1, axisLeft, axisLeft + axis.width);\n                                    }\n                                    else {\n                                        skip = true;\n                                    }\n                                }\n                                if (!skip) {\n                                    result.push(['M', x1, y1], ['L', x2, y2]);\n                                }\n                            }\n                        }\n                        else {\n                            for (const axis2 of uniqueAxes) {\n                                let skip;\n                                x1 = axis2.pos;\n                                x2 = x1 + axis2.len;\n                                y1 = y2 = Math.round(axisTop + axis.height - transVal);\n                                // Outside plot area\n                                if (force !== 'pass' &&\n                                    (y1 < axisTop || y1 > axisTop + axis.height)) {\n                                    if (force) {\n                                        y1 = y2 = clamp(y1, axisTop, axisTop + axis.height);\n                                    }\n                                    else {\n                                        skip = true;\n                                    }\n                                }\n                                if (!skip) {\n                                    result.push(['M', x1, y1], ['L', x2, y2]);\n                                }\n                            }\n                        }\n                    }\n                    e.path = result.length > 0 ?\n                        renderer.crispPolyLine(result, e.lineWidth || 1) :\n                        // #3557 getPlotLinePath in regular Highcharts also returns null\n                        void 0;\n                }\n            }\n            /**\n             * Handle som Stock-specific series defaults, override the plotOptions\n             * before series options are handled.\n             * @private\n             */\n            function onSeriesSetOptions(e) {\n                const series = this;\n                if (series.chart.options.isStock) {\n                    let overrides;\n                    if (series.is('column') || series.is('columnrange')) {\n                        overrides = {\n                            borderWidth: 0,\n                            shadow: false\n                        };\n                    }\n                    else if (!series.is('scatter') && !series.is('sma')) {\n                        overrides = {\n                            marker: {\n                                enabled: false,\n                                radius: 2\n                            }\n                        };\n                    }\n                    if (overrides) {\n                        e.plotOptions[series.type] = merge(e.plotOptions[series.type], overrides);\n                    }\n                }\n            }\n            /**\n             * Based on the data grouping options decides whether\n             * the data should be cropped while processing.\n             *\n             * @ignore\n             * @function Highcharts.Series#forceCropping\n             */\n            function seriesForceCropping() {\n                const series = this, chart = series.chart, options = series.options, dataGroupingOptions = options.dataGrouping, groupingEnabled = (series.allowDG !== false &&\n                    dataGroupingOptions &&\n                    pick(dataGroupingOptions.enabled, chart.options.isStock));\n                return groupingEnabled;\n            }\n            /* eslint-disable jsdoc/check-param-names */\n            /**\n             * Factory function for creating new stock charts. Creates a new\n             * {@link Highcharts.StockChart|StockChart} object with different default\n             * options than the basic Chart.\n             *\n             * @example\n             * let chart = Highcharts.stockChart('container', {\n             *     series: [{\n             *         data: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n             *         pointInterval: 24 * 60 * 60 * 1000\n             *     }]\n             * });\n             *\n             * @function Highcharts.stockChart\n             *\n             * @param {string|Highcharts.HTMLDOMElement} [renderTo]\n             *        The DOM element to render to, or its id.\n             *\n             * @param {Highcharts.Options} options\n             *        The chart options structure as described in the\n             *        [options reference](https://api.highcharts.com/highstock).\n             *\n             * @param {Highcharts.ChartCallbackFunction} [callback]\n             *        A function to execute when the chart object is finished\n             *        rendering and all external image files (`chart.backgroundImage`,\n             *        `chart.plotBackgroundImage` etc) are loaded. Defining a\n             *        [chart.events.load](https://api.highcharts.com/highstock/chart.events.load)\n             *        handler is equivalent.\n             *\n             * @return {Highcharts.StockChart}\n             *         The chart object.\n             */\n            function stockChart(a, b, c) {\n                return new StockChart(a, b, c);\n            }\n            StockChart.stockChart = stockChart;\n            /* eslint-enable jsdoc/check-param-names */\n            /**\n             * Function to crisp a line with multiple segments\n             *\n             * @private\n             * @function Highcharts.SVGRenderer#crispPolyLine\n             */\n            function svgRendererCrispPolyLine(points, width) {\n                // Points format: [['M', 0, 0], ['L', 100, 0]]\n                // normalize to a crisp line\n                for (let i = 0; i < points.length; i = i + 2) {\n                    const start = points[i], end = points[i + 1];\n                    if (start[1] === end[1]) {\n                        // Subtract due to #1129. Now bottom and left axis gridlines\n                        // behave the same.\n                        start[1] = end[1] =\n                            Math.round(start[1]) - (width % 2 / 2);\n                    }\n                    if (start[2] === end[2]) {\n                        start[2] = end[2] =\n                            Math.round(start[2]) + (width % 2 / 2);\n                    }\n                }\n                return points;\n            }\n        })(StockChart || (StockChart = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return StockChart;\n    });\n    _registerModule(_modules, 'Series/HLC/HLCPoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2024 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: { prototype: { pointClass: ColumnPoint } } } = SeriesRegistry.seriesTypes;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class HLCPoint extends ColumnPoint {\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HLCPoint;\n    });\n    _registerModule(_modules, 'Series/HLC/HLCSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An HLC chart is a style of financial chart used to describe price\n         * movements over time. It displays high, low and close values per\n         * data point.\n         *\n         * @sample stock/demo/hlc/\n         *         HLC chart\n         *\n         * @extends      plotOptions.column\n         * @excluding    borderColor, borderRadius, borderWidth, crisp, stacking,\n         *               stack\n         * @product      highstock\n         * @optionparent plotOptions.hlc\n         */\n        const HLCSeriesDefaults = {\n            /**\n             * The approximate pixel width of each group. If for example a series\n             * with 30 points is displayed over a 600 pixel wide plot area, no\n             * grouping is performed. If however the series contains so many points\n             * that the spacing is less than the groupPixelWidth, Highcharts will\n             * try to group it into appropriate groups so that each is more or less\n             * two pixels wide. Defaults to `5`.\n             *\n             * @type      {number}\n             * @default   5\n             * @product   highstock\n             * @apioption plotOptions.hlc.dataGrouping.groupPixelWidth\n             */\n            /**\n             * @type      {Highcharts.DataGroupingApproximationValue|Function}\n             * @default   hlc\n             * @product   highstock\n             * @apioption plotOptions.hlc.dataGrouping.approximation\n             */\n            /**\n             * @default   close\n             * @apioption plotOptions.hlc.colorKey\n             */\n            /**\n             * The pixel width of the line/border. Defaults to `1`.\n             *\n             * @sample {highstock} stock/plotoptions/hlc-linewidth/\n             *         A greater line width\n             *\n             * @type    {number}\n             * @default 1\n             * @product highstock\n             *\n             * @public\n             */\n            lineWidth: 1,\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> ' +\n                    '<b> {series.name}</b><br/>' +\n                    'High: {point.high}<br/>' +\n                    'Low: {point.low}<br/>' +\n                    'Close: {point.close}<br/>'\n            },\n            /**\n             * @type {number|null}\n             */\n            threshold: null,\n            states: {\n                /**\n                 * @extends plotOptions.column.states.hover\n                 * @product highstock\n                 */\n                hover: {\n                    /**\n                     * The pixel width of the line representing the HLC point.\n                     *\n                     * @type    {number}\n                     * @default 3\n                     * @product highstock\n                     */\n                    lineWidth: 3\n                }\n            },\n            /**\n             * Determines which one of  `high`, `low`, `close` values should\n             * be represented as `point.y`, which is later used to set dataLabel\n             * position and [compare](#plotOptions.series.compare).\n             *\n             * @sample {highstock} stock/plotoptions/hlc-pointvalkey/\n             *         Possible values\n             *\n             * @declare    Highcharts.OptionsHLCPointValKeyValue\n             * @type       {string}\n             * @default    close\n             * @validvalue [\"high\", \"low\", \"close\"]\n             * @product    highstock\n             * @apioption  plotOptions.hlc.pointValKey\n             */\n            /**\n             * @default   close\n             * @apioption plotOptions.hlc.colorKey\n             */\n            stickyTracking: true\n        };\n        /**\n         * A `hlc` series. If the [type](#series.hlc.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.hlc\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @apioption series.hlc\n         */\n        /**\n         * An array of data points for the series. For the `hlc` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of arrays with 4 or 3 values. In this case, the values correspond\n         *    to `x,high,low,close`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred. The `x` value can\n         *    also be omitted, in which case the inner arrays should be of length of 3\\.\n         *    Then the `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 5, 6, 7],\n         *        [1, 4, 8, 2],\n         *        [2, 3, 4, 10]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.hlc.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        high: 4,\n         *        low: 5,\n         *        close: 2,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        high: 3,\n         *        low: 6,\n         *        close: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<Array<(number|string),number,number>|Array<(number|string),number,number,number>|*>}\n         * @extends   series.arearange.data\n         * @excluding y, marker\n         * @product   highstock\n         * @apioption series.hlc.data\n         */\n        /**\n         * The closing value of each data point.\n         *\n         * @type      {number}\n         * @product   highstock\n         * @apioption series.hlc.data.close\n         */\n        (''); // Keeps doclets above in JS file\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HLCSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/HLC/HLCSeries.js', [_modules['Series/HLC/HLCPoint.js'], _modules['Series/HLC/HLCSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (HLCPoint, HLCSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: ColumnSeries } = SeriesRegistry.seriesTypes;\n        const { extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The hlc series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.hlc\n         *\n         * @augments Highcharts.Series\n         */\n        class HLCSeries extends ColumnSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Extend the path if close is not between high and low.\n             *\n             * @param {SVGPath} path the path array of the point\n             * @param {number} halfStrokeWidth\n             * @param {number} value value of the point to which the stem should be extended\n             */\n            extendStem(path, halfStrokeWidth, value) {\n                const start = path[0];\n                const end = path[1];\n                // We don't need to worry about crisp - close value\n                // is already crisped and halfStrokeWidth should remove it.\n                if (typeof start[2] === 'number') {\n                    start[2] = Math.max(value + halfStrokeWidth, start[2]);\n                }\n                if (typeof end[2] === 'number') {\n                    end[2] = Math.min(value - halfStrokeWidth, end[2]);\n                }\n            }\n            /**\n             * Function to create SVGPath of the point based on the\n             * plot positions of this point.\n             * @private\n             */\n            getPointPath(point, graphic) {\n                // Crisp vector coordinates\n                const strokeWidth = graphic.strokeWidth(), series = point.series, crispCorr = (strokeWidth % 2) / 2, \n                // #2596:\n                crispX = Math.round(point.plotX) - crispCorr, halfWidth = Math.round(point.shapeArgs.width / 2);\n                let plotClose = point.plotClose;\n                // The vertical stem\n                const path = [\n                    ['M', crispX, Math.round(point.yBottom)],\n                    ['L', crispX, Math.round(point.plotHigh)]\n                ];\n                // Close\n                if (point.close !== null) {\n                    plotClose = Math.round(point.plotClose) + crispCorr;\n                    path.push(['M', crispX, plotClose], ['L', crispX + halfWidth, plotClose]);\n                    series.extendStem(path, strokeWidth / 2, plotClose);\n                }\n                return path;\n            }\n            /**\n             * Draw single point\n             * @private\n             */\n            drawSinglePoint(point) {\n                const series = point.series, chart = series.chart;\n                let path, graphic = point.graphic;\n                if (typeof point.plotY !== 'undefined') {\n                    // Create and/or update the graphic\n                    if (!graphic) {\n                        point.graphic = graphic = chart.renderer.path()\n                            .add(series.group);\n                    }\n                    if (!chart.styledMode) {\n                        graphic.attr(series.pointAttribs(point, (point.selected && 'select'))); // #3897\n                    }\n                    // Crisp vector coordinates\n                    path = series.getPointPath(point, graphic);\n                    graphic[!graphic ? 'attr' : 'animate']({ d: path })\n                        .addClass(point.getClassName(), true);\n                }\n            }\n            /**\n             * Draw the data points\n             * @private\n             */\n            drawPoints() {\n                this.points.forEach(this.drawSinglePoint);\n            }\n            /**\n             * @private\n             * @function Highcharts.seriesTypes.hlc#init\n             */\n            init() {\n                super.init.apply(this, arguments);\n                this.options.stacking = void 0; // #8817\n            }\n            /**\n             * Postprocess mapping between options and SVG attributes\n             * @private\n             */\n            pointAttribs(point, state) {\n                const attribs = super.pointAttribs.call(this, point, state);\n                delete attribs.fill;\n                return attribs;\n            }\n            toYData(point) {\n                // Return a plain array for speedy calculation\n                return [point.high, point.low, point.close];\n            }\n            /**\n             * Translate data points from raw values x and y to plotX and plotY\n             *\n             * @private\n             * @function Highcharts.seriesTypes.hlc#translate\n             */\n            translate() {\n                const series = this, yAxis = series.yAxis, names = (this.pointArrayMap && this.pointArrayMap.slice()) || [], translated = names.map((name) => `plot${name.charAt(0).toUpperCase() + name.slice(1)}`);\n                translated.push('yBottom');\n                names.push('low');\n                super.translate.apply(series);\n                // Do the translation\n                series.points.forEach(function (point) {\n                    names.forEach(function (name, i) {\n                        let value = point[name];\n                        if (value !== null) {\n                            if (series.dataModify) {\n                                value = series.dataModify.modifyValue(value);\n                            }\n                            point[translated[i]] =\n                                yAxis.toPixels(value, true);\n                        }\n                    });\n                    // Align the tooltip to the high value to avoid covering the\n                    // point\n                    point.tooltipPos[1] =\n                        point.plotHigh + yAxis.pos - series.chart.plotTop;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        HLCSeries.defaultOptions = merge(ColumnSeries.defaultOptions, HLCSeriesDefaults);\n        extend(HLCSeries.prototype, {\n            pointClass: HLCPoint,\n            animate: null,\n            directTouch: false,\n            pointArrayMap: ['high', 'low', 'close'],\n            pointAttrToOptions: {\n                stroke: 'color',\n                'stroke-width': 'lineWidth'\n            },\n            pointValKey: 'close'\n        });\n        SeriesRegistry.registerSeriesType('hlc', HLCSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HLCSeries;\n    });\n    _registerModule(_modules, 'Series/OHLC/OHLCPoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { hlc: HLCSeries } } = SeriesRegistry;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class OHLCPoint extends HLCSeries.prototype.pointClass {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Extend the parent method by adding up or down to the class name.\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#getClassName\n             */\n            getClassName() {\n                return super.getClassName.call(this) +\n                    (this.open < this.close ?\n                        ' highcharts-point-up' :\n                        ' highcharts-point-down');\n            }\n            /**\n             * Save upColor as point color (#14826).\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#resolveUpColor\n             */\n            resolveUpColor() {\n                if (this.open < this.close &&\n                    !this.options.color &&\n                    this.series.options.upColor) {\n                    this.color = this.series.options.upColor;\n                }\n            }\n            /**\n             * Extend the parent method by saving upColor.\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#resolveColor\n             */\n            resolveColor() {\n                super.resolveColor();\n                if (!this.series.is('heikinashi')) {\n                    this.resolveUpColor();\n                }\n            }\n            /**\n             * Extend the parent method by saving upColor.\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#getZone\n             *\n             * @return {Highcharts.SeriesZonesOptionsObject}\n             *         The zone item.\n             */\n            getZone() {\n                const zone = super.getZone();\n                this.resolveUpColor();\n                return zone;\n            }\n            /**\n             * Extend the parent method by resolving up/down colors (#15849)\n             * @private\n             **/\n            applyOptions() {\n                super.applyOptions.apply(this, arguments);\n                if (this.resolveColor) {\n                    this.resolveColor();\n                }\n                return this;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OHLCPoint;\n    });\n    _registerModule(_modules, 'Series/OHLC/OHLCSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An OHLC chart is a style of financial chart used to describe price\n         * movements over time. It displays open, high, low and close values per\n         * data point.\n         *\n         * @sample stock/demo/ohlc\n         *         OHLC chart\n         *\n         * @extends      plotOptions.hlc\n         * @product      highstock\n         * @optionparent plotOptions.ohlc\n         */\n        const OHLCSeriesDefaults = {\n            /**\n             * @type      {Highcharts.DataGroupingApproximationValue|Function}\n             * @default   ohlc\n             * @product   highstock\n             * @apioption plotOptions.ohlc.dataGrouping.approximation\n             */\n            /**\n             * Determines which one of  `open`, `high`, `low`, `close` values should\n             * be represented as `point.y`, which is later used to set dataLabel\n             * position and [compare](#plotOptions.series.compare).\n             *\n             * @declare    Highcharts.OptionsPointValKeyValue\n             * @default    close\n             * @validvalue [\"open\", \"high\", \"low\", \"close\"]\n             * @product    highstock\n             * @apioption  plotOptions.ohlc.pointValKey\n             */\n            /**\n             * Line color for up points.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product   highstock\n             * @apioption plotOptions.ohlc.upColor\n             */\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> ' +\n                    '<b> {series.name}</b><br/>' +\n                    'Open: {point.open}<br/>' +\n                    'High: {point.high}<br/>' +\n                    'Low: {point.low}<br/>' +\n                    'Close: {point.close}<br/>'\n            }\n        };\n        /**\n         * The parameter allows setting line series type and use OHLC indicators.\n         * Data in OHLC format is required.\n         *\n         * @sample {highstock} stock/indicators/use-ohlc-data\n         *         Use OHLC data format to plot line chart\n         *\n         * @type      {boolean}\n         * @product   highstock\n         * @apioption plotOptions.line.useOhlcData\n         */\n        /**\n         * A `ohlc` series. If the [type](#series.ohlc.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ohlc\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @apioption series.ohlc\n         */\n        /**\n         * An array of data points for the series. For the `ohlc` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of arrays with 5 or 4 values. In this case, the values correspond\n         *    to `x,open,high,low,close`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred. The `x` value can\n         *    also be omitted, in which case the inner arrays should be of length 4\\.\n         *    Then the `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 6, 5, 6, 7],\n         *        [1, 9, 4, 8, 2],\n         *        [2, 6, 3, 4, 10]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.ohlc.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        open: 3,\n         *        high: 4,\n         *        low: 5,\n         *        close: 2,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        open: 4,\n         *        high: 3,\n         *        low: 6,\n         *        close: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<Array<(number|string),number,number,number>|Array<(number|string),number,number,number,number>|*>}\n         * @extends   series.arearange.data\n         * @excluding y, marker\n         * @product   highstock\n         * @apioption series.ohlc.data\n         */\n        /**\n         * The closing value of each data point.\n         *\n         * @type      {number}\n         * @product   highstock\n         * @apioption series.ohlc.data.close\n         */\n        /**\n         * The opening value of each data point.\n         *\n         * @type      {number}\n         * @product   highstock\n         * @apioption series.ohlc.data.open\n         */\n        ''; // Adds doclets above to transpiled\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OHLCSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/OHLC/OHLCSeries.js', [_modules['Core/Globals.js'], _modules['Series/OHLC/OHLCPoint.js'], _modules['Series/OHLC/OHLCSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (H, OHLCPoint, OHLCSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { hlc: HLCSeries } = SeriesRegistry.seriesTypes;\n        const { addEvent, extend, merge, pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onSeriesAfterSetOptions(e) {\n            const options = e.options, dataGrouping = options.dataGrouping;\n            if (dataGrouping &&\n                options.useOhlcData &&\n                options.id !== 'highcharts-navigator-series') {\n                dataGrouping.approximation = 'ohlc';\n            }\n        }\n        /**\n         * Add useOhlcData option\n         * @private\n         */\n        function onSeriesInit(eventOptions) {\n            // eslint-disable-next-line no-invalid-this\n            const series = this, options = eventOptions.options;\n            if (options.useOhlcData &&\n                options.id !== 'highcharts-navigator-series') {\n                extend(series, {\n                    pointValKey: OHLCSeries.prototype.pointValKey,\n                    // Keys: ohlcProto.keys, // @todo potentially nonsense\n                    pointArrayMap: OHLCSeries.prototype.pointArrayMap,\n                    toYData: OHLCSeries.prototype.toYData\n                });\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The ohlc series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ohlc\n         *\n         * @augments Highcharts.Series\n         */\n        class OHLCSeries extends HLCSeries {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(SeriesClass, ..._args) {\n                if (pushUnique(composed, 'OHLCSeries')) {\n                    addEvent(SeriesClass, 'afterSetOptions', onSeriesAfterSetOptions);\n                    addEvent(SeriesClass, 'init', onSeriesInit);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getPointPath(point, graphic) {\n                const path = super.getPointPath(point, graphic), strokeWidth = graphic.strokeWidth(), crispCorr = (strokeWidth % 2) / 2, crispX = Math.round(point.plotX) - crispCorr, halfWidth = Math.round(point.shapeArgs.width / 2);\n                let plotOpen = point.plotOpen;\n                // Crisp vector coordinates\n                if (point.open !== null) {\n                    plotOpen = Math.round(point.plotOpen) + crispCorr;\n                    path.push(['M', crispX, plotOpen], ['L', crispX - halfWidth, plotOpen]);\n                    super.extendStem(path, strokeWidth / 2, plotOpen);\n                }\n                return path;\n            }\n            /**\n             * Postprocess mapping between options and SVG attributes\n             * @private\n             */\n            pointAttribs(point, state) {\n                const attribs = super.pointAttribs.call(this, point, state), options = this.options;\n                delete attribs.fill;\n                if (!point.options.color &&\n                    options.upColor &&\n                    point.open < point.close) {\n                    attribs.stroke = options.upColor;\n                }\n                return attribs;\n            }\n            toYData(point) {\n                // Return a plain array for speedy calculation\n                return [point.open, point.high, point.low, point.close];\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        OHLCSeries.defaultOptions = merge(HLCSeries.defaultOptions, OHLCSeriesDefaults);\n        extend(OHLCSeries.prototype, {\n            pointClass: OHLCPoint,\n            pointArrayMap: ['open', 'high', 'low', 'close']\n        });\n        SeriesRegistry.registerSeriesType('ohlc', OHLCSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OHLCSeries;\n    });\n    _registerModule(_modules, 'Series/Candlestick/CandlestickSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A candlestick chart is a style of financial chart used to describe\n         * price movements over time.\n         *\n         * @sample stock/demo/candlestick/\n         *         Candlestick chart\n         *\n         * @extends      plotOptions.ohlc\n         * @excluding    borderColor,borderRadius,borderWidth\n         * @product      highstock\n         * @optionparent plotOptions.candlestick\n         */\n        const CandlestickSeriesDefaults = {\n            /**\n             * The specific line color for up candle sticks. The default is to\n             * inherit the general `lineColor` setting.\n             *\n             * @sample {highstock} stock/plotoptions/candlestick-linecolor/\n             *         Candlestick line colors\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     1.3.6\n             * @product   highstock\n             * @apioption plotOptions.candlestick.upLineColor\n             */\n            states: {\n                /**\n                 * @extends plotOptions.column.states.hover\n                 * @product highstock\n                 */\n                hover: {\n                    /**\n                     * The pixel width of the line/border around the\n                     * candlestick.\n                     *\n                     * @product highstock\n                     */\n                    lineWidth: 2\n                }\n            },\n            /**\n             * @type    {number|null}\n             * @product highstock\n             */\n            threshold: null,\n            /**\n             * The color of the line/border of the candlestick.\n             *\n             * In styled mode, the line stroke can be set with the\n             * `.highcharts-candlestick-series .highcahrts-point` rule.\n             *\n             * @see [upLineColor](#plotOptions.candlestick.upLineColor)\n             *\n             * @sample {highstock} stock/plotoptions/candlestick-linecolor/\n             *         Candlestick line colors\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #000000\n             * @product highstock\n             */\n            lineColor: \"#000000\" /* Palette.neutralColor100 */,\n            /**\n             * The pixel width of the candlestick line/border. Defaults to `1`.\n             *\n             *\n             * In styled mode, the line stroke width can be set with the\n             * `.highcharts-candlestick-series .highcahrts-point` rule.\n             *\n             * @product highstock\n             */\n            lineWidth: 1,\n            /**\n             * The fill color of the candlestick when values are rising.\n             *\n             * In styled mode, the up color can be set with the\n             * `.highcharts-candlestick-series .highcharts-point-up` rule.\n             *\n             * @sample {highstock} stock/plotoptions/candlestick-color/\n             *         Custom colors\n             * @sample {highstock} highcharts/css/candlestick/\n             *         Colors in styled mode\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #ffffff\n             * @product highstock\n            */\n            upColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * @product highstock\n             */\n            stickyTracking: true\n        };\n        /**\n         * A `candlestick` series. If the [type](#series.candlestick.type)\n         * option is not specified, it is inherited from [chart.type](\n         * #chart.type).\n         *\n         * @type      {*}\n         * @extends   series,plotOptions.candlestick\n         * @excluding dataParser, dataURL, marker\n         * @product   highstock\n         * @apioption series.candlestick\n         */\n        /**\n         * An array of data points for the series. For the `candlestick` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of arrays with 5 or 4 values. In this case, the values correspond\n         *    to `x,open,high,low,close`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred. The `x` value can\n         *    also be omitted, in which case the inner arrays should be of length 4.\n         *    Then the `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 7, 2, 0, 4],\n         *        [1, 1, 4, 2, 8],\n         *        [2, 3, 3, 9, 3]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.candlestick.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        open: 9,\n         *        high: 2,\n         *        low: 4,\n         *        close: 6,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        open: 1,\n         *        high: 4,\n         *        low: 7,\n         *        close: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<Array<(number|string),number,number,number>|Array<(number|string),number,number,number,number>|*>}\n         * @extends   series.ohlc.data\n         * @excluding y\n         * @product   highstock\n         * @apioption series.candlestick.data\n         */\n        ''; // Adds doclets above to transpiled\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CandlestickSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Candlestick/CandlestickSeries.js', [_modules['Series/Candlestick/CandlestickSeriesDefaults.js'], _modules['Core/Defaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (CandlestickSeriesDefaults, D, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { column: ColumnSeries, ohlc: OHLCSeries } = SeriesRegistry.seriesTypes;\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The candlestick series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.candlestick\n         *\n         * @augments Highcharts.seriesTypes.ohlc\n         */\n        class CandlestickSeries extends OHLCSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Postprocess mapping between options and SVG attributes\n             *\n             * @private\n             * @function Highcharts.seriesTypes.candlestick#pointAttribs\n             */\n            pointAttribs(point, state) {\n                const attribs = ColumnSeries.prototype.pointAttribs.call(this, point, state), options = this.options, isUp = point.open < point.close, stroke = options.lineColor || this.color, color = point.color || this.color; // (#14826)\n                attribs['stroke-width'] = options.lineWidth;\n                attribs.fill = point.options.color ||\n                    (isUp ? (options.upColor || color) : color);\n                attribs.stroke = point.options.lineColor ||\n                    (isUp ? (options.upLineColor || stroke) : stroke);\n                // Select or hover states\n                if (state) {\n                    const stateOptions = options.states[state];\n                    attribs.fill = stateOptions.color || attribs.fill;\n                    attribs.stroke = stateOptions.lineColor || attribs.stroke;\n                    attribs['stroke-width'] =\n                        stateOptions.lineWidth || attribs['stroke-width'];\n                }\n                return attribs;\n            }\n            /**\n             * Draw the data points.\n             *\n             * @private\n             * @function Highcharts.seriesTypes.candlestick#drawPoints\n             */\n            drawPoints() {\n                const series = this, points = series.points, chart = series.chart, reversedYAxis = series.yAxis.reversed;\n                for (const point of points) {\n                    let graphic = point.graphic, plotOpen, plotClose, topBox, bottomBox, hasTopWhisker, hasBottomWhisker, crispCorr, crispX, path, halfWidth;\n                    const isNew = !graphic;\n                    if (typeof point.plotY !== 'undefined') {\n                        if (!graphic) {\n                            point.graphic = graphic = chart.renderer.path()\n                                .add(series.group);\n                        }\n                        if (!series.chart.styledMode) {\n                            graphic\n                                .attr(series.pointAttribs(point, (point.selected && 'select'))) // #3897\n                                .shadow(series.options.shadow);\n                        }\n                        // Crisp vector coordinates\n                        crispCorr = (graphic.strokeWidth() % 2) / 2;\n                        // #2596:\n                        crispX = Math.round(point.plotX) - crispCorr;\n                        plotOpen = point.plotOpen;\n                        plotClose = point.plotClose;\n                        topBox = Math.min(plotOpen, plotClose);\n                        bottomBox = Math.max(plotOpen, plotClose);\n                        halfWidth = Math.round(point.shapeArgs.width / 2);\n                        hasTopWhisker = reversedYAxis ?\n                            bottomBox !== point.yBottom :\n                            Math.round(topBox) !==\n                                Math.round(point.plotHigh);\n                        hasBottomWhisker = reversedYAxis ?\n                            Math.round(topBox) !==\n                                Math.round(point.plotHigh) :\n                            bottomBox !== point.yBottom;\n                        topBox = Math.round(topBox) + crispCorr;\n                        bottomBox = Math.round(bottomBox) + crispCorr;\n                        // Create the path. Due to a bug in Chrome 49, the path is\n                        // first instantiated with no values, then the values\n                        // pushed. For unknown reasons, instantiating the path array\n                        // with all the values would lead to a crash when updating\n                        // frequently (#5193).\n                        path = [];\n                        path.push(['M', crispX - halfWidth, bottomBox], ['L', crispX - halfWidth, topBox], ['L', crispX + halfWidth, topBox], ['L', crispX + halfWidth, bottomBox], ['Z'], // Ensure a nice rectangle #2602\n                        ['M', crispX, topBox], [\n                            'L',\n                            // #460, #2094\n                            crispX,\n                            hasTopWhisker ?\n                                Math.round(reversedYAxis ?\n                                    point.yBottom :\n                                    point.plotHigh) :\n                                topBox\n                        ], ['M', crispX, bottomBox], [\n                            'L',\n                            // #460, #2094\n                            crispX,\n                            hasBottomWhisker ?\n                                Math.round(reversedYAxis ?\n                                    point.plotHigh :\n                                    point.yBottom) :\n                                bottomBox\n                        ]);\n                        graphic[isNew ? 'attr' : 'animate']({ d: path })\n                            .addClass(point.getClassName(), true);\n                    }\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        CandlestickSeries.defaultOptions = merge(OHLCSeries.defaultOptions, defaultOptions.plotOptions, { tooltip: OHLCSeries.defaultOptions.tooltip }, CandlestickSeriesDefaults);\n        SeriesRegistry.registerSeriesType('candlestick', CandlestickSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CandlestickSeries;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: { prototype: { pointClass: ColumnPoint } } } = SeriesRegistry.seriesTypes;\n        const { isNumber } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class FlagsPoint extends ColumnPoint {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                this.ttBelow = false;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            isValid() {\n                // #9233 - Prevent from treating flags as null points (even if\n                // they have no y values defined).\n                return isNumber(this.y) || typeof this.y === 'undefined';\n            }\n            /**\n             * @private\n             */\n            hasNewShapeType() {\n                const shape = this.options.shape || this.series.options.shape;\n                return this.graphic && shape && shape !== this.graphic.symbolKey;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FlagsPoint;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Flags are used to mark events in stock charts. They can be added on the\n         * timeline, or attached to a specific series.\n         *\n         * @sample stock/demo/flags-general/\n         *         Flags on a line series\n         *\n         * @extends      plotOptions.column\n         * @excluding    animation, borderColor, borderWidth,\n         *               colorByPoint, cropThreshold, dataGrouping, pointPadding,\n         *               pointWidth, turboThreshold\n         * @product      highstock\n         * @optionparent plotOptions.flags\n         */\n        const FlagsSeriesDefaults = {\n            /**\n             * The corner radius of the border surrounding each flag. For `squarepin`\n             * shaped flags only. A number signifies pixels. A percentage string, like\n             * for example 50%, signifies a relative size.\n             */\n            borderRadius: 0,\n            /**\n             * In case the flag is placed on a series, on what point key to place\n             * it. Line and columns have one key, `y`. In range or OHLC-type series,\n             * however, the flag can optionally be placed on the `open`, `high`,\n             * `low` or `close` key.\n             *\n             * @sample {highstock} stock/plotoptions/flags-onkey/\n             *         Range series, flag on high\n             *\n             * @type       {string}\n             * @default    y\n             * @since      4.2.2\n             * @product    highstock\n             * @validvalue [\"y\", \"open\", \"high\", \"low\", \"close\"]\n             * @apioption  plotOptions.flags.onKey\n             */\n            /**\n             * The id of the series that the flags should be drawn on. If no id\n             * is given, the flags are drawn on the x axis.\n             *\n             * @sample {highstock} stock/plotoptions/flags/\n             *         Flags on series and on x axis\n             *\n             * @type      {string}\n             * @product   highstock\n             * @apioption plotOptions.flags.onSeries\n             */\n            pointRange: 0,\n            /**\n             * Whether the flags are allowed to overlap sideways. If `false`, the\n             * flags are moved sideways using an algorithm that seeks to place every\n             * flag as close as possible to its original position.\n             *\n             * @sample {highstock} stock/plotoptions/flags-allowoverlapx\n             *         Allow sideways overlap\n             *\n             * @since 6.0.4\n             */\n            allowOverlapX: false,\n            /**\n             * The shape of the marker. Can be one of \"flag\", \"circlepin\",\n             * \"squarepin\", or an image of the format `url(/path-to-image.jpg)`.\n             * Individual shapes can also be set for each point.\n             *\n             * @sample {highstock} stock/plotoptions/flags/\n             *         Different shapes\n             *\n             * @type    {Highcharts.FlagsShapeValue}\n             * @product highstock\n             */\n            shape: 'flag',\n            /**\n             * When multiple flags in the same series fall on the same value, this\n             * number determines the vertical offset between them.\n             *\n             * @sample {highstock} stock/plotoptions/flags-stackdistance/\n             *         A greater stack distance\n             *\n             * @product highstock\n             */\n            stackDistance: 12,\n            /**\n             * Text alignment for the text inside the flag.\n             *\n             * @since      5.0.0\n             * @product    highstock\n             * @validvalue [\"left\", \"center\", \"right\"]\n             */\n            textAlign: 'center',\n            /**\n             * Specific tooltip options for flag series. Flag series tooltips are\n             * different from most other types in that a flag doesn't have a data\n             * value, so the tooltip rather displays the `text` option for each\n             * point.\n             *\n             * @extends   plotOptions.series.tooltip\n             * @excluding changeDecimals, valueDecimals, valuePrefix, valueSuffix\n             * @product   highstock\n             */\n            tooltip: {\n                pointFormat: '{point.text}'\n            },\n            /**\n             * @type {number|null}\n             */\n            threshold: null,\n            /**\n             * The text to display on each flag. This can be defined on series\n             * level, or individually for each point. Defaults to `\"A\"`.\n             *\n             * @type      {string}\n             * @default   A\n             * @product   highstock\n             * @apioption plotOptions.flags.title\n             */\n            /**\n             * The y position of the top left corner of the flag relative to either\n             * the series (if onSeries is defined), or the x axis. Defaults to\n             * `-30`.\n             *\n             * @product highstock\n             */\n            y: -30,\n            /**\n             * Whether to use HTML to render the flag texts. Using HTML allows for\n             * advanced formatting, images and reliable bi-directional text\n             * rendering. Note that exported images won't respect the HTML, and that\n             * HTML won't respect Z-index settings.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     1.3\n             * @product   highstock\n             * @apioption plotOptions.flags.useHTML\n             */\n            /**\n             * Fixed width of the flag's shape. By default, width is autocalculated\n             * according to the flag's title.\n             *\n             * @sample {highstock} stock/demo/flags-shapes/\n             *         Flags with fixed width\n             *\n             * @type      {number}\n             * @product   highstock\n             * @apioption plotOptions.flags.width\n             */\n            /**\n             * Fixed height of the flag's shape. By default, height is\n             * autocalculated according to the flag's title.\n             *\n             * @type      {number}\n             * @product   highstock\n             * @apioption plotOptions.flags.height\n             */\n            /**\n             * The fill color for the flags.\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product highstock\n             */\n            fillColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * The color of the line/border of the flag.\n             *\n             * In styled mode, the stroke is set in the\n             * `.highcharts-flag-series.highcharts-point` rule.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default   #000000\n             * @product   highstock\n             * @apioption plotOptions.flags.lineColor\n             */\n            /**\n             * The pixel width of the flag's line/border.\n             *\n             * @product highstock\n             */\n            lineWidth: 1,\n            states: {\n                /**\n                 * @extends plotOptions.column.states.hover\n                 * @product highstock\n                 */\n                hover: {\n                    /**\n                     * The color of the line/border of the flag.\n                     *\n                     * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @product highstock\n                     */\n                    lineColor: \"#000000\" /* Palette.neutralColor100 */,\n                    /**\n                     * The fill or background color of the flag.\n                     *\n                     * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @product highstock\n                     */\n                    fillColor: \"#ccd3ff\" /* Palette.highlightColor20 */\n                }\n            },\n            /**\n             * The text styles of the flag.\n             *\n             * In styled mode, the styles are set in the\n             * `.highcharts-flag-series .highcharts-point` rule.\n             *\n             * @type    {Highcharts.CSSObject}\n             * @default {\"fontSize\": \"11px\", \"fontWeight\": \"bold\"}\n             * @product highstock\n             */\n            style: {\n                /** @ignore-option */\n                fontSize: '0.7em',\n                /** @ignore-option */\n                fontWeight: 'bold'\n            }\n        };\n        /**\n         * A `flags` series. If the [type](#series.flags.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.flags\n         * @excluding animation, borderColor, borderRadius, borderWidth, colorByPoint,\n         *            connectNulls, cropThreshold, dashStyle, dataGrouping, dataParser,\n         *            dataURL, gapSize, gapUnit, linecap, lineWidth, marker,\n         *            pointPadding, pointWidth, step, turboThreshold, useOhlcData\n         * @product   highstock\n         * @apioption series.flags\n         */\n        /**\n         * An array of data points for the series. For the `flags` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.flags.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        title: \"A\",\n         *        text: \"First event\"\n         *    }, {\n         *        x: 1,\n         *        title: \"B\",\n         *        text: \"Second event\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<*>}\n         * @extends   series.line.data\n         * @excluding dataLabels, marker, name, y\n         * @product   highstock\n         * @apioption series.flags.data\n         */\n        /**\n         * The fill color of an individual flag. By default it inherits from\n         * the series color.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @product   highstock\n         * @apioption series.flags.data.fillColor\n         */\n        /**\n         * The longer text to be shown in the flag's tooltip.\n         *\n         * @type      {string}\n         * @product   highstock\n         * @apioption series.flags.data.text\n         */\n        /**\n         * The short text to be shown on the flag.\n         *\n         * @type      {string}\n         * @product   highstock\n         * @apioption series.flags.data.title\n         */\n        ''; // Keeps doclets above in transpiled file\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FlagsSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsSymbols.js', [_modules['Core/Renderer/RendererRegistry.js']], function (RendererRegistry) {\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var FlagsSymbols;\n        (function (FlagsSymbols) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const modifiedMembers = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(SVGRendererClass) {\n                if (modifiedMembers.indexOf(SVGRendererClass) === -1) {\n                    modifiedMembers.push(SVGRendererClass);\n                    const symbols = SVGRendererClass.prototype.symbols;\n                    symbols.flag = flag;\n                    createPinSymbol(symbols, 'circle');\n                    createPinSymbol(symbols, 'square');\n                }\n                const RendererClass = RendererRegistry.getRendererType();\n                // The symbol callbacks are generated on the SVGRenderer object in all\n                // browsers.\n                if (modifiedMembers.indexOf(RendererClass)) {\n                    modifiedMembers.push(RendererClass);\n                }\n            }\n            FlagsSymbols.compose = compose;\n            /**\n             * Create the flag icon with anchor.\n             * @private\n             */\n            function flag(x, y, w, h, options) {\n                const anchorX = (options && options.anchorX) || x, anchorY = (options && options.anchorY) || y;\n                // To do: unwanted any cast because symbols.circle has wrong type, it\n                // actually returns an SVGPathArray\n                const path = this.circle(anchorX - 1, anchorY - 1, 2, 2);\n                path.push(['M', anchorX, anchorY], ['L', x, y + h], ['L', x, y], ['L', x + w, y], ['L', x + w, y + h], ['L', x, y + h], ['Z']);\n                return path;\n            }\n            /**\n             * Create the circlepin and squarepin icons with anchor.\n             * @private\n             */\n            function createPinSymbol(symbols, shape) {\n                symbols[(shape + 'pin')] = function (x, y, w, h, options) {\n                    const anchorX = options && options.anchorX, anchorY = options && options.anchorY;\n                    let path;\n                    // For single-letter flags, make sure circular flags are not taller\n                    // than their width\n                    if (shape === 'circle' && h > w) {\n                        x -= Math.round((h - w) / 2);\n                        w = h;\n                    }\n                    path = (symbols[shape])(x, y, w, h, options);\n                    if (anchorX && anchorY) {\n                        /**\n                         * If the label is below the anchor, draw the connecting line\n                         * from the top edge of the label, otherwise start drawing from\n                         * the bottom edge\n                         */\n                        let labelX = anchorX;\n                        if (shape === 'circle') {\n                            labelX = x + w / 2;\n                        }\n                        else {\n                            const startSeg = path[0];\n                            const endSeg = path[1];\n                            if (startSeg[0] === 'M' && endSeg[0] === 'L') {\n                                labelX = (startSeg[1] + endSeg[1]) / 2;\n                            }\n                        }\n                        const labelY = (y > anchorY) ? y : y + h;\n                        path.push([\n                            'M',\n                            labelX,\n                            labelY\n                        ], [\n                            'L',\n                            anchorX,\n                            anchorY\n                        ]);\n                        path = path.concat(symbols.circle(anchorX - 1, anchorY - 1, 2, 2));\n                    }\n                    return path;\n                };\n            }\n        })(FlagsSymbols || (FlagsSymbols = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FlagsSymbols;\n    });\n    _registerModule(_modules, 'Series/OnSeriesComposition.js', [_modules['Series/Column/ColumnSeries.js'], _modules['Core/Globals.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (ColumnSeries, H, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { prototype: columnProto } = ColumnSeries;\n        const { prototype: seriesProto } = Series;\n        const { defined, pushUnique, stableSort } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var OnSeriesComposition;\n        (function (OnSeriesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function compose(SeriesClass) {\n                if (pushUnique(composed, 'OnSeries')) {\n                    const seriesProto = SeriesClass.prototype;\n                    seriesProto.getPlotBox = getPlotBox;\n                    seriesProto.translate = translate;\n                }\n                return SeriesClass;\n            }\n            OnSeriesComposition.compose = compose;\n            /**\n             * Override getPlotBox. If the onSeries option is valid, return the plot box\n             * of the onSeries, otherwise proceed as usual.\n             *\n             * @private\n             */\n            function getPlotBox(name) {\n                return seriesProto.getPlotBox.call((this.options.onSeries &&\n                    this.chart.get(this.options.onSeries)) || this, name);\n            }\n            OnSeriesComposition.getPlotBox = getPlotBox;\n            /**\n             * Extend the translate method by placing the point on the related series\n             *\n             * @private\n             */\n            function translate() {\n                columnProto.translate.apply(this);\n                const series = this, options = series.options, chart = series.chart, points = series.points, optionsOnSeries = options.onSeries, onSeries = (optionsOnSeries &&\n                    chart.get(optionsOnSeries)), step = onSeries && onSeries.options.step, onData = (onSeries && onSeries.points), inverted = chart.inverted, xAxis = series.xAxis, yAxis = series.yAxis;\n                let cursor = points.length - 1, point, lastPoint, onKey = options.onKey || 'y', i = onData && onData.length, xOffset = 0, leftPoint, lastX, rightPoint, currentDataGrouping, distanceRatio;\n                // Relate to a master series\n                if (onSeries && onSeries.visible && i) {\n                    xOffset = (onSeries.pointXOffset || 0) + (onSeries.barW || 0) / 2;\n                    currentDataGrouping = onSeries.currentDataGrouping;\n                    lastX = (onData[i - 1].x +\n                        (currentDataGrouping ? currentDataGrouping.totalRange : 0)); // #2374\n                    // sort the data points\n                    stableSort(points, (a, b) => (a.x - b.x));\n                    onKey = 'plot' + onKey[0].toUpperCase() + onKey.substr(1);\n                    while (i-- && points[cursor]) {\n                        leftPoint = onData[i];\n                        point = points[cursor];\n                        point.y = leftPoint.y;\n                        if (leftPoint.x <= point.x &&\n                            typeof leftPoint[onKey] !== 'undefined') {\n                            if (point.x <= lastX) { // #803\n                                point.plotY = leftPoint[onKey];\n                                // Interpolate between points, #666\n                                if (leftPoint.x < point.x &&\n                                    !step) {\n                                    rightPoint = onData[i + 1];\n                                    if (rightPoint &&\n                                        typeof rightPoint[onKey] !== 'undefined') {\n                                        // If the series is spline, calculate Y of the\n                                        // point on the bezier line. #19264\n                                        if (defined(point.plotX) &&\n                                            onSeries.is('spline')) {\n                                            leftPoint = leftPoint;\n                                            rightPoint = rightPoint;\n                                            const p0 = [\n                                                leftPoint.plotX || 0,\n                                                leftPoint.plotY || 0\n                                            ], p3 = [\n                                                rightPoint.plotX || 0,\n                                                rightPoint.plotY || 0\n                                            ], p1 = (leftPoint.controlPoints?.high ||\n                                                p0), p2 = (rightPoint.controlPoints?.low ||\n                                                p3), pixelThreshold = 0.25, maxIterations = 100, calculateCoord = (t, key) => (\n                                            // The parametric formula for the\n                                            // cubic Bezier curve.\n                                            Math.pow(1 - t, 3) * p0[key] +\n                                                3 * (1 - t) * (1 - t) * t *\n                                                    p1[key] + 3 * (1 - t) * t * t *\n                                                p2[key] + t * t * t * p3[key]);\n                                            let tMin = 0, tMax = 1, t;\n                                            // Find `t` of the parametric function of\n                                            // the bezier curve for the given `plotX`.\n                                            for (let i = 0; i < maxIterations; i++) {\n                                                const tMid = (tMin + tMax) / 2;\n                                                const xMid = calculateCoord(tMid, 0);\n                                                if (xMid === null) {\n                                                    break;\n                                                }\n                                                if (Math.abs(xMid - point.plotX) < pixelThreshold) {\n                                                    t = tMid;\n                                                    break;\n                                                }\n                                                if (xMid < point.plotX) {\n                                                    tMin = tMid;\n                                                }\n                                                else {\n                                                    tMax = tMid;\n                                                }\n                                            }\n                                            if (defined(t)) {\n                                                point.plotY =\n                                                    calculateCoord(t, 1);\n                                                point.y =\n                                                    yAxis.toValue(point.plotY, true);\n                                            }\n                                        }\n                                        else {\n                                            // The distance ratio, between 0 and 1\n                                            distanceRatio =\n                                                (point.x - leftPoint.x) /\n                                                    (rightPoint.x - leftPoint.x);\n                                            point.plotY +=\n                                                distanceRatio *\n                                                    // The plotY distance\n                                                    (rightPoint[onKey] - leftPoint[onKey]);\n                                            point.y +=\n                                                distanceRatio *\n                                                    (rightPoint.y - leftPoint.y);\n                                        }\n                                    }\n                                }\n                            }\n                            cursor--;\n                            i++; // Check again for points in the same x position\n                            if (cursor < 0) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                // Add plotY position and handle stacking\n                points.forEach((point, i) => {\n                    let stackIndex;\n                    point.plotX += xOffset; // #2049\n                    // Undefined plotY means the point is either on axis, outside series\n                    // range or hidden series. If the series is outside the range of the\n                    // x axis it should fall through with an undefined plotY, but then\n                    // we must remove the shapeArgs (#847). For inverted charts, we need\n                    // to calculate position anyway, because series.invertGroups is not\n                    // defined\n                    if (typeof point.plotY === 'undefined' || inverted) {\n                        if (point.plotX >= 0 &&\n                            point.plotX <= xAxis.len) {\n                            // We're inside xAxis range\n                            if (inverted) {\n                                point.plotY = xAxis.translate(point.x, 0, 1, 0, 1);\n                                point.plotX = defined(point.y) ?\n                                    yAxis.translate(point.y, 0, 0, 0, 1) :\n                                    0;\n                            }\n                            else {\n                                point.plotY = (xAxis.opposite ? 0 : series.yAxis.len) +\n                                    xAxis.offset; // For the windbarb demo\n                            }\n                        }\n                        else {\n                            point.shapeArgs = {}; // 847\n                        }\n                    }\n                    // If multiple flags appear at the same x, order them into a stack\n                    lastPoint = points[i - 1];\n                    if (lastPoint && lastPoint.plotX === point.plotX) {\n                        if (typeof lastPoint.stackIndex === 'undefined') {\n                            lastPoint.stackIndex = 0;\n                        }\n                        stackIndex = lastPoint.stackIndex + 1;\n                    }\n                    point.stackIndex = stackIndex; // #3639\n                });\n                this.onSeries = onSeries;\n            }\n            OnSeriesComposition.translate = translate;\n        })(OnSeriesComposition || (OnSeriesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OnSeriesComposition;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsSeries.js', [_modules['Series/Flags/FlagsPoint.js'], _modules['Series/Flags/FlagsSeriesDefaults.js'], _modules['Series/Flags/FlagsSymbols.js'], _modules['Core/Globals.js'], _modules['Series/OnSeriesComposition.js'], _modules['Core/Renderer/RendererUtilities.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Core/Utilities.js']], function (FlagsPoint, FlagsSeriesDefaults, FlagsSymbols, H, OnSeriesComposition, R, SeriesRegistry, SVGElement, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { distribute } = R;\n        const { series: Series, seriesTypes: { column: ColumnSeries } } = SeriesRegistry;\n        const { addEvent, defined, extend, isNumber, merge, objectEach, wrap } = U;\n        /* *\n         *\n         *  Classes\n         *\n         * */\n        /**\n         * The Flags series.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.flags\n         *\n         * @augments Highcharts.Series\n         */\n        class FlagsSeries extends ColumnSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Disable animation, but keep clipping (#8546).\n             * @private\n             */\n            animate(init) {\n                if (init) {\n                    this.setClip();\n                }\n            }\n            /**\n             * Draw the markers.\n             * @private\n             */\n            drawPoints() {\n                const series = this, points = series.points, chart = series.chart, renderer = chart.renderer, inverted = chart.inverted, options = series.options, optionsY = options.y, yAxis = series.yAxis, boxesMap = {}, boxes = [], borderRadius = isNumber(options.borderRadius) ?\n                    options.borderRadius : 0;\n                let plotX, plotY, shape, i, point, graphic, stackIndex, anchorY, attribs, outsideRight, centered;\n                i = points.length;\n                while (i--) {\n                    point = points[i];\n                    outsideRight =\n                        (inverted ? point.plotY : point.plotX) >\n                            series.xAxis.len;\n                    plotX = point.plotX;\n                    stackIndex = point.stackIndex;\n                    shape = point.options.shape || options.shape;\n                    plotY = point.plotY;\n                    if (typeof plotY !== 'undefined') {\n                        plotY = point.plotY + optionsY -\n                            (typeof stackIndex !== 'undefined' &&\n                                (stackIndex * options.stackDistance));\n                    }\n                    // Skip connectors for higher level stacked points\n                    point.anchorX = stackIndex ? void 0 : point.plotX;\n                    anchorY = stackIndex ? void 0 : point.plotY;\n                    centered = shape !== 'flag';\n                    graphic = point.graphic;\n                    // Only draw the point if y is defined and the flag is within\n                    // the visible area\n                    if (typeof plotY !== 'undefined' &&\n                        plotX >= 0 &&\n                        !outsideRight) {\n                        // #15384\n                        if (graphic && point.hasNewShapeType()) {\n                            graphic = graphic.destroy();\n                        }\n                        // Create the flag\n                        if (!graphic) {\n                            graphic = point.graphic = renderer.label('', 0, void 0, shape, void 0, void 0, options.useHTML)\n                                .addClass('highcharts-point')\n                                .add(series.markerGroup);\n                            // Add reference to the point for tracker (#6303)\n                            if (point.graphic.div) {\n                                point.graphic.div.point = point;\n                            }\n                            graphic.isNew = true;\n                        }\n                        graphic.attr({\n                            align: centered ? 'center' : 'left',\n                            width: options.width,\n                            height: options.height,\n                            'text-align': options.textAlign,\n                            r: borderRadius\n                        });\n                        if (!chart.styledMode) {\n                            graphic\n                                .attr(series.pointAttribs(point))\n                                .css(merge(options.style, point.style))\n                                .shadow(options.shadow);\n                        }\n                        if (plotX > 0) { // #3119\n                            plotX -= graphic.strokeWidth() % 2; // #4285\n                        }\n                        // Plant the flag\n                        attribs = {\n                            y: plotY,\n                            anchorY: anchorY\n                        };\n                        if (options.allowOverlapX) {\n                            attribs.x = plotX;\n                            attribs.anchorX = point.anchorX;\n                        }\n                        graphic.attr({\n                            text: point.options.title || options.title || 'A'\n                        })[graphic.isNew ? 'attr' : 'animate'](attribs);\n                        // Rig for the distribute function\n                        if (!options.allowOverlapX) {\n                            if (!boxesMap[point.plotX]) {\n                                boxesMap[point.plotX] = {\n                                    align: centered ? 0.5 : 0,\n                                    size: graphic.width || 0,\n                                    target: plotX,\n                                    anchorX: plotX\n                                };\n                            }\n                            else {\n                                boxesMap[point.plotX].size = Math.max(boxesMap[point.plotX].size, graphic.width || 0);\n                            }\n                        }\n                        // Set the tooltip anchor position\n                        point.tooltipPos = [\n                            plotX,\n                            plotY + yAxis.pos - chart.plotTop\n                        ]; // #6327\n                    }\n                    else if (graphic) {\n                        point.graphic = graphic.destroy();\n                    }\n                }\n                // Handle X-dimension overlapping\n                if (!options.allowOverlapX) {\n                    let maxDistance = 100;\n                    objectEach(boxesMap, function (box) {\n                        box.plotX = box.anchorX;\n                        boxes.push(box);\n                        maxDistance = Math.max(box.size, maxDistance);\n                    });\n                    // If necessary (for overlapping or long labels)  distribute it\n                    // depending on the label width or a hardcoded value, #16041.\n                    distribute(boxes, inverted ? yAxis.len : this.xAxis.len, maxDistance);\n                    for (const point of points) {\n                        const plotX = point.plotX, graphic = point.graphic, box = graphic && boxesMap[plotX];\n                        if (box && graphic) {\n                            // Hide flag when its box position is not specified\n                            // (#8573, #9299)\n                            if (!defined(box.pos)) {\n                                graphic.hide().isNew = true;\n                            }\n                            else {\n                                graphic[graphic.isNew ? 'attr' : 'animate']({\n                                    x: box.pos + (box.align || 0) * box.size,\n                                    anchorX: point.anchorX\n                                }).show().isNew = false;\n                            }\n                        }\n                    }\n                }\n                // Can be a mix of SVG and HTML and we need events for both (#6303)\n                if (options.useHTML && series.markerGroup) {\n                    wrap(series.markerGroup, 'on', function (proceed) {\n                        return SVGElement.prototype.on.apply(\n                        // For HTML\n                        // eslint-disable-next-line no-invalid-this\n                        proceed.apply(this, [].slice.call(arguments, 1)), \n                        // And for SVG\n                        [].slice.call(arguments, 1));\n                    });\n                }\n            }\n            /**\n             * Extend the column trackers with listeners to expand and contract\n             * stacks.\n             * @private\n             */\n            drawTracker() {\n                const series = this, points = series.points;\n                super.drawTracker();\n                /* *\n                * Bring each stacked flag up on mouse over, this allows readability\n                * of vertically stacked elements as well as tight points on the x\n                * axis. #1924.\n                */\n                for (const point of points) {\n                    const graphic = point.graphic;\n                    if (graphic) {\n                        if (point.unbindMouseOver) {\n                            point.unbindMouseOver();\n                        }\n                        point.unbindMouseOver = addEvent(graphic.element, 'mouseover', function () {\n                            // Raise this point\n                            if (point.stackIndex > 0 &&\n                                !point.raised) {\n                                point._y = graphic.y;\n                                graphic.attr({\n                                    y: point._y - 8\n                                });\n                                point.raised = true;\n                            }\n                            // Revert other raised points\n                            for (const otherPoint of points) {\n                                if (otherPoint !== point &&\n                                    otherPoint.raised &&\n                                    otherPoint.graphic) {\n                                    otherPoint.graphic.attr({\n                                        y: otherPoint._y\n                                    });\n                                    otherPoint.raised = false;\n                                }\n                            }\n                        });\n                    }\n                }\n            }\n            /**\n             * Get presentational attributes\n             * @private\n             */\n            pointAttribs(point, state) {\n                const options = this.options, color = (point && point.color) || this.color;\n                let lineColor = options.lineColor, lineWidth = (point && point.lineWidth), fill = (point && point.fillColor) || options.fillColor;\n                if (state) {\n                    fill = options.states[state].fillColor;\n                    lineColor = options.states[state].lineColor;\n                    lineWidth = options.states[state].lineWidth;\n                }\n                return {\n                    fill: fill || color,\n                    stroke: lineColor || color,\n                    'stroke-width': lineWidth || options.lineWidth || 0\n                };\n            }\n            /**\n             * @private\n             */\n            setClip() {\n                Series.prototype.setClip.apply(this, arguments);\n                if (this.options.clip !== false &&\n                    this.sharedClipKey &&\n                    this.markerGroup) {\n                    this.markerGroup.clip(this.chart.sharedClips[this.sharedClipKey]);\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        FlagsSeries.compose = FlagsSymbols.compose;\n        FlagsSeries.defaultOptions = merge(ColumnSeries.defaultOptions, FlagsSeriesDefaults);\n        OnSeriesComposition.compose(FlagsSeries);\n        extend(FlagsSeries.prototype, {\n            allowDG: false,\n            forceCrop: true,\n            invertible: false,\n            noSharedTooltip: true,\n            pointClass: FlagsPoint,\n            sorted: false,\n            takeOrdinalPosition: false,\n            trackerGroups: ['markerGroup'],\n            buildKDTree: noop,\n            /**\n             * Inherit the initialization from base Series.\n             * @private\n             */\n            init: Series.prototype.init\n        });\n        SeriesRegistry.registerSeriesType('flags', FlagsSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"circlepin\"|\"flag\"|\"squarepin\"} Highcharts.FlagsShapeValue\n         */\n        ''; // Detach doclets above\n\n        return FlagsSeries;\n    });\n    _registerModule(_modules, 'Core/Axis/BrokenAxis.js', [_modules['Core/Axis/Stacking/StackItem.js'], _modules['Core/Utilities.js']], function (StackItem, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, find, fireEvent, isArray, isNumber, pick } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Axis with support of broken data rows.\n         * @private\n         */\n        var BrokenAxis;\n        (function (BrokenAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds support for broken axes.\n             * @private\n             */\n            function compose(AxisClass, SeriesClass) {\n                if (!AxisClass.keepProps.includes('brokenAxis')) {\n                    AxisClass.keepProps.push('brokenAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterSetTickPositions', onAxisAfterSetTickPositions);\n                    addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n                    const seriesProto = SeriesClass.prototype;\n                    seriesProto.drawBreaks = seriesDrawBreaks;\n                    seriesProto.gappedPath = seriesGappedPath;\n                    addEvent(SeriesClass, 'afterGeneratePoints', onSeriesAfterGeneratePoints);\n                    addEvent(SeriesClass, 'afterRender', onSeriesAfterRender);\n                }\n                return AxisClass;\n            }\n            BrokenAxis.compose = compose;\n            /**\n             * @private\n             */\n            function onAxisAfterInit() {\n                if (typeof this.brokenAxis !== 'undefined') {\n                    this.brokenAxis.setBreaks(this.options.breaks, false);\n                }\n            }\n            /**\n             * Force Axis to be not-ordinal when breaks are defined.\n             * @private\n             */\n            function onAxisAfterSetOptions() {\n                const axis = this;\n                if (axis.brokenAxis?.hasBreaks) {\n                    axis.options.ordinal = false;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisAfterSetTickPositions() {\n                const axis = this, brokenAxis = axis.brokenAxis;\n                if (brokenAxis?.hasBreaks) {\n                    const tickPositions = axis.tickPositions, info = axis.tickPositions.info, newPositions = [];\n                    for (let i = 0; i < tickPositions.length; i++) {\n                        if (!brokenAxis.isInAnyBreak(tickPositions[i])) {\n                            newPositions.push(tickPositions[i]);\n                        }\n                    }\n                    axis.tickPositions = newPositions;\n                    axis.tickPositions.info = info;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInit() {\n                const axis = this;\n                if (!axis.brokenAxis) {\n                    axis.brokenAxis = new Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterGeneratePoints() {\n                const { isDirty, options: { connectNulls }, points, xAxis, yAxis } = this;\n                // Set, or reset visibility of the points. Axis.setBreaks marks\n                // the series as isDirty\n                if (isDirty) {\n                    let i = points.length;\n                    while (i--) {\n                        const point = points[i];\n                        // Respect nulls inside the break (#4275)\n                        const nullGap = point.y === null && connectNulls === false;\n                        const isPointInBreak = (!nullGap && (xAxis?.brokenAxis?.isInAnyBreak(point.x, true) ||\n                            yAxis?.brokenAxis?.isInAnyBreak(point.y, true)));\n                        // Set point.visible if in any break.\n                        // If not in break, reset visible to original value.\n                        point.visible = isPointInBreak ?\n                            false :\n                            point.options.visible !== false;\n                    }\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterRender() {\n                this.drawBreaks(this.xAxis, ['x']);\n                this.drawBreaks(this.yAxis, pick(this.pointArrayMap, ['y']));\n            }\n            /**\n             * @private\n             */\n            function seriesDrawBreaks(axis, keys) {\n                const series = this, points = series.points;\n                let breaks, threshold, y;\n                if (axis?.brokenAxis?.hasBreaks) {\n                    const brokenAxis = axis.brokenAxis;\n                    keys.forEach(function (key) {\n                        breaks = brokenAxis?.breakArray || [];\n                        threshold = axis.isXAxis ?\n                            axis.min :\n                            pick(series.options.threshold, axis.min);\n                        // Array of breaks that have been \"zoomed-out\" which means that\n                        // they were shown previously, but now after zoom, they are not\n                        // (#19885).\n                        const breaksOutOfRange = axis?.options?.breaks?.filter(function (brk) {\n                            let isOut = true;\n                            // Iterate to see if \"brk\" is in axis range\n                            for (let i = 0; i < breaks.length; i++) {\n                                const otherBreak = breaks[i];\n                                if (otherBreak.from === brk.from &&\n                                    otherBreak.to === brk.to) {\n                                    isOut = false;\n                                    break;\n                                }\n                            }\n                            return isOut;\n                        });\n                        points.forEach(function (point) {\n                            y = pick(point['stack' + key.toUpperCase()], point[key]);\n                            breaks.forEach(function (brk) {\n                                if (isNumber(threshold) && isNumber(y)) {\n                                    let eventName = '';\n                                    if ((threshold < brk.from && y > brk.to) ||\n                                        (threshold > brk.from && y < brk.from)) {\n                                        eventName = 'pointBreak';\n                                    }\n                                    else if ((threshold < brk.from &&\n                                        y > brk.from &&\n                                        y < brk.to) || (threshold > brk.from &&\n                                        y > brk.to &&\n                                        y < brk.from)) {\n                                        eventName = 'pointInBreak';\n                                    }\n                                    if (eventName) {\n                                        fireEvent(axis, eventName, { point, brk });\n                                    }\n                                }\n                            });\n                            breaksOutOfRange?.forEach(function (brk) {\n                                fireEvent(axis, 'pointOutsideOfBreak', { point, brk });\n                            });\n                        });\n                    });\n                }\n            }\n            /**\n             * Extend getGraphPath by identifying gaps in the data so that we\n             * can draw a gap in the line or area. This was moved from ordinal\n             * axis module to broken axis module as of #5045.\n             *\n             * @private\n             * @function Highcharts.Series#gappedPath\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Gapped path\n             */\n            function seriesGappedPath() {\n                const currentDataGrouping = this.currentDataGrouping, groupingSize = currentDataGrouping?.gapSize, points = this.points.slice(), yAxis = this.yAxis;\n                let gapSize = this.options.gapSize, i = points.length - 1, stack;\n                /**\n                 * Defines when to display a gap in the graph, together with the\n                 * [gapUnit](plotOptions.series.gapUnit) option.\n                 *\n                 * In case when `dataGrouping` is enabled, points can be grouped\n                 * into a larger time span. This can make the grouped points to\n                 * have a greater distance than the absolute value of `gapSize`\n                 * property, which will result in disappearing graph completely.\n                 * To prevent this situation the mentioned distance between\n                 * grouped points is used instead of previously defined\n                 * `gapSize`.\n                 *\n                 * In practice, this option is most often used to visualize gaps\n                 * in time series. In a stock chart, intraday data is available\n                 * for daytime hours, while gaps will appear in nights and\n                 * weekends.\n                 *\n                 * @see [gapUnit](plotOptions.series.gapUnit)\n                 * @see [xAxis.breaks](#xAxis.breaks)\n                 *\n                 * @sample {highstock} stock/plotoptions/series-gapsize/\n                 * Setting the gap size to 2 introduces gaps for weekends in\n                 * daily datasets.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @product   highstock\n                 * @requires  modules/broken-axis\n                 * @apioption plotOptions.series.gapSize\n                 */\n                /**\n                 * Together with [gapSize](plotOptions.series.gapSize), this\n                 * option defines where to draw gaps in the graph.\n                 *\n                 * When the `gapUnit` is `\"relative\"` (default), a gap size of 5\n                 * means that if the distance between two points is greater than\n                 * 5 times that of the two closest points, the graph will be\n                 * broken.\n                 *\n                 * When the `gapUnit` is `\"value\"`, the gap is based on absolute\n                 * axis values, which on a datetime axis is milliseconds. This\n                 * also applies to the navigator series that inherits gap\n                 * options from the base series.\n                 *\n                 * @see [gapSize](plotOptions.series.gapSize)\n                 *\n                 * @type       {string}\n                 * @default    relative\n                 * @since      5.0.13\n                 * @product    highstock\n                 * @validvalue [\"relative\", \"value\"]\n                 * @requires   modules/broken-axis\n                 * @apioption  plotOptions.series.gapUnit\n                 */\n                if (gapSize && i > 0) { // #5008\n                    // Gap unit is relative\n                    if (this.options.gapUnit !== 'value') {\n                        gapSize *= this.basePointRange;\n                    }\n                    // Setting a new gapSize in case dataGrouping is enabled\n                    // (#7686)\n                    if (groupingSize &&\n                        groupingSize > gapSize &&\n                        // Except when DG is forced (e.g. from other series)\n                        // and has lower granularity than actual points (#11351)\n                        groupingSize >= this.basePointRange) {\n                        gapSize = groupingSize;\n                    }\n                    // Extension for ordinal breaks\n                    let current, next;\n                    while (i--) {\n                        // Reassign next if it is not visible\n                        if (!(next && next.visible !== false)) {\n                            next = points[i + 1];\n                        }\n                        current = points[i];\n                        // Skip iteration if one of the points is not visible\n                        if (next.visible === false || current.visible === false) {\n                            continue;\n                        }\n                        if (next.x - current.x > gapSize) {\n                            const xRange = (current.x + next.x) / 2;\n                            points.splice(// Insert after this one\n                            i + 1, 0, {\n                                isNull: true,\n                                x: xRange\n                            });\n                            // For stacked chart generate empty stack items, #6546\n                            if (yAxis.stacking && this.options.stacking) {\n                                stack = yAxis.stacking.stacks[this.stackKey][xRange] = new StackItem(yAxis, yAxis.options.stackLabels, false, xRange, this.stack);\n                                stack.total = 0;\n                            }\n                        }\n                        // Assign current to next for the upcoming iteration\n                        next = current;\n                    }\n                }\n                // Call base method\n                return this.getGraphPath(points);\n            }\n            /* *\n             *\n             *  Class\n             *\n             * */\n            /**\n             * Provides support for broken axes.\n             * @private\n             * @class\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                static isInBreak(brk, val) {\n                    const repeat = brk.repeat || Infinity, from = brk.from, length = brk.to - brk.from, test = (val >= from ?\n                        (val - from) % repeat :\n                        repeat - ((from - val) % repeat));\n                    let ret;\n                    if (!brk.inclusive) {\n                        ret = test < length && test !== 0;\n                    }\n                    else {\n                        ret = test <= length;\n                    }\n                    return ret;\n                }\n                /**\n                 * @private\n                 */\n                static lin2Val(val) {\n                    const axis = this;\n                    const brokenAxis = axis.brokenAxis;\n                    const breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    let nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.from >= nval) {\n                            break;\n                        }\n                        else if (brk.to < nval) {\n                            nval += brk.len;\n                        }\n                        else if (Additions.isInBreak(brk, nval)) {\n                            nval += brk.len;\n                        }\n                    }\n                    return nval;\n                }\n                /**\n                 * @private\n                 */\n                static val2Lin(val) {\n                    const axis = this;\n                    const brokenAxis = axis.brokenAxis;\n                    const breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    let nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.to <= val) {\n                            nval -= brk.len;\n                        }\n                        else if (brk.from >= val) {\n                            break;\n                        }\n                        else if (Additions.isInBreak(brk, val)) {\n                            nval -= (val - brk.from);\n                            break;\n                        }\n                    }\n                    return nval;\n                }\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                constructor(axis) {\n                    this.hasBreaks = false;\n                    this.axis = axis;\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Returns the first break found where the x is larger then break.from\n                 * and smaller then break.to.\n                 *\n                 * @param {number} x\n                 * The number which should be within a break.\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} breaks\n                 * The array of breaks to search within.\n                 *\n                 * @return {Highcharts.XAxisBreaksOptions|undefined}\n                 * Returns the first break found that matches, returns false if no break\n                 * is found.\n                 */\n                findBreakAt(x, breaks) {\n                    return find(breaks, function (b) {\n                        return b.from < x && x < b.to;\n                    });\n                }\n                /**\n                 * @private\n                 */\n                isInAnyBreak(val, testKeep) {\n                    const brokenAxis = this, axis = brokenAxis.axis, breaks = axis.options.breaks || [];\n                    let i = breaks.length, inbrk, keep, ret;\n                    if (i && isNumber(val)) {\n                        while (i--) {\n                            if (Additions.isInBreak(breaks[i], val)) {\n                                inbrk = true;\n                                if (!keep) {\n                                    keep = pick(breaks[i].showPoints, !axis.isXAxis);\n                                }\n                            }\n                        }\n                        if (inbrk && testKeep) {\n                            ret = inbrk && !keep;\n                        }\n                        else {\n                            ret = inbrk;\n                        }\n                    }\n                    return ret;\n                }\n                /**\n                 * Dynamically set or unset breaks in an axis. This function in lighter\n                 * than using Axis.update, and it also preserves animation.\n                 *\n                 * @private\n                 * @function Highcharts.Axis#setBreaks\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} [breaks]\n                 * The breaks to add. When `undefined` it removes existing breaks.\n                 *\n                 * @param {boolean} [redraw=true]\n                 * Whether to redraw the chart immediately.\n                 */\n                setBreaks(breaks, redraw) {\n                    const brokenAxis = this;\n                    const axis = brokenAxis.axis;\n                    const hasBreaks = isArray(breaks) &&\n                        !!breaks.length &&\n                        !!Object.keys(breaks[0]).length; // Check for [{}], #16368.\n                    axis.isDirty = brokenAxis.hasBreaks !== hasBreaks;\n                    brokenAxis.hasBreaks = hasBreaks;\n                    if (breaks !== axis.options.breaks) {\n                        axis.options.breaks = axis.userOptions.breaks = breaks;\n                    }\n                    axis.forceRedraw = true; // Force recalculation in setScale\n                    // Recalculate series related to the axis.\n                    axis.series.forEach(function (series) {\n                        series.isDirty = true;\n                    });\n                    if (!hasBreaks && axis.val2lin === Additions.val2Lin) {\n                        // Revert to prototype functions\n                        delete axis.val2lin;\n                        delete axis.lin2val;\n                    }\n                    if (hasBreaks) {\n                        axis.userOptions.ordinal = false;\n                        axis.lin2val = Additions.lin2Val;\n                        axis.val2lin = Additions.val2Lin;\n                        axis.setExtremes = function (newMin, newMax, redraw, animation, eventArguments) {\n                            // If trying to set extremes inside a break, extend min to\n                            // after, and max to before the break ( #3857 )\n                            if (brokenAxis.hasBreaks) {\n                                const breaks = (this.options.breaks || []);\n                                let axisBreak;\n                                while ((axisBreak = brokenAxis.findBreakAt(newMin, breaks))) {\n                                    newMin = axisBreak.to;\n                                }\n                                while ((axisBreak = brokenAxis.findBreakAt(newMax, breaks))) {\n                                    newMax = axisBreak.from;\n                                }\n                                // If both min and max is within the same break.\n                                if (newMax < newMin) {\n                                    newMax = newMin;\n                                }\n                            }\n                            axis.constructor.prototype.setExtremes.call(this, newMin, newMax, redraw, animation, eventArguments);\n                        };\n                        axis.setAxisTranslation = function () {\n                            axis.constructor.prototype.setAxisTranslation.call(this);\n                            brokenAxis.unitLength = void 0;\n                            if (brokenAxis.hasBreaks) {\n                                const breaks = axis.options.breaks || [], \n                                // Temporary one:\n                                breakArrayT = [], breakArray = [], pointRangePadding = pick(axis.pointRangePadding, 0);\n                                let length = 0, inBrk, repeat, min = axis.userMin || axis.min, max = axis.userMax || axis.max, start, i;\n                                // Min & max check (#4247)\n                                breaks.forEach(function (brk) {\n                                    repeat = brk.repeat || Infinity;\n                                    if (isNumber(min) && isNumber(max)) {\n                                        if (Additions.isInBreak(brk, min)) {\n                                            min += ((brk.to % repeat) -\n                                                (min % repeat));\n                                        }\n                                        if (Additions.isInBreak(brk, max)) {\n                                            max -= ((max % repeat) -\n                                                (brk.from % repeat));\n                                        }\n                                    }\n                                });\n                                // Construct an array holding all breaks in the axis\n                                breaks.forEach(function (brk) {\n                                    start = brk.from;\n                                    repeat = brk.repeat || Infinity;\n                                    if (isNumber(min) && isNumber(max)) {\n                                        while (start - repeat > min) {\n                                            start -= repeat;\n                                        }\n                                        while (start < min) {\n                                            start += repeat;\n                                        }\n                                        for (i = start; i < max; i += repeat) {\n                                            breakArrayT.push({\n                                                value: i,\n                                                move: 'in'\n                                            });\n                                            breakArrayT.push({\n                                                value: i + brk.to - brk.from,\n                                                move: 'out',\n                                                size: brk.breakSize\n                                            });\n                                        }\n                                    }\n                                });\n                                breakArrayT.sort(function (a, b) {\n                                    return ((a.value === b.value) ?\n                                        ((a.move === 'in' ? 0 : 1) -\n                                            (b.move === 'in' ? 0 : 1)) :\n                                        a.value - b.value);\n                                });\n                                // Simplify the breaks\n                                inBrk = 0;\n                                start = min;\n                                breakArrayT.forEach(function (brk) {\n                                    inBrk += (brk.move === 'in' ? 1 : -1);\n                                    if (inBrk === 1 && brk.move === 'in') {\n                                        start = brk.value;\n                                    }\n                                    if (inBrk === 0 && isNumber(start)) {\n                                        breakArray.push({\n                                            from: start,\n                                            to: brk.value,\n                                            len: brk.value - start - (brk.size || 0)\n                                        });\n                                        length += (brk.value -\n                                            start -\n                                            (brk.size || 0));\n                                    }\n                                });\n                                brokenAxis.breakArray = breakArray;\n                                // Used with staticScale, and below the actual axis\n                                // length, when breaks are subtracted.\n                                if (isNumber(min) &&\n                                    isNumber(max) &&\n                                    isNumber(axis.min)) {\n                                    brokenAxis.unitLength = max - min - length +\n                                        pointRangePadding;\n                                    fireEvent(axis, 'afterBreaks');\n                                    if (axis.staticScale) {\n                                        axis.transA = axis.staticScale;\n                                    }\n                                    else if (brokenAxis.unitLength) {\n                                        axis.transA *=\n                                            (max - axis.min + pointRangePadding) /\n                                                brokenAxis.unitLength;\n                                    }\n                                    if (pointRangePadding) {\n                                        axis.minPixelPadding =\n                                            axis.transA * (axis.minPointOffset || 0);\n                                    }\n                                    axis.min = min;\n                                    axis.max = max;\n                                }\n                            }\n                        };\n                    }\n                    if (pick(redraw, true)) {\n                        axis.chart.redraw();\n                    }\n                }\n            }\n            BrokenAxis.Additions = Additions;\n        })(BrokenAxis || (BrokenAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BrokenAxis;\n    });\n    _registerModule(_modules, 'masters/modules/broken-axis.src.js', [_modules['Core/Globals.js'], _modules['Core/Axis/BrokenAxis.js']], function (Highcharts, BrokenAxis) {\n\n        const G = Highcharts;\n        G.BrokenAxis = G.BrokenAxis || BrokenAxis;\n        G.BrokenAxis.compose(G.Axis, G.Series);\n\n        return Highcharts;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/ApproximationRegistry.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Define the available approximation types. The data grouping\n         * approximations takes an array or numbers as the first parameter. In case\n         * of ohlc, four arrays are sent in as four parameters. Each array consists\n         * only of numbers. In case null values belong to the group, the property\n         * .hasNulls will be set to true on the array.\n         *\n         * @product highstock\n         *\n         * @private\n         */\n        const ApproximationRegistry = {\n        // Approximations added programmatically\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ApproximationRegistry;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/ApproximationDefaults.js', [_modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Core/Utilities.js']], function (ApproximationRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { arrayMax, arrayMin, correctFloat, extend, isNumber } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function average(arr) {\n            const len = arr.length;\n            let ret = sum(arr);\n            // If we have a number, return it divided by the length. If not,\n            // return null or undefined based on what the sum method finds.\n            if (isNumber(ret) && len) {\n                ret = correctFloat(ret / len);\n            }\n            return ret;\n        }\n        /**\n         * The same as average, but for series with multiple values, like area ranges.\n         * @private\n         */\n        function averages() {\n            const ret = [];\n            [].forEach.call(arguments, function (arr) {\n                ret.push(average(arr));\n            });\n            // Return undefined when first elem. is undefined and let\n            // sum method handle null (#7377)\n            return typeof ret[0] === 'undefined' ? void 0 : ret;\n        }\n        /**\n         * @private\n         */\n        function close(arr) {\n            return arr.length ?\n                arr[arr.length - 1] :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function high(arr) {\n            return arr.length ?\n                arrayMax(arr) :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * HLC, OHLC and range are special cases where a multidimensional array is input\n         * and an array is output.\n         * @private\n         */\n        function hlc(high, low, close) {\n            high = ApproximationRegistry.high(high);\n            low = ApproximationRegistry.low(low);\n            close = ApproximationRegistry.close(close);\n            if (isNumber(high) ||\n                isNumber(low) ||\n                isNumber(close)) {\n                return [high, low, close];\n            }\n        }\n        /**\n         * @private\n         */\n        function low(arr) {\n            return arr.length ?\n                arrayMin(arr) :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function ohlc(open, high, low, close) {\n            open = ApproximationRegistry.open(open);\n            high = ApproximationRegistry.high(high);\n            low = ApproximationRegistry.low(low);\n            close = ApproximationRegistry.close(close);\n            if (isNumber(open) ||\n                isNumber(high) ||\n                isNumber(low) ||\n                isNumber(close)) {\n                return [open, high, low, close];\n            }\n        }\n        /**\n         * @private\n         */\n        function open(arr) {\n            return arr.length ? arr[0] : (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function range(low, high) {\n            low = ApproximationRegistry.low(low);\n            high = ApproximationRegistry.high(high);\n            if (isNumber(low) || isNumber(high)) {\n                return [low, high];\n            }\n            if (low === null && high === null) {\n                return null;\n            }\n            // Else, return is undefined\n        }\n        /**\n         * @private\n         */\n        function sum(arr) {\n            let len = arr.length, ret;\n            // 1. it consists of nulls exclusive\n            if (!len && arr.hasNulls) {\n                ret = null;\n                // 2. it has a length and real values\n            }\n            else if (len) {\n                ret = 0;\n                while (len--) {\n                    ret += arr[len];\n                }\n            }\n            // 3. it has zero length, so just return undefined\n            // => doNothing()\n            return ret;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ApproximationDefaults = {\n            average,\n            averages,\n            close,\n            high,\n            hlc,\n            low,\n            ohlc,\n            open,\n            range,\n            sum\n        };\n        extend(ApproximationRegistry, ApproximationDefaults);\n\n        return ApproximationDefaults;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Common options\n         * @private\n         */\n        const common = {\n            /// enabled: null, // (true for stock charts, false for basic),\n            // forced: undefined,\n            groupPixelWidth: 2,\n            // The first one is the point or start value, the second is the start\n            // value if we're dealing with range, the third one is the end value if\n            // dealing with a range\n            dateTimeLabelFormats: {\n                millisecond: [\n                    '%A, %e %b, %H:%M:%S.%L',\n                    '%A, %e %b, %H:%M:%S.%L',\n                    '-%H:%M:%S.%L'\n                ],\n                second: [\n                    '%A, %e %b, %H:%M:%S',\n                    '%A, %e %b, %H:%M:%S',\n                    '-%H:%M:%S'\n                ],\n                minute: [\n                    '%A, %e %b, %H:%M',\n                    '%A, %e %b, %H:%M',\n                    '-%H:%M'\n                ],\n                hour: [\n                    '%A, %e %b, %H:%M',\n                    '%A, %e %b, %H:%M',\n                    '-%H:%M'\n                ],\n                day: [\n                    '%A, %e %b %Y',\n                    '%A, %e %b',\n                    '-%A, %e %b %Y'\n                ],\n                week: [\n                    'Week from %A, %e %b %Y',\n                    '%A, %e %b',\n                    '-%A, %e %b %Y'\n                ],\n                month: [\n                    '%B %Y',\n                    '%B',\n                    '-%B %Y'\n                ],\n                year: [\n                    '%Y',\n                    '%Y',\n                    '-%Y'\n                ]\n            }\n            /// smoothed = false, // enable this for navigator series only\n        };\n        /**\n         * Extends common options\n         * @private\n         */\n        const seriesSpecific = {\n            line: {},\n            spline: {},\n            area: {},\n            areaspline: {},\n            arearange: {},\n            column: {\n                groupPixelWidth: 10\n            },\n            columnrange: {\n                groupPixelWidth: 10\n            },\n            candlestick: {\n                groupPixelWidth: 10\n            },\n            ohlc: {\n                groupPixelWidth: 5\n            },\n            hlc: {\n                groupPixelWidth: 5\n                // Move to HeikinAshiSeries.ts after refactoring data grouping.\n            },\n            heikinashi: {\n                groupPixelWidth: 10\n            }\n        };\n        /**\n         * Units are defined in a separate array to allow complete overriding in\n         * case of a user option.\n         * @private\n         */\n        const units = [\n            [\n                'millisecond',\n                [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // Allowed multiples\n            ], [\n                'second',\n                [1, 2, 5, 10, 15, 30]\n            ], [\n                'minute',\n                [1, 2, 5, 10, 15, 30]\n            ], [\n                'hour',\n                [1, 2, 3, 4, 6, 8, 12]\n            ], [\n                'day',\n                [1]\n            ], [\n                'week',\n                [1]\n            ], [\n                'month',\n                [1, 3, 6]\n            ], [\n                'year',\n                null\n            ]\n        ];\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingDefaults = {\n            common,\n            seriesSpecific,\n            units\n        };\n\n        return DataGroupingDefaults;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingAxisComposition.js', [_modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Core/Utilities.js']], function (DataGroupingDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, extend, merge, pick } = U;\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let AxisConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Check the groupPixelWidth and apply the grouping if needed.\n         * Fired only after processing the data.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Axis#applyGrouping\n         */\n        function applyGrouping(e) {\n            const axis = this, series = axis.series;\n            // Reset the groupPixelWidth for all series, #17141.\n            series.forEach(function (series) {\n                series.groupPixelWidth = void 0; // #2110\n            });\n            series.forEach(function (series) {\n                series.groupPixelWidth = (axis.getGroupPixelWidth &&\n                    axis.getGroupPixelWidth());\n                if (series.groupPixelWidth) {\n                    series.hasProcessed = true; // #2692\n                }\n                // Fire independing on series.groupPixelWidth to always set a proper\n                // dataGrouping state, (#16238)\n                series.applyGrouping(!!e.hasExtremesChanged);\n            });\n        }\n        /**\n         * @private\n         */\n        function compose(AxisClass) {\n            AxisConstructor = AxisClass;\n            const axisProto = AxisClass.prototype;\n            if (!axisProto.applyGrouping) {\n                addEvent(AxisClass, 'afterSetScale', onAfterSetScale);\n                // When all series are processed, calculate the group pixel width and\n                // then if this value is different than zero apply groupings.\n                addEvent(AxisClass, 'postProcessData', applyGrouping);\n                extend(axisProto, {\n                    applyGrouping,\n                    getGroupPixelWidth,\n                    setDataGrouping\n                });\n            }\n        }\n        /**\n         * Get the data grouping pixel width based on the greatest defined individual\n         * width of the axis' series, and if whether one of the axes need grouping.\n         * @private\n         */\n        function getGroupPixelWidth() {\n            const series = this.series;\n            let i = series.length, groupPixelWidth = 0, doGrouping = false, dataLength, dgOptions;\n            // If one of the series needs grouping, apply it to all (#1634)\n            while (i--) {\n                dgOptions = series[i].options.dataGrouping;\n                if (dgOptions) { // #2692\n                    // If multiple series are compared on the same x axis, give them the\n                    // same group pixel width (#334)\n                    groupPixelWidth = Math.max(groupPixelWidth, \n                    // Fallback to commonOptions (#9693)\n                    pick(dgOptions.groupPixelWidth, DataGroupingDefaults.common.groupPixelWidth));\n                    dataLength = (series[i].processedXData || series[i].data).length;\n                    // Execute grouping if the amount of points is greater than the\n                    // limit defined in groupPixelWidth\n                    if (series[i].groupPixelWidth ||\n                        (dataLength >\n                            (this.chart.plotSizeX / groupPixelWidth)) ||\n                        (dataLength && dgOptions.forced)) {\n                        doGrouping = true;\n                    }\n                }\n            }\n            return doGrouping ? groupPixelWidth : 0;\n        }\n        /**\n         * When resetting the scale reset the hasProcessed flag to avoid taking\n         * previous data grouping of neighbour series into account when determining\n         * group pixel width (#2692).\n         * @private\n         */\n        function onAfterSetScale() {\n            this.series.forEach(function (series) {\n                series.hasProcessed = false;\n            });\n        }\n        /**\n         * Highcharts Stock only. Force data grouping on all the axis' series.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Axis#setDataGrouping\n         *\n         * @param {boolean|Highcharts.DataGroupingOptionsObject} [dataGrouping]\n         *        A `dataGrouping` configuration. Use `false` to disable data grouping\n         *        dynamically.\n         *\n         * @param {boolean} [redraw=true]\n         *        Whether to redraw the chart or wait for a later call to\n         *        {@link Chart#redraw}.\n         */\n        function setDataGrouping(dataGrouping, redraw) {\n            const axis = this;\n            let i;\n            redraw = pick(redraw, true);\n            if (!dataGrouping) {\n                dataGrouping = {\n                    forced: false,\n                    units: null\n                };\n            }\n            // Axis is instantiated, update all series\n            if (this instanceof AxisConstructor) {\n                i = this.series.length;\n                while (i--) {\n                    this.series[i].update({\n                        dataGrouping: dataGrouping\n                    }, false);\n                }\n                // Axis not yet instantiated, alter series options\n            }\n            else {\n                this.chart.options.series.forEach(function (seriesOptions) {\n                    // Merging dataGrouping options with already defined options #16759\n                    seriesOptions.dataGrouping = typeof dataGrouping === 'boolean' ?\n                        dataGrouping :\n                        merge(dataGrouping, seriesOptions.dataGrouping);\n                });\n            }\n            // Clear ordinal slope, so we won't accidentally use the old one (#7827)\n            if (axis.ordinal) {\n                axis.ordinal.slope = void 0;\n            }\n            if (redraw) {\n                this.chart.redraw();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingAxisComposition = {\n            compose\n        };\n\n        return DataGroupingAxisComposition;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingSeriesComposition.js', [_modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Core/Axis/DateTimeAxis.js'], _modules['Core/Defaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (ApproximationRegistry, DataGroupingDefaults, DateTimeAxis, D, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { series: { prototype: seriesProto } } = SeriesRegistry;\n        const { addEvent, defined, error, extend, isNumber, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const baseGeneratePoints = seriesProto.generatePoints;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function adjustExtremes(xAxis, groupedXData) {\n            // Make sure the X axis extends to show the first group (#2533)\n            // But only for visible series (#5493, #6393)\n            if (defined(groupedXData[0]) &&\n                isNumber(xAxis.min) &&\n                isNumber(xAxis.dataMin) &&\n                groupedXData[0] < xAxis.min) {\n                if ((!defined(xAxis.options.min) &&\n                    xAxis.min <= xAxis.dataMin) ||\n                    xAxis.min === xAxis.dataMin) {\n                    xAxis.min = Math.min(groupedXData[0], xAxis.min);\n                }\n                xAxis.dataMin = Math.min(groupedXData[0], xAxis.dataMin);\n            }\n            // When the last anchor set, change the extremes that\n            // the last point is visible (#12455).\n            if (defined(groupedXData[groupedXData.length - 1]) &&\n                isNumber(xAxis.max) &&\n                isNumber(xAxis.dataMax) &&\n                groupedXData[groupedXData.length - 1] > xAxis.max) {\n                if ((!defined(xAxis.options.max) &&\n                    isNumber(xAxis.dataMax) &&\n                    xAxis.max >= xAxis.dataMax) || xAxis.max === xAxis.dataMax) {\n                    xAxis.max = Math.max(groupedXData[groupedXData.length - 1], xAxis.max);\n                }\n                xAxis.dataMax = Math.max(groupedXData[groupedXData.length - 1], xAxis.dataMax);\n            }\n        }\n        /**\n         * @private\n         */\n        function anchorPoints(series, groupedXData, xMax) {\n            const options = series.options, dataGroupingOptions = options.dataGrouping, totalRange = (series.currentDataGrouping && series.currentDataGrouping.gapSize);\n            if (!(dataGroupingOptions &&\n                series.xData &&\n                totalRange &&\n                series.groupMap)) {\n                return;\n            }\n            const groupedDataLastIndex = groupedXData.length - 1, anchor = dataGroupingOptions.anchor, firstAnchor = dataGroupingOptions.firstAnchor, lastAnchor = dataGroupingOptions.lastAnchor;\n            let anchorIndexIterator = groupedXData.length - 1, anchorFirstIndex = 0;\n            // Change the first point position, but only when it is\n            // the first point in the data set not in the current zoom.\n            if (firstAnchor && series.xData[0] >= groupedXData[0]) {\n                anchorFirstIndex++;\n                const groupStart = series.groupMap[0].start, groupLength = series.groupMap[0].length;\n                let firstGroupEnd;\n                if (isNumber(groupStart) && isNumber(groupLength)) {\n                    firstGroupEnd = groupStart + (groupLength - 1);\n                }\n                groupedXData[0] = {\n                    start: groupedXData[0],\n                    middle: groupedXData[0] + 0.5 * totalRange,\n                    end: groupedXData[0] + totalRange,\n                    firstPoint: series.xData[0],\n                    lastPoint: firstGroupEnd && series.xData[firstGroupEnd]\n                }[firstAnchor];\n            }\n            // Change the last point position but only when it is\n            // the last point in the data set not in the current zoom,\n            // or if it is not the 1st point simultaneously.\n            if (groupedDataLastIndex > 0 &&\n                lastAnchor &&\n                totalRange &&\n                groupedXData[groupedDataLastIndex] >= xMax - totalRange) {\n                anchorIndexIterator--;\n                const lastGroupStart = series.groupMap[series.groupMap.length - 1].start;\n                groupedXData[groupedDataLastIndex] = {\n                    start: groupedXData[groupedDataLastIndex],\n                    middle: groupedXData[groupedDataLastIndex] + 0.5 * totalRange,\n                    end: groupedXData[groupedDataLastIndex] + totalRange,\n                    firstPoint: lastGroupStart && series.xData[lastGroupStart],\n                    lastPoint: series.xData[series.xData.length - 1]\n                }[lastAnchor];\n            }\n            if (anchor && anchor !== 'start') {\n                const shiftInterval = (totalRange *\n                    { middle: 0.5, end: 1 }[anchor]);\n                // Anchor the rest of the points apart from the ones, that were\n                // previously moved.\n                while (anchorIndexIterator >= anchorFirstIndex) {\n                    groupedXData[anchorIndexIterator] += shiftInterval;\n                    anchorIndexIterator--;\n                }\n            }\n        }\n        /**\n         * For the processed data, calculate the grouped data if needed.\n         *\n         * @private\n         * @function Highcharts.Series#applyGrouping\n         */\n        function applyGrouping(hasExtremesChanged) {\n            const series = this, chart = series.chart, options = series.options, dataGroupingOptions = options.dataGrouping, groupingEnabled = series.allowDG !== false && dataGroupingOptions &&\n                pick(dataGroupingOptions.enabled, chart.options.isStock), reserveSpace = series.reserveSpace(), lastDataGrouping = this.currentDataGrouping;\n            let currentDataGrouping, croppedData, revertRequireSorting = false;\n            // Data needs to be sorted for dataGrouping\n            if (groupingEnabled && !series.requireSorting) {\n                series.requireSorting = revertRequireSorting = true;\n            }\n            // Skip if skipDataGrouping method returns false or if grouping is disabled\n            // (in that order).\n            const skip = skipDataGrouping(series, hasExtremesChanged) === false || !groupingEnabled;\n            // Revert original requireSorting value if changed\n            if (revertRequireSorting) {\n                series.requireSorting = false;\n            }\n            if (skip) {\n                return;\n            }\n            series.destroyGroupedData();\n            const processedXData = dataGroupingOptions.groupAll ?\n                series.xData :\n                series.processedXData, processedYData = dataGroupingOptions.groupAll ?\n                series.yData :\n                series.processedYData, plotSizeX = chart.plotSizeX, xAxis = series.xAxis, ordinal = xAxis.options.ordinal, groupPixelWidth = series.groupPixelWidth;\n            let i, hasGroupedData;\n            // Execute grouping if the amount of points is greater than the limit\n            // defined in groupPixelWidth\n            if (groupPixelWidth &&\n                processedXData &&\n                processedXData.length &&\n                plotSizeX) {\n                hasGroupedData = true;\n                // Force recreation of point instances in series.translate, #5699\n                series.isDirty = true;\n                series.points = null; // #6709\n                const extremes = xAxis.getExtremes(), xMin = extremes.min, xMax = extremes.max, groupIntervalFactor = (ordinal &&\n                    xAxis.ordinal &&\n                    xAxis.ordinal.getGroupIntervalFactor(xMin, xMax, series)) || 1, interval = (groupPixelWidth * (xMax - xMin) / plotSizeX) *\n                    groupIntervalFactor, groupPositions = xAxis.getTimeTicks(DateTimeAxis.Additions.prototype.normalizeTimeTickInterval(interval, dataGroupingOptions.units ||\n                    DataGroupingDefaults.units), \n                // Processed data may extend beyond axis (#4907)\n                Math.min(xMin, processedXData[0]), Math.max(xMax, processedXData[processedXData.length - 1]), xAxis.options.startOfWeek, processedXData, series.closestPointRange), groupedData = seriesProto.groupData.apply(series, [\n                    processedXData,\n                    processedYData,\n                    groupPositions,\n                    dataGroupingOptions.approximation\n                ]);\n                let groupedXData = groupedData.groupedXData, groupedYData = groupedData.groupedYData, gapSize = 0;\n                // The smoothed option is deprecated, instead, there is a fallback\n                // to the new anchoring mechanism. #12455.\n                if (dataGroupingOptions &&\n                    dataGroupingOptions.smoothed &&\n                    groupedXData.length) {\n                    dataGroupingOptions.firstAnchor = 'firstPoint';\n                    dataGroupingOptions.anchor = 'middle';\n                    dataGroupingOptions.lastAnchor = 'lastPoint';\n                    error(32, false, chart, {\n                        'dataGrouping.smoothed': 'use dataGrouping.anchor'\n                    });\n                }\n                // Record what data grouping values were used\n                for (i = 1; i < groupPositions.length; i++) {\n                    // The grouped gapSize needs to be the largest distance between\n                    // the group to capture varying group sizes like months or DST\n                    // crossing (#10000). Also check that the gap is not at the\n                    // start of a segment.\n                    if (!groupPositions.info.segmentStarts ||\n                        groupPositions.info.segmentStarts.indexOf(i) === -1) {\n                        gapSize = Math.max(groupPositions[i] - groupPositions[i - 1], gapSize);\n                    }\n                }\n                currentDataGrouping = groupPositions.info;\n                currentDataGrouping.gapSize = gapSize;\n                series.closestPointRange = groupPositions.info.totalRange;\n                series.groupMap = groupedData.groupMap;\n                series.currentDataGrouping = currentDataGrouping;\n                anchorPoints(series, groupedXData, xMax);\n                if (reserveSpace) {\n                    adjustExtremes(xAxis, groupedXData);\n                }\n                // We calculated all group positions but we should render\n                // only the ones within the visible range\n                if (dataGroupingOptions.groupAll) {\n                    // Keep the reference to all grouped points\n                    // for further calculation (eg. heikinashi).\n                    series.allGroupedData = groupedYData;\n                    croppedData = series.cropData(groupedXData, groupedYData, xAxis.min, xAxis.max);\n                    groupedXData = croppedData.xData;\n                    groupedYData = croppedData.yData;\n                    series.cropStart = croppedData.start; // #15005\n                }\n                // Set series props\n                series.processedXData = groupedXData;\n                series.processedYData = groupedYData;\n            }\n            else {\n                series.groupMap = null;\n            }\n            series.hasGroupedData = hasGroupedData;\n            series.preventGraphAnimation =\n                (lastDataGrouping && lastDataGrouping.totalRange) !==\n                    (currentDataGrouping && currentDataGrouping.totalRange);\n        }\n        /**\n         * @private\n         */\n        function compose(SeriesClass) {\n            const seriesProto = SeriesClass.prototype;\n            if (!seriesProto.applyGrouping) {\n                const PointClass = SeriesClass.prototype.pointClass;\n                // Override point prototype to throw a warning when trying to update\n                // grouped points.\n                addEvent(PointClass, 'update', function () {\n                    if (this.dataGroup) {\n                        error(24, false, this.series.chart);\n                        return false;\n                    }\n                });\n                addEvent(SeriesClass, 'afterSetOptions', onAfterSetOptions);\n                addEvent(SeriesClass, 'destroy', destroyGroupedData);\n                extend(seriesProto, {\n                    applyGrouping,\n                    destroyGroupedData,\n                    generatePoints,\n                    getDGApproximation,\n                    groupData\n                });\n            }\n        }\n        /**\n         * Destroy the grouped data points. #622, #740\n         * @private\n         */\n        function destroyGroupedData() {\n            // Clear previous groups\n            if (this.groupedData) {\n                this.groupedData.forEach(function (point, i) {\n                    if (point) {\n                        this.groupedData[i] = point.destroy ?\n                            point.destroy() : null;\n                    }\n                }, this);\n                // Clears all:\n                // - `this.groupedData`\n                // - `this.points`\n                // - `preserve` object in series.update()\n                this.groupedData.length = 0;\n                delete this.allGroupedData; // #19892\n            }\n        }\n        /**\n         * Override the generatePoints method by adding a reference to grouped data\n         * @private\n         */\n        function generatePoints() {\n            baseGeneratePoints.apply(this);\n            // Record grouped data in order to let it be destroyed the next time\n            // processData runs\n            this.destroyGroupedData(); // #622\n            this.groupedData = this.hasGroupedData ? this.points : null;\n        }\n        /**\n         * Set default approximations to the prototypes if present. Properties are\n         * inherited down. Can be overridden for individual series types.\n         * @private\n         */\n        function getDGApproximation() {\n            if (this.is('arearange')) {\n                return 'range';\n            }\n            if (this.is('ohlc')) {\n                return 'ohlc';\n            }\n            if (this.is('hlc')) {\n                return 'hlc';\n            }\n            if (\n            // #18974, default approximation for cumulative\n            // should be `sum` when `dataGrouping` is enabled\n            this.is('column') ||\n                this.options.cumulative) {\n                return 'sum';\n            }\n            return 'average';\n        }\n        /**\n         * Highcharts Stock only. Takes parallel arrays of x and y data and groups the\n         * data into intervals defined by groupPositions, a collection of starting x\n         * values for each group.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Series#groupData\n         * @param {Array<number>} xData\n         *        Parallel array of x data.\n         * @param {Array<(number|null|undefined)>|Array<Array<(number|null|undefined)>>} yData\n         *        Parallel array of y data.\n         * @param {Array<number>} groupPositions\n         *        Group positions.\n         * @param {string|Function} [approximation]\n         *        Approximation to use.\n         * @return {Highcharts.DataGroupingResultObject}\n         *         Mapped groups.\n         */\n        function groupData(xData, yData, groupPositions, approximation) {\n            const series = this, data = series.data, dataOptions = series.options && series.options.data, groupedXData = [], groupedYData = [], groupMap = [], dataLength = xData.length, \n            // When grouping the fake extended axis for panning, we don't need to\n            // consider y\n            handleYData = !!yData, values = [], pointArrayMap = series.pointArrayMap, pointArrayMapLength = pointArrayMap && pointArrayMap.length, extendedPointArrayMap = ['x'].concat(pointArrayMap || ['y']), groupAll = (this.options.dataGrouping &&\n                this.options.dataGrouping.groupAll);\n            let pointX, pointY, groupedY, pos = 0, start = 0;\n            const approximationFn = (typeof approximation === 'function' ?\n                approximation :\n                approximation && ApproximationRegistry[approximation] ?\n                    ApproximationRegistry[approximation] :\n                    ApproximationRegistry[(series.getDGApproximation && series.getDGApproximation() ||\n                        'average')]);\n            // Calculate values array size from pointArrayMap length\n            if (pointArrayMapLength) {\n                let len = pointArrayMap.length;\n                while (len--) {\n                    values.push([]);\n                }\n            }\n            else {\n                values.push([]);\n            }\n            const valuesLen = pointArrayMapLength || 1;\n            for (let i = 0; i <= dataLength; i++) {\n                // Start with the first point within the X axis range (#2696)\n                if (xData[i] < groupPositions[0]) {\n                    continue; // With next point\n                }\n                // When a new group is entered, summarize and initialize\n                // the previous group\n                while ((typeof groupPositions[pos + 1] !== 'undefined' &&\n                    xData[i] >= groupPositions[pos + 1]) ||\n                    i === dataLength) { // Get the last group\n                    // get group x and y\n                    pointX = groupPositions[pos];\n                    series.dataGroupInfo = {\n                        start: groupAll ? start : (series.cropStart + start),\n                        length: values[0].length,\n                        groupStart: pointX\n                    };\n                    groupedY = approximationFn.apply(series, values);\n                    // By default, let options of the first grouped point be passed over\n                    // to the grouped point. This allows preserving properties like\n                    // `name` and `color` or custom properties. Implementers can\n                    // override this from the approximation function, where they can\n                    // write custom options to `this.dataGroupInfo.options`.\n                    if (series.pointClass && !defined(series.dataGroupInfo.options)) {\n                        // Convert numbers and arrays into objects\n                        series.dataGroupInfo.options = merge(series.pointClass.prototype\n                            .optionsToObject.call({ series: series }, series.options.data[series.cropStart + start]));\n                        // Make sure the raw data (x, y, open, high etc) is not copied\n                        // over and overwriting approximated data.\n                        extendedPointArrayMap.forEach(function (key) {\n                            delete series.dataGroupInfo.options[key];\n                        });\n                    }\n                    // Push the grouped data\n                    if (typeof groupedY !== 'undefined') {\n                        groupedXData.push(pointX);\n                        groupedYData.push(groupedY);\n                        groupMap.push(series.dataGroupInfo);\n                    }\n                    // Reset the aggregate arrays\n                    start = i;\n                    for (let j = 0; j < valuesLen; j++) {\n                        values[j].length = 0; // Faster than values[j] = []\n                        values[j].hasNulls = false;\n                    }\n                    // Advance on the group positions\n                    pos += 1;\n                    // Don't loop beyond the last group\n                    if (i === dataLength) {\n                        break;\n                    }\n                }\n                // Break out\n                if (i === dataLength) {\n                    break;\n                }\n                // For each raw data point, push it to an array that contains all values\n                // for this specific group\n                if (pointArrayMap) {\n                    const index = (series.options.dataGrouping &&\n                        series.options.dataGrouping.groupAll ?\n                        i : series.cropStart + i), point = (data && data[index]) ||\n                        series.pointClass.prototype.applyOptions.apply({\n                            series: series\n                        }, [dataOptions[index]]);\n                    let val;\n                    for (let j = 0; j < pointArrayMapLength; j++) {\n                        val = point[pointArrayMap[j]];\n                        if (isNumber(val)) {\n                            values[j].push(val);\n                        }\n                        else if (val === null) {\n                            values[j].hasNulls = true;\n                        }\n                    }\n                }\n                else {\n                    pointY = handleYData ? yData[i] : null;\n                    if (isNumber(pointY)) {\n                        values[0].push(pointY);\n                    }\n                    else if (pointY === null) {\n                        values[0].hasNulls = true;\n                    }\n                }\n            }\n            return {\n                groupedXData,\n                groupedYData,\n                groupMap\n            };\n        }\n        /**\n         * Handle default options for data grouping. This must be set at runtime because\n         * some series types are defined after this.\n         * @private\n         */\n        function onAfterSetOptions(e) {\n            const options = e.options, type = this.type, plotOptions = this.chart.options.plotOptions, \n            // External series, for example technical indicators should also inherit\n            // commonOptions which are not available outside this module\n            baseOptions = (this.useCommonDataGrouping &&\n                DataGroupingDefaults.common), seriesSpecific = DataGroupingDefaults.seriesSpecific;\n            let defaultOptions = D.defaultOptions.plotOptions[type].dataGrouping;\n            if (plotOptions && (seriesSpecific[type] || baseOptions)) { // #1284\n                const rangeSelector = this.chart.rangeSelector;\n                if (!defaultOptions) {\n                    defaultOptions = merge(DataGroupingDefaults.common, seriesSpecific[type]);\n                }\n                options.dataGrouping = merge(baseOptions, defaultOptions, plotOptions.series && plotOptions.series.dataGrouping, // #1228\n                // Set by the StockChart constructor:\n                plotOptions[type].dataGrouping, this.userOptions.dataGrouping, !options.isInternal &&\n                    rangeSelector &&\n                    isNumber(rangeSelector.selected) &&\n                    rangeSelector.buttonOptions[rangeSelector.selected].dataGrouping);\n            }\n        }\n        /**\n         * @private\n         */\n        function skipDataGrouping(series, force) {\n            return !(series.isCartesian &&\n                !series.isDirty &&\n                !series.xAxis.isDirty &&\n                !series.yAxis.isDirty &&\n                !force);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingSeriesComposition = {\n            compose,\n            groupData\n        };\n\n        return DataGroupingSeriesComposition;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGrouping.js', [_modules['Extensions/DataGrouping/DataGroupingAxisComposition.js'], _modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Extensions/DataGrouping/DataGroupingSeriesComposition.js'], _modules['Core/Templating.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (DataGroupingAxisComposition, DataGroupingDefaults, DataGroupingSeriesComposition, F, H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { format } = F;\n        const { composed } = H;\n        const { addEvent, extend, isNumber, pick, pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(AxisClass, SeriesClass, TooltipClass) {\n            DataGroupingAxisComposition.compose(AxisClass);\n            DataGroupingSeriesComposition.compose(SeriesClass);\n            if (TooltipClass &&\n                pushUnique(composed, 'DataGrouping')) {\n                addEvent(TooltipClass, 'headerFormatter', onTooltipHeaderFormatter);\n            }\n        }\n        /**\n         * Extend the original method, make the tooltip's header reflect the grouped\n         * range.\n         * @private\n         */\n        function onTooltipHeaderFormatter(e) {\n            const chart = this.chart, time = chart.time, labelConfig = e.labelConfig, series = labelConfig.series, point = labelConfig.point, options = series.options, tooltipOptions = series.tooltipOptions, dataGroupingOptions = options.dataGrouping, xAxis = series.xAxis;\n            let xDateFormat = tooltipOptions.xDateFormat, xDateFormatEnd, currentDataGrouping, dateTimeLabelFormats, labelFormats, formattedKey, formatString = tooltipOptions[e.isFooter ? 'footerFormat' : 'headerFormat'];\n            // Apply only to grouped series\n            if (xAxis &&\n                xAxis.options.type === 'datetime' &&\n                dataGroupingOptions &&\n                isNumber(labelConfig.key)) {\n                // Set variables\n                currentDataGrouping = series.currentDataGrouping;\n                dateTimeLabelFormats = dataGroupingOptions.dateTimeLabelFormats ||\n                    // Fallback to commonOptions (#9693)\n                    DataGroupingDefaults.common.dateTimeLabelFormats;\n                // If we have grouped data, use the grouping information to get the\n                // right format\n                if (currentDataGrouping) {\n                    labelFormats = dateTimeLabelFormats[currentDataGrouping.unitName];\n                    if (currentDataGrouping.count === 1) {\n                        xDateFormat = labelFormats[0];\n                    }\n                    else {\n                        xDateFormat = labelFormats[1];\n                        xDateFormatEnd = labelFormats[2];\n                    }\n                    // If not grouped, and we don't have set the xDateFormat option, get the\n                    // best fit, so if the least distance between points is one minute, show\n                    // it, but if the least distance is one day, skip hours and minutes etc.\n                }\n                else if (!xDateFormat && dateTimeLabelFormats && xAxis.dateTime) {\n                    xDateFormat = xAxis.dateTime.getXDateFormat(labelConfig.x, tooltipOptions.dateTimeLabelFormats);\n                }\n                const groupStart = pick(series.groupMap?.[point.index].groupStart, labelConfig.key), groupEnd = groupStart + currentDataGrouping?.totalRange - 1;\n                formattedKey = time.dateFormat(xDateFormat, groupStart);\n                if (xDateFormatEnd) {\n                    formattedKey += time.dateFormat(xDateFormatEnd, groupEnd);\n                }\n                // Replace default header style with class name\n                if (series.chart.styledMode) {\n                    formatString = this.styledModeFormat(formatString);\n                }\n                // Return the replaced format\n                e.text = format(formatString, {\n                    point: extend(labelConfig.point, { key: formattedKey }),\n                    series: series\n                }, chart);\n                e.preventDefault();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingComposition = {\n            compose,\n            groupData: DataGroupingSeriesComposition.groupData\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"average\"|\"averages\"|\"open\"|\"high\"|\"low\"|\"close\"|\"sum\"} Highcharts.DataGroupingApproximationValue\n         */\n        /**\n         * The position of the point inside the group.\n         *\n         * @typedef    {\"start\"|\"middle\"|\"end\"} Highcharts.DataGroupingAnchor\n         */\n        /**\n         * The position of the first or last point in the series inside the group.\n         *\n         * @typedef    {\"start\"|\"middle\"|\"end\"|\"firstPoint\"|\"lastPoint\"} Highcharts.DataGroupingAnchorExtremes\n         */\n        /**\n         * Highcharts Stock only.\n         *\n         * @product highstock\n         * @interface Highcharts.DataGroupingInfoObject\n         */ /**\n        * @name Highcharts.DataGroupingInfoObject#length\n        * @type {number}\n        */ /**\n        * @name Highcharts.DataGroupingInfoObject#options\n        * @type {Highcharts.SeriesOptionsType|undefined}\n        */ /**\n        * @name Highcharts.DataGroupingInfoObject#start\n        * @type {number}\n        */\n        /**\n         * Highcharts Stock only.\n         *\n         * @product highstock\n         * @interface Highcharts.DataGroupingResultObject\n         */ /**\n        * @name Highcharts.DataGroupingResultObject#groupedXData\n        * @type {Array<number>}\n        */ /**\n        * @name Highcharts.DataGroupingResultObject#groupedYData\n        * @type {Array<(number|null|undefined)>|Array<Array<(number|null|undefined)>>}\n        */ /**\n        * @name Highcharts.DataGroupingResultObject#groupMap\n        * @type {Array<DataGroupingInfoObject>}\n        */\n        /**\n         * Highcharts Stock only. If a point object is created by data\n         * grouping, it doesn't reflect actual points in the raw\n         * data. In this case, the `dataGroup` property holds\n         * information that points back to the raw data.\n         *\n         * - `dataGroup.start` is the index of the first raw data\n         *   point in the group.\n         *\n         * - `dataGroup.length` is the amount of points in the\n         *   group.\n         *\n         * @sample stock/members/point-datagroup\n         *         Click to inspect raw data points\n         *\n         * @product highstock\n         *\n         * @name Highcharts.Point#dataGroup\n         * @type {Highcharts.DataGroupingInfoObject|undefined}\n         */\n        (''); // Detach doclets above\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Data grouping is the concept of sampling the data values into larger\n         * blocks in order to ease readability and increase performance of the\n         * JavaScript charts. Highcharts Stock by default applies data grouping when\n         * the points become closer than a certain pixel value, determined by\n         * the `groupPixelWidth` option.\n         *\n         * If data grouping is applied, the grouping information of grouped\n         * points can be read from the [Point.dataGroup](\n         * /class-reference/Highcharts.Point#dataGroup). If point options other than\n         * the data itself are set, for example `name` or `color` or custom properties,\n         * the grouping logic doesn't know how to group it. In this case the options of\n         * the first point instance are copied over to the group point. This can be\n         * altered through a custom `approximation` callback function.\n         *\n         * @declare   Highcharts.DataGroupingOptionsObject\n         * @product   highstock\n         * @requires  product:highstock\n         * @requires  module:modules/datagrouping\n         * @apioption plotOptions.series.dataGrouping\n         */\n        /**\n         * Specifies how the points should be located on the X axis inside the group.\n         * Points that are extremes can be set separately. Available options:\n         *\n         * - `start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * - `middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * - `end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-anchor\n         *         Changing the point x-coordinate inside the group.\n         *\n         * @see [dataGrouping.firstAnchor](#plotOptions.series.dataGrouping.firstAnchor)\n         * @see [dataGrouping.lastAnchor](#plotOptions.series.dataGrouping.lastAnchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchor}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.anchor\n         */\n        /**\n         * The method of approximation inside a group. When for example 30 days\n         * are grouped into one month, this determines what value should represent\n         * the group. Possible values are \"average\", \"averages\", \"open\", \"high\",\n         * \"low\", \"close\" and \"sum\". For OHLC and candlestick series the approximation\n         * is \"ohlc\" by default, which finds the open, high, low and close values\n         * within all the grouped data. For ranges, the approximation is \"range\",\n         * which finds the low and high values. For multi-dimensional data,\n         * like ranges and OHLC, \"averages\" will compute the average for each\n         * dimension.\n         *\n         * Custom aggregate methods can be added by assigning a callback function\n         * as the approximation. This function takes a numeric array as the\n         * argument and should return a single numeric value or `null`. Note\n         * that the numeric array will never contain null values, only true\n         * numbers. Instead, if null values are present in the raw data, the\n         * numeric array will have an `.hasNulls` property set to `true`. For\n         * single-value data sets the data is available in the first argument\n         * of the callback function. For OHLC data sets, all the open values\n         * are in the first argument, all high values in the second etc.\n         *\n         * Since v4.2.7, grouping meta data is available in the approximation\n         * callback from `this.dataGroupInfo`. It can be used to extract information\n         * from the raw data.\n         *\n         * Defaults to `average` for line-type series, `sum` for columns, `range`\n         * for range series, `hlc` for HLC, and `ohlc` for OHLC and candlestick.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-approximation\n         *         Approximation callback with custom data\n         * @sample {highstock} stock/plotoptions/series-datagrouping-simple-approximation\n         *         Simple approximation demo\n         *\n         * @type       {Highcharts.DataGroupingApproximationValue|Function}\n         * @apioption  plotOptions.series.dataGrouping.approximation\n         */\n        /**\n         * Datetime formats for the header of the tooltip in a stock chart.\n         * The format can vary within a chart depending on the currently selected\n         * time range and the current data grouping.\n         *\n         * The default formats are:\n         * ```js\n         * {\n         *     millisecond: [\n         *         '%A, %e %b, %H:%M:%S.%L', '%A, %e %b, %H:%M:%S.%L', '-%H:%M:%S.%L'\n         *     ],\n         *     second: ['%A, %e %b, %H:%M:%S', '%A, %e %b, %H:%M:%S', '-%H:%M:%S'],\n         *     minute: ['%A, %e %b, %H:%M', '%A, %e %b, %H:%M', '-%H:%M'],\n         *     hour: ['%A, %e %b, %H:%M', '%A, %e %b, %H:%M', '-%H:%M'],\n         *     day: ['%A, %e %b %Y', '%A, %e %b', '-%A, %e %b %Y'],\n         *     week: ['Week from %A, %e %b %Y', '%A, %e %b', '-%A, %e %b %Y'],\n         *     month: ['%B %Y', '%B', '-%B %Y'],\n         *     year: ['%Y', '%Y', '-%Y']\n         * }\n         * ```\n         *\n         * For each of these array definitions, the first item is the format\n         * used when the active time span is one unit. For instance, if the\n         * current data applies to one week, the first item of the week array\n         * is used. The second and third items are used when the active time\n         * span is more than two units. For instance, if the current data applies\n         * to two weeks, the second and third item of the week array are used,\n         *  and applied to the start and end date of the time span.\n         *\n         * @type      {Object}\n         * @apioption plotOptions.series.dataGrouping.dateTimeLabelFormats\n         */\n        /**\n         * Enable or disable data grouping.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @apioption plotOptions.series.dataGrouping.enabled\n         */\n        /**\n         * Specifies how the first grouped point is positioned on the xAxis.\n         * If firstAnchor and/or lastAnchor are defined, then those options take\n         * precedence over anchor for the first and/or last grouped points.\n         * Available options:\n         *\n         * -`start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * -`middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * -`end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * -`firstPoint` the first point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n         *\n         * -`lastPoint` the last point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n         *         Applying first and last anchor.\n         *\n         * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchorExtremes}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.firstAnchor\n         */\n        /**\n         * When data grouping is forced, it runs no matter how small the intervals\n         * are. This can be handy for example when the sum should be calculated\n         * for values appearing at random times within each hour.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @apioption plotOptions.series.dataGrouping.forced\n         */\n        /**\n         * The approximate pixel width of each group. If for example a series\n         * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n         * is performed. If however the series contains so many points that\n         * the spacing is less than the groupPixelWidth, Highcharts will try\n         * to group it into appropriate groups so that each is more or less\n         * two pixels wide. If multiple series with different group pixel widths\n         * are drawn on the same x axis, all series will take the greatest width.\n         * For example, line series have 2px default group width, while column\n         * series have 10px. If combined, both the line and the column will\n         * have 10px by default.\n         *\n         * @type      {number}\n         * @default   2\n         * @apioption plotOptions.series.dataGrouping.groupPixelWidth\n         */\n        /**\n         * By default only points within the visible range are grouped. Enabling this\n         * option will force data grouping to calculate all grouped points for a given\n         * dataset. That option prevents for example a column series from calculating\n         * a grouped point partially. The effect is similar to\n         * [Series.getExtremesFromAll](#plotOptions.series.getExtremesFromAll) but does\n         * not affect yAxis extremes.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-groupall/\n         *         Two series with the same data but different groupAll setting\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     6.1.0\n         * @apioption plotOptions.series.dataGrouping.groupAll\n         */\n        /**\n         * Specifies how the last grouped point is positioned on the xAxis.\n         * If firstAnchor and/or lastAnchor are defined, then those options take\n         * precedence over anchor for the first and/or last grouped points.\n         * Available options:\n         *\n         * -`start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * -`middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * -`end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * -`firstPoint` the first point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n         *\n         * -`lastPoint` the last point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n         *         Applying first and last anchor.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-last-anchor\n         *         Applying the last anchor in the chart with live data.\n         *\n         * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchorExtremes}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.lastAnchor\n         */\n        /**\n         * Normally, a group is indexed by the start of that group, so for example\n         * when 30 daily values are grouped into one month, that month's x value\n         * will be the 1st of the month. This apparently shifts the data to\n         * the left. When the smoothed option is true, this is compensated for.\n         * The data is shifted to the middle of the group, and min and max\n         * values are preserved. Internally, this is used in the Navigator series.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @deprecated\n         * @apioption plotOptions.series.dataGrouping.smoothed\n         */\n        /**\n         * An array determining what time intervals the data is allowed to be\n         * grouped to. Each array item is an array where the first value is\n         * the time unit and the second value another array of allowed multiples.\n         *\n         * Defaults to:\n         * ```js\n         * units: [[\n         *     'millisecond', // unit name\n         *     [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n         * ], [\n         *     'second',\n         *     [1, 2, 5, 10, 15, 30]\n         * ], [\n         *     'minute',\n         *     [1, 2, 5, 10, 15, 30]\n         * ], [\n         *     'hour',\n         *     [1, 2, 3, 4, 6, 8, 12]\n         * ], [\n         *     'day',\n         *     [1]\n         * ], [\n         *     'week',\n         *     [1]\n         * ], [\n         *     'month',\n         *     [1, 3, 6]\n         * ], [\n         *     'year',\n         *     null\n         * ]]\n         * ```\n         *\n         * @type      {Array<Array<string,(Array<number>|null)>>}\n         * @apioption plotOptions.series.dataGrouping.units\n         */\n        /**\n         * The approximate pixel width of each group. If for example a series\n         * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n         * is performed. If however the series contains so many points that\n         * the spacing is less than the groupPixelWidth, Highcharts will try\n         * to group it into appropriate groups so that each is more or less\n         * two pixels wide. Defaults to `10`.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-grouppixelwidth/\n         *         Two series with the same data density but different groupPixelWidth\n         *\n         * @type      {number}\n         * @default   10\n         * @apioption plotOptions.column.dataGrouping.groupPixelWidth\n         */\n        ''; // Required by JSDoc parsing\n\n        return DataGroupingComposition;\n    });\n    _registerModule(_modules, 'masters/modules/datagrouping.src.js', [_modules['Core/Globals.js'], _modules['Extensions/DataGrouping/ApproximationDefaults.js'], _modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Extensions/DataGrouping/DataGrouping.js']], function (Highcharts, ApproximationDefaults, ApproximationRegistry, DataGrouping) {\n\n        const G = Highcharts;\n        G.dataGrouping = G.dataGrouping || {};\n        G.dataGrouping.approximationDefaults = (G.dataGrouping.approximationDefaults ||\n            ApproximationDefaults);\n        G.dataGrouping.approximations = (G.dataGrouping.approximations ||\n            ApproximationRegistry);\n        DataGrouping.compose(G.Axis, G.Series, G.Tooltip);\n\n        return Highcharts;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/NavigationBindingsUtilities.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft, Black Label\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defined, isNumber, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Define types for editable fields per annotation. There is no need to define\n         * numbers, because they won't change their type to string.\n         * @private\n         */\n        const annotationsFieldsTypes = {\n            backgroundColor: 'string',\n            borderColor: 'string',\n            borderRadius: 'string',\n            color: 'string',\n            fill: 'string',\n            fontSize: 'string',\n            labels: 'string',\n            name: 'string',\n            stroke: 'string',\n            title: 'string'\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Returns the first xAxis or yAxis that was clicked with its value.\n         *\n         * @private\n         *\n         * @param {Array<Highcharts.PointerAxisCoordinateObject>} coords\n         *        All the chart's x or y axes with a current pointer's axis value.\n         *\n         * @return {Highcharts.PointerAxisCoordinateObject}\n         *         Object with a first found axis and its value that pointer\n         *         is currently pointing.\n         */\n        function getAssignedAxis(coords) {\n            return coords.filter((coord) => {\n                const extremes = coord.axis.getExtremes(), axisMin = extremes.min, axisMax = extremes.max, \n                // Correct axis edges when axis has series\n                // with pointRange (like column)\n                minPointOffset = pick(coord.axis.minPointOffset, 0);\n                return isNumber(axisMin) && isNumber(axisMax) &&\n                    coord.value >= (axisMin - minPointOffset) &&\n                    coord.value <= (axisMax + minPointOffset) &&\n                    // Don't count navigator axis\n                    !coord.axis.options.isInternal;\n            })[0]; // If the axes overlap, return the first axis that was found.\n        }\n        /**\n         * Get field type according to value\n         *\n         * @private\n         *\n         * @param {'boolean'|'number'|'string'} value\n         * Atomic type (one of: string, number, boolean)\n         *\n         * @return {'checkbox'|'number'|'text'}\n         * Field type (one of: text, number, checkbox)\n         */\n        function getFieldType(key, value) {\n            const predefinedType = annotationsFieldsTypes[key];\n            let fieldType = typeof value;\n            if (defined(predefinedType)) {\n                fieldType = predefinedType;\n            }\n            return {\n                'string': 'text',\n                'number': 'number',\n                'boolean': 'checkbox'\n            }[fieldType];\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigationBindingUtilities = {\n            annotationsFieldsTypes,\n            getAssignedAxis,\n            getFieldType\n        };\n\n        return NavigationBindingUtilities;\n    });\n    _registerModule(_modules, 'Extensions/MouseWheelZoom/MouseWheelZoom.js', [_modules['Core/Utilities.js'], _modules['Extensions/Annotations/NavigationBindingsUtilities.js']], function (U, NBU) {\n        /* *\n         *\n         *  (c) 2023 Torstein Honsi, Askel Eirik Johansson\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, isObject, pick, defined, merge } = U;\n        const { getAssignedAxis } = NBU;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedClasses = [], defaultOptions = {\n            enabled: true,\n            sensitivity: 1.1\n        };\n        let wheelTimer;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        const optionsToObject = (options) => {\n            if (!isObject(options)) {\n                options = {\n                    enabled: options ?? true\n                };\n            }\n            return merge(defaultOptions, options);\n        };\n        /**\n         * @private\n         */\n        const zoomBy = function (chart, howMuch, xAxis, yAxis, mouseX, mouseY, options) {\n            const type = pick(options.type, chart.zooming.type, '');\n            let axes = [];\n            if (type === 'x') {\n                axes = xAxis;\n            }\n            else if (type === 'y') {\n                axes = yAxis;\n            }\n            else if (type === 'xy') {\n                axes = chart.axes;\n            }\n            const hasZoomed = chart.transform({\n                axes,\n                // Create imaginary reference and target rectangles around the mouse\n                // point that scales up or down with `howMuch`;\n                to: {\n                    x: mouseX - 5,\n                    y: mouseY - 5,\n                    // Must use 10 to get passed the limit for too small reference.\n                    // Below this, the transform will default to a pan.\n                    width: 10,\n                    height: 10\n                },\n                from: {\n                    x: mouseX - 5 * howMuch,\n                    y: mouseY - 5 * howMuch,\n                    width: 10 * howMuch,\n                    height: 10 * howMuch\n                },\n                trigger: 'mousewheel'\n            });\n            if (hasZoomed) {\n                if (defined(wheelTimer)) {\n                    clearTimeout(wheelTimer);\n                }\n                // Some time after the last mousewheel event, run drop. In case any of\n                // the affected axes had `startOnTick` or `endOnTick`, they will be\n                // re-adjusted now.\n                wheelTimer = setTimeout(() => {\n                    chart.pointer?.drop();\n                }, 400);\n            }\n            return hasZoomed;\n        };\n        /**\n         * @private\n         */\n        function onAfterGetContainer() {\n            const wheelZoomOptions = optionsToObject(this.zooming.mouseWheel);\n            if (wheelZoomOptions.enabled) {\n                addEvent(this.container, 'wheel', (e) => {\n                    e = this.pointer?.normalize(e) || e;\n                    const { pointer } = this, allowZoom = pointer && !pointer.inClass(e.target, 'highcharts-no-mousewheel');\n                    // Firefox uses e.detail, WebKit and IE uses deltaX, deltaY, deltaZ.\n                    if (this.isInsidePlot(e.chartX - this.plotLeft, e.chartY - this.plotTop) && allowZoom) {\n                        const wheelSensitivity = wheelZoomOptions.sensitivity || 1.1, delta = e.detail || ((e.deltaY || 0) / 120), xAxisCoords = getAssignedAxis(pointer.getCoordinates(e).xAxis), yAxisCoords = getAssignedAxis(pointer.getCoordinates(e).yAxis);\n                        const hasZoomed = zoomBy(this, Math.pow(wheelSensitivity, delta), xAxisCoords ? [xAxisCoords.axis] : this.xAxis, yAxisCoords ? [yAxisCoords.axis] : this.yAxis, e.chartX, e.chartY, wheelZoomOptions);\n                        // Prevent page scroll\n                        if (hasZoomed) {\n                            e.preventDefault?.();\n                        }\n                    }\n                });\n            }\n        }\n        /**\n         * @private\n         */\n        function compose(ChartClass) {\n            if (composedClasses.indexOf(ChartClass) === -1) {\n                composedClasses.push(ChartClass);\n                addEvent(ChartClass, 'afterGetContainer', onAfterGetContainer);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const MouseWheelZoomComposition = {\n            compose\n        };\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * The mouse wheel zoom is a feature included in Highcharts Stock, but is also\n         * available for Highcharts Core as a module. Zooming with the mouse wheel is\n         * enabled by default in Highcharts Stock. In Highcharts Core it is enabled if\n         * [chart.zooming.type](chart.zooming.type) is set. It can be disabled by\n         * setting this option to `false`.\n         *\n         * @type      {boolean|object}\n         * @since 11.1.0\n         * @requires  modules/mouse-wheel-zoom\n         * @sample    {highcharts} highcharts/mouse-wheel-zoom/enabled\n         *            Enable or disable\n         * @sample    {highstock} stock/mouse-wheel-zoom/enabled\n         *            Enable or disable\n         * @apioption chart.zooming.mouseWheel\n         */\n        /**\n         * Zooming with the mouse wheel can be disabled by setting this option to\n         * `false`.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @since 11.1.0\n         * @requires  modules/mouse-wheel-zoom\n         * @apioption chart.zooming.mouseWheel.enabled\n         */\n        /**\n         * Adjust the sensitivity of the zoom. Sensitivity of mouse wheel or trackpad\n         * scrolling. `1` is no sensitivity, while with `2`, one mouse wheel delta will\n         * zoom in `50%`.\n         *\n         * @type      {number}\n         * @default   1.1\n         * @since 11.1.0\n         * @requires  modules/mouse-wheel-zoom\n         * @sample    {highcharts} highcharts/mouse-wheel-zoom/sensitivity\n         *            Change mouse wheel zoom sensitivity\n         * @sample    {highstock} stock/mouse-wheel-zoom/sensitivity\n         *            Change mouse wheel zoom sensitivity\n         * @apioption chart.zooming.mouseWheel.sensitivity\n         */\n        /**\n         * Decides in what dimensions the user can zoom scrolling the wheel. Can be one\n         * of `x`, `y` or `xy`. In Highcharts Core, if not specified here, it will\n         * inherit the type from [chart.zooming.type](chart.zooming.type). In Highcharts\n         * Stock, it defaults to `x`.\n         *\n         * Note that particularly with mouse wheel in the y direction, the zoom is\n         * affected by the default [yAxis.startOnTick](#yAxis.startOnTick) and\n         * [endOnTick]((#yAxis.endOnTick)) settings. In order to respect these settings,\n         * the zoom level will adjust after the user has stopped zooming. To prevent\n         * this, consider setting `startOnTick` and `endOnTick` to `false`.\n         *\n         * @type      {string}\n         * @default   {highcharts} undefined\n         * @default   {highstock} x\n         * @validvalue [\"x\", \"y\", \"xy\"]\n         * @since 11.1.0\n         * @requires  modules/mouse-wheel-zoom\n         * @apioption chart.zooming.mouseWheel.type\n         */\n        (''); // Keeps doclets above in JS file\n\n        return MouseWheelZoomComposition;\n    });\n    _registerModule(_modules, 'masters/modules/mouse-wheel-zoom.src.js', [_modules['Core/Globals.js'], _modules['Extensions/MouseWheelZoom/MouseWheelZoom.js']], function (Highcharts, MouseWheelZoom) {\n\n        const G = Highcharts;\n        G.MouseWheelZoom = G.MouseWheelZoom || MouseWheelZoom;\n        G.MouseWheelZoom.compose(G.Chart);\n\n        return Highcharts;\n    });\n    _registerModule(_modules, 'masters/modules/stock.src.js', [_modules['Core/Globals.js'], _modules['Series/DataModifyComposition.js'], _modules['Stock/Navigator/Navigator.js'], _modules['Core/Axis/OrdinalAxis.js'], _modules['Stock/RangeSelector/RangeSelector.js'], _modules['Stock/Scrollbar/Scrollbar.js'], _modules['Core/Chart/StockChart.js'], _modules['Series/OHLC/OHLCSeries.js'], _modules['Series/Flags/FlagsSeries.js']], function (Highcharts, DataModifyComposition, Navigator, OrdinalAxis, RangeSelector, Scrollbar, StockChart, OHLCSeries, FlagsSeries) {\n\n        const G = Highcharts;\n        // Classes\n        G.Navigator = G.Navigator || Navigator;\n        G.OrdinalAxis = G.OrdinalAxis || OrdinalAxis;\n        G.RangeSelector = G.RangeSelector || RangeSelector;\n        G.Scrollbar = G.Scrollbar || Scrollbar;\n        // Functions\n        G.stockChart = G.stockChart || StockChart.stockChart;\n        G.StockChart = G.StockChart || G.stockChart;\n        G.extend(G.StockChart, StockChart);\n        // Compositions\n        DataModifyComposition.compose(G.Series, G.Axis, G.Point);\n        FlagsSeries.compose(G.Renderer);\n        OHLCSeries.compose(G.Series);\n        G.Navigator.compose(G.Chart, G.Axis, G.Series);\n        G.OrdinalAxis.compose(G.Axis, G.Series, G.Chart);\n        G.RangeSelector.compose(G.Axis, G.Chart);\n        G.Scrollbar.compose(G.Axis);\n        G.StockChart.compose(G.Chart, G.Axis, G.Series, G.SVGRenderer);\n\n        return Highcharts;\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","Axis","Point","Series","U","DataModifyComposition","tooltipFormatter","pointTooltipFormatter","prototype","addEvent","arrayMax","arrayMin","correctFloat","defined","isArray","isNumber","isString","pick","setModifier","mode","modeState","redraw","isXAxis","series","forEach","setCompare","setCumulative","chart","pointFormat","point","numberFormatter","replace","value","tooltipOptions","changeDecimals","change","cumulativeSum","afterInit","dataModify","compare","options","cumulative","Additions","initCompare","initCumulative","afterGetExtremes","e","dataExtremes","activeYData","extremes","modifyValue","dataMin","dataMax","length","getCumulativeExtremes","seriesSetCompare","userOptions","update","points","afterProcessData","xAxis","processedYData","processedXData","compareStart","keyIndex","i","pointArrayMap","indexOf","pointValKey","compareValue","min","axisSetCompare","seriesSetCumulative","axisSetCumulative","compose","SeriesClass","AxisClass","PointClass","axisProto","pointProto","seriesProto","constructor","cumulativeDataMin","Infinity","cumulativeDataMax","reduce","prev","cur","sum","Math","max","index","compareBase","prevPoint","H","NavigatorConstructor","isTouchDevice","merge","composedMembers","onChartAfterAddSeries","navigator","setBaseSeries","onChartAfterSetChartSize","legendOptions","yAxis","legend","scrollbarHeight","scrollButtonSize","inverted","left","opposite","chartWidth","height","spacing","top","plotTop","plotLeft","navigatorOptions","chartHeight","scrollbar","margin","rangeSelector","extraBottomMargin","getHeight","verticalAlign","layout","enabled","floating","legendHeight","titleOffset","setAxisSize","onChartAfterUpdate","event","scroller","animation","onChartBeforeRender","onChartBeforeShowResetZoom","chartOptions","zooming","type","pinchType","onChartCallback","getExtremes","render","onChartUpdate","scrollbarOptions","ChartClass","NavigatorClass","pushUnique","chartProto","callbacks","push","onAxisInit","axis","navigatorAxis","NavigatorAxisAdditions","onAxisSetExtremes","zoomed","zoomType","trigger","range","previousZoom","preventDefault","keepProps","includes","destroy","toFixedRange","pxMin","pxMax","fixedMin","fixedMax","halfPointRange","pointRange","newMin","translate","horiz","newMax","Color","SeriesRegistry","parse","color","seriesTypes","maskInside","handles","width","symbols","lineWidth","backgroundColor","borderColor","maskFill","setOpacity","get","outlineColor","outlineWidth","areaspline","fillOpacity","sonification","dataGrouping","approximation","groupPixelWidth","firstAnchor","anchor","lastAnchor","units","dataLabels","zIndex","id","className","lineColor","marker","threshold","tickLength","gridLineColor","gridLineWidth","tickPixelInterval","labels","align","style","fontSize","opacity","textOutline","x","y","crosshair","startOnTick","endOnTick","minPadding","maxPadding","title","text","tickWidth","_x","_y","halfWidth","markerPosition","round","setFixedRange","fixedRange","D","NavigatorDefaults","NavigatorSymbols","RendererRegistry","StockUtilities","setOptions","composed","getRendererType","extend","onSeriesAfterUpdate","isInternal","ScrollbarAxis","Scrollbar","axisMin","axisMax","scrollMin","scrollMax","onAxisAfterGetOffset","scrollbarsOffsets","axisOffset","size","onAxisAfterInit","vertical","renderer","to","from","unitedMin","unitedMax","reversed","shouldUpdateExtremes","DOMType","animate","setExtremes","setRange","onAxisAfterRender","offsetsIndex","offset","axisTitleMargin","axisMargin","position","xPosition","isNaN","ScrollbarClass","barBorderRadius","buttonBorderRadius","buttonsEnabled","liveRedraw","minWidth","step","barBackgroundColor","barBorderWidth","barBorderColor","buttonArrowColor","buttonBackgroundColor","buttonBorderColor","buttonBorderWidth","rifleColor","trackBackgroundColor","trackBorderColor","trackBorderRadius","trackBorderWidth","ScrollbarDefaults","defaultOptions","destroyObjectProperties","fireEvent","removeEvent","swapXY","seg","temp","len","_events","chartX","chartY","scrollbarButtons","scrollbarLeft","scrollbarStrokeWidth","scrollbarTop","init","addEvents","buttonsOrder","buttons","bar","scrollbarGroup","element","track","mouseDownHandler","bind","mouseMoveHandler","mouseUpHandler","buttonToMinClick","buttonToMaxClick","trackClick","ownerDocument","updatePosition","DOMEvent","cursorToScrollbarPosition","normalizedEvent","minWidthDifference","calculatedWidth","xOffset","barWidth","yOffset","removeEvents","prop","drawScrollbarButton","group","g","add","rect","addClass","styledMode","attr","stroke","fill","crisp","r","strokeWidth","arrow","pointer","normalize","mousePosition","initPositions","grabbedCenter","direction","touches","chartPosition","hasDragged","method","rendered","show","translateX","translateY","hide","scrollbarRifles","fromPX","newSize","fullWidth","toPX","ceil","newPos","floor","newRiflesPos","showFull","eventType","svg","boosted","ChartNavigatorComposition","NavigatorComposition","clamp","erase","find","splat","numExt","extreme","numbers","filter","call","Navigator","drawHandle","verb","parseInt","drawOutline","zoomedMin","zoomedMax","outline","halfOutline","outlineCorrection","navigatorSize","navigatorTop","lineTop","lineBtm","verticalMin","d","drawMasks","navigatorHeight","shades","shade","renderElements","mouseCursor","cursor","navigatorGroup","visibility","hasMask","css","handlesOptions","symbol","rotation","rotationOriginX","rotationOriginY","baseSeries","navigatorSeries","scrollbarXAxis","fake","navigatorEnabled","minRange","maxRange","navigatorWidth","plotWidth","plotHeight","toPixels","abs","toValue","currentRange","grabbedLeft","grabbedRight","fixedWidth","addMouseEvents","container","eventsToUnbind","onMouseMove","onMouseUp","getPartsEvents","renderTo","concat","modifyNavigatorAxisExtremes","eventName","events","name","navigatorItem","shadesMousedown","navigatorPosition","ext","dragOffset","reversedExtremes","getUnionExtremes","eventArguments","handlesMousedown","baseXAxis","reverse","otherHandlePos","fixedExtreme","pageX","setTimeout","unionExtremes","triggerOp","Object","keys","unbind","removeBaseSeriesEvents","adaptToUpdatedData","updatedDataHandler","modifyBaseAxisExtremes","scrollbarEnabled","Boolean","xAxisIndex","yAxisIndex","baseXaxis","isDirtyBox","breaks","ordinal","overscroll","keepOrdinalPadding","zoomEnabled","offsets","alignTicks","data","updateNavigatorSeries","unbindRedraw","scrollTrackWidth","valueRange","addBaseSeriesEvents","addChartEvents","returnFalseOnNoBaseSeries","ret","baseAxis","navAxis","navAxisOptions","baseAxisOptions","baseSeriesOptions","s","showInNavigator","navSeriesMixin","enableMouseTracking","linkedTo","padXAxis","showInLegend","stacking","states","inactive","navSeries","base","baseOptions","mergedNavSeriesOptions","chartNavigatorSeriesOptions","baseNavigatorOptions","linkedNavSeries","userNavOptions","visible","plotOptions","navigatorSeriesData","hasNavigatorData","slice","initSeries","setSortedData","userSeriesOptions","colors","setVisible","remove","getBaseSeriesMin","currentSeriesMin","xData","baseExtremes","baseMin","baseMax","baseDataMin","baseDataMax","stickToMin","stickToMax","convertOverscroll","hasSetExtremes","eventArgs","Number","MAX_VALUE","userMin","userMax","shouldStickToMax","shouldStickToMin","pointStart","setData","xDataMin","marginName","axes","coll","OrdinalAxis","error","timeUnits","getTimeTicks","normalizedInterval","startOfWeek","positions","closestDistance","findHigherRanks","higherRanks","tickPixelIntervalOption","time","segmentStarts","end","segmentPositions","hasCrossedHigherRank","info","outsideMax","start","groupPositions","lastGroupPosition","arguments","posLength","shift","unitRange","hour","dateFormat","translatedArr","distances","itemToRemove","translated","lastTranslated","medianDistance","distance","sort","splice","index2val","ordinalPositions","lin2val","val","localMin","old","localA","transA","getExtendedPositions","pixelVal","minPixelPadding","getIndexOfPoint","mantissa","leftNeighbour","rightNeighbour","getIndexInArray","findIndexOf","percent","onAxisFoundExtremes","originalOrdinalRange","onAxisAfterSetScale","isDirty","isOrdinal","onAxisInitialAxisTranslation","beforeSetTickPositions","tickInterval","postProcessTickInterval","onChartPan","originalEvent","panning","runBase","trimmedRange","mouseDownX","hoverPoints","closestPointRange","overscrollPointsRange","movedUnits","translationSlope","slope","extendedOrdinalPositions","extendedAxis","val2lin","setState","test","onSeriesUpdatedData","toIndex","ordinalIndex","ordinalLength","originalPositionsReference","diff","approximateIndexOffset","ordinal2lin","hasBreaks","brokenAxis","uniqueOrdinalPositions","dist","minIndex","maxIndex","useOrdinal","adjustOrdinalExtremesPoints","isBoosted","distanceBetweenPoint","reserveSpace","takeOrdinalPosition","a","b","unshift","pop","forceOrdinal","getOverscrollPositions","groupIntervalFactor","sortedArray","key","indirectSearch","middle","withOverscroll","grouping","currentDataGrouping","count","unitName","fakeAxis","fakeSeries","applyGrouping","getGroupPixelWidth","getGroupIntervalFactor","destroyGroupedData","noop","getProcessedData","forced","processData","hasExtremesChanged","basePointRange","xMin","xMax","median","ordinalArray","firstPointX","firstPointVal","hasPointsInside","some","firstPoint","plotX","ordinalPointPixelInterval","shiftIndex","extraRange","ordinalSlope","calculateOverscroll","overscrollPercentage","overscrollValue","pixelToPercent","limitedOverscrollValue","lang","rangeSelectorZoom","rangeSelectorFrom","rangeSelectorTo","allButtonsEnabled","buttonSpacing","dropdown","buttonTheme","padding","inputBoxBorderColor","inputBoxHeight","inputBoxWidth","inputDateFormat","inputDateParser","inputEditDateFormat","inputEnabled","inputPosition","inputSpacing","selected","buttonPosition","inputStyle","labelStyle","RangeSelectorDefaults","RangeSelectorConstructor","chartDestroyEvents","axisMinFromRange","rangeOptions","getTrueRange","timeName","date","Date","basePeriod","set","getTime","MIN_VALUE","_offsetMin","onChartAfterGetContainer","deferredYTDClick","clickButton","updateNames","setScale","getAxisMargins","extraTopMargin","alignTo","display","spacingBox","placed","onChartDestroy","iEnd","onChartGetMargins","rangeSelectorHeight","marginBottom","onChartRender","optionsRangeSelector","extraBottomMarginWas","extraTopMarginWas","RangeSelectorClass","minFromRange","RangeSelectorComposition","SVGElement","createElement","discardElement","objectEach","pad","pInt","RangeSelector","buttonOptions","defaultButtons","initialButtonGroupWidth","baseXAxisOptions","_range","rangeMin","minSetting","rangeSetting","ctx","ytdExtremes","addOffsetMin","setSelected","forcedDataGrouping","setDataGrouping","frozenStates","preserveDataGrouping","getYTDExtremes","useUTC","_offsetMax","selectedIndex","rangeSelectorButton","selectedOption","blurInputs","minInput","maxInput","blur","computeButtonRange","updateButtonStates","actualRange","hasNoData","hasVisibleSeries","day","ytdMin","ytdMax","selectedExists","isSelectedTooGreat","button","offsetRange","isSelected","isTooGreatRange","isTooSmallRange","state","isYTDButNotSelected","isAllButAlreadyShowingAll","isSameRange","month","year","disable","select","disabled","fixedTimes","millisecond","second","minute","week","offsetMin","offsetMax","getInputValue","input","defaultInputDateParser","setInputValue","inputTime","dateBox","minDateBox","maxDateBox","hcTimeAttr","getAttribute","updatedTime","previousTime","setAttribute","inputTypeFormats","setInputExtremes","format","showInput","inputGroup","isTextInput","border","offsetWidth","offsetHeight","hideInput","inputDate","split","join","str","isSafari","lastIndexOf","getTimezoneOffset","parts","UTC","drawInput","div","chartStyle","isMin","updateExtremes","chartAxis","label","on","focus","preferredInputType","char","boxShadow","textAlign","fontFamily","onfocus","onblur","doc","activeElement","keyDown","onchange","onkeypress","keyCode","onkeydown","onkeyup","getPosition","buttonTop","inputTop","now","startOfYear","ts","inputsZIndex","renderButtons","parentNode","insertBefore","minElems","minLabel","maxElems","maxLabel","getBBox","alignElements","buttonGroup","isMS","currentButtonIndex","zoomText","paddingLeft","paddingRight","textContent","textStr","callDefaultEvent","buttonEvents","click","isActive","hover","navButtonOptions","exporting","navigation","getXOffsetForExportButton","titleCollision","positionButtons","xOffsetForExportButton","alignButtonGroup","hasLoaded","handleCollision","alignTranslateY","alignAttr","groupHeight","marginTop","buttonLeft","maxButtonWidth","buttonWidth","bBox","groupsOverlap","buttonGroupWidth","inputGroupX","alignOptions","inputGroupWidth","buttonGroupX","moveInputsDown","collapseButtons","expandButtons","isCollapsed","userButtonTheme","getAttribs","hasActiveButton","showDropdown","hideDropdown","hasVisibleDropdown","rangeSelectorGroup","yPosition","buttonPositionY","inputPositionY","subtitle","rSelector","HTMLElement","Chart","F","getOptions","getDefaultAxisOptions","showLastLabel","categories","getForcedAxisOptions","axisOptions","StockChart","callback","xAxisOptions","yAxisOptions","mouseWheel","tooltip","crosshairs","isStock","map","createAxis","onAxisAfterDrawCrosshair","cross","log","logarithmic","tickInside","tickPosition","snap","crossLabel","posx","posy","formatOption","formatFormat","limit","lin2log","labelAlign","shape","colorIndex","borderRadius","labelGroup","borderWidth","fontWeight","plotY","formatter","dateTime","isInside","isPointInside","crossBox","right","anchorX","anchorY","onAxisAfterHideCrosshair","onAxisAutoLabelAlign","panes","_labelPanes","labelOptions","side","onAxisDestroy","onAxisGetPlotLinePath","isLinked","linkedParent","axisLeft","axisTop","result","translatedValue","force","x1","y1","x2","y2","uniqueAxes","transVal","acrossPanes","A","getAxis","otherColl","opt","axis2","unique","pos","skip","transB","crispPolyLine","onSeriesSetOptions","overrides","is","shadow","radius","seriesForceCropping","dataGroupingOptions","allowDG","svgRendererCrispPolyLine","SVGRendererClass","forceCropping","stockChart","c","column","pointClass","ColumnPoint","stickyTracking","HLCPoint","HLCSeriesDefaults","ColumnSeries","HLCSeries","extendStem","halfStrokeWidth","getPointPath","graphic","crispCorr","crispX","shapeArgs","plotClose","yBottom","plotHigh","close","drawSinglePoint","pointAttribs","getClassName","drawPoints","attribs","toYData","high","low","names","charAt","toUpperCase","tooltipPos","directTouch","pointAttrToOptions","registerSeriesType","hlc","OHLCPoint","open","resolveUpColor","upColor","resolveColor","getZone","zone","applyOptions","OHLCSeriesDefaults","onSeriesAfterSetOptions","useOhlcData","onSeriesInit","eventOptions","OHLCSeries","_args","plotOpen","CandlestickSeriesDefaults","ohlc","CandlestickSeries","isUp","upLineColor","stateOptions","reversedYAxis","topBox","bottomBox","hasTopWhisker","hasBottomWhisker","isNew","ttBelow","isValid","hasNewShapeType","symbolKey","allowOverlapX","stackDistance","fillColor","FlagsSymbols","modifiedMembers","flag","w","h","circle","createPinSymbol","labelX","startSeg","endSeg","labelY","RendererClass","OnSeriesComposition","columnProto","stableSort","getPlotBox","onSeries","optionsOnSeries","onData","lastPoint","onKey","leftPoint","lastX","rightPoint","distanceRatio","pointXOffset","barW","totalRange","substr","p0","p3","p1","controlPoints","p2","calculateCoord","t","pow","tMin","tMax","tMid","xMid","stackIndex","FlagsPoint","FlagsSeriesDefaults","R","distribute","wrap","FlagsSeries","setClip","outsideRight","centered","optionsY","boxesMap","boxes","useHTML","markerGroup","target","maxDistance","box","proceed","drawTracker","unbindMouseOver","otherPoint","raised","clip","sharedClipKey","sharedClips","forceCrop","invertible","noSharedTooltip","sorted","trackerGroups","buildKDTree","StackItem","BrokenAxis","setBreaks","onAxisAfterSetOptions","onAxisAfterSetTickPositions","tickPositions","newPositions","isInAnyBreak","onSeriesAfterGeneratePoints","connectNulls","isPointInBreak","onSeriesAfterRender","drawBreaks","seriesDrawBreaks","breakArray","breaksOutOfRange","brk","isOut","otherBreak","seriesGappedPath","groupingSize","gapSize","current","next","gapUnit","xRange","isNull","stack","stacks","stackKey","stackLabels","total","getGraphPath","gappedPath","isInBreak","repeat","inclusive","lin2Val","nval","val2Lin","findBreakAt","testKeep","inbrk","keep","showPoints","forceRedraw","axisBreak","setAxisTranslation","unitLength","breakArrayT","pointRangePadding","inBrk","move","breakSize","staticScale","minPointOffset","G","ApproximationRegistry","average","arr","hasNulls","ApproximationDefaults","averages","common","dateTimeLabelFormats","seriesSpecific","line","spline","area","arearange","columnrange","candlestick","heikinashi","DataGroupingDefaults","AxisConstructor","hasProcessed","doGrouping","dataLength","dgOptions","plotSizeX","onAfterSetScale","seriesOptions","DateTimeAxis","baseGeneratePoints","generatePoints","groupedXData","hasGroupedData","groupingEnabled","lastDataGrouping","croppedData","revertRequireSorting","requireSorting","skipDataGrouping","isCartesian","groupAll","yData","interval","normalizeTimeTickInterval","groupedData","groupData","groupedYData","smoothed","groupMap","anchorPoints","groupedDataLastIndex","anchorIndexIterator","anchorFirstIndex","firstGroupEnd","groupStart","groupLength","lastGroupStart","shiftInterval","allGroupedData","cropData","cropStart","preventGraphAnimation","getDGApproximation","dataOptions","handleYData","values","pointArrayMapLength","extendedPointArrayMap","pointX","pointY","groupedY","approximationFn","valuesLen","dataGroupInfo","optionsToObject","j","onAfterSetOptions","useCommonDataGrouping","dataGroup","DataGroupingAxisComposition","DataGroupingSeriesComposition","onTooltipHeaderFormatter","labelConfig","xDateFormat","xDateFormatEnd","labelFormats","formattedKey","formatString","isFooter","getXDateFormat","groupEnd","styledModeFormat","TooltipClass","DataGrouping","approximationDefaults","approximations","Tooltip","annotationsFieldsTypes","getAssignedAxis","coords","coord","getFieldType","predefinedType","fieldType","NBU","wheelTimer","isObject","composedClasses","sensitivity","zoomBy","howMuch","mouseX","mouseY","hasZoomed","transform","clearTimeout","drop","onAfterGetContainer","wheelZoomOptions","allowZoom","inClass","isInsidePlot","wheelSensitivity","delta","deltaY","xAxisCoords","getCoordinates","yAxisCoords","MouseWheelZoom","Renderer","SVGRenderer"],"mappings":"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"}