{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.1 (2024-04-04)\n *\n * (c) 2017-2024 Highsoft AS\n * Authors: Jon Arild Nygard\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/venn', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Geometry/GeometryUtilities.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var GeometryUtilities;\n        (function (GeometryUtilities) {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Calculates the center between a list of points.\n             *\n             * @private\n             *\n             * @param {Array<Highcharts.PositionObject>} points\n             * A list of points to calculate the center of.\n             *\n             * @return {Highcharts.PositionObject}\n             * Calculated center\n             */\n            function getCenterOfPoints(points) {\n                const sum = points.reduce((sum, point) => {\n                    sum.x += point.x;\n                    sum.y += point.y;\n                    return sum;\n                }, { x: 0, y: 0 });\n                return {\n                    x: sum.x / points.length,\n                    y: sum.y / points.length\n                };\n            }\n            GeometryUtilities.getCenterOfPoints = getCenterOfPoints;\n            /**\n             * Calculates the distance between two points based on their x and y\n             * coordinates.\n             *\n             * @private\n             *\n             * @param {Highcharts.PositionObject} p1\n             * The x and y coordinates of the first point.\n             *\n             * @param {Highcharts.PositionObject} p2\n             * The x and y coordinates of the second point.\n             *\n             * @return {number}\n             * Returns the distance between the points.\n             */\n            function getDistanceBetweenPoints(p1, p2) {\n                return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n            }\n            GeometryUtilities.getDistanceBetweenPoints = getDistanceBetweenPoints;\n            /**\n             * Calculates the angle between two points.\n             * @todo add unit tests.\n             * @private\n             * @param {Highcharts.PositionObject} p1 The first point.\n             * @param {Highcharts.PositionObject} p2 The second point.\n             * @return {number} Returns the angle in radians.\n             */\n            function getAngleBetweenPoints(p1, p2) {\n                return Math.atan2(p2.x - p1.x, p2.y - p1.y);\n            }\n            GeometryUtilities.getAngleBetweenPoints = getAngleBetweenPoints;\n        })(GeometryUtilities || (GeometryUtilities = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GeometryUtilities;\n    });\n    _registerModule(_modules, 'Core/Geometry/CircleUtilities.js', [_modules['Core/Geometry/GeometryUtilities.js']], function (Geometry) {\n        /* *\n         *\n         *  (c) 2010-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { getAngleBetweenPoints, getCenterOfPoints, getDistanceBetweenPoints } = Geometry;\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var CircleUtilities;\n        (function (CircleUtilities) {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             *\n             * @param {number} x\n             * Number to round\n             *\n             * @param {number} decimals\n             * Number of decimals to round to\n             *\n             * @return {number}\n             * Rounded number\n             */\n            function round(x, decimals) {\n                const a = Math.pow(10, decimals);\n                return Math.round(x * a) / a;\n            }\n            CircleUtilities.round = round;\n            /**\n             * Calculates the area of a circle based on its radius.\n             *\n             * @private\n             *\n             * @param {number} r\n             * The radius of the circle.\n             *\n             * @return {number}\n             * Returns the area of the circle.\n             */\n            function getAreaOfCircle(r) {\n                if (r <= 0) {\n                    throw new Error('radius of circle must be a positive number.');\n                }\n                return Math.PI * r * r;\n            }\n            CircleUtilities.getAreaOfCircle = getAreaOfCircle;\n            /**\n             * Calculates the area of a circular segment based on the radius of the\n             * circle and the height of the segment.\n             *\n             * @see http://mathworld.wolfram.com/CircularSegment.html\n             *\n             * @private\n             *\n             * @param {number} r\n             * The radius of the circle.\n             *\n             * @param {number} h\n             * The height of the circular segment.\n             *\n             * @return {number}\n             * Returns the area of the circular segment.\n             */\n            function getCircularSegmentArea(r, h) {\n                return (r * r * Math.acos(1 - h / r) -\n                    (r - h) * Math.sqrt(h * (2 * r - h)));\n            }\n            CircleUtilities.getCircularSegmentArea = getCircularSegmentArea;\n            /**\n             * Calculates the area of overlap between two circles based on their\n             * radiuses and the distance between them.\n             *\n             * @see http://mathworld.wolfram.com/Circle-CircleIntersection.html\n             *\n             * @private\n             *\n             * @param {number} r1\n             * Radius of the first circle.\n             *\n             * @param {number} r2\n             * Radius of the second circle.\n             *\n             * @param {number} d\n             * The distance between the two circles.\n             *\n             * @return {number}\n             * Returns the area of overlap between the two circles.\n             */\n            function getOverlapBetweenCircles(r1, r2, d) {\n                let overlap = 0;\n                // If the distance is larger than the sum of the radiuses then the\n                // circles does not overlap.\n                if (d < r1 + r2) {\n                    if (d <= Math.abs(r2 - r1)) {\n                        // If the circles are completely overlapping, then the overlap\n                        // equals the area of the smallest circle.\n                        overlap = getAreaOfCircle(r1 < r2 ? r1 : r2);\n                    }\n                    else {\n                        // Height of first triangle segment.\n                        const d1 = (r1 * r1 - r2 * r2 + d * d) / (2 * d), \n                        // Height of second triangle segment.\n                        d2 = d - d1;\n                        overlap = (getCircularSegmentArea(r1, r1 - d1) +\n                            getCircularSegmentArea(r2, r2 - d2));\n                    }\n                    // Round the result to two decimals.\n                    overlap = round(overlap, 14);\n                }\n                return overlap;\n            }\n            CircleUtilities.getOverlapBetweenCircles = getOverlapBetweenCircles;\n            /**\n             * Calculates the intersection points of two circles.\n             *\n             * NOTE: does not handle floating errors well.\n             *\n             * @private\n             *\n             * @param {Highcharts.CircleObject} c1\n             * The first circle.\n             *\n             * @param {Highcharts.CircleObject} c2\n             * The second circle.\n             *\n             * @return {Array<Highcharts.PositionObject>}\n             * Returns the resulting intersection points.\n             */\n            function getCircleCircleIntersection(c1, c2) {\n                const d = getDistanceBetweenPoints(c1, c2), r1 = c1.r, r2 = c2.r;\n                let points = [];\n                if (d < r1 + r2 && d > Math.abs(r1 - r2)) {\n                    // If the circles are overlapping, but not completely overlapping,\n                    // then it exists intersecting points.\n                    const r1Square = r1 * r1, r2Square = r2 * r2, \n                    // `d^2 - r^2 + R^2 / 2d`\n                    x = (r1Square - r2Square + d * d) / (2 * d), \n                    // `y^2 = R^2 - x^2`\n                    y = Math.sqrt(r1Square - x * x), x1 = c1.x, x2 = c2.x, y1 = c1.y, y2 = c2.y, x0 = x1 + x * (x2 - x1) / d, y0 = y1 + x * (y2 - y1) / d, rx = -(y2 - y1) * (y / d), ry = -(x2 - x1) * (y / d);\n                    points = [\n                        { x: round(x0 + rx, 14), y: round(y0 - ry, 14) },\n                        { x: round(x0 - rx, 14), y: round(y0 + ry, 14) }\n                    ];\n                }\n                return points;\n            }\n            CircleUtilities.getCircleCircleIntersection = getCircleCircleIntersection;\n            /**\n             * Calculates all the intersection points for between a list of circles.\n             *\n             * @private\n             *\n             * @param {Array<Highcharts.CircleObject>} circles\n             * The circles to calculate the points from.\n             *\n             * @return {Array<Highcharts.GeometryObject>}\n             * Returns a list of intersection points.\n             */\n            function getCirclesIntersectionPoints(circles) {\n                return circles.reduce((points, c1, i, arr) => {\n                    const additional = arr\n                        .slice(i + 1)\n                        .reduce((points, c2, j) => {\n                        const indexes = [i, j + i + 1];\n                        return points.concat(getCircleCircleIntersection(c1, c2).map((p) => {\n                            p.indexes = indexes;\n                            return p;\n                        }));\n                    }, []);\n                    return points.concat(additional);\n                }, []);\n            }\n            CircleUtilities.getCirclesIntersectionPoints = getCirclesIntersectionPoints;\n            /**\n             * Tests whether the first circle is completely overlapping the second\n             * circle.\n             *\n             * @private\n             *\n             * @param {Highcharts.CircleObject} circle1\n             * The first circle.\n             *\n             * @param {Highcharts.CircleObject} circle2\n             * The second circle.\n             *\n             * @return {boolean}\n             * Returns true if circle1 is completely overlapping circle2, false if not.\n             */\n            function isCircle1CompletelyOverlappingCircle2(circle1, circle2) {\n                return getDistanceBetweenPoints(circle1, circle2) + circle2.r < circle1.r + 1e-10;\n            }\n            CircleUtilities.isCircle1CompletelyOverlappingCircle2 = isCircle1CompletelyOverlappingCircle2;\n            /**\n             * Tests whether a point lies within a given circle.\n             * @private\n             * @param {Highcharts.PositionObject} point\n             * The point to test for.\n             *\n             * @param {Highcharts.CircleObject} circle\n             * The circle to test if the point is within.\n             *\n             * @return {boolean}\n             * Returns true if the point is inside, false if outside.\n             */\n            function isPointInsideCircle(point, circle) {\n                return getDistanceBetweenPoints(point, circle) <= circle.r + 1e-10;\n            }\n            CircleUtilities.isPointInsideCircle = isPointInsideCircle;\n            /**\n             * Tests whether a point lies within a set of circles.\n             *\n             * @private\n             *\n             * @param {Highcharts.PositionObject} point\n             * The point to test.\n             *\n             * @param {Array<Highcharts.CircleObject>} circles\n             * The list of circles to test against.\n             *\n             * @return {boolean}\n             * Returns true if the point is inside all the circles, false if not.\n             */\n            function isPointInsideAllCircles(point, circles) {\n                return !circles.some(function (circle) {\n                    return !isPointInsideCircle(point, circle);\n                });\n            }\n            CircleUtilities.isPointInsideAllCircles = isPointInsideAllCircles;\n            /**\n             * Tests whether a point lies outside a set of circles.\n             *\n             * TODO: add unit tests.\n             *\n             * @private\n             *\n             * @param {Highcharts.PositionObject} point\n             * The point to test.\n             *\n             * @param {Array<Highcharts.CircleObject>} circles\n             * The list of circles to test against.\n             *\n             * @return {boolean}\n             * Returns true if the point is outside all the circles, false if not.\n             */\n            function isPointOutsideAllCircles(point, circles) {\n                return !circles.some(function (circle) {\n                    return isPointInsideCircle(point, circle);\n                });\n            }\n            CircleUtilities.isPointOutsideAllCircles = isPointOutsideAllCircles;\n            /**\n             * Calculates the points for the polygon of the intersection area between\n             * a set of circles.\n             *\n             * @private\n             *\n             * @param {Array<Highcharts.CircleObject>} circles\n             * List of circles to calculate polygon of.\n             *\n             * @return {Array<Highcharts.GeometryObject>}\n             * Return list of points in the intersection polygon.\n             */\n            function getCirclesIntersectionPolygon(circles) {\n                return getCirclesIntersectionPoints(circles)\n                    .filter(function (p) {\n                    return isPointInsideAllCircles(p, circles);\n                });\n            }\n            CircleUtilities.getCirclesIntersectionPolygon = getCirclesIntersectionPolygon;\n            /**\n             * Calculate the path for the area of overlap between a set of circles.\n             *\n             * @todo handle cases with only 1 or 0 arcs.\n             *\n             * @private\n             *\n             * @param {Array<Highcharts.CircleObject>} circles\n             * List of circles to calculate area of.\n             *\n             * @return {Highcharts.GeometryIntersectionObject|undefined}\n             * Returns the path for the area of overlap. Returns an empty string if\n             * there are no intersection between all the circles.\n             */\n            function getAreaOfIntersectionBetweenCircles(circles) {\n                let intersectionPoints = getCirclesIntersectionPolygon(circles), result;\n                if (intersectionPoints.length > 1) {\n                    // Calculate the center of the intersection points.\n                    const center = getCenterOfPoints(intersectionPoints);\n                    intersectionPoints = intersectionPoints\n                        // Calculate the angle between the center and the points.\n                        .map(function (p) {\n                        p.angle = getAngleBetweenPoints(center, p);\n                        return p;\n                    })\n                        // Sort the points by the angle to the center.\n                        .sort(function (a, b) {\n                        return b.angle - a.angle;\n                    });\n                    const startPoint = intersectionPoints[intersectionPoints.length - 1];\n                    const arcs = intersectionPoints\n                        .reduce(function (data, p1) {\n                        const { startPoint } = data, midPoint = getCenterOfPoints([startPoint, p1]);\n                        // Calculate the arc from the intersection points and their\n                        // circles.\n                        const arc = p1.indexes\n                            // Filter out circles that are not included in both\n                            // intersection points.\n                            .filter(function (index) {\n                            return startPoint.indexes.indexOf(index) > -1;\n                        })\n                            // Iterate the circles of the intersection points and\n                            // calculate arcs.\n                            .reduce(function (arc, index) {\n                            const circle = circles[index], angle1 = getAngleBetweenPoints(circle, p1), angle2 = getAngleBetweenPoints(circle, startPoint), angleDiff = angle2 - angle1 +\n                                (angle2 < angle1 ? 2 * Math.PI : 0), angle = angle2 - angleDiff / 2;\n                            let width = getDistanceBetweenPoints(midPoint, {\n                                x: circle.x + circle.r * Math.sin(angle),\n                                y: circle.y + circle.r * Math.cos(angle)\n                            });\n                            const { r } = circle;\n                            // Width can sometimes become to large due to\n                            // floating point errors\n                            if (width > r * 2) {\n                                width = r * 2;\n                            }\n                            // Get the arc with the smallest width.\n                            if (!arc || arc.width > width) {\n                                arc = {\n                                    r,\n                                    largeArc: width > r ? 1 : 0,\n                                    width,\n                                    x: p1.x,\n                                    y: p1.y\n                                };\n                            }\n                            // Return the chosen arc.\n                            return arc;\n                        }, null);\n                        // If we find an arc then add it to the list and update p2.\n                        if (arc) {\n                            const { r } = arc;\n                            data.arcs.push(['A', r, r, 0, arc.largeArc, 1, arc.x, arc.y]);\n                            data.startPoint = p1;\n                        }\n                        return data;\n                    }, {\n                        startPoint: startPoint,\n                        arcs: []\n                    }).arcs;\n                    if (arcs.length === 0) {\n                        // Empty\n                    }\n                    else if (arcs.length === 1) {\n                        // Empty\n                    }\n                    else {\n                        arcs.unshift(['M', startPoint.x, startPoint.y]);\n                        result = {\n                            center,\n                            d: arcs\n                        };\n                    }\n                }\n                return result;\n            }\n            CircleUtilities.getAreaOfIntersectionBetweenCircles = getAreaOfIntersectionBetweenCircles;\n        })(CircleUtilities || (CircleUtilities = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CircleUtilities;\n    });\n    _registerModule(_modules, 'Series/DrawPointUtilities.js', [], function () {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Handles the drawing of a component.\n         * Can be used for any type of component that reserves the graphic property,\n         * and provides a shouldDraw on its context.\n         *\n         * @private\n         *\n         * @todo add type checking.\n         * @todo export this function to enable usage\n         */\n        function draw(point, params) {\n            const { animatableAttribs, onComplete, css, renderer } = params;\n            const animation = (point.series && point.series.chart.hasRendered) ?\n                // Chart-level animation on updates\n                void 0 :\n                // Series-level animation on new points\n                (point.series &&\n                    point.series.options.animation);\n            let graphic = point.graphic;\n            params.attribs = {\n                ...params.attribs,\n                'class': point.getClassName()\n            } || {};\n            if ((point.shouldDraw())) {\n                if (!graphic) {\n                    if (params.shapeType === 'text') {\n                        graphic = renderer.text();\n                    }\n                    else if (params.shapeType === 'image') {\n                        graphic = renderer.image(params.imageUrl || '')\n                            .attr(params.shapeArgs || {});\n                    }\n                    else {\n                        graphic = renderer[params.shapeType](params.shapeArgs || {});\n                    }\n                    point.graphic = graphic;\n                    graphic.add(params.group);\n                }\n                if (css) {\n                    graphic.css(css);\n                }\n                graphic\n                    .attr(params.attribs)\n                    .animate(animatableAttribs, params.isNew ? false : animation, onComplete);\n            }\n            else if (graphic) {\n                const destroy = () => {\n                    point.graphic = graphic = (graphic && graphic.destroy());\n                    if (typeof onComplete === 'function') {\n                        onComplete();\n                    }\n                };\n                // Animate only runs complete callback if something was animated.\n                if (Object.keys(animatableAttribs).length) {\n                    graphic.animate(animatableAttribs, void 0, () => destroy());\n                }\n                else {\n                    destroy();\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DrawPointUtilities = {\n            draw\n        };\n\n        return DrawPointUtilities;\n    });\n    _registerModule(_modules, 'Series/Venn/VennPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  Experimental Highcharts module which enables visualization of a Venn\n         *  diagram.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  Layout algorithm by Ben Frederickson:\n         *  https://www.benfrederickson.com/better-venn-diagrams/\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { scatter: { prototype: { pointClass: ScatterPoint } } } = SeriesRegistry.seriesTypes;\n        const { isNumber } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class VennPoint extends ScatterPoint {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            isValid() {\n                return isNumber(this.value);\n            }\n            shouldDraw() {\n                // Only draw points with single sets.\n                return !!this.shapeArgs;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return VennPoint;\n    });\n    _registerModule(_modules, 'Series/Venn/VennSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  Experimental Highcharts module which enables visualization of a Venn\n         *  diagram.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  Layout algorithm by Ben Frederickson:\n         *  https://www.benfrederickson.com/better-venn-diagrams/\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A Venn diagram displays all possible logical relations between a\n         * collection of different sets. The sets are represented by circles, and\n         * the relation between the sets are displayed by the overlap or lack of\n         * overlap between them. The venn diagram is a special case of Euler\n         * diagrams, which can also be displayed by this series type.\n         *\n         * @sample {highcharts} highcharts/demo/venn-diagram/\n         *         Venn diagram\n         * @sample {highcharts} highcharts/demo/euler-diagram/\n         *         Euler diagram\n         * @sample {highcharts} highcharts/series-venn/point-legend/\n         *         Venn diagram with a legend\n         *\n         * @extends      plotOptions.scatter\n         * @excluding    connectEnds, connectNulls, cropThreshold, dragDrop,\n         *               findNearestPointBy, getExtremesFromAll, jitter, label,\n         *               linecap, lineWidth, linkedTo, marker, negativeColor,\n         *               pointInterval, pointIntervalUnit, pointPlacement,\n         *               pointStart, softThreshold, stacking, steps, threshold,\n         *               xAxis, yAxis, zoneAxis, zones, dataSorting, boostThreshold,\n         *               boostBlending\n         * @product      highcharts\n         * @requires     modules/venn\n         * @optionparent plotOptions.venn\n         */\n        const VennSeriesDefaults = {\n            borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            borderDashStyle: 'solid',\n            borderWidth: 1,\n            brighten: 0,\n            clip: false,\n            colorByPoint: true,\n            dataLabels: {\n                enabled: true,\n                verticalAlign: 'middle',\n                formatter: function () {\n                    return this.point.name;\n                }\n            },\n            /**\n             * @default   true\n             * @extends   plotOptions.series.inactiveOtherPoints\n             * @private\n             */\n            inactiveOtherPoints: true,\n            /**\n             * @ignore-option\n             * @private\n             */\n            marker: false,\n            opacity: 0.75,\n            showInLegend: false,\n            /**\n             * @ignore-option\n             *\n             * @private\n             */\n            legendType: 'point',\n            states: {\n                /**\n                 * @excluding halo\n                 */\n                hover: {\n                    opacity: 1,\n                    borderColor: \"#333333\" /* Palette.neutralColor80 */\n                },\n                /**\n                 * @excluding halo\n                 */\n                select: {\n                    color: \"#cccccc\" /* Palette.neutralColor20 */,\n                    borderColor: \"#000000\" /* Palette.neutralColor100 */,\n                    animation: false\n                },\n                inactive: {\n                    opacity: 0.075\n                }\n            },\n            tooltip: {\n                pointFormat: '{point.name}: {point.value}'\n            },\n            legendSymbol: 'rectangle'\n        };\n        /**\n         * A `venn` series. If the [type](#series.venn.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.venn\n         * @excluding connectEnds, connectNulls, cropThreshold, dataParser, dataURL,\n         *            findNearestPointBy, getExtremesFromAll, label, linecap, lineWidth,\n         *            linkedTo, marker, negativeColor, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointStart, softThreshold, stack, stacking, steps,\n         *            threshold, xAxis, yAxis, zoneAxis, zones, dataSorting,\n         *            boostThreshold, boostBlending\n         * @product   highcharts\n         * @requires  modules/venn\n         * @apioption series.venn\n         */\n        /**\n         * @type      {Array<*>}\n         * @extends   series.scatter.data\n         * @excluding marker, x, y\n         * @product   highcharts\n         * @apioption series.venn.data\n         */\n        /**\n         * The name of the point. Used in data labels and tooltip. If name is not\n         * defined then it will default to the joined values in\n         * [sets](#series.venn.sets).\n         *\n         * @sample {highcharts} highcharts/demo/venn-diagram/\n         *         Venn diagram\n         * @sample {highcharts} highcharts/demo/euler-diagram/\n         *         Euler diagram\n         *\n         * @type      {number}\n         * @since     7.0.0\n         * @product   highcharts\n         * @apioption series.venn.data.name\n         */\n        /**\n         * The value of the point, resulting in a relative area of the circle, or area\n         * of overlap between two sets in the venn or euler diagram.\n         *\n         * @sample {highcharts} highcharts/demo/venn-diagram/\n         *         Venn diagram\n         * @sample {highcharts} highcharts/demo/euler-diagram/\n         *         Euler diagram\n         *\n         * @type      {number}\n         * @since     7.0.0\n         * @product   highcharts\n         * @apioption series.venn.data.value\n         */\n        /**\n         * The set or sets the options will be applied to. If a single entry is defined,\n         * then it will create a new set. If more than one entry is defined, then it\n         * will define the overlap between the sets in the array.\n         *\n         * @sample {highcharts} highcharts/demo/venn-diagram/\n         *         Venn diagram\n         * @sample {highcharts} highcharts/demo/euler-diagram/\n         *         Euler diagram\n         *\n         * @type      {Array<string>}\n         * @since     7.0.0\n         * @product   highcharts\n         * @apioption series.venn.data.sets\n         */\n        /**\n         * @excluding halo\n         * @apioption series.venn.states.hover\n         */\n        /**\n         * @excluding halo\n         * @apioption series.venn.states.select\n         */\n        ''; // Detach doclets above\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return VennSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Venn/VennUtils.js', [_modules['Core/Geometry/CircleUtilities.js'], _modules['Core/Geometry/GeometryUtilities.js'], _modules['Core/Utilities.js']], function (CU, GU, U) {\n        /* *\n         *\n         *  Experimental Highcharts module which enables visualization of a Venn\n         *  diagram.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  Layout algorithm by Ben Frederickson:\n         *  https://www.benfrederickson.com/better-venn-diagrams/\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { getAreaOfCircle, getCircleCircleIntersection, getOverlapBetweenCircles: getOverlapBetweenCirclesByDistance, isPointInsideAllCircles, isPointInsideCircle, isPointOutsideAllCircles } = CU;\n        const { getDistanceBetweenPoints } = GU;\n        const { extend, isArray, isNumber, isObject, isString } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Takes an array of relations and adds the properties `totalOverlap` and\n         * `overlapping` to each set. The property `totalOverlap` is the sum of\n         * value for each relation where this set is included. The property\n         * `overlapping` is a map of how much this set is overlapping another set.\n         * NOTE: This algorithm ignores relations consisting of more than 2 sets.\n         * @private\n         * @param {Array<Highcharts.VennRelationObject>} relations\n         * The list of relations that should be sorted.\n         * @return {Array<Highcharts.VennRelationObject>}\n         * Returns the modified input relations with added properties `totalOverlap`\n         * and `overlapping`.\n         */\n        function addOverlapToSets(relations) {\n            // Calculate the amount of overlap per set.\n            const mapOfIdToProps = {};\n            relations\n                // Filter out relations consisting of 2 sets.\n                .filter((relation) => (relation.sets.length === 2))\n                // Sum up the amount of overlap for each set.\n                .forEach((relation) => {\n                relation.sets.forEach((set, i, arr) => {\n                    if (!isObject(mapOfIdToProps[set])) {\n                        mapOfIdToProps[set] = {\n                            totalOverlap: 0,\n                            overlapping: {}\n                        };\n                    }\n                    mapOfIdToProps[set] = {\n                        totalOverlap: (mapOfIdToProps[set].totalOverlap || 0) +\n                            relation.value,\n                        overlapping: {\n                            ...(mapOfIdToProps[set].overlapping || {}),\n                            [arr[1 - i]]: relation.value\n                        }\n                    };\n                });\n            });\n            relations\n                // Filter out single sets\n                .filter(isSet)\n                // Extend the set with the calculated properties.\n                .forEach((set) => {\n                const properties = mapOfIdToProps[set.sets[0]];\n                extend(set, properties);\n            });\n            // Returns the modified relations.\n            return relations;\n        }\n        /**\n         * Finds the root of a given function. The root is the input value needed\n         * for a function to return 0.\n         *\n         * See https://en.wikipedia.org/wiki/Bisection_method#Algorithm\n         *\n         * TODO: Add unit tests.\n         *\n         * @param {Function} f\n         * The function to find the root of.\n         * @param {number} a\n         * The lowest number in the search range.\n         * @param {number} b\n         * The highest number in the search range.\n         * @param {number} [tolerance=1e-10]\n         * The allowed difference between the returned value and root.\n         * @param {number} [maxIterations=100]\n         * The maximum iterations allowed.\n         * @return {number}\n         * Root number.\n         */\n        function bisect(f, a, b, tolerance, maxIterations) {\n            const fA = f(a), fB = f(b), nMax = maxIterations || 100, tol = tolerance || 1e-10;\n            let delta = b - a, x, fX, n = 1;\n            if (a >= b) {\n                throw new Error('a must be smaller than b.');\n            }\n            else if (fA * fB > 0) {\n                throw new Error('f(a) and f(b) must have opposite signs.');\n            }\n            if (fA === 0) {\n                x = a;\n            }\n            else if (fB === 0) {\n                x = b;\n            }\n            else {\n                while (n++ <= nMax && fX !== 0 && delta > tol) {\n                    delta = (b - a) / 2;\n                    x = a + delta;\n                    fX = f(x);\n                    // Update low and high for next search interval.\n                    if (fA * fX > 0) {\n                        a = x;\n                    }\n                    else {\n                        b = x;\n                    }\n                }\n            }\n            return x;\n        }\n        /**\n         * @private\n         */\n        function getCentroid(simplex) {\n            const arr = simplex.slice(0, -1), length = arr.length, result = [], sum = (data, point) => {\n                data.sum += point[data.i];\n                return data;\n            };\n            for (let i = 0; i < length; i++) {\n                result[i] = arr.reduce(sum, { sum: 0, i: i }).sum / length;\n            }\n            return result;\n        }\n        /**\n         * Uses the bisection method to make a best guess of the ideal distance\n         * between two circles too get the desired overlap.\n         * Currently there is no known formula to calculate the distance from the\n         * area of overlap, which makes the bisection method preferred.\n         * @private\n         * @param {number} r1\n         * Radius of the first circle.\n         * @param {number} r2\n         * Radius of the second circle.\n         * @param {number} overlap\n         * The wanted overlap between the two circles.\n         * @return {number}\n         * Returns the distance needed to get the wanted overlap between the two\n         * circles.\n         */\n        function getDistanceBetweenCirclesByOverlap(r1, r2, overlap) {\n            const maxDistance = r1 + r2;\n            let distance;\n            if (overlap <= 0) {\n                // If overlap is below or equal to zero, then there is no overlap.\n                distance = maxDistance;\n            }\n            else if (getAreaOfCircle(r1 < r2 ? r1 : r2) <= overlap) {\n                // When area of overlap is larger than the area of the smallest\n                // circle, then it is completely overlapping.\n                distance = 0;\n            }\n            else {\n                distance = bisect((x) => {\n                    const actualOverlap = getOverlapBetweenCirclesByDistance(r1, r2, x);\n                    // Return the difference between wanted and actual overlap.\n                    return overlap - actualOverlap;\n                }, 0, maxDistance);\n            }\n            return distance;\n        }\n        /**\n         * Finds the available width for a label, by taking the label position and\n         * finding the largest distance, which is inside all internal circles, and\n         * outside all external circles.\n         *\n         * @private\n         * @param {Highcharts.PositionObject} pos\n         * The x and y coordinate of the label.\n         * @param {Array<Highcharts.CircleObject>} internal\n         * Internal circles.\n         * @param {Array<Highcharts.CircleObject>} external\n         * External circles.\n         * @return {number}\n         * Returns available width for the label.\n         */\n        function getLabelWidth(pos, internal, external) {\n            const radius = internal.reduce((min, circle) => Math.min(circle.r, min), Infinity), \n            // Filter out external circles that are completely overlapping.\n            filteredExternals = external.filter((circle) => !isPointInsideCircle(pos, circle));\n            const findDistance = function (maxDistance, direction) {\n                return bisect((x) => {\n                    const testPos = {\n                        x: pos.x + (direction * x),\n                        y: pos.y\n                    }, isValid = (isPointInsideAllCircles(testPos, internal) &&\n                        isPointOutsideAllCircles(testPos, filteredExternals));\n                    // If the position is valid, then we want to move towards the\n                    // max distance. If not, then we want to away from the max distance.\n                    return -(maxDistance - x) + (isValid ? 0 : Number.MAX_VALUE);\n                }, 0, maxDistance);\n            };\n            // Find the smallest distance of left and right.\n            return Math.min(findDistance(radius, -1), findDistance(radius, 1)) * 2;\n        }\n        /**\n         * Calculates a margin for a point based on the internal and external\n         * circles. The margin describes if the point is well placed within the\n         * internal circles, and away from the external.\n         * @private\n         * @todo add unit tests.\n         * @param {Highcharts.PositionObject} point\n         * The point to evaluate.\n         * @param {Array<Highcharts.CircleObject>} internal\n         * The internal circles.\n         * @param {Array<Highcharts.CircleObject>} external\n         * The external circles.\n         * @return {number}\n         * Returns the margin.\n         */\n        function getMarginFromCircles(point, internal, external) {\n            let margin = internal.reduce((margin, circle) => {\n                const m = circle.r - getDistanceBetweenPoints(point, circle);\n                return (m <= margin) ? m : margin;\n            }, Number.MAX_VALUE);\n            margin = external.reduce((margin, circle) => {\n                const m = getDistanceBetweenPoints(point, circle) - circle.r;\n                return (m <= margin) ? m : margin;\n            }, margin);\n            return margin;\n        }\n        /**\n         * Calculates the area of overlap between a list of circles.\n         * @private\n         * @todo add support for calculating overlap between more than 2 circles.\n         * @param {Array<Highcharts.CircleObject>} circles\n         * List of circles with their given positions.\n         * @return {number}\n         * Returns the area of overlap between all the circles.\n         */\n        function getOverlapBetweenCircles(circles) {\n            let overlap = 0;\n            // When there is only two circles we can find the overlap by using their\n            // radiuses and the distance between them.\n            if (circles.length === 2) {\n                const circle1 = circles[0];\n                const circle2 = circles[1];\n                overlap = getOverlapBetweenCirclesByDistance(circle1.r, circle2.r, getDistanceBetweenPoints(circle1, circle2));\n            }\n            return overlap;\n        }\n        // eslint-disable-next-line require-jsdoc\n        /**\n         *\n         */\n        function isSet(x) {\n            return isArray(x.sets) && x.sets.length === 1;\n        }\n        // eslint-disable-next-line require-jsdoc\n        /**\n         *\n         */\n        function isValidRelation(x) {\n            const map = {};\n            return (isObject(x) &&\n                (isNumber(x.value) && x.value > -1) &&\n                (isArray(x.sets) && x.sets.length > 0) &&\n                !x.sets.some(function (set) {\n                    let invalid = false;\n                    if (!map[set] && isString(set)) {\n                        map[set] = true;\n                    }\n                    else {\n                        invalid = true;\n                    }\n                    return invalid;\n                }));\n        }\n        // eslint-disable-next-line require-jsdoc\n        /**\n         *\n         */\n        function isValidSet(x) {\n            return (isValidRelation(x) && isSet(x) && x.value > 0);\n        }\n        /**\n         * Uses a greedy approach to position all the sets. Works well with a small\n         * number of sets, and are in these cases a good choice aesthetically.\n         * @private\n         * @param {Array<object>} relations List of the overlap between two or more\n         * sets, or the size of a single set.\n         * @return {Array<object>} List of circles and their calculated positions.\n         */\n        function layoutGreedyVenn(relations) {\n            const positionedSets = [], mapOfIdToCircles = {};\n            // Define a circle for each set.\n            relations\n                .filter((relation) => (relation.sets.length === 1))\n                .forEach((relation) => {\n                mapOfIdToCircles[relation.sets[0]] = relation.circle = {\n                    x: Number.MAX_VALUE,\n                    y: Number.MAX_VALUE,\n                    r: Math.sqrt(relation.value / Math.PI)\n                };\n            });\n            /**\n             * Takes a set and updates the position, and add the set to the list of\n             * positioned sets.\n             * @private\n             * @param {Object} set\n             * The set to add to its final position.\n             * @param {Object} coordinates\n             * The coordinates to position the set at.\n             */\n            const positionSet = (set, coordinates) => {\n                const circle = set.circle;\n                if (circle) {\n                    circle.x = coordinates.x;\n                    circle.y = coordinates.y;\n                }\n                positionedSets.push(set);\n            };\n            // Find overlap between sets. Ignore relations with more then 2 sets.\n            addOverlapToSets(relations);\n            // Sort sets by the sum of their size from large to small.\n            const sortedByOverlap = relations\n                .filter(isSet)\n                .sort(sortByTotalOverlap);\n            // Position the most overlapped set at 0,0.\n            positionSet(sortedByOverlap.shift(), { x: 0, y: 0 });\n            const relationsWithTwoSets = relations.filter((x) => (x.sets.length === 2));\n            // Iterate and position the remaining sets.\n            for (const set of sortedByOverlap) {\n                const circle = set.circle;\n                if (!circle) {\n                    continue;\n                }\n                const radius = circle.r, overlapping = set.overlapping;\n                const bestPosition = positionedSets.reduce((best, positionedSet, i) => {\n                    const positionedCircle = positionedSet.circle;\n                    if (!positionedCircle || !overlapping) {\n                        return best;\n                    }\n                    const overlap = overlapping[positionedSet.sets[0]];\n                    // Calculate the distance between the sets to get the\n                    // correct overlap\n                    const distance = getDistanceBetweenCirclesByOverlap(radius, positionedCircle.r, overlap);\n                    // Create a list of possible coordinates calculated from\n                    // distance.\n                    let possibleCoordinates = [\n                        { x: positionedCircle.x + distance, y: positionedCircle.y },\n                        { x: positionedCircle.x - distance, y: positionedCircle.y },\n                        { x: positionedCircle.x, y: positionedCircle.y + distance },\n                        { x: positionedCircle.x, y: positionedCircle.y - distance }\n                    ];\n                    // If there are more circles overlapping, then add the\n                    // intersection points as possible positions.\n                    for (const positionedSet2 of positionedSets.slice(i + 1)) {\n                        const positionedCircle2 = positionedSet2.circle, overlap2 = overlapping[positionedSet2.sets[0]];\n                        if (!positionedCircle2) {\n                            continue;\n                        }\n                        const distance2 = getDistanceBetweenCirclesByOverlap(radius, positionedCircle2.r, overlap2);\n                        // Add intersections to list of coordinates.\n                        possibleCoordinates = possibleCoordinates.concat(getCircleCircleIntersection({\n                            x: positionedCircle.x,\n                            y: positionedCircle.y,\n                            r: distance\n                        }, {\n                            x: positionedCircle2.x,\n                            y: positionedCircle2.y,\n                            r: distance2\n                        }));\n                    }\n                    // Iterate all suggested coordinates and find the best one.\n                    for (const coordinates of possibleCoordinates) {\n                        circle.x = coordinates.x;\n                        circle.y = coordinates.y;\n                        // Calculate loss for the suggested coordinates.\n                        const currentLoss = loss(mapOfIdToCircles, relationsWithTwoSets);\n                        // If the loss is better, then use these new coordinates\n                        if (currentLoss < best.loss) {\n                            best.loss = currentLoss;\n                            best.coordinates = coordinates;\n                        }\n                    }\n                    // Return resulting coordinates.\n                    return best;\n                }, {\n                    loss: Number.MAX_VALUE,\n                    coordinates: void 0\n                });\n                // Add the set to its final position.\n                positionSet(set, bestPosition.coordinates);\n            }\n            // Return the positions of each set.\n            return mapOfIdToCircles;\n        }\n        /**\n         * Calculates the difference between the desired overlap and the actual\n         * overlap between two circles.\n         * @private\n         * @param {Dictionary<Highcharts.CircleObject>} mapOfIdToCircle\n         * Map from id to circle.\n         * @param {Array<Highcharts.VennRelationObject>} relations\n         * List of relations to calculate the loss of.\n         * @return {number}\n         * Returns the loss between positions of the circles for the given\n         * relations.\n         */\n        function loss(mapOfIdToCircle, relations) {\n            const precision = 10e10;\n            // Iterate all the relations and calculate their individual loss.\n            return relations.reduce(function (totalLoss, relation) {\n                let loss = 0;\n                if (relation.sets.length > 1) {\n                    const wantedOverlap = relation.value;\n                    // Calculate the actual overlap between the sets.\n                    const actualOverlap = getOverlapBetweenCircles(\n                    // Get the circles for the given sets.\n                    relation.sets.map(function (set) {\n                        return mapOfIdToCircle[set];\n                    }));\n                    const diff = wantedOverlap - actualOverlap;\n                    loss = Math.round((diff * diff) * precision) / precision;\n                }\n                // Add calculated loss to the sum.\n                return totalLoss + loss;\n            }, 0);\n        }\n        /**\n         * Finds an optimal position for a given point.\n         * @todo add unit tests.\n         * @todo add constraints to optimize the algorithm.\n         * @private\n         * @param {Highcharts.NelderMeadTestFunction} fn\n         *        The function to test a point.\n         * @param {Highcharts.NelderMeadPointArray} initial\n         *        The initial point to optimize.\n         * @return {Highcharts.NelderMeadPointArray}\n         *         Returns the optimized position of a point.\n         */\n        function nelderMead(fn, initial) {\n            const maxIterations = 100, sortByFx = function (a, b) {\n                return a.fx - b.fx;\n            }, pRef = 1, // Reflection parameter\n            pExp = 2, // Expansion parameter\n            pCon = -0.5, // Contraction parameter\n            pOCon = pCon * pRef, // Outwards contraction parameter\n            pShrink = 0.5; // Shrink parameter\n            /**\n             * @private\n             */\n            const weightedSum = (weight1, v1, weight2, v2) => v1.map((x, i) => weight1 * x + weight2 * v2[i]);\n            /**\n             * @private\n             */\n            const getSimplex = (initial) => {\n                const n = initial.length, simplex = new Array(n + 1);\n                // Initial point to the simplex.\n                simplex[0] = initial;\n                simplex[0].fx = fn(initial);\n                // Create a set of extra points based on the initial.\n                for (let i = 0; i < n; ++i) {\n                    const point = initial.slice();\n                    point[i] = point[i] ? point[i] * 1.05 : 0.001;\n                    point.fx = fn(point);\n                    simplex[i + 1] = point;\n                }\n                return simplex;\n            };\n            const updateSimplex = (simplex, point) => {\n                point.fx = fn(point);\n                simplex[simplex.length - 1] = point;\n                return simplex;\n            };\n            const shrinkSimplex = (simplex) => {\n                const best = simplex[0];\n                return simplex.map((point) => {\n                    const p = weightedSum(1 - pShrink, best, pShrink, point);\n                    p.fx = fn(p);\n                    return p;\n                });\n            };\n            const getPoint = (centroid, worst, a, b) => {\n                const point = weightedSum(a, centroid, b, worst);\n                point.fx = fn(point);\n                return point;\n            };\n            // Create a simplex\n            let simplex = getSimplex(initial);\n            // Iterate from 0 to max iterations\n            for (let i = 0; i < maxIterations; i++) {\n                // Sort the simplex\n                simplex.sort(sortByFx);\n                // Create a centroid from the simplex\n                const worst = simplex[simplex.length - 1];\n                const centroid = getCentroid(simplex);\n                // Calculate the reflected point.\n                const reflected = getPoint(centroid, worst, 1 + pRef, -pRef);\n                if (reflected.fx < simplex[0].fx) {\n                    // If reflected point is the best, then possibly expand.\n                    const expanded = getPoint(centroid, worst, 1 + pExp, -pExp);\n                    simplex = updateSimplex(simplex, (expanded.fx < reflected.fx) ? expanded : reflected);\n                }\n                else if (reflected.fx >= simplex[simplex.length - 2].fx) {\n                    // If the reflected point is worse than the second worse, then\n                    // contract.\n                    let contracted;\n                    if (reflected.fx > worst.fx) {\n                        // If the reflected is worse than the worst point, do a\n                        // contraction\n                        contracted = getPoint(centroid, worst, 1 + pCon, -pCon);\n                        if (contracted.fx < worst.fx) {\n                            simplex = updateSimplex(simplex, contracted);\n                        }\n                        else {\n                            simplex = shrinkSimplex(simplex);\n                        }\n                    }\n                    else {\n                        // Otherwise do an outwards contraction\n                        contracted = getPoint(centroid, worst, 1 - pOCon, pOCon);\n                        if (contracted.fx < reflected.fx) {\n                            simplex = updateSimplex(simplex, contracted);\n                        }\n                        else {\n                            simplex = shrinkSimplex(simplex);\n                        }\n                    }\n                }\n                else {\n                    simplex = updateSimplex(simplex, reflected);\n                }\n            }\n            return simplex[0];\n        }\n        /**\n         * Prepares the venn data so that it is usable for the layout function.\n         * Filter out sets, or intersections that includes sets, that are missing in\n         * the data or has (value < 1). Adds missing relations between sets in the\n         * data as value = 0.\n         * @private\n         * @param {Array<object>} data The raw input data.\n         * @return {Array<object>} Returns an array of valid venn data.\n         */\n        function processVennData(data, splitter) {\n            const d = isArray(data) ? data : [];\n            const validSets = d\n                .reduce(function (arr, x) {\n                // Check if x is a valid set, and that it is not an duplicate.\n                if (x.sets && isValidSet(x) && arr.indexOf(x.sets[0]) === -1) {\n                    arr.push(x.sets[0]);\n                }\n                return arr;\n            }, [])\n                .sort();\n            const mapOfIdToRelation = d.reduce(function (mapOfIdToRelation, relation) {\n                if (relation.sets &&\n                    isValidRelation(relation) &&\n                    !relation.sets.some(function (set) {\n                        return validSets.indexOf(set) === -1;\n                    })) {\n                    mapOfIdToRelation[relation.sets.sort().join(splitter)] = {\n                        sets: relation.sets,\n                        value: relation.value || 0\n                    };\n                }\n                return mapOfIdToRelation;\n            }, {});\n            validSets.reduce(function (combinations, set, i, arr) {\n                const remaining = arr.slice(i + 1);\n                remaining.forEach(function (set2) {\n                    combinations.push(set + splitter + set2);\n                });\n                return combinations;\n            }, []).forEach(function (combination) {\n                if (!mapOfIdToRelation[combination]) {\n                    const obj = {\n                        sets: combination.split(splitter),\n                        value: 0\n                    };\n                    mapOfIdToRelation[combination] = obj;\n                }\n            });\n            // Transform map into array.\n            return Object\n                .keys(mapOfIdToRelation)\n                .map(function (id) {\n                return mapOfIdToRelation[id];\n            });\n        }\n        /**\n         * Takes two sets and finds the one with the largest total overlap.\n         * @private\n         * @param {Object} a\n         * The first set to compare.\n         * @param {Object} b\n         * The second set to compare.\n         * @return {number}\n         * Returns 0 if a and b are equal, <0 if a is greater, >0 if b is greater.\n         */\n        function sortByTotalOverlap(a, b) {\n            if (typeof b.totalOverlap !== 'undefined' &&\n                typeof a.totalOverlap !== 'undefined') {\n                return b.totalOverlap - a.totalOverlap;\n            }\n            return NaN;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const VennUtils = {\n            geometry: GU,\n            geometryCircles: CU,\n            addOverlapToSets,\n            getCentroid,\n            getDistanceBetweenCirclesByOverlap,\n            getLabelWidth,\n            getMarginFromCircles,\n            isSet,\n            layoutGreedyVenn,\n            loss,\n            nelderMead,\n            processVennData,\n            sortByTotalOverlap\n        };\n\n        return VennUtils;\n    });\n    _registerModule(_modules, 'Series/Venn/VennSeries.js', [_modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Color/Color.js'], _modules['Core/Geometry/CircleUtilities.js'], _modules['Series/DrawPointUtilities.js'], _modules['Core/Geometry/GeometryUtilities.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/Venn/VennPoint.js'], _modules['Series/Venn/VennSeriesDefaults.js'], _modules['Series/Venn/VennUtils.js'], _modules['Core/Utilities.js']], function (A, Color, CU, DPU, GU, SeriesRegistry, VennPoint, VennSeriesDefaults, VennUtils, U) {\n        /* *\n         *\n         *  Experimental Highcharts module which enables visualization of a Venn\n         *  diagram.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  Layout algorithm by Ben Frederickson:\n         *  https://www.benfrederickson.com/better-venn-diagrams/\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { animObject } = A;\n        const { parse: color } = Color;\n        const { getAreaOfIntersectionBetweenCircles, getCirclesIntersectionPolygon, isCircle1CompletelyOverlappingCircle2, isPointInsideAllCircles, isPointOutsideAllCircles } = CU;\n        const { getCenterOfPoints } = GU;\n        const { scatter: ScatterSeries } = SeriesRegistry.seriesTypes;\n        const { addEvent, extend, isArray, isNumber, isObject, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.venn\n         *\n         * @augments Highcharts.Series\n         */\n        class VennSeries extends ScatterSeries {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Finds the optimal label position by looking for a position that has a low\n             * distance from the internal circles, and as large possible distance to the\n             * external circles.\n             * @private\n             * @todo Optimize the intial position.\n             * @todo Add unit tests.\n             * @param {Array<Highcharts.CircleObject>} internal\n             * Internal circles.\n             * @param {Array<Highcharts.CircleObject>} external\n             * External circles.\n             * @return {Highcharts.PositionObject}\n             * Returns the found position.\n             */\n            static getLabelPosition(internal, external) {\n                // Get the best label position within the internal circles.\n                let best = internal.reduce((best, circle) => {\n                    const d = circle.r / 2;\n                    // Give a set of points with the circle to evaluate as the best\n                    // label position.\n                    return [\n                        { x: circle.x, y: circle.y },\n                        { x: circle.x + d, y: circle.y },\n                        { x: circle.x - d, y: circle.y },\n                        { x: circle.x, y: circle.y + d },\n                        { x: circle.x, y: circle.y - d }\n                    ]\n                        // Iterate the given points and return the one with the\n                        // largest margin.\n                        .reduce((best, point) => {\n                        const margin = VennUtils.getMarginFromCircles(point, internal, external);\n                        // If the margin better than the current best, then\n                        // update sbest.\n                        if (best.margin < margin) {\n                            best.point = point;\n                            best.margin = margin;\n                        }\n                        return best;\n                    }, best);\n                }, {\n                    point: void 0,\n                    margin: -Number.MAX_VALUE\n                }).point;\n                // Use nelder mead to optimize the initial label position.\n                const optimal = VennUtils.nelderMead((p) => -(VennUtils.getMarginFromCircles({ x: p[0], y: p[1] }, internal, external)), [\n                    best.x,\n                    best.y\n                ]);\n                // Update best to be the point which was found to have the best margin.\n                best = {\n                    x: optimal[0],\n                    y: optimal[1]\n                };\n                if (!(isPointInsideAllCircles(best, internal) &&\n                    isPointOutsideAllCircles(best, external))) {\n                    // If point was either outside one of the internal, or inside one of\n                    // the external, then it was invalid and should use a fallback.\n                    if (internal.length > 1) {\n                        best = getCenterOfPoints(getCirclesIntersectionPolygon(internal));\n                    }\n                    else {\n                        best = {\n                            x: internal[0].x,\n                            y: internal[0].y\n                        };\n                    }\n                }\n                // Return the best point.\n                return best;\n            }\n            /**\n             * Calculates data label values for a given relations object.\n             *\n             * @private\n             * @todo add unit tests\n             * @param {Highcharts.VennRelationObject} relation A relations object.\n             * @param {Array<Highcharts.VennRelationObject>} setRelations The list of\n             * relations that is a set.\n             * @return {Highcharts.VennLabelValuesObject}\n             * Returns an object containing position and width of the label.\n             */\n            static getLabelValues(relation, setRelations) {\n                const sets = relation.sets;\n                // Create a list of internal and external circles.\n                const data = setRelations.reduce((data, set) => {\n                    // If the set exists in this relation, then it is internal,\n                    // otherwise it will be external.\n                    const isInternal = sets.indexOf(set.sets[0]) > -1;\n                    const property = isInternal ? 'internal' : 'external';\n                    // Add the circle to the list.\n                    if (set.circle) {\n                        data[property].push(set.circle);\n                    }\n                    return data;\n                }, {\n                    internal: [],\n                    external: []\n                });\n                // Filter out external circles that are completely overlapping all\n                // internal\n                data.external = data.external.filter((externalCircle) => data.internal.some((internalCircle) => !isCircle1CompletelyOverlappingCircle2(externalCircle, internalCircle)));\n                // Calculate the label position.\n                const position = VennSeries.getLabelPosition(data.internal, data.external);\n                // Calculate the label width\n                const width = VennUtils.getLabelWidth(position, data.internal, data.external);\n                return {\n                    position,\n                    width\n                };\n            }\n            /**\n             * Calculates the positions, and the label values of all the sets in the\n             * venn diagram.\n             *\n             * @private\n             * @todo Add support for constrained MDS.\n             * @param {Array<Highchats.VennRelationObject>} relations\n             * List of the overlap between two or more sets, or the size of a single\n             * set.\n             * @return {Highcharts.Dictionary<*>}\n             * List of circles and their calculated positions.\n             */\n            static layout(relations) {\n                const mapOfIdToShape = {};\n                const mapOfIdToLabelValues = {};\n                // Calculate best initial positions by using greedy layout.\n                if (relations.length > 0) {\n                    const mapOfIdToCircles = VennUtils.layoutGreedyVenn(relations);\n                    const setRelations = relations.filter(VennUtils.isSet);\n                    for (const relation of relations) {\n                        const sets = relation.sets;\n                        const id = sets.join();\n                        // Get shape from map of circles, or calculate intersection.\n                        const shape = VennUtils.isSet(relation) ?\n                            mapOfIdToCircles[id] :\n                            getAreaOfIntersectionBetweenCircles(sets.map((set) => mapOfIdToCircles[set]));\n                        // Calculate label values if the set has a shape\n                        if (shape) {\n                            mapOfIdToShape[id] = shape;\n                            mapOfIdToLabelValues[id] = VennSeries.getLabelValues(relation, setRelations);\n                        }\n                    }\n                }\n                return { mapOfIdToShape, mapOfIdToLabelValues };\n            }\n            /**\n             * Calculates the proper scale to fit the cloud inside the plotting area.\n             * @private\n             * @todo add unit test\n             * @param {number} targetWidth\n             * Width of target area.\n             * @param {number} targetHeight\n             * Height of target area.\n             * @param {Highcharts.PolygonBoxObject} field\n             * The playing field.\n             * @return {Highcharts.Dictionary<number>}\n             * Returns the value to scale the playing field up to the size of the target\n             * area, and center of x and y.\n             */\n            static getScale(targetWidth, targetHeight, field) {\n                const height = field.bottom - field.top, // Top is smaller than bottom\n                width = field.right - field.left, scaleX = width > 0 ? 1 / width * targetWidth : 1, scaleY = height > 0 ? 1 / height * targetHeight : 1, adjustX = (field.right + field.left) / 2, adjustY = (field.top + field.bottom) / 2, scale = Math.min(scaleX, scaleY);\n                return {\n                    scale: scale,\n                    centerX: targetWidth / 2 - adjustX * scale,\n                    centerY: targetHeight / 2 - adjustY * scale\n                };\n            }\n            /**\n             * If a circle is outside a give field, then the boundaries of the field is\n             * adjusted accordingly. Modifies the field object which is passed as the\n             * first parameter.\n             * @private\n             * @todo NOTE: Copied from wordcloud, can probably be unified.\n             * @param {Highcharts.PolygonBoxObject} field\n             * The bounding box of a playing field.\n             * @param {Highcharts.CircleObject} circle\n             * The bounding box for a placed point.\n             * @return {Highcharts.PolygonBoxObject}\n             * Returns a modified field object.\n             */\n            static updateFieldBoundaries(field, circle) {\n                const left = circle.x - circle.r, right = circle.x + circle.r, bottom = circle.y + circle.r, top = circle.y - circle.r;\n                // TODO improve type checking.\n                if (!isNumber(field.left) || field.left > left) {\n                    field.left = left;\n                }\n                if (!isNumber(field.right) || field.right < right) {\n                    field.right = right;\n                }\n                if (!isNumber(field.top) || field.top > top) {\n                    field.top = top;\n                }\n                if (!isNumber(field.bottom) || field.bottom < bottom) {\n                    field.bottom = bottom;\n                }\n                return field;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            animate(init) {\n                if (!init) {\n                    const series = this, animOptions = animObject(series.options.animation);\n                    for (const point of series.points) {\n                        const args = point.shapeArgs;\n                        if (point.graphic && args) {\n                            const attr = {}, animate = {};\n                            if (args.d) {\n                                // If shape is a path, then animate opacity.\n                                attr.opacity = 0.001;\n                            }\n                            else {\n                                // If shape is a circle, then animate radius.\n                                attr.r = 0;\n                                animate.r = args.r;\n                            }\n                            point.graphic\n                                .attr(attr)\n                                .animate(animate, animOptions);\n                            // If shape is path, then fade it in after the circles\n                            // animation\n                            if (args.d) {\n                                setTimeout(() => {\n                                    if (point && point.graphic) {\n                                        point.graphic.animate({\n                                            opacity: 1\n                                        });\n                                    }\n                                }, animOptions.duration);\n                            }\n                        }\n                    }\n                }\n            }\n            /**\n             * Draw the graphics for each point.\n             * @private\n             */\n            drawPoints() {\n                const series = this, \n                // Series properties\n                chart = series.chart, group = series.group, points = series.points || [], \n                // Chart properties\n                renderer = chart.renderer;\n                // Iterate all points and calculate and draw their graphics.\n                for (const point of points) {\n                    const attribs = {\n                        zIndex: isArray(point.sets) ? point.sets.length : 0\n                    }, shapeArgs = point.shapeArgs;\n                    // Add point attribs\n                    if (!chart.styledMode) {\n                        extend(attribs, series.pointAttribs(point, point.state));\n                    }\n                    // Draw the point graphic.\n                    DPU.draw(point, {\n                        isNew: !point.graphic,\n                        animatableAttribs: shapeArgs,\n                        attribs: attribs,\n                        group: group,\n                        renderer: renderer,\n                        shapeType: shapeArgs && shapeArgs.d ? 'path' : 'circle'\n                    });\n                }\n            }\n            init() {\n                ScatterSeries.prototype.init.apply(this, arguments);\n                // Venn's opacity is a different option from other series\n                delete this.opacity;\n            }\n            /**\n             * Calculates the style attributes for a point. The attributes can vary\n             * depending on the state of the point.\n             * @private\n             * @param {Highcharts.Point} point\n             * The point which will get the resulting attributes.\n             * @param {string} [state]\n             * The state of the point.\n             * @return {Highcharts.SVGAttributes}\n             * Returns the calculated attributes.\n             */\n            pointAttribs(point, state) {\n                const series = this, seriesOptions = series.options || {}, pointOptions = point && point.options || {}, stateOptions = (state && seriesOptions.states[state]) || {}, options = merge(seriesOptions, { color: point && point.color }, pointOptions, stateOptions);\n                // Return resulting values for the attributes.\n                return {\n                    'fill': color(options.color)\n                        .brighten(options.brightness)\n                        .get(),\n                    // Set opacity directly to the SVG element, not to pattern #14372.\n                    opacity: options.opacity,\n                    'stroke': options.borderColor,\n                    'stroke-width': options.borderWidth,\n                    'dashstyle': options.borderDashStyle\n                };\n            }\n            translate() {\n                const chart = this.chart;\n                this.processedXData = this.xData;\n                this.generatePoints();\n                // Process the data before passing it into the layout function.\n                const relations = VennUtils.processVennData(this.options.data, VennSeries.splitter);\n                // Calculate the positions of each circle.\n                const { mapOfIdToShape, mapOfIdToLabelValues } = VennSeries.layout(relations);\n                // Calculate the scale, and center of the plot area.\n                const field = Object.keys(mapOfIdToShape)\n                    .filter((key) => {\n                    const shape = mapOfIdToShape[key];\n                    return shape && isNumber(shape.r);\n                })\n                    .reduce((field, key) => VennSeries.updateFieldBoundaries(field, mapOfIdToShape[key]), {\n                    top: 0,\n                    bottom: 0,\n                    left: 0,\n                    right: 0\n                }), scaling = VennSeries.getScale(chart.plotWidth, chart.plotHeight, field), scale = scaling.scale, centerX = scaling.centerX, centerY = scaling.centerY;\n                // Iterate all points and calculate and draw their graphics.\n                for (const point of this.points) {\n                    const sets = isArray(point.sets) ? point.sets : [], id = sets.join(), shape = mapOfIdToShape[id], dataLabelValues = mapOfIdToLabelValues[id] || {}, dlOptions = point.options && point.options.dataLabels;\n                    let shapeArgs, dataLabelWidth = dataLabelValues.width, dataLabelPosition = dataLabelValues.position;\n                    if (shape) {\n                        if (shape.r) {\n                            shapeArgs = {\n                                x: centerX + shape.x * scale,\n                                y: centerY + shape.y * scale,\n                                r: shape.r * scale\n                            };\n                        }\n                        else if (shape.d) {\n                            const d = shape.d;\n                            d.forEach((seg) => {\n                                if (seg[0] === 'M') {\n                                    seg[1] = centerX + seg[1] * scale;\n                                    seg[2] = centerY + seg[2] * scale;\n                                }\n                                else if (seg[0] === 'A') {\n                                    seg[1] = seg[1] * scale;\n                                    seg[2] = seg[2] * scale;\n                                    seg[6] = centerX + seg[6] * scale;\n                                    seg[7] = centerY + seg[7] * scale;\n                                }\n                            });\n                            shapeArgs = { d };\n                        }\n                        // Scale the position for the data label.\n                        if (dataLabelPosition) {\n                            dataLabelPosition.x = centerX + dataLabelPosition.x * scale;\n                            dataLabelPosition.y = centerY + dataLabelPosition.y * scale;\n                        }\n                        else {\n                            dataLabelPosition = {};\n                        }\n                        if (isNumber(dataLabelWidth)) {\n                            dataLabelWidth = Math.round(dataLabelWidth * scale);\n                        }\n                    }\n                    point.shapeArgs = shapeArgs;\n                    // Placement for the data labels\n                    if (dataLabelPosition && shapeArgs) {\n                        point.plotX = dataLabelPosition.x;\n                        point.plotY = dataLabelPosition.y;\n                    }\n                    // Add width for the data label\n                    if (dataLabelWidth && shapeArgs) {\n                        point.dlOptions = merge(true, {\n                            style: {\n                                width: dataLabelWidth\n                            }\n                        }, isObject(dlOptions, true) ? dlOptions : void 0);\n                    }\n                    // Set name for usage in tooltip and in data label.\n                    point.name = point.options.name || sets.join('∩');\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        VennSeries.splitter = 'highcharts-split';\n        VennSeries.defaultOptions = merge(ScatterSeries.defaultOptions, VennSeriesDefaults);\n        extend(VennSeries.prototype, {\n            axisTypes: [],\n            directTouch: true,\n            isCartesian: false,\n            pointArrayMap: ['value'],\n            pointClass: VennPoint,\n            utils: VennUtils\n        });\n        // Modify final series options.\n        addEvent(VennSeries, 'afterSetOptions', function (e) {\n            const options = e.options, states = options.states || {};\n            if (this.is('venn')) {\n                // Explicitly disable all halo options.\n                for (const state of Object.keys(states)) {\n                    states[state].halo = false;\n                }\n            }\n        });\n        SeriesRegistry.registerSeriesType('venn', VennSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return VennSeries;\n    });\n    _registerModule(_modules, 'masters/modules/venn.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n\n        return Highcharts;\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","GeometryUtilities","getCenterOfPoints","points","sum","reduce","point","x","y","length","getDistanceBetweenPoints","p1","p2","Math","sqrt","pow","getAngleBetweenPoints","atan2","Geometry","CircleUtilities","round","decimals","a","getAreaOfCircle","r","Error","PI","getCircularSegmentArea","h","acos","getCircleCircleIntersection","c1","c2","d","r1","r2","abs","r1Square","x1","x2","y1","y2","x0","y0","rx","ry","getCirclesIntersectionPoints","circles","i","arr","additional","slice","j","indexes","concat","map","p","isPointInsideCircle","circle","isPointInsideAllCircles","some","getCirclesIntersectionPolygon","filter","getOverlapBetweenCircles","overlap","d1","isCircle1CompletelyOverlappingCircle2","circle1","circle2","isPointOutsideAllCircles","getAreaOfIntersectionBetweenCircles","intersectionPoints","result","center","startPoint","angle","sort","b","arcs","data","midPoint","arc","index","indexOf","angle1","angle2","angleDiff","width","sin","cos","largeArc","push","unshift","draw","params","animatableAttribs","onComplete","css","renderer","animation","series","chart","hasRendered","options","graphic","attribs","getClassName","shouldDraw","shapeType","text","image","imageUrl","attr","shapeArgs","add","group","animate","isNew","destroy","Object","keys","SeriesRegistry","U","scatter","prototype","pointClass","ScatterPoint","seriesTypes","isNumber","isValid","value","borderColor","borderDashStyle","borderWidth","brighten","clip","colorByPoint","dataLabels","enabled","verticalAlign","formatter","name","inactiveOtherPoints","marker","opacity","showInLegend","legendType","states","hover","select","color","inactive","tooltip","pointFormat","legendSymbol","CU","GU","getOverlapBetweenCirclesByDistance","extend","isArray","isObject","isString","addOverlapToSets","relations","mapOfIdToProps","relation","sets","forEach","set","totalOverlap","overlapping","isSet","properties","bisect","f","tolerance","maxIterations","fA","fB","nMax","tol","delta","fX","n","getCentroid","simplex","getDistanceBetweenCirclesByOverlap","maxDistance","isValidRelation","invalid","loss","mapOfIdToCircle","totalLoss","diff","wantedOverlap","sortByTotalOverlap","NaN","geometry","geometryCircles","getLabelWidth","pos","internal","external","radius","min","Infinity","filteredExternals","findDistance","direction","testPos","Number","MAX_VALUE","getMarginFromCircles","margin","m","layoutGreedyVenn","positionedSets","mapOfIdToCircles","positionSet","coordinates","sortedByOverlap","shift","relationsWithTwoSets","bestPosition","best","positionedSet","positionedCircle","distance","possibleCoordinates","positionedSet2","positionedCircle2","overlap2","distance2","currentLoss","nelderMead","initial","sortByFx","fx","weightedSum","weight1","v1","weight2","v2","updateSimplex","shrinkSimplex","getPoint","centroid","worst","getSimplex","Array","reflected","expanded","contracted","pCon","processVennData","splitter","validSets","mapOfIdToRelation","join","combinations","remaining","set2","combination","split","id","A","Color","DPU","VennPoint","VennSeriesDefaults","VennUtils","animObject","parse","ScatterSeries","addEvent","merge","VennSeries","getLabelPosition","optimal","getLabelValues","setRelations","isInternal","externalCircle","internalCircle","position","layout","mapOfIdToShape","mapOfIdToLabelValues","shape","getScale","targetWidth","targetHeight","field","height","bottom","top","right","left","adjustX","adjustY","scale","centerX","centerY","updateFieldBoundaries","init","animOptions","setTimeout","duration","drawPoints","zIndex","styledMode","pointAttribs","state","arguments","seriesOptions","pointOptions","stateOptions","brightness","get","translate","processedXData","xData","generatePoints","key","scaling","plotWidth","plotHeight","dataLabelValues","dlOptions","dataLabelWidth","dataLabelPosition","seg","plotX","plotY","style","defaultOptions","axisTypes","directTouch","isCartesian","pointArrayMap","utils","e","is","halo","registerSeriesType"],"mappings":"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"}