@using System.ComponentModel.DataAnnotations
@using System.Net
@using HlidacStatu.Entities
@using HlidacStatu.Entities.Entities.PoliticiSelfAdmin
@using Microsoft.EntityFrameworkCore

@implements IAsyncDisposable

@inject IEmailService EmailService

@rendermode InteractiveServer

<h2>Přihlášení</h2>
<p>Pro pokračování je potřeba se nejprve přihlásit</p>

<section>
    <div class="col-4">
        
        <StatusMessage Message="@statusMessage"/>
        <EditForm EditContext="editContext" FormName="login">
            <DataAnnotationsValidator/>
            <h3>Zadejte svůj email, kam Vám zašleme odkaz pro přihlášení</h3>
            <hr/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText @bind-Value="Input.Email" id="email" class="form-control" autocomplete="username"
                           aria-required="true" placeholder="jmeno@domena.cz"/>
                <ValidationMessage For="() => Input.Email" class="text-danger"/>
            </div>
            <div>
                <button type="button" class="w-100 btn btn-lg btn-primary" @onclick="LoginUser">Přihlásit</button>
            </div>
            @if (false)
            {
                <h3>Zadaný email jsme nenalezli mezi zaregistrovanými</h3>
                <p>Vyplněním položek níže se můžete zaregistrovat.</p>
                <div class="mb-3">
                    <label for="name" class="form-label">Jméno</label>
                    <InputText @bind-Value="Input.Name" class="form-control" id="name" aria-required="true"
                               placeholder="Adam"/>
                    <ValidationMessage For="() => Input.Name" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="surname" class="form-label">Příjmení</label>
                    <InputText @bind-Value="Input.Surname" class="form-control" id="surname" aria-required="true"
                               placeholder="Novák"/>
                    <ValidationMessage For="() => Input.Surname" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="dob" class="form-label">Datum nebo rok narození
                        <small>(datum narození nezveřejňujeme, pouze
                            <InputText @bind-Value="Input.BirthYearOrDate" class="form-control" id="dob" aria-required="true"
                                       placeholder="1.1.1999"/>
                            používáme pro jednoznačnou identifikaci)</small></label>
                    <ValidationMessage For="() => Input.BirthYearOrDate" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="reginfo" class="form-label">Odkaz, kde můžeme ověřit email</label>
                    <InputText @bind-Value="Input.RegistrationInfo" class="form-control" id="reginfo" aria-required="true"/>
                    <ValidationMessage For="() => Input.RegistrationInfo" class="text-danger"/>
                </div>
                <div>
                    <button type="button" class="w-100 btn btn-lg btn-primary" @onclick="RegisterAsync">Registrovat</button>
                </div>
            }
        </EditForm>
    </div>
</section>

<section>
    <a href="@_loginToken" target="_blank">přihlašovací token !!! TEST</a>
</section>

@code {
    private string? statusMessage;

    private InputModel Input { get; set; } = new();

    private bool ShowRegistration { get; set; } = false;
    private DbEntities? _db = new();

    //todo: later delete this
    private string _loginToken;

    private EditContext editContext;
    private ValidationMessageStore messageStore;

    protected override void OnInitialized()
    {
        editContext = new EditContext(Input);
        messageStore = new ValidationMessageStore(editContext);
    }

    private async Task LoginUser()
    {
        if(!IsValidToLogin())
            return;

        var user = await _db.PoliticiEditorUsers
            .FirstOrDefaultAsync(u => u.EmailUpper == Input.Email.ToUpperInvariant());

        if (user is null)
        {
            statusMessage = "Email nebyl nalezen. Zkuste jiný mail, který máte u nás zaregistrovaný";
            ShowRegistration = true;
            return;
        }

        ShowRegistration = false;

        if (user.IsApproved == false)
        {
            statusMessage = "Uživatel existuje, ale ještě není schválen. Schválení musí proběhnout interním procesem Hlídače Státu";
            return;
        }

        var loginToken = PoliticiLoginToken.CreateTokenForUser(user.Id);

        _db.PoliticiLoginTokens.Add(loginToken);
        await _db.SaveChangesAsync();

        _loginToken = $"/Account/Login-Callback/{WebUtility.UrlEncode(loginToken.Token)}/{WebUtility.UrlEncode(user.EmailHash)}";
        var loginLink = $"https://admin.politici.hlidacstatu.cz/Account/Login-Callback/{WebUtility.UrlEncode(loginToken.Token)}/{WebUtility.UrlEncode(user.EmailHash)}";
        try
        {
            await EmailService.SendEmailAsync([user.Email], "Přihlašovací token", EmailBody(loginLink));
            statusMessage = "Na vaší emailovou adresu byl odeslán email s přihlašovacímmi údaji.";
        }
        catch (Exception e)
        {
            statusMessage = "Při odesílání emailu došlo k chybě";
        }
    }

    private sealed class InputModel
    {
        public string Email { get; set; } = "";

        public string Name { get; set; } = "";
        public string Surname { get; set; } = "";
        public string BirthYearOrDate { get; set; } = "";

        public string RegistrationInfo { get; set; } = "";
    }

    private async Task RegisterAsync()
    {
        if(!IsValidToRegister())
            return;

        // // Passed all checks - continue registration
        var newUser = new PoliticiEditorUser
        {
            Name = $"{Input.Name.Trim()} {Input.Surname.Trim()}",
            Email = Input.Email.Trim(),
            BirthYearOrDate = Input.BirthYearOrDate.Trim(),
            RegistrationInfo = Input.RegistrationInfo.Trim(),
            IsApproved = false,
        };
        newUser.SetEmailProperties();
        
        _db.PoliticiEditorUsers.Add(newUser);
        await _db.SaveChangesAsync();

        statusMessage = "Registrace úspěšná. Zkontrolujte email.";
        ShowRegistration = false;
    }

    private bool IsValidToLogin()
    {
        messageStore.Clear();
        editContext.NotifyValidationStateChanged();
        bool hasError = false;

        if (string.IsNullOrWhiteSpace(Input.Email) || !new EmailAddressAttribute().IsValid(Input.Email))
        {
            messageStore.Add(() => Input.Email, "Neplatný email.");
            hasError = true;
        }

        if (hasError)
        {
            editContext.NotifyValidationStateChanged();
        }

        return !hasError;
    }
    
    private bool IsValidToRegister()
    {
        messageStore.Clear();
        editContext.NotifyValidationStateChanged();
        bool hasError = false;

        if (string.IsNullOrWhiteSpace(Input.Name))
        {
            messageStore.Add(() => Input.Name, "Vyplňte prosím jméno.");
            hasError = true;
        }

        if (string.IsNullOrWhiteSpace(Input.Surname))
        {
            messageStore.Add(() => Input.Surname, "Vyplňte prosím příjmení.");
            hasError = true;
        }

        if (string.IsNullOrWhiteSpace(Input.BirthYearOrDate))
        {
            messageStore.Add(() => Input.BirthYearOrDate, "Vyplňte prosím datum nebo rok narození.");
            hasError = true;
        }

        if (string.IsNullOrWhiteSpace(Input.RegistrationInfo))
        {
            messageStore.Add(() => Input.RegistrationInfo, "Vyplňte prosím registrační informaci.");
            hasError = true;
        }

        if (string.IsNullOrWhiteSpace(Input.Email) || !new EmailAddressAttribute().IsValid(Input.Email))
        {
            messageStore.Add(() => Input.Email, "Neplatný email.");
            hasError = true;
        }

        if (hasError)
        {
            editContext.NotifyValidationStateChanged();
        }

        return !hasError;
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_db is not null)
        {
            await _db.DisposeAsync();
        }
    }

    private string EmailBody(string loginLink)
    {
        return $"<h1>Váš odkaz pro přihlášení do administrace politiků na Hlídači státu</h1><br />" +
               $"<p>Dobrý den,</p>" +
               $"<p>Děkujeme za rozhodnutí pomoci nám při kontrole, opravě nebo doplnění chybějících údajů u Vaší osoby na našem webu.</p>" +
               $"<p>Právě Vám byl přidělen jednorázový přístup do administrace části webu, kde evidujeme informace o Vaší osobě. Kliknutím na tento odkaz se přihlásíte.<br /></p>" +
               $"<p><a href=\"{loginLink}\">{loginLink}</a></p>" +
               $"<p>Vaší spolupráce si vážíme<br />S pozdravem<br />Hlídač státu, z.ú.<br />";
    }

}