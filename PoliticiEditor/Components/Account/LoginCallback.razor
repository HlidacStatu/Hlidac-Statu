@page "/Account/Login-Callback/{Token}/{Mhash}"
@using System.Security.Claims
@using HlidacStatu.Entities
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.EntityFrameworkCore

@implements IAsyncDisposable

@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

<h1>Přihlašuju...</h1>

@code {
    
    [Parameter]
    public string Token { get; set; }
    [Parameter]
    public string Mhash { get; set; }
    
    private DbEntities? _db = new();


    protected override async Task OnParametersSetAsync()
    {
        var user = await _db.PoliticiEditorUsers
            .FirstOrDefaultAsync(u => u.EmailHash == Mhash);
        
        if (user is null || user.IsApproved == false)
        {
            NavigationManager.NavigateTo("/Account/AccessDenied", forceLoad: true);
            return;
        }
        
        var loginToken = await _db.PoliticiLoginTokens
            .FirstOrDefaultAsync(t => t.Token == Token && !t.Used && t.ExpiresAt > DateTime.Now && t.UserId == user.Id);

        if (loginToken == null)
        {
            NavigationManager.NavigateTo("/Account/AccessDenied", forceLoad: true);
            return;
        }

        loginToken.Used = true;
        await _db.SaveChangesAsync();

        var claims = user.CreateClaims();

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        
        //if any issues arises then stuff from following page is needed to be implemented as well: 
        // https://learn.microsoft.com/en-us/aspnet/core/blazor/security/authentication-state?view=aspnetcore-9.0&pivots=server
        await HttpContextAccessor.HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
        await Task.Delay(300);
        HttpContextAccessor.HttpContext.Response.Redirect("/");
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_db is not null)
        {
            await _db.DisposeAsync();
        }
    }

}