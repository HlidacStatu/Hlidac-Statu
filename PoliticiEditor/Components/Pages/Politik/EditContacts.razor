@page "/EditContacts"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using HlidacStatu.Entities
@using HlidacStatu.Entities.Entities.PoliticiSelfAdmin
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using PoliticiEditor.Components.Account
@using Serilog

@implements IAsyncDisposable

@inject UserHelper UserHelper
@inject ToastService Toaster

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize]

@if (IsInitialized)
{
    <div class="card mb-3">
        <h5 class="card-header">Kontakty</h5>
        <div class="card-body">
            <div class="mx-auto">
                <EditForm EditContext="editContext" FormName="login">
                    <DataAnnotationsValidator/>
                    <h3>Zde můžete editovat své přihlašovací údaje</h3>
                    <hr/>
                    <ValidationSummary class="text-danger" role="alert"/>
                    @foreach (var contact in _model.UserLogins)
                    {
                        <div class="row">
                            <div class="col-3">
                                <label for="email">Email</label>
                                <input type="text" id="email"
                                       class="form-control"
                                       @bind:get="@contact.Email"
                                       @bind:set="@(x => SetEmail(contact, x))"/>
                                <ValidationMessage For="() => contact.Email" class="text-danger"/>
                            </div>
                            <div class="col-3">
                                <label for="phone">Telefon</label>
                                <input type="text" id="phone"
                                       class="form-control"
                                       @bind="@contact.PhoneNumber"/>
                                <ValidationMessage For="() => contact.PhoneNumber" class="text-danger"/>
                            </div>
                        </div>
                    }
                </EditForm>
            </div>
        </div>

        <div class="card-footer text-body-secondary d-flex">
            <button class="btn btn-primary" @onclick="@(AddContact)">Přidat kontakt</button>
            @if (_db?.ChangeTracker.HasChanges() == true)
            {
                <div class="ms-auto">
                    <button class="btn btn-success" @onclick="@(Save)">Uložit změny</button>
                    <button class="btn btn-warning" @onclick="@(Cancel)">Zrušit změny</button>
                </div>
            }
        </div>

    </div>
}
else
{
    <p>načítám data</p>
}


@code
{

    private EditContactsModel _model = new();
    private ILogger _logger = Log.ForContext<EditContacts>();
    private DbEntities? _db = new();

    private string? NameId { get; set; }
    private ClaimsPrincipal User { get; set; }

    private EditContext editContext;
    private ValidationMessageStore messageStore;
    private bool IsInitialized = false;
    
    private class EditContactsModel
    {
        public List<PoliticiEditorUser> UserLogins { get; set; } = new();
    }

    protected override async Task OnInitializedAsync()
    {
        User = await UserHelper.GetCurrentUserAsync();
        NameId = User.GetNameId();
        if (NameId is null)
        {
            Toaster.AddMessage("Chyba", $"Data se nepodařilo načíst", importance: ToastService.ToastMessage.ImportanceLevel.Error);
            _logger.Error($"Osoba is null for user with Name Id:{User.GetNameId()}");
            return;
        }

        await RefreshContextAsync();
    }
    
    private async Task RefreshContextAsync()
    {
        IsInitialized = false;
        if (_db is not null)
            await _db.DisposeAsync();

        _db = new DbEntities();

        var logins = await _db.PoliticiEditorUsers.Where(u => u.NameId == NameId).ToListAsync();
        _model = new EditContactsModel
        {
            UserLogins = logins
        };
        editContext = new EditContext(_model);
        messageStore = new ValidationMessageStore(editContext);
        IsInitialized = true;
    }

    private async Task Save()
    {
        if(!AreContactsValid())
            return;
        
        await Helpers.Save(_db, User.GetNameId(), Toaster, _logger);
        await RefreshContextAsync();
    }

    private async Task Cancel()
    {
        await RefreshContextAsync();
        Toaster.AddInfoMessage("Zrušeno", "Změny byly zrušeny.");
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_db is not null)
        {
            await _db.DisposeAsync();
        }
    }

    private void SetEmail(PoliticiEditorUser contact, string? value)
    {
        contact.Email = value;
        contact.SetEmailProperties();
    }

    private void AddContact()
    {
        PoliticiEditorUser newContact = new()
        {
            NameId = User.GetNameId(),
            IsApproved = true,
            IsLockedOut = false,
            Name = User.GetName(),
            RegistrationInfo = "Created in selfadmin"
                
        };
        _model.UserLogins.Insert(0, newContact);
        if (_db is not null)
        {
            _db.PoliticiEditorUsers.Add(newContact);
        }

    }

    private bool AreContactsValid()
    {
        messageStore.Clear();
        editContext.NotifyValidationStateChanged();
        bool hasError = false;
        foreach (var login in _model.UserLogins)
        {
            if (!IsValidContact(login))
                hasError = true;
        }
        
        if(hasError)
            editContext.NotifyValidationStateChanged();

        return !hasError;
    }

    private bool IsValidContact(PoliticiEditorUser user)
    {
        bool hasError = false;
        
        if (string.IsNullOrWhiteSpace(user.Email) || !new EmailAddressAttribute().IsValid(user.Email))
        {
            messageStore.Add(() => user.Email, "Neplatný email.");
            hasError = true;
        }
        
        
        //dont know if i need this
        if (hasError)
        {
            editContext.NotifyValidationStateChanged();
        }

        return !hasError;
    }
}
