@page "/EditContacts"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using PoliticiEditor.Components.Account
@using PoliticiEditor.Data
@using Serilog

@inject UserHelper UserHelper
@inject ToastService Toaster
@inject NavigationManager NavigationManager

@inject PoliticiLoginsDbContext DbContext


@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize]

<div class="card mb-3">
    <h5 class="card-header">Kontakty</h5>
    <div class="card-body">
        <div class="mx-auto">
            <EditForm EditContext="editContext" FormName="login" Model="_model">
                <DataAnnotationsValidator/>
                <h3>Zde můžete editovat své přihlašovací údaje</h3>
                <hr/>
                <ValidationSummary class="text-danger" role="alert"/>
                @foreach (var contact in _model.UserLogins)
                {
                    <div class="col-3">
                        <label for="email">Email</label>
                        <input type="text" id="email"
                               class="form-control"
                               @bind:get="@contact.Email"
                               @bind:set="@(x => SetEmail(contact, x))"/>
                        <ValidationMessage For="() => contact.Email" class="text-danger"/>
                    </div>
                    <div class="col-3">
                        <label for="phone">Telefon</label>
                        <input type="text" id="phone"
                               class="form-control"
                               @bind="@contact.PhoneNumber"/>
                        <ValidationMessage For="() => contact.PhoneNumber" class="text-danger"/>
                    </div>
                }
            </EditForm>
        </div>
    </div>

    <div class="card-footer text-body-secondary">
        <button class="btn btn-primary" @onclick="@(AddContact)">Přidat kontakt</button>
        <button class="btn btn-success" @onclick="@(Save)">Uložit změny</button>
        <button class="btn btn-warning" @onclick="@(Cancel)">Zrušit změny</button>
    </div>

</div>

@code
{

    private EditContactsModel _model = new();

    // private List<PoliticiEditorUser> UserLogins { get; set; } = new();
    private ClaimsPrincipal User { get; set; }
    private ILogger _logger = Log.ForContext<EditContacts>();

    private EditContext editContext;
    private ValidationMessageStore messageStore;

    private class EditContactsModel
    {
        public List<PoliticiEditorUser> UserLogins { get; set; } = new();
    }

    protected override async Task OnInitializedAsync()
    {
        User = await UserHelper.GetCurrentUserAsync();
        var nameId = User.GetNameId();

        if (string.IsNullOrWhiteSpace(nameId))
            return;

        _model.UserLogins = await DbContext.PoliticiEditorUsers.Where(u => u.NameId == nameId).ToListAsync();
        
        editContext = new EditContext(_model);
        messageStore = new ValidationMessageStore(editContext);
    }

    private async Task Save()
    {
        //todo: set email and hash
        if(!AreContactsValid())
            return;
        
        
        
        try
        {
            await DbContext.SaveChangesAsync();

            Toaster.AddInfoMessage("Uloženo", "Změny byly úspěšně uloženy.");
        }
        catch (Exception e)
        {
            Toaster.AddErrorMessage("Chyba", "Během ukládání došlo k chybě.");
            _logger.Error(e, "Couldnt save social data.");
        }

        NavigationManager.Refresh(true);
    }

    private void Cancel()
    {
        Toaster.AddInfoMessage("Zrušeno", "Změny byly zrušeny.");
        NavigationManager.Refresh(true);
    }

    private void SetEmail(PoliticiEditorUser contact, string? value)
    {
        contact.Email = value;
        contact.SetEmailProperties();
    }

    private void AddContact()
    {
        PoliticiEditorUser newContact = new()
        {
            NameId = User.GetNameId(),
            IsApproved = true,
            IsLockedOut = false,
            Name = User.GetName(),
            RegistrationInfo = "Created in selfadmin"
                
        };
        _model.UserLogins.Insert(0, newContact);
        DbContext.PoliticiEditorUsers.Add(newContact);

    }

    private bool AreContactsValid()
    {
        messageStore.Clear();
        editContext.NotifyValidationStateChanged();
        bool hasError = false;
        foreach (var login in _model.UserLogins)
        {
            if (!IsValidContact(login))
                hasError = true;
        }
        
        if(hasError)
            editContext.NotifyValidationStateChanged();

        return !hasError;
    }

    private bool IsValidContact(PoliticiEditorUser user)
    {
        bool hasError = false;
        
        if (string.IsNullOrWhiteSpace(user.Email) || !new EmailAddressAttribute().IsValid(user.Email))
        {
            messageStore.Add(() => user.Email, "Neplatný email.");
            hasError = true;
        }
        
        
        //dont know if i need this
        if (hasError)
        {
            editContext.NotifyValidationStateChanged();
        }

        return !hasError;
    }
}
