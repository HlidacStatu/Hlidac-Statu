@page "/EditParty"

@using System.Security.Claims
@using HlidacStatu.DS.Api
@using HlidacStatu.Entities
@using HlidacStatu.Repositories
@using Microsoft.AspNetCore.Authorization
@using PoliticiEditor.Components.Account
@using PoliticiEditor.Components.Autocomplete
@using Serilog

@implements IAsyncDisposable

@inject UserHelper UserHelper
@inject AutocompleteService AutocompleteService
@inject ToastService Toaster

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize]

@if (Osoba is null)
{
    <p class="text-warning">Nepodařilo se načíst data.</p>
    <a href="" target="_self">Zkusit znovu</a>
}
else
{
    <div class="card mb-3">
        <h5 class="card-header">Politické strany</h5>
        <div class="card-body">
            <h4>Upravte nebo doplňte členství v politické straně nebo hnutí. </h4>
            <p>V případě, že nejste členkou/členem žádné strany nebo hnutí, nic nevyplňujte. </p>
            <p>Neznáte-li přesné datum zahájení/ukončení členství, uveďte alespoň roky a to od 01.01.RRRR do 31.12.RRRR. Pokud členství trvá, uveďte jen datum zahájení.</p>
            <div class="mx-auto">
                @foreach (var politicalParty in PoliticalParties)
                {
                    <div class="row mb-3">
                        <div class="col-6">
                            <label for="polStrana">Politická strana nebo hnutí</label>
                            <HlidacAutocomplete
                                @key="politicalParty"
                                DefaultTextValue="@politicalParty.Organizace"
                                SearchFuncAsync="@((s, token) => OnSearch(s, token))"
                                OnAutocompleteItemSelected="@(item => FillPoliticalParty(politicalParty, item))"
                                TextSelector="@((autocomplete) => autocomplete.Text)"
                                TItem="Autocomplete">
                                <ItemTemplate>
                                    <div>
                                        <h6>@context.Text</h6>
                                        <small>@context.Description</small>
                                    </div>
                                </ItemTemplate>
                            </HlidacAutocomplete>
                        </div>
                        <div class="col-3">
                            <label for="datefrom">Datum zahájení členství</label>
                            <input type="date" id="datefrom"
                                   class="form-control"
                                   @bind="@politicalParty.DatumOd"/>
                        </div>
                        <div class="col-3">
                            <label for="dateto">Datum ukončení členství</label>
                            <input type="date" id="dateto"
                                   class="form-control"
                                   @bind="@politicalParty.DatumDo"/>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="card-footer text-body-secondary d-flex">
            <button class="btn btn-primary" @onclick="@(AddPartyAffiliation)">Přidat působení ve straně</button>
            <div class="ms-auto">
                <button class="btn btn-success" @onclick="@(Save)">Uložit změny</button>
                <button class="btn btn-warning" @onclick="@(Cancel)">Zrušit změny</button>
            </div>
        </div>

    </div>
}

@code
{
    private Osoba Osoba { get; set; }
    private List<OsobaEvent> PoliticalParties { get; set; } = new();
    private DbEntities? _db = new();
    private ClaimsPrincipal User { get; set; }
    private ILogger _logger = Log.ForContext<EditParty>();

    protected override async Task OnInitializedAsync()
    {
        User = await UserHelper.GetCurrentUserAsync();
        var nameId = User.GetNameId();
        Osoba = OsobaRepo.GetByNameId(nameId);
        if (Osoba is null)
        {
            Toaster.AddMessage("Chyba", $"Data se nepodařilo načíst", importance: ToastService.ToastMessage.ImportanceLevel.Error);
            _logger.Error($"Osoba is null for user with Name Id:{User.GetNameId()}");
            return;
        }

        await RefreshContextAsync();
    }

    private void AddPartyAffiliation()
    {
        OsobaEvent newEvent = new OsobaEvent()
        {
            OsobaId = Osoba.InternalId,
            Type = (int)OsobaEvent.Types.PolitickaStrana,
            AddInfo = "člen"
        };
        PoliticalParties.Insert(0, newEvent);
        if (_db is not null)
        {
            _db.OsobaEvent.Add(newEvent);
        }
    }

    private async Task RefreshContextAsync()
    {
        if (_db is not null)
            await _db.DisposeAsync();

        _db = new DbEntities();

        PoliticalParties = OsobaEventRepo
            .GetByOsobaIdTracked(_db, Osoba.InternalId, x => x.Type == (int)OsobaEvent.Types.PolitickaStrana)
            .OrderBy(p => p.DatumOd).ToList();
    }

    public async ValueTask DisposeAsync()
    {
        if (_db is not null)
        {
            await _db.DisposeAsync();
        }
    }

    private async Task Save()
    {
        await Helpers.Save(_db, User.GetNameId(), Toaster, _logger);
        await RefreshContextAsync();
    }

    private async Task Cancel()
    {
        Toaster.AddInfoMessage("Zrušeno", "Změny byly zrušeny.");
        await RefreshContextAsync();
    }

    private async Task<List<Autocomplete>> OnSearch(string query, CancellationToken cancellationToken)
    {
        var result = AutocompleteService.FindPolitickaStrana(query);
        result.Insert(0, new Autocomplete()
        {
            Text = query,
        });
        return result;
    }

    private void FillPoliticalParty(OsobaEvent politicalParty, Autocomplete item)
    {
        politicalParty.Organizace = item.Text.Trim();
        if (!string.IsNullOrWhiteSpace(item.Id))
        {
            politicalParty.Ico = item.Id.Trim();
        }
    }
}
