@page "/EditPerson"

@using System.Security.Claims
@using HlidacStatu.Entities
@using HlidacStatu.Repositories
@using HlidacStatu.Repositories.Auditing
@using Microsoft.AspNetCore.Authorization
@using PoliticiEditor.Components.Account
@using Serilog

@implements IAsyncDisposable

@inject UserHelper UserHelper
@inject ToastService Toaster

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@attribute [Authorize]

@if (Osoba is null)
{
    <p class="text-warning">Nepodařilo se načíst osobu.</p>
    <a href="" target="_self">Zkusit znovu</a>
}
else
{
    <div class="card mb-3">
        <h5 class="card-header">@Osoba.NameId</h5>
        <div class="card-body">
            <div class="row g-0">
                <div class="col-sm-3 col-xl-2 me-2">
                    <img src="@Osoba.GetPhotoUrl()" class="img-fluid rounded-start mb-3" alt="Fotka">
                </div>
                <div class="col-sm-8 col-xl-9">
                    <div class="mx-auto">
                        <div class="mb-3">
                            <label for="titulPred">Titul(y) před jménem</label>
                            <input type="text" id="titulPred"
                                   class="@(EditModeInputClass)"
                                   @bind="@Osoba.TitulPred"/>
                        </div>
                    </div>
                    <div class="mx-auto">
                        <div class="mb-3">
                            <label for="titulZa">Titul(y) za jménem</label>
                            <input type="text" id="titulZa"
                                   class="@(EditModeInputClass)"
                                   @bind="@Osoba.TitulPo"/>
                        </div>
                    </div>
                    @if (Osoba.Narozeni is null)
                    {
                        <p>Prosíme o kontrolu nebo doplnění data narození, které nebude zveřejněno. Pro nás je toto datum nezbytné pro korektní identifikaci osoby.</p>
                        <div class="mx-auto">
                            <div class="mb-3">
                                <label for="narozeni">Datum narození (DD.MM.RRRR)</label>
                                <input type="date" id="narozeni"
                                       class="@(EditModeInputClass)"
                                       @bind="@Osoba.Narozeni"/>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="card-footer text-body-secondary d-flex">
            @if (_db?.ChangeTracker.HasChanges() == true)
            {
                <div class="ms-auto">
                    <button class="btn btn-success" @onclick="@(Save)">Uložit změny</button>
                    <button class="btn btn-warning" @onclick="@(Cancel)">Zrušit změny</button>
                </div>
            }
        </div>
    </div>
}



@code
{
    private Osoba? Osoba { get; set; }
    private DbEntities? _db = new();
    private ClaimsPrincipal User { get; set; }
    const string EditModeInputClass = "form-control";
    private ILogger _logger = Log.ForContext<EditPerson>();

    protected override async Task OnInitializedAsync()
    {
        User = await UserHelper.GetCurrentUserAsync();
        await RefreshContextAsync();
    }

    private async Task RefreshContextAsync()
    {
        if (_db is not null)
            await _db.DisposeAsync();

        _db = new DbEntities();

        var nameId = User.GetNameId();
        Osoba = OsobaRepo.GetByNameIdTracked(_db, nameId);
        if (Osoba is null)
        {
            Toaster.AddMessage("Chyba", $"Data se nepodařilo načíst", importance: ToastService.ToastMessage.ImportanceLevel.Error);
            _logger.Error($"Osoba is null for user with Name Id:{User.GetNameId()}");
            return;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_db is not null)
        {
            await _db.DisposeAsync();
        }
    }

    private async Task Save()
    {
        await Helpers.Save(_db, User.GetNameId(), Toaster, _logger);
        await RefreshContextAsync();
    }

    private async Task Cancel()
    {
        await RefreshContextAsync();
        Toaster.AddInfoMessage("Zrušeno", "Změny byly zrušeny.");
    }

}
