@page "/EditPerson"

@using System.Security.Claims
@using HlidacStatu.Entities
@using HlidacStatu.Repositories
@using HlidacStatu.Repositories.Auditing
@using Microsoft.AspNetCore.Authorization
@using PoliticiEditor.Components.Account

@implements IAsyncDisposable

@inject UserHelper UserHelper

@rendermode InteractiveServer
@attribute [Authorize]

<div class="card mb-3">
    <h5 class="card-header">@Osoba.NameId</h5>
    <div class="card-body">
        <div class="row g-0">
            <div class="col-sm-3 col-xl-2">
                <img src="@Osoba.GetPhotoUrl()" class="img-fluid rounded-start mb-3" alt="Fotka">
            </div>
            <div class="col-sm-9 col-xl-10">
                <div class="mx-auto">
                    <div class="mb-3">
                        <label for="titulPred">Titul(y) před jménem oddělené čárkou</label>
                        <input type="text" id="titulPred"
                               class="@(EditModeInputClass)"
                               @bind="@Osoba.TitulPred"/>
                    </div>
                </div>
                <div class="mx-auto">
                    <div class="mb-3">
                        <label for="titulZa">Titul(y) za jménem oddělené čárkou</label>
                        <input type="text" id="titulZa"
                               class="@(EditModeInputClass)"
                               @bind="@Osoba.TitulPo"/>
                    </div>
                </div>
                @if (Osoba.Narozeni is null)
                {
                    <div class="mx-auto">
                        <div class="mb-3">
                            <label for="narozeni">Datum narození</label>
                            <input type="date" id="narozeni"
                                   class="@(EditModeInputClass)"
                                   @bind="@Osoba.Narozeni"/>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="card-footer text-body-secondary">
        <button class="btn btn-success" @onclick="@(Save)">Uložit změny</button>
        <button class="btn btn-warning" @onclick="@(Cancel)">Zrušit změny</button>
    </div>
</div>

@code
{
    private Osoba? Osoba { get; set; }

    private DbEntities? _db = new();

    private ClaimsPrincipal User { get; set; }

    const string EditModeInputClass = "form-control";

    protected override async Task OnInitializedAsync()
    {
        User = await UserHelper.GetCurrentUserAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await RefreshContextAsync();
    }

    private async Task RefreshContextAsync()
    {
        if (_db is not null)
            await _db.DisposeAsync();

        _db = new DbEntities();

        var nameId = User.GetNameId();
        Osoba = OsobaRepo.GetByNameIdTracked(_db, nameId);
        if (Osoba is null)
        {
            throw new Exception("Osobu nejde najít");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_db is not null)
        {
            await _db.DisposeAsync();
        }
    }

    private async Task Save()
    {
        //todo: this should be probably created after db.save? So we get prop. Ids?
        var auditLogs = ChangeTracker.CreateAuditLogs(_db, User.GetNameId());

        await _db!.SaveChangesAsync();

        await ChangeTracker.SaveAuditLogAsync(auditLogs);
        await RefreshContextAsync();
    }

    private async Task Cancel()
    {
        await RefreshContextAsync();
    }

}
