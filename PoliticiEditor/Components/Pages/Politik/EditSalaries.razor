@page "/EditSalaries"

@using System.Security.Claims
@using HlidacStatu.DS.Api
@using HlidacStatu.Entities
@using HlidacStatu.Repositories
@using HlidacStatu.Repositories.Auditing
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using PoliticiEditor.Components.Account
@using PoliticiEditor.Components.Autocomplete


@implements IAsyncDisposable

@inject AutocompleteService AutocompleteService
@inject UserHelper UserHelper

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize]

<div class="card mb-3">
    <h5 class="card-header">Přidat příjem</h5>
    <div class="card-body">
        <div>
            <div class="mb-3">
                <label for="Organizace">Organizace, která platí</label>
                <HlidacAutocomplete SearchFuncAsync="@((s, token) => OnSearch(s, token))"
                                    OnAutocompleteItemSelected="@(item => FillOrganizace(item))"
                                    TextSelector="@((autocomplete) => autocomplete.Text)"
                                    TItem="Autocomplete">
                    <ItemTemplate>
                        <div>
                            <h6>@context.Text</h6>
                            <small>@context.Description</small>
                        </div>
                    </ItemTemplate>
                </HlidacAutocomplete>
            </div>
            <div class="mb-3">
                <label for="Rok">Uveďte, za který kalendářní rok vyplňujete příjem</label>
                <input id="Rok" type="number"
                       class="form-control @(IsValidYear(NewIncome.Rok) ? "" : "is-invalid")"
                       @bind="NewIncome.Rok"/>
            </div>
            <div class="mb-3">
                <label for="PocetMesicu">Uveďte kolik měsíců jste v daném roce vykonával funkci</label>
                <input id="PocetMesicu" type="text"
                       class="form-control"
                       @bind:get="@NewIncome.PocetMesicu?.ToString("N0")"
                       @bind:set="(value) => NewIncome.PocetMesicu = ParseDecimal(value)"/>
            </div>
            <div class="form-check">
                <label for="Uvolneny">Byl jste při vykonávání funkce uvolněný?</label>
                <input id="Uvolneny" type="checkbox"
                       class="form-check-input"
                       @bind:get="@(NewIncome.Uvolneny == 1)"
                       @bind:set="(value) => NewIncome.Uvolneny = value ? 1 : 0"/>
            </div>
            <div class="mb-3">
                <label for="NazevFunkce">Uveďte název funkce, kterou jste vykonával</label>
                <input id="NazevFunkce" class="form-control" @bind="NewIncome.NazevFunkce"/>
            </div>
            <div class="mb-3">
                <label for="Plat">Jaký jste za danou funkci dostával plat</label>
                <input id="Plat" type="text"
                       class="form-control"
                       @bind:get="@NewIncome.Plat?.ToString("N2")"
                       @bind:set="(value) => NewIncome.Plat = ParseDecimal(value)"/>
            </div>
            <div class="mb-3">
                <label for="Odmeny">Jaké mimořádné odměny jste za funkci dostal</label>
                <input id="Odmeny" type="text"
                       class="form-control"
                       @bind:get="@NewIncome.Odmeny?.ToString("N2")"
                       @bind:set="(value) => NewIncome.Odmeny = ParseDecimal(value)"/>
            </div>
            <div class="mb-3">
                <label for="Prispevky">Uveďte výši dalších příspěvků, které jste dostával</label>
                <input id="Prispevky" type="text"
                       class="form-control"
                       @bind:get="@NewIncome.Prispevky?.ToString("N2")"
                       @bind:set="(value) => NewIncome.Prispevky = ParseDecimal(value)"/>
            </div>
            <div class="mb-3">
                <label for="NefinancniBonus">Vyplňte, pokud jste měl i nějaký nefinanční bonus</label>
                <input id="NefinancniBonus" class="form-control" @bind="NewIncome.NefinancniBonus"/>
            </div>
            <div class="mb-3">
                <label for="PoznamkaPlat">Chcete uvést poznámku? Tady je vhodné místo</label>
                <input id="PoznamkaPlat" class="form-control" @bind="NewIncome.PoznamkaPlat"/>
            </div>
        </div>
    </div>

    <div class="card-footer text-body-secondary">
        <button class="btn btn-primary" @onclick="@(Save)">Přidat příjem</button>
        <button class="btn btn-danger" @onclick="@(Cancel)">Zrušit změny</button>
    </div>

</div>

<div class="card mb-3">
    <h5 class="card-header">Přehled příjmů o kterých víme</h5>
    <div class="card-body">
        <div>
            <table class="table table-bordered table-sm align-middle auto-width">
                <thead>
                <tr class="table-light">
                    <th>Organizace</th>
                    <th>Rok</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var platyItem in Platy)
                {
                    <tr>
                        <td>
                            @(GetOrgName(platyItem.IdOrganizace))
                        </td>
                        <td>@platyItem.Rok.ToString("F0")</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>


@code
{
    private string? NameId { get; set; }
    private ClaimsPrincipal User { get; set; }
    private DbEntities? _db = new();
    private List<PpPrijem> Platy { get; set; } = new();
    private Dictionary<int, string?> PreloadedOrgs = new();
    private PpPrijem NewIncome { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = await UserHelper.GetCurrentUserAsync();
        NameId = User.GetNameId();
        if (NameId is null)
        {
            throw new Exception("Osobu nejde najít");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await RefreshContextAsync();
    }

    private async Task RefreshContextAsync()
    {
        NewIncome = new PpPrijem()
        {
            Nameid = NameId,
            SkrytaPoznamka = $"Plat přidal manuálně {NameId} dne {DateTime.Now:s}"
        };

        if (_db is not null)
            await _db.DisposeAsync();

        _db = new DbEntities();

        Platy = await _db.PpPrijmy
            .Where(p => p.Nameid == NameId)
            .ToListAsync();

        await PreloadOrgs();
    }

    public async ValueTask DisposeAsync()
    {
        if (_db is not null)
        {
            await _db.DisposeAsync();
        }
    }

    private async Task Save()
    {
        // připojit nový záznam
        if (_db is not null)
        {
            _db.PpPrijmy.Add(NewIncome);
        }
        
        //todo: udělat kontroly jestli jsou data ok (např. jestli se neposílají pitomosti)
        
        var auditLogs = ChangeTracker.CreateAuditLogs(_db, User.GetNameId());
        await _db.SaveChangesAsync();
        await ChangeTracker.SaveAuditLogAsync(auditLogs); //this needs to be called after db changes are made

        await RefreshContextAsync();
    }

    private async Task Cancel()
    {
        await RefreshContextAsync();
    }

    private async Task<string?> GetOrgNameForId(int? platyItemIdOrganizace)
    {
        if (platyItemIdOrganizace is null)
            return String.Empty;

        var foundOrg = await _db!.PuOrganizace.AsNoTracking()
            .Where(o => o.Id == platyItemIdOrganizace)
            .Include(o => o.FirmaDs)
            .FirstOrDefaultAsync();

        return foundOrg?.Nazev;
    }

    private async Task PreloadOrgs()
    {
        if (Platy is null || !Platy.Any())
            return;

        foreach (var plat in Platy)
        {
            if (!PreloadedOrgs.ContainsKey(plat.IdOrganizace))
            {
                PreloadedOrgs.Add(plat.IdOrganizace, await GetOrgNameForId(plat.IdOrganizace));
            }
        }
    }

    private string? GetOrgName(int idOrganizace)
    {
        return PreloadedOrgs.TryGetValue(idOrganizace, out var name) ? name : null;
    }
    
    private decimal? ParseDecimal(string? inputValue)
    {
        string cleanInput = inputValue.Replace(" ", "");
        if (Decimal.TryParse(cleanInput, out var result))
        {
            return result;
        }

        return null;
    }
    
    private bool IsValidYear(int year) => year is > 2000 and < 2200;
    
    private async Task<List<Autocomplete>> OnSearch(string query, CancellationToken cancellationToken)
    {
        var result = await AutocompleteService.FindCompany(query, cancellationToken);
        //we need to have company - there is no place for free text here
        // result.Insert(0, new Autocomplete()
        // {
        //     Text = query,
        //     DisplayText = query
        // });
        return result;
    }

    private async Task FillOrganizace(Autocomplete item)
    {
        string? ico = null;
        if (item.Id?.Contains("ico:") == true)
        {
            ico = item.Id.Replace("ico:", "").Trim();
        }
    
        if (ico is null)
            return;
        
        var foundFirmy = await _db!.FirmaDs.AsNoTracking()
            .Where(o => o.Ico == ico).ToListAsync();
    
        if (foundFirmy is null || !foundFirmy.Any())
            return;
    
        int? orgId = null;
        foreach (var foundFirma in foundFirmy)
        {
            var foundPuOrg = await _db!.PuOrganizace.AsNoTracking()
                .Where(o => o.DS == foundFirma.DatovaSchranka)
                .FirstOrDefaultAsync();
    
            if (foundPuOrg is not null)
            {
                orgId = foundPuOrg.Id;
                break;
            }
        }
    
        if (orgId is null)
        {
            var firstCompany = foundFirmy.FirstOrDefault();
            if(firstCompany is null)
                throw new Exception("Firma nenalezena!");
            
            // create new org
            var newOrganizace = new PuOrganizace()
            {
                DS = firstCompany.DatovaSchranka
            };
            await PpRepo.UpsertOrganizaceAsync(newOrganizace);
            orgId = newOrganizace.Id;
        }
    
        if (orgId is null)
        {
            throw new Exception("id stale nenalezeno");
        }
        
        
        //try update preloadedOrgs
        if (!PreloadedOrgs.ContainsKey(orgId.Value))
        {
            PreloadedOrgs.Add(orgId.Value, item.Text);
        }
    
        NewIncome.IdOrganizace = orgId.Value;
    
    }
}
