@page "/EditSalaries"

@using System.Security.Claims
@using HlidacStatu.DS.Api
@using HlidacStatu.Entities
@using HlidacStatu.Repositories
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using PoliticiEditor.Components.Account
@using PoliticiEditor.Components.Autocomplete
@using Serilog

@implements IAsyncDisposable

@inject AutocompleteService AutocompleteService
@inject UserHelper UserHelper
@inject ToastService Toaster

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize]


<div class="card mb-3">
    <h5 class="card-header">Přehled příjmů od státních a polostátních organizací či veřejných institucí, které aktuálně
        evidujeme za rok 2024</h5>
    <p>Pokud o sobě najdete jakékoliv informace, které nejsou správné, kontaktujte nás na e-mailu <a href="mailto:podpora@hlidacstatu.cz">podpora@hlidacstatu.cz</a></p>
    <div class="card-body">
        <div>
            <table class="table table-bordered table-sm align-middle auto-width">
                <thead>
                <tr class="table-light">
                    <th>Organizace</th>
                    <th>Rok</th>
                    <th>Počet měsíců ve funkci</th>
                    <th>Plat (roční hrubá částka před zdaněním)</th>
                    <th>Mimořádné odměny</th>
                    <th>Jiné fin. příspěvky</th>
                    <th>Nefinanční bonus</th>
                    <th>Poznámka</th>
                    <th>Akce</th>
                </tr>
                </thead>
                <tbody>
                @if (Platy.Any())
                {
                    foreach (var platyItem in Platy)
                    {
                        if (platyItem.Id == _noteForPrijemId)
                        {
                            <tr>
                                <td>@(GetOrgName(platyItem.IdOrganizace))</td>
                                <td colspan="7">
                                    <label for="poznamka">Poznámka</label>
                                    <input type="text" id="poznamka" class="form-control" @bind="platyItem.SkrytaPoznamka"/>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-success" @onclick="@(() => SaveNote(platyItem))">Uložit poznámku</button>
                                    <button class="btn btn-sm btn-warning" @onclick="@(Cancel)">Zrušit poznámku</button>
                                </td>
                            </tr>
                            
                        }
                        else
                        {
                            <tr>
                                <td>
                                    @(GetOrgName(platyItem.IdOrganizace))
                                </td>
                                <td>@platyItem.Rok.ToString("F0")</td>
                                <td>@platyItem.PocetMesicu?.ToString("F0")</td>
                                <td>@platyItem.Plat?.ToString("F0")</td>
                                <td>@platyItem.Odmeny?.ToString("F0")</td>
                                <td>@platyItem.Prispevky?.ToString("F0")</td>
                                <td>@platyItem.NefinancniBonus</td>
                                <td>@platyItem.SkrytaPoznamka</td>
                                <td><button class="btn btn-sm btn-outline-success" @onclick="@(() => _noteForPrijemId = platyItem.Id)">Přidat poznámku</button></td>
                            </tr>
                        }
                    }
                }
                else
                {
                    <b>Žádné příjmy z jiných firem a organizací u Vás neevidujeme.</b>
                }

                </tbody>
            </table>
        </div>
    </div>
</div>

<h3 class="mb-4">Přidání chybějícího příjmu</h3>
<div class="card mb-3 border-success" style="max-width:50em">
    <h5 class="card-header">Přidat příjem</h5>
    <div class="card-body">
        <div class="mx-auto">
            <EditForm EditContext="editContext" FormName="editSalaries">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="mb-3">
                    <label for="Rok">Kalendářní rok, za který vyplňujete příjem</label>
                    <input id="Rok" type="number"
                           class="form-control @(IsValidYear(NewIncome.Rok) ? "" : "is-invalid") "
                           disabled
                           @bind="NewIncome.Rok"/>
                </div>
                <div class="mb-3">
                    <label for="Organizace">Organizace, která platí</label>
                    <HlidacAutocomplete SearchFuncAsync="@((s, token) => OnSearch(s, token))"
                                        OnAutocompleteItemSelected="@(item => FillOrganizace(item))"
                                        TextSelector="@((autocomplete) => autocomplete.Text)"
                                        Context="autocompleteCtx"
                                        TItem="Autocomplete">
                        <ItemTemplate>
                            <div>
                                <h6>@autocompleteCtx.Text</h6>
                                <small>@autocompleteCtx.Description</small>
                            </div>
                        </ItemTemplate>
                    </HlidacAutocomplete>
                    <ValidationMessage For="() => NewIncome.IdOrganizace" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="PocetMesicu">Uveďte kolik měsíců jste v daném roce vykonával funkci</label>
                    <input id="PocetMesicu" type="text"
                           class="form-control"
                           @bind:get="@NewIncome.PocetMesicu?.ToString("N0")"
                           @bind:set="(value) => NewIncome.PocetMesicu = ParseDecimal(value)"/>
                    <ValidationMessage For="() => NewIncome.PocetMesicu" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="NazevFunkce">Uveďte název funkce/pozice, kterou jste vykonával</label>
                    <input id="NazevFunkce" class="form-control" @bind="NewIncome.NazevFunkce"/>
                </div>
                <div class="mb-3">
                    <label for="Plat">Plat či základní příjem bez odměn. <b>Uveďte celkovou roční hrubou částku před
                            zdaněním.</b></label>
                    <input id="Plat" type="text"
                           class="form-control"
                           @bind:get="@NewIncome.Plat?.ToString("N2")"
                           @bind:set="(value) => NewIncome.Plat = ParseDecimal(value)"/>
                    <ValidationMessage For="() => NewIncome.Plat" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="Odmeny">Mimořádné finanční odměny. <b>Uveďte celkovou roční hrubou částku před
                            zdaněním.</b></label>
                    <input id="Odmeny" type="text"
                           class="form-control"
                           @bind:get="@NewIncome.Odmeny?.ToString("N2")"
                           @bind:set="(value) => NewIncome.Odmeny = ParseDecimal(value)"/>
                    <ValidationMessage For="() => NewIncome.Odmeny" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="Prispevky">Jiné finanční příjmy či příspěvky. <b>Uveďte celkovou roční hrubou částku
                            před zdaněním.</b></label>
                    <input id="Prispevky" type="text"
                           class="form-control"
                           @bind:get="@NewIncome.Prispevky?.ToString("N2")"
                           @bind:set="(value) => NewIncome.Prispevky = ParseDecimal(value)"/>
                    <ValidationMessage For="() => NewIncome.Prispevky" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="NefinancniBonus">Nefinanční bonus (např. služební auto, pojištění apod.). Uveďte
                        slovně.</label>
                    <input id="NefinancniBonus" class="form-control" @bind="NewIncome.NefinancniBonus"/>
                    <ValidationMessage For="() => NewIncome.NefinancniBonus" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="SkrytaPoznamka">Poznámka či upřesnění pro Hlídač státu.</label>
                    <input id="SkrytaPoznamka" class="form-control" @bind="NewIncome.SkrytaPoznamka"/>
                </div>
            </EditForm>
        </div>
    </div>

    <div class="card-footer text-body-secondary d-flex">
        <div class="ms-auto">
            <button class="btn btn-success" @onclick="@(Save)">Uložit změny</button>
            <button class="btn btn-warning" @onclick="@(Cancel)">Zrušit změny</button>
        </div>
    </div>

</div>



@code
{
    private string? NameId { get; set; }
    private ClaimsPrincipal User { get; set; }
    private DbEntities? _db = new();
    private List<PpPrijem> Platy { get; set; } = new();
    private Dictionary<int, string?> PreloadedOrgs = new();
    private PpPrijem NewIncome { get; set; }
    private ILogger _logger = Log.ForContext<EditSalaries>();
    
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    private int? _noteForPrijemId = null;


    protected override async Task OnInitializedAsync()
    {
        User = await UserHelper.GetCurrentUserAsync();
        NameId = User.GetNameId();
        if (NameId is null)
        {
            Toaster.AddMessage("Chyba", $"Data se nepodařilo načíst", importance: ToastService.ToastMessage.ImportanceLevel.Error);
            _logger.Error($"Osoba is null for user with Name Id:{User.GetNameId()}");
            return;
        }

        await RefreshContextAsync();
    }

    private async Task RefreshContextAsync()
    {
        NewIncome = new PpPrijem()
        {
            Nameid = NameId,
            Rok = PpRepo.DefaultYear,
            SkrytaPoznamka = $"Plat přidal manuálně {NameId} dne {DateTime.Now:s}"
        };
        
        editContext = new EditContext(NewIncome);
        messageStore = new ValidationMessageStore(editContext);

        if (_db is not null)
            await _db.DisposeAsync();

        _db = new DbEntities();

        Platy = await _db.PpPrijmy
            .Where(p => p.Nameid == NameId && p.Rok == HlidacStatu.Repositories.PuRepo.DefaultYear)
            .ToListAsync();

        await PreloadOrgs();
    }

    public async ValueTask DisposeAsync()
    {
        if (_db is not null)
        {
            await _db.DisposeAsync();
        }
    }

    private async Task Save()
    {
        if(!IsValidForm())
            return;
        
        // připojit nový záznam
        if (_db is not null)
        {
            _db.PpPrijmy.Add(NewIncome);
        }

        await Helpers.Save(_db, User.GetNameId(), Toaster, _logger);

        await RefreshContextAsync();
    }

    private async Task Cancel()
    {
        await RefreshContextAsync();
        Toaster.AddInfoMessage("Zrušeno", "Změny byly zrušeny.");
    }

    private async Task<string?> GetOrgNameForId(int? platyItemIdOrganizace)
    {
        if (platyItemIdOrganizace is null)
            return String.Empty;

        var foundOrg = await _db!.PuOrganizace.AsNoTracking()
            .Where(o => o.Id == platyItemIdOrganizace)
            .Include(o => o.FirmaDs)
            .FirstOrDefaultAsync();

        return foundOrg?.Nazev;
    }

    private async Task PreloadOrgs()
    {
        if (Platy is null || !Platy.Any())
            return;

        foreach (var plat in Platy)
        {
            if (!PreloadedOrgs.ContainsKey(plat.IdOrganizace))
            {
                PreloadedOrgs.Add(plat.IdOrganizace, await GetOrgNameForId(plat.IdOrganizace));
            }
        }
    }

    private string? GetOrgName(int idOrganizace)
    {
        return PreloadedOrgs.TryGetValue(idOrganizace, out var name) ? name : null;
    }

    private decimal? ParseDecimal(string? inputValue)
    {
        string cleanInput = inputValue.Replace(" ", "");
        if (Decimal.TryParse(cleanInput, out var result))
        {
            return result;
        }

        return null;
    }

    private bool IsValidYear(int year) => year is > 2000 and < 2200;

    private async Task<List<Autocomplete>> OnSearch(string query, CancellationToken cancellationToken)
    {
        var result = await AutocompleteService.FindCompany(query, cancellationToken);
        //we need to have company - there is no place for free text here
        
        return result;
    }

    private async Task FillOrganizace(Autocomplete item)
    {
        string? ico = null;
        if (item.Id?.Contains("ico:") == true)
        {
            ico = item.Id.Replace("ico:", "").Trim();
        }

        if (ico is null)
            return;

        var foundFirmy = await _db!.FirmaDs.AsNoTracking()
            .Where(o => o.Ico == ico).ToListAsync();

        if (foundFirmy is null || !foundFirmy.Any())
            return;

        int? orgId = null;
        foreach (var foundFirma in foundFirmy)
        {
            var foundPuOrg = await _db!.PuOrganizace.AsNoTracking()
                .Where(o => o.DS == foundFirma.DatovaSchranka)
                .FirstOrDefaultAsync();

            if (foundPuOrg is not null)
            {
                orgId = foundPuOrg.Id;
                break;
            }
        }

        if (orgId is null)
        {
            var firstCompany = foundFirmy.FirstOrDefault();
            if (firstCompany is null)
                throw new Exception("Firma nenalezena!");

            // create new org
            var newOrganizace = new PuOrganizace()
            {
                DS = firstCompany.DatovaSchranka
            };
            await PpRepo.UpsertOrganizaceAsync(newOrganizace);
            orgId = newOrganizace.Id;
        }

        if (orgId is null)
        {
            throw new Exception("id stale nenalezeno");
        }


        //try update preloadedOrgs
        if (!PreloadedOrgs.ContainsKey(orgId.Value))
        {
            PreloadedOrgs.Add(orgId.Value, item.Text);
        }

        NewIncome.IdOrganizace = orgId.Value;
    }
    
    private bool IsValidForm()
    {
        messageStore.Clear();
        editContext.NotifyValidationStateChanged();
        bool hasError = false;

        if (NewIncome.IdOrganizace == 0)
        {
            messageStore.Add(() => NewIncome.IdOrganizace, "Vyberte organizaci");
            hasError = true;
        }

        if (NewIncome.Plat is null && NewIncome.Prispevky is null && NewIncome.Odmeny is null 
            && string.IsNullOrWhiteSpace(NewIncome.NefinancniBonus))
        {
            messageStore.Add(() => NewIncome.Plat, "Musí být vyplněn alespoň jeden údaj");
            messageStore.Add(() => NewIncome.Prispevky, "Musí být vyplněn alespoň jeden údaj");
            messageStore.Add(() => NewIncome.Odmeny, "Musí být vyplněn alespoň jeden údaj");
            messageStore.Add(() => NewIncome.NefinancniBonus, "Musí být vyplněn alespoň jeden údaj");
            hasError = true;
        }

        if (NewIncome.PocetMesicu is not null && (NewIncome.PocetMesicu < 1 || NewIncome.PocetMesicu > 12))
        {
            messageStore.Add(() => NewIncome.PocetMesicu, "Počet měsíců musí být v rozsahu od 1 do 12");
            hasError = true;
        }

        if (hasError)
        {
            editContext.NotifyValidationStateChanged();
        }

        return !hasError;
    }

    private async Task SaveNote(PpPrijem ppPrijem)
    {
        await using (var noteDbContext = new DbEntities())
        {
            var prijem = await noteDbContext.PpPrijmy.FirstOrDefaultAsync(p => p.Id == ppPrijem.Id);
            if (prijem is null)
            {
                Toaster.AddErrorMessage("Chyba", $"Nepodařilo se správně uložit poznámku.");
                _logger.Error($"ppPrijem {ppPrijem.Id} was not found.");
                return;
            }
            prijem.SkrytaPoznamka = ppPrijem.SkrytaPoznamka;
            await Helpers.Save(noteDbContext, User.GetNameId(), Toaster, _logger);
        }

        await RefreshContextAsync();
        _noteForPrijemId = null;
    }
    
}
