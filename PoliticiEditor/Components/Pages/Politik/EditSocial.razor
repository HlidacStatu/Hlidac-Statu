@page "/EditSocial"

@using System.Security.Claims
@using HlidacStatu.Entities
@using HlidacStatu.Repositories
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using PoliticiEditor.Components.Account
@using Serilog

@implements IAsyncDisposable

@inject UserHelper UserHelper
@inject ToastService Toaster

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize]

@if (Osoba is null)
{
    <p class="text-warning">Nepodařilo se načíst data.</p>
    <a href="" target="_self">Zkusit znovu</a>
}
else
{
    <div class="card mb-3">
        <h5 class="card-header">Sociální sítě</h5>

        <div class="card-body">
            <p>Doplňte/opravte pouze unikátní konec url, který obsahuje název Vašeho profilu na sociálních sítích, a to u těch sítí, kde máte veřejný profil. </p>
            <div class="mx-auto">
                <div class="mb-3">
                    <label for="twitter">Twitter / X</label>
                    <div class="input-group mb-3">
                        <span class="input-group-text">https://x.com/</span>
                        <input type="text" id="twitter"
                               class="form-control"
                               @bind:get="@(GetSocialNetwork("Twitter"))"
                               @bind:set="@(val => SetSocialNetwork("Twitter", val))"/>
                    </div>
                </div>
            </div>
            <div class="mx-auto">
                <div class="mb-3">
                    <label for="facebookpage">Facebook page</label>
                    <div class="input-group mb-3">
                        <span class="input-group-text">https://facebook.com/</span>
                        <input type="text" id="facebookpage"
                               class="form-control"
                               @bind:get="@(GetSocialNetwork("Facebook_page"))"
                               @bind:set="@(val => SetSocialNetwork("Facebook_page", val))"/>
                    </div>
                </div>
            </div>
            <div class="mx-auto">
                <div class="mb-3">
                    <label for="facebookprofile">Facebook profile</label>
                    <div class="input-group mb-3">
                        <span class="input-group-text">https://facebook.com/</span>
                        <input type="text" id="facebookprofile"
                               class="form-control"
                               @bind:get="@(GetSocialNetwork("Facebook_profile"))"
                               @bind:set="@(val => SetSocialNetwork("Facebook_profile", val))"/>
                    </div>
                </div>
            </div>
            <div class="mx-auto">
                <div class="mb-3">
                    <label for="instagram">Instagram</label>
                    <div class="input-group mb-3">
                        <span class="input-group-text">https://instagram.com/</span>
                        <input type="text" id="instagram"
                               class="form-control"
                               @bind:get="@(GetSocialNetwork("Instagram"))"
                               @bind:set="@(val => SetSocialNetwork("Instagram", val))"/>
                    </div>
                </div>
            </div>
            <div class="mx-auto">
                <div class="mb-3">
                    <label for="youtube">Youtube</label>
                    <div class="input-group mb-3">
                        <span class="input-group-text">https://youtube.com/</span>
                        <input type="text" id="youtube"
                               class="form-control"
                               @bind:get="@(GetSocialNetwork("Youtube"))"
                               @bind:set="@(val => SetSocialNetwork("Youtube", val))"/>
                    </div>
                </div>
            </div>
            <div class="mx-auto">
                <div class="mb-3">
                    <label for="tictoc">TicToc</label>
                    <div class="input-group mb-3">
                        <span class="input-group-text">https://tictoc.com/</span>
                        <input type="text" id="tictoc"
                               class="form-control"
                               @bind:get="@(GetSocialNetwork("Tictoc"))"
                               @bind:set="@(val => SetSocialNetwork("Tictoc", val))"/>
                    </div>
                </div>
            </div>
            <div class="mx-auto">
                <div class="mb-3">
                    <label for="linkedin">LinkedIn</label>
                    <div class="input-group mb-3">
                        <span class="input-group-text">https://linkedin.com/</span>
                        <input type="text" id="linkedin"
                               class="form-control"
                               @bind:get="@(GetSocialNetwork("LinkedIn"))"
                               @bind:set="@(val => SetSocialNetwork("LinkedIn", val))"/>
                    </div>
                </div>
            </div>
            <div class="mx-auto">
                <div class="mb-3">
                    <label for="web">webové stránky</label>
                    <input type="text" id="web"
                           class="form-control"
                           @bind:get="@(GetSocialNetwork("WWW"))"
                           @bind:set="@(val => SetSocialNetwork("WWW", val))"/>
                </div>
            </div>
        </div>

        <div class="card-footer text-body-secondary d-flex">
            @if (_db?.ChangeTracker.HasChanges() == true)
            {
                <div class="ms-auto">
                    <button class="btn btn-success" @onclick="@(Save)">Uložit změny</button>
                    <button class="btn btn-warning" @onclick="@(Cancel)">Zrušit změny</button>
                </div>
            }
        </div>

    </div>
}



@code
{
    private Osoba? Osoba { get; set; }
    private List<OsobaEvent> SocialNetworks { get; set; } = new();
    private DbEntities? _db = new();
    private ClaimsPrincipal User { get; set; }
    private ILogger _logger = Log.ForContext<EditSocial>();


    protected override async Task OnInitializedAsync()
    {
        User = await UserHelper.GetCurrentUserAsync();
        var nameId = User.GetNameId();
        Osoba = OsobaRepo.GetByNameId(nameId);
        if (Osoba is null)
        {
            Toaster.AddMessage("Chyba", $"Data se nepodařilo načíst", importance: ToastService.ToastMessage.ImportanceLevel.Error);
            _logger.Error($"Osoba is null for user with Name Id:{User.GetNameId()}");
            return;
        }

        await RefreshContextAsync();
    }

    private string GetSocialNetwork(string networkName)
    {
        var socialNetwork = SocialNetworks
            .FirstOrDefault(sn => sn.Organizace.Equals(networkName, StringComparison.InvariantCultureIgnoreCase));

        if (socialNetwork is not null)
            return socialNetwork.AddInfo;

        return "";
    }

    private void SetSocialNetwork(string networkName, string value)
    {
        var socialNetwork = SocialNetworks
            .FirstOrDefault(sn => sn.Organizace?.Equals(networkName, StringComparison.InvariantCultureIgnoreCase) == true,
                CreateNewSocialNetwork(networkName));

        if (!networkName.Equals("WWW") && value.Contains(".com/", StringComparison.InvariantCultureIgnoreCase))
        {
            var lastIndex = value.LastIndexOf(".com/", StringComparison.InvariantCultureIgnoreCase);
            value = value.Substring(lastIndex + 5);
        }

        
        socialNetwork.AddInfo = value;
    }

    private OsobaEvent CreateNewSocialNetwork(string networkName)
    {
        OsobaEvent newEvent = new OsobaEvent()
        {
            OsobaId = Osoba.InternalId,
            Type = (int)OsobaEvent.Types.SocialniSite,
            Organizace = networkName
        };
        SocialNetworks.Add(newEvent);
        if (_db is not null)
        {
            _db.OsobaEvent.Add(newEvent);
        }

        return newEvent;
    }

    private async Task RefreshContextAsync()
    {
        if (_db is not null)
            await _db.DisposeAsync();

        _db = new DbEntities();

        if (Osoba is null)
            return;

        SocialNetworks = await OsobaEventRepo.GetByOsobaIdTracked(_db, Osoba.InternalId, x => x.Type == (int)OsobaEvent.Types.SocialniSite)
            .ToListAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_db is not null)
        {
            await _db.DisposeAsync();
        }
    }

    private async Task Save()
    {
        await Helpers.Save(_db, User.GetNameId(), Toaster, _logger);
        await RefreshContextAsync();
    }

    private async Task Cancel()
    {
        await RefreshContextAsync();
        Toaster.AddInfoMessage("Zrušeno", "Změny byly zrušeny.");
    }
}
