@using System.Security.Claims
@using HlidacStatu.Entities
@using HlidacStatu.Repositories
@using HlidacStatu.Repositories.Auditing
@using Microsoft.EntityFrameworkCore
@using PoliticiEditor.Components.Account

@inject UserHelper UserHelper

@implements IAsyncDisposable


<div class="card mb-3">
    <h5 class="card-header">Sociální sítě</h5>
    
    <div class="card-body">
        <div class="mx-auto">
            <div class="mb-3">
                <label for="twitter">Twitter</label>
                <input type="text" id="twitter"
                       class="form-control"
                       @bind:get="@(GetSocialNetwork("Twitter"))"
                       @bind:set="@(val => SetSocialNetwork("Twitter", val))"/>
            </div>
        </div>
        <div class="mx-auto">
            <div class="mb-3">
                <label for="facebookpage">Facebook page</label>
                <input type="text" id="facebookpage"
                       class="form-control"
                       @bind:get="@(GetSocialNetwork("Facebook_page"))"
                       @bind:set="@(val => SetSocialNetwork("Facebook_page", val))"/>
            </div>
        </div>
        <div class="mx-auto">
            <div class="mb-3">
                <label for="facebookprofile">Facebook profile</label>
                <input type="text" id="facebookprofile"
                       class="form-control"
                       @bind:get="@(GetSocialNetwork("Facebook_profile"))"
                       @bind:set="@(val => SetSocialNetwork("Facebook_profile", val))"/>
            </div>
        </div>
        <div class="mx-auto">
            <div class="mb-3">
                <label for="instagram">Instagram</label>
                <input type="text" id="instagram"
                       class="form-control"
                       @bind:get="@(GetSocialNetwork("Instagram"))"
                       @bind:set="@(val => SetSocialNetwork("Instagram", val))"/>
            </div>
        </div>
        <div class="mx-auto">
            <div class="mb-3">
                <label for="youtube">Youtube</label>
                <input type="text" id="youtube"
                       class="form-control"
                       @bind:get="@(GetSocialNetwork("Youtube"))"
                       @bind:set="@(val => SetSocialNetwork("Youtube", val))"/>
            </div>
        </div>
        <div class="mx-auto">
            <div class="mb-3">
                <label for="tictoc">TicToc</label>
                <input type="text" id="tictoc"
                       class="form-control"
                       @bind:get="@(GetSocialNetwork("Tictoc"))"
                       @bind:set="@(val => SetSocialNetwork("Tictoc", val))"/>
            </div>
        </div>
        <div class="mx-auto">
            <div class="mb-3">
                <label for="linkedin">LinkedIn</label>
                <input type="text" id="linkedin"
                       class="form-control"
                       @bind:get="@(GetSocialNetwork("LinkedIn"))"
                       @bind:set="@(val => SetSocialNetwork("LinkedIn", val))"/>
            </div>
        </div>
        <div class="mx-auto">
            <div class="mb-3">
                <label for="web">webové stránky</label>
                <input type="text" id="web"
                       class="form-control"
                       @bind:get="@(GetSocialNetwork("WWW"))"
                       @bind:set="@(val => SetSocialNetwork("WWW", val))"/>
            </div>
        </div>
    </div>
    
    <div class="card-footer text-body-secondary">
        <button class="btn btn-success" @onclick="@(Save)">Uložit změny</button>
        <button class="btn btn-warning" @onclick="@(Cancel)">Zrušit změny</button>
    </div>

</div>

@code
{
    [Parameter]
    public int OsobaId { get; set; }

    private List<OsobaEvent> SocialNetworks { get; set; } = new();
    
    private DbEntities? _db = new();
    
    private ClaimsPrincipal User { get; set; }


    private string GetSocialNetwork(string networkName)
    {
        var socialNetwork = SocialNetworks
            .FirstOrDefault(sn => sn.Organizace.Equals(networkName, StringComparison.InvariantCultureIgnoreCase));

        if (socialNetwork is not null)
            return socialNetwork.AddInfo;

        return "";
    }

    private void SetSocialNetwork(string networkName, string value)
    {
        var socialNetwork = SocialNetworks
            .FirstOrDefault(sn => sn.Organizace?.Equals(networkName, StringComparison.InvariantCultureIgnoreCase) == true, 
                CreateNewSocialNetwork(networkName));

        socialNetwork.AddInfo = value;
    }

    private OsobaEvent CreateNewSocialNetwork(string networkName)
    {
        OsobaEvent newEvent = new OsobaEvent()
        {
            OsobaId = OsobaId,
            Type = (int)OsobaEvent.Types.SocialniSite,
            Organizace = networkName
        };
        SocialNetworks.Add(newEvent);
        if (_db is not null)
        {
            _db.OsobaEvent.Add(newEvent);
        }
        return newEvent;
    }

    protected override async Task OnInitializedAsync()
    {
        User = await UserHelper.GetCurrentUserAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await RefreshContextAsync();
    }
    
    private async Task RefreshContextAsync()
    {
        if (_db is not null)
            await _db.DisposeAsync();

        _db = new DbEntities();
        
        SocialNetworks = await OsobaEventRepo.GetByOsobaIdTracked(_db, OsobaId, x => x.Type == (int)OsobaEvent.Types.SocialniSite)
            .ToListAsync();
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_db is not null)
        {
            await _db.DisposeAsync();
        }
    }

    private async Task Save()
    {
        //todo: this should be probably created after db.save? So we get prop. Ids?
        var auditLogs = ChangeTracker.CreateAuditLogs(_db, UserHelper.GetNameId(User));
        await _db.SaveChangesAsync();
        await ChangeTracker.SaveAuditLogAsync(auditLogs);
        
        await RefreshContextAsync();
    }

    private async Task Cancel()
    {
        await RefreshContextAsync();
    }
}
