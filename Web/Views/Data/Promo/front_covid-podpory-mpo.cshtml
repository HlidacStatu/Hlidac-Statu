@model object
@using Nest;
@using System.Linq;
@using HlidacStatu.Datasets

@using HlidacStatu.Repositories

@{
    Layout = null;

    DataSet ds =
        DataSet.CachedDatasets.Get((string)Model);
    
    var vyzvy = await ds.ESClient.SearchAsync<object>(s => s
    .MatchAll()
    .Size(0)
    .Aggregations(a => a
        .MultiTerms("vyzvy", m => m
                .Size(10000)
                
            .Terms(new Term() { Field = "nazev_programu_vyzvy.keyword" }, new Term() { Field = "kod_vyzvy.keyword" })
            //t=>t.Field("kod_vyzvy.keyword","nazev_programu_vyzvy.keyword"),t=>t.Field("kod_vyzvy.keyword","kod_vyzvy.keyword"))
            )

        )
    );
    var vyzvyGroup = await ds.ESClient.SearchAsync<object>(s => s
        .MatchAll()
        .Size(0)
        .Aggregations(a => a
            .Terms("vyzvy", m => m
                .Size(10000)
                
                .Field("kod_vyzvy.keyword")
                .Aggregations(aa => aa
                    .Stats("stat", ss => ss.
                         Field("dotace")
                         
                    )
                    
                )
            )

        )
    );

     var vyzvyTopPrijemci = await ds.ESClient.SearchAsync<object>(s => s
     .MatchAll()
     .Size(0)
     .Aggregations(a => a
         .Terms("vyzvy", m => m
            .Size(10000)
            
             .Field("ico.keyword")
             .Aggregations(aa => aa
                 .Stats("stat", ss => ss.
                      Field("dotace")
                     )
                 )
             )
         )
     );

    Dictionary<string, string> vyzvyNames = ((BucketAggregate)vyzvy.Aggregations["vyzvy"]).Items
                    .Select(m => new
                    {
                        key = ((List<object>)((Nest.KeyedBucket<object>)m).Key)[1],
                        name = ((List<object>)((Nest.KeyedBucket<object>)m).Key)[0]
                    })
                    .ToDictionary(k => k?.key?.ToString() ?? "", v => v?.name?.ToString() ?? "");


    Dictionary<string, Nest.StatsAggregate> vyzvyStats = ((BucketAggregate)vyzvyGroup.Aggregations["vyzvy"]).Items
                    .Select(m => new
                    {
                        key = ((Nest.KeyedBucket<object>)m)?.Key?.ToString() ?? "",
                        num = (Nest.StatsAggregate)(((Nest.KeyedBucket<object>)m).Values.First())
                    })
                    .ToDictionary(k => k.key, v => v.num);

    Dictionary<string, Nest.StatsAggregate> topPrijemciStats = ((BucketAggregate)vyzvyTopPrijemci.Aggregations["vyzvy"]).Items
                    .Select(m => new
                    {
                        key = ((Nest.KeyedBucket<object>)m)?.Key?.ToString() ?? "",
                        num = (Nest.StatsAggregate)(((Nest.KeyedBucket<object>)m).Values.First())
                    })
                    .Where(m=>m.key != "")
                    .ToDictionary(k => k.key, v => v.num);

}
<h2>
    COVID výzvy vypsané MPO.
</h2>
<hr />

<div class="row">
    <div class="col-xs-12">
        <h2>Největší příjemci podpory celkem</h2>
        <div class="row">
        @foreach(var chunk in topPrijemciStats
            .OrderByDescending(m => m.Value.Sum)
            .Take(30)
            .Chunk(10)
        )
        {
            <div class="col-xs-12 col-sm-6 col-md-4">
            @foreach (var kvv in chunk)
            {
                <div>
                    <a href="/data/Hledat/covid-podpory-mpo?Q=ico.keyword%3A@(kvv.Key)">
                    @(Firmy.GetJmeno(kvv.Key))
                    </a> 
                    <b>@(HlidacStatu.Util.RenderData.NicePriceHtml((decimal)kvv.Value.Sum,shortFormat:true, showDecimal: HlidacStatu.Util.RenderData.ShowDecimalVal.AsNeeded))</b>

                </div>
            }
            </div>
        }
        </div>
        <div class="clearfix"></div>
<hr />
        <h2>Přehled výzev od MPO</h2>
        <table class="table table-hover table-sm table-striped mt-4">
            <thead>
                <tr>
                    <th>Výzva</th>
                    <th>Vyplaceno</th>
                    <th>Počet vyplacených podpor<br/>Průměrná výše podpory</th>
                    <th></th>
                </tr>
            </thead>
            @foreach (var vyzvaId in vyzvyNames.Keys
            .OrderBy(m => vyzvyStats[m].Sum)
            )
            {
                <tr>
                    <td>@vyzvyNames[vyzvaId]</td>
                    <td>@(HlidacStatu.Util.RenderData.NicePriceHtml((decimal)vyzvyStats[vyzvaId].Sum,shortFormat:true, showDecimal: HlidacStatu.Util.RenderData.ShowDecimalVal.AsNeeded))</td>
                    <td>@(vyzvyStats[vyzvaId].Count) / @(HlidacStatu.Util.RenderData.NicePriceHtml((decimal)vyzvyStats[vyzvaId].Sum/(decimal)vyzvyStats[vyzvaId].Count,shortFormat:true, showDecimal: HlidacStatu.Util.RenderData.ShowDecimalVal.AsNeeded))</td>
                    <td><a href="#vyzva_@(vyzvaId)">Detail</a></td>
                </tr>
            }
        </table>
    </div>

    <hr />
</div>

