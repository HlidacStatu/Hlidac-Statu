@model HlidacStatu.Entities.Osoba
@using HlidacStatu.XLib.Render;
@using HlidacStatu.Repositories
@using HlidacStatu.Repositories.Statistics
@using HlidacStatu.Extensions
@using HlidacStatu.DS.Graphs

@{
    Layout = null;

    Relation.AktualnostType aktualnost = Relation.AktualnostType.Nedavny;
    if (EnumsNET.Enums.TryParse<Relation.AktualnostType>(ViewBag.param1, out Relation.AktualnostType xen))
    {
        aktualnost = xen;
    }


    var vazbyList = Model.AktualniVazby(aktualnost)
        .Where(v => v.To != null && v.To.Type == HlidacStatu.DS.Graphs.Graph.Node.NodeType.Company)
        .GroupBy(f => f.To.Id, v => v, (ico, v) => new
        {
            ICO = ico,
            FirmaName = v.First().To.PrintName(),//HlidacStatu.Lib.Data.External.FirmyDB.NameFromIco(ico, true),
            VazbyPerIco = Model.VazbyProICO(ico)
        });

    System.Text.StringBuilder sb = new();
    foreach (var v in vazbyList)
    {
        sb.AppendLine("$(\"a[data-link='vazby-" + v.ICO + "']\").popover({");
        sb.AppendLine("placement: 'top',trigger: 'hover',title: 'Vazba osoby na firmu',");
        sb.AppendLine($"content: '{Devmasters.TextUtil.RemoveHTML(Html.RenderVazby(v.VazbyPerIco).ToString())}'");
        sb.AppendLine("});");
        sb.AppendLine();
        sb.AppendLine("$(\"i[data-link='vazby2-" + v.ICO + "']\").popover({");
        sb.AppendLine("placement: 'top',trigger: 'hover',title: 'Vazba osoby na firmu',");
        sb.AppendLine($"content: '{Devmasters.TextUtil.RemoveHTML(Html.RenderVazby(v.VazbyPerIco).ToString())}'");
        sb.AppendLine("});");
        sb.AppendLine();
    }


}
<script>
    $(document).ready(function() {
    @Html.Raw(sb.ToString())
    });
</script>


@* První sloupec *@
<div id="subjcontent_toc">

    @{
        var rds = new ReportDataSource<(string ico, long pocetVse, decimal sumVse, long pocetStatutar, decimal sumStatutar)>(
        new ReportDataSource<(string ico, long pocetVse, decimal sumVse, long pocetStatutar, decimal sumStatutar)>.Column[]
        {
    new()
    {
    Name = "Společnost",
    HtmlRender = (x) => {
    var vazbaNaIco = vazbyList.FirstOrDefault(m=>m.ICO == x.ico);
    var html = $"<a href='/subjekt/{x.ico}' data-link='vazby-{x.ico}'>{Firmy.GetJmeno(x.ico)}</a><i style='padding-left:5px;' class='fa-solid fa-circle-info' data-link='vazby2-{x.ico}'></i>";
    return html;
    }
    ,
    TextRender = (x) => Firmy.GetJmeno(x.ico),
    },
    new()
    {
    Name = "Vyhledat dotace",
    HtmlRender = (x) => $"<a href='/dotace/hledat?Q=ico:{x.ico}'><i class='far fa-search'></i></a>",
    TextRender = (x) => Firmy.GetJmeno(x.ico),
    },
    new()
    {
    Name = "Počet všech poskytnutých dotací",
    TextRender = (x) => $"{HlidacStatu.Util.RenderData.NiceNumber(x.pocetVse)}",
    HtmlRender = (x) => $"{HlidacStatu.Util.RenderData.NiceNumber(x.pocetVse)}",
    OrderValueRender = (x) => HlidacStatu.Util.RenderData.OrderValueFormat(x.pocetVse),
    CssClass = "number"
    },
    new()
    {
    Name = "Souhrnná výše všech poskytnutých dotací",
    TextRender = (x) => $"{HlidacStatu.Util.RenderData.NicePriceHtml(x.sumVse)}",
    HtmlRender = (x) => $"{HlidacStatu.Util.RenderData.NicePriceHtml(x.sumVse)}",
    OrderValueRender = (x) => HlidacStatu.Util.RenderData.OrderValueFormat(x.sumVse),
    CssClass = "number"
    },
    new()
    {
    Name = "<span data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"Za období působení v orgánech společnosti\">Počet poskytnutých dotací v době působení ve firmě</span>",
    TextRender = (x) => $"{HlidacStatu.Util.RenderData.NiceNumber(x.pocetStatutar)}",
    HtmlRender = (x) => $"{HlidacStatu.Util.RenderData.NiceNumber(x.pocetStatutar)}",
    OrderValueRender = (x) => HlidacStatu.Util.RenderData.OrderValueFormat(x.pocetStatutar),
    CssClass = "number"
    },
    new()
    {
    Name = "<span data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"Za období působení v orgánech společnosti\">Souhrnná výše poskytnutých dotací v době působení ve firmě</span>",
    TextRender = (x) => $"{HlidacStatu.Util.RenderData.NicePriceHtml(x.sumStatutar)}",
    HtmlRender = (x) => $"{HlidacStatu.Util.RenderData.NicePriceHtml(x.sumStatutar)}",
    OrderValueRender = (x) => HlidacStatu.Util.RenderData.OrderValueFormat(x.sumStatutar),
    CssClass = "number"
    },
        });

        var dotaceSearchH = await DotaceRepo.Searching.SimpleSearchAsync("osobaid:" + Model.NameId, 1, 10000,
        ((int)HlidacStatu.Repositories.Searching.DotaceSearchResult.DotaceOrderResult.FastestForScroll).ToString(),
        exactNumOfResults: true);


        var dotaceStat = Model.StatistikaDotace(aktualnost);
        var dotaceStatSum = dotaceStat.AllDotaceSummary().Summary();
        int pocetFiremSdotaci = dotaceStat.SoukromeFirmy.Count(m => m.Value.Summary().PocetDotaci > 0)
        + dotaceStat.StatniFirmy.Count(m => m.Value.Summary().PocetDotaci > 0)
        + dotaceStat.Neziskovky.Count(m => m.Value.Summary().PocetDotaci > 0);

        var sdotaceHKc = " v celkové hodnotě <b>" + HlidacStatu.Util.RenderData.NicePriceHtml(dotaceStatSum.CelkemPrideleno) + "</b>.";
        string durlH = "/dotace/hledat?Q=osobaid%3A" + Model.NameId;

    }
    @if (dotaceSearchH.Total == 0)
    {
        <p>Žádné dotace jsme nenalezli</p>
    }
    else
    {
        <div>
            <h4>
                Informace o dotacích
            </h4>

            <p>
                <b>@Devmasters.Lang.CS.Plural.Get(pocetFiremSdotaci, "Jedna navázaná společnost", "{0} navázané společnosti", "{0} navázaných společností")</b>
                na osobu @Model.Jmeno @Model.Prijmeni
                @Devmasters.Lang.CS.Plural.Get(pocetFiremSdotaci,
                                           "dostala",
                                           "dostaly",
                                           "dostalo")

                @Html.Raw(Devmasters.Lang.CS.Plural.Get((int)dotaceStatSum.PocetDotaci,
                                           " <a href='" + durlH + "'><b>jednu dotaci</b></a>" + sdotaceHKc,
                                           " <a href='" + durlH + "'><b>{0} dotace</b></a>" + sdotaceHKc,
                                           " <a href='" + durlH + "'><b>{0} dotací</b></a>" + sdotaceHKc))

            </p>
        </div>
        <div class="mt-4"></div>


        var defaultStart = new DateTime(2000, 1, 1);
        var defaultEnd = new DateTime(DateTime.Now.Year + 2, 12, 31);
        foreach (var item in dotaceStat
            .SoukromeFirmy
            .Concat(dotaceStat.Neziskovky)
            .Concat(dotaceStat.StatniFirmy)
        )
        {
            var ico = item.Key;
            var dotaceCelkemProIco = item.Value.Summary().CelkemPrideleno;
            var pocetDotaciProIco = item.Value.Summary().PocetDotaci;

            var vazby = Model.VazbyProICO(ico); //zjistit, jestli datum spadá pro vazby
            var vazbyYears = vazby
            .Select(v => new { startY = (v.RelFrom ?? defaultStart).Year, endY = (v.RelTo ?? defaultEnd).Year })
            .SelectMany(d => Enumerable.Range(d.startY, d.endY - d.startY + 1))
            .Distinct()
            .ToArray();
            var dotaceStatutar = item.Value.Summary(vazbyYears);

            var dotaceCelkemStatutar = dotaceStatutar.CelkemPrideleno;
            var dotacePocetStatutar = dotaceStatutar.PocetDotaci;

            if (pocetDotaciProIco > 0)
            {
                rds.AddRow(((string)item.Key, pocetDotaciProIco, dotaceCelkemProIco,
                dotacePocetStatutar, dotaceCelkemStatutar));
            }
        }

        @Html.DataToHTMLTable(rds, dataTableOptions: HtmlExtensions.DatatableOptions(orderColumnIdx: 5, orderDirection: "desc"))
    }

</div>