@model HlidacStatu.Entities.Osoba

@using Nest;
@using System.Linq;
@using Devmasters.Enums;
@using HlidacStatu.Datasets
@using HlidacStatu.Datastructures.Graphs
@using HlidacStatu.Entities
@using HlidacStatu.Entities.Dotace
@using HlidacStatu.Extensions
@using HlidacStatu.Repositories
@using HlidacStatu.Repositories.Statistics
@using HlidacStatu.XLib

@{
    Layout = null;

    Devmasters.DT.StopWatchLaps laps = new();

    var aktualnost = Relation.AktualnostType.Nedavny;

    var intv = laps.AddAndStartLap("StatistikaRegistruSmluv");
    var statistics = Model.StatistikaRegistrSmluv(aktualnost);

    //unused stuff
    //var seasonStat = statistics.SoukromeFirmySummary().CurrentSeasonStatistics();
    //var currentSeasonYear = statistics.SoukromeFirmySummary().CurrentSeasonYear();
    //var zmenaObjemuSmluv = statistics.SoukromeFirmySummary().ChangeBetweenYears(currentSeasonYear - 1, currentSeasonYear, s => s.CelkovaHodnotaSmluv);
    //var pocetSoukrFiremVztah = statistics.SoukromeFirmy.Count + statistics.StatniFirmy.Count;

    intv.Stop();
}

@* První sloupec *@
<div class="col-sm-7 col-xs-12 order-1">
    @{
        laps.AddAndStartLap("funkce");
    }
    @{
        int[] types = {
            (int)OsobaEvent.Types.VolenaFunkce,
            (int)OsobaEvent.Types.PolitickaPracovni,
            (int)OsobaEvent.Types.Politicka,
            (int)OsobaEvent.Types.VerejnaSpravaJine,
            (int)OsobaEvent.Types.VerejnaSpravaPracovni,
            (int)OsobaEvent.Types.Osobni,
            (int)OsobaEvent.Types.Jine
        };

        var listingNum = 3;
        var funkceOsobaNum = Model.Events(m => types.Contains(m.Type)).Count();
        var funkceOsoba = Model.Description(true,
               m => types.Contains(m.Type),
               (funkceOsobaNum <= listingNum + 1 ? listingNum + 1 : listingNum),
               "<ul>{0}</ul>", "<li>{0}</li>", "");
    }
    @if (funkceOsobaNum > 0)
    {
        <div>
            <h4>
                Funkce
            </h4>
            <p class="text-muted sub-header-info">
                Přehled politických a veřejných funkcí
            </p>
            <p>
                @Html.Raw(funkceOsoba)
            </p>
            @if (funkceOsobaNum > listingNum + 1)
            {
                <a asp-action="Funkce" asp-route-id="@Model.NameId" class="moreinfolink text-uppercase"> 
                    <strong>
                        Zobrazit @Devmasters.Lang.CS.Plural.Get(funkceOsobaNum, "všechny funkce", "všechny funnkce", "všech {0} funkcí") osoby
                    </strong>
                </a>
            }
        </div>
        <hr />
    }
    @{
        laps.AddAndStartLap("sponzoring");
        var sponzorOsobaNum = Model.Sponzoring().Count();
        var sponzorOsoba = Model.SponzoringToHtml(
               (sponzorOsobaNum <= listingNum + 1 ? listingNum + 1 : listingNum),
               "<ul>{0}</ul>", "<li>{0}</li>", "");

    }
    @if (sponzorOsobaNum > 0)
    {
        <div>
            <h4>
                Sponzoring politických stran
            </h4>
            <p class="text-muted sub-header-info">
                Přehled finančních a nefinančních podpor politickým stranám. Podpory větší než 5000 Kč zobrazujeme po dobu 10 let, menší podpory po dobu 5 let.
            </p>
            <p>
                @Model.FullName() přímo či nepřímo @(Model.Muz() ? "podpořil" : "podpořila") politické strany celkem
                <b>@Devmasters.Lang.CS.Plural.Get(sponzorOsobaNum,"jedním darem","{0} dary","{0} dary")</b>:
                @Html.Raw(sponzorOsoba)
            </p>
            @if (sponzorOsobaNum > listingNum + 1)
            {
                <a asp-action="Sponzoring" asp-route-id="@Model.NameId" class="moreinfolink text-uppercase">
                    <strong>
                        Zobrazit @Devmasters.Lang.CS.Plural.Get(sponzorOsobaNum,"dary","všechny {0} dary","všech {0} darů") politickým stranám
                    </strong>
                </a>
            }

        </div>
        <hr />
    }
    @{
        laps.AddAndStartLap("registr smluv");
    }
    @if (statistics.SoukromeFirmySummary().Summary().PocetSmluv + statistics.NeziskovkySummary().Summary().PocetSmluv > 0)
    {
        <div>
            <h4>
                Registr smluv
            </h4>
            <p class="text-muted sub-header-info">
                Detailní informace o smlouvách uzavřených firmami, ve kterých se angažuje či angažoval @Model.FullName().
            </p>
            <p>
                @Html.Raw((await Model.InfoFactsCachedAsync()).Where(m => m.Level == HlidacStatu.Util.InfoFact.ImportanceLevel.Stat).FirstOrDefault()?.Render(true) ?? (await Model.InfoFactsCachedAsync()).First().Render(true))
            </p>
            <a asp-action="RegistrSmluv" asp-route-id="@Model.NameId" class="moreinfolink text-uppercase">
                <strong>Zobrazit podrobnosti</strong>
            </a>
        </div>
        <hr />
    }
    @{
        laps.AddAndStartLap("angazovanost");
    }
    @if (statistics.SoukromeFirmy.Count > 0 || statistics.StatniFirmy.Count > 0)
    {
        <div>
            <h4>
                Angažovanost
            </h4>
            <p class="text-muted sub-header-info">
                Firmy a organizace, které tato osoba přímo či prostřednictvím jiných společností vlastnila či spoluvlastnila
                nebo byla ve statutárních orgánech, a to <b>@(aktualnost.ToNiceDisplayName().ToLower())</b>.
            </p>
            @if (statistics.SoukromeFirmy.Count > 0 && statistics.SoukromeFirmySummary().Summary().PocetSmluv>0)
            {
                <p>
                    @Model.FullName() se angažuje, nebo se v posledních 5 letech angažoval v @Devmasters.Lang.CS.Plural.Get(statistics.SoukromeFirmy.Count, "jedné soukromé firmě", "{0} soukromých firmách", "{0} soukromých firmách")
                    @if (statistics.NeziskovkyCount() > 0)
                    {
                        <span>(z toho v @Devmasters.Lang.CS.Plural.Get(statistics.NeziskovkyCount(), "jedné neziskovce", "{0} neziskovkách", "{0} neziskovkách")):</span>
                    }
                    <ul>
                        @foreach (var stat in statistics.SoukromeFirmy
                            .OrderByDescending(o => o.Value.Summary().CelkovaHodnotaSmluv)
                            .Take(statistics.SoukromeFirmy.Count <= listingNum + 1 ? listingNum + 1 : listingNum)
                            )
                        {
                            <li>
                                <a asp-controller="Subjekt" asp-action="Index" asp-route-id="@stat.Key">
                                    @Firmy.GetJmeno(stat.Key)
                                </a> 
                                (@Html.Raw(stat.Value.Summary().ToNiceString(null,true)) od 2016
                                @if (stat.Value.CurrentSeasonStatistics().PocetSmluv>0)
                               {
                                    @($", {stat.Value.CurrentSeasonStatistics().ToNiceString(null, false)} v {stat.Value.CurrentSeasonYear()}")   
                               })
                            </li>
                        }
                    </ul>
                    @if (statistics.SoukromeFirmy.Count > listingNum+1)
                    {
                       <p>
                           @if ((await Model.NotInterestingToShowAsync()) == false)
                            {
                                <a asp-action="Vazby" asp-route-id="@Model.NameId" class="moreinfolink text-uppercase">
                                    <strong>Ukázat všechny</strong>
                                </a>
                            }
                       </p>
                    }

                </p>
            }
            else if (statistics.SoukromeFirmy.Count > 0 && statistics.SoukromeFirmySummary().Summary().PocetSmluv==0)
            {
               
                <p>
                    @Model.FullName() se angažuje, nebo se v posledních 5 letech angažoval v @Devmasters.Lang.CS.Plural.Get(statistics.SoukromeFirmy.Count, "jedné soukromé firmě, která neobchoduje se státem", "{0} soukromých firmách, které neobchodují se státem", "{0} soukromých firmách, které neobchodují se státem").
                </p>
            }

            @if (statistics.StatniFirmy.Count > 0)
            {
                <p>
                    @Model.FullName() se angažuje, nebo se v posledních 5 letech angažoval v @Devmasters.Lang.CS.Plural.Get(statistics.StatniFirmy.Count, "jedné organizaci", "{0} organizacích", "{0} organizacích"):
                    <ul>
                        @foreach (var stat in statistics.StatniFirmy
                            .OrderByDescending(o => o.Value.CurrentSeasonStatistics().CelkovaHodnotaSmluv)
                            .Take(statistics.StatniFirmy.Count <= listingNum + 1 ? listingNum + 1 : listingNum)
                            )
                        {
                            <li>
                                <a asp-controller="Subjekt" asp-action="Index" asp-route-id="@stat.Key">
                                    @Firmy.GetJmeno(stat.Key)
                                </a> (@Html.Raw(stat.Value.Summary().ToNiceString(null,true)) od 2016
                                @if (stat.Value.CurrentSeasonStatistics().PocetSmluv > 0)
                                {
                                    @($", {stat.Value.CurrentSeasonStatistics().ToNiceString(null, false)} v {stat.Value.CurrentSeasonYear()}")
                                }
                                )
                            </li>
                        }
                    </ul>
                </p>
            }
            @if ((await Model.NotInterestingToShowAsync()) == false)
            {
                <a asp-action="Vazby" asp-route-id="@Model.NameId" class="moreinfolink text-uppercase">
                    <strong>Zobrazit podrobnosti</strong>
                </a>
            }
        </div>
        <hr />
    }
    
    @*dotace*@
    @{
        laps.AddAndStartLap("dotace");
    }

    @{
        //var dotaceStat = Model.
        var dotaceAggsH = new Nest.AggregationContainerDescriptor<Dotace>()
            .Terms("icos", s => s
                .Field(f => f.Prijemce.Ico)
                .Size(5000)
                .Aggregations(a => a
                    .Sum("sum", ss => ss.Field(ff => ff.DotaceCelkem))
                )
            );
        var dotaceSearchH = await DotaceRepo.Searching.SimpleSearchAsync("osobaid:" + Model.NameId, 1, 1,
            ((int)HlidacStatu.Repositories.Searching.DotaceSearchResult.DotaceOrderResult.FastestForScroll).ToString(), false,
            dotaceAggsH, exactNumOfResults: true);

        decimal sumH = 0;
        var items = ((BucketAggregate)dotaceSearchH.ElasticResults.Aggregations["icos"]).Items;
        foreach (KeyedBucket<object> item in items)
        {
            sumH += (decimal)item.Sum("sum").Value;
        }
        var sdotaceHKc = " v celkové hodnotě <b>" + HlidacStatu.Util.RenderData.NicePriceHtml(sumH) + "</b>.";
        string durlH = "/dotace/hledat?Q=osobaid%3A" + Model.NameId;
    }
    @if (dotaceSearchH.Total > 0)
    {
        <div>
            <h4>
                Informace o dotacích
            </h4>

            <p>
                <b>@Devmasters.Lang.CS.Plural.Get(items.Count, "Jedna navázaná společnost", "{0} navázané společnosti", "{0} navázaných společností")</b>
                na osobu @Model.Jmeno @Model.Prijmeni
                @Devmasters.Lang.CS.Plural.Get(items.Count,
                    "dostala",
                    "dostaly",
                    "dostalo")

                @Html.Raw(Devmasters.Lang.CS.Plural.Get((int)dotaceSearchH.Total,
                    " <a href='" + durlH + "'><b>jednu dotaci</b></a>" + sdotaceHKc,
                    " <a href='" + durlH + "'><b>{0} dotace</b></a>" + sdotaceHKc,
                    " <a href='" + durlH + "'><b>{0} dotací</b></a>" + sdotaceHKc))

            </p>
        </div>
        <a asp-action="Dotace" asp-route-id="@Model.NameId" class="moreinfolink text-uppercase">
            <strong>Zobrazit podrobnosti</strong>
        </a>
        <hr />
    }



    @* ----- Insolvence -----*@
    @*dotace*@
    @{
        laps.AddAndStartLap("insolvence");
    }
    @{
        var oinsDluznik = await InsolvenceRepo.Searching.SimpleSearchAsync("dluznici.osobaId:" + Model.NameId, 1, 1, (int)HlidacStatu.Repositories.Searching.InsolvenceSearchResult.InsolvenceOrderResult.FastestForScroll, false, HlidacStatu.Web.Framework.InsolvenceLimitedView.IsLimited(this.User));
        var oinsVeritel = await InsolvenceRepo.Searching.SimpleSearchAsync("veritele.osobaId:" + Model.NameId, 1, 1, (int)HlidacStatu.Repositories.Searching.InsolvenceSearchResult.InsolvenceOrderResult.FastestForScroll, false, HlidacStatu.Web.Framework.InsolvenceLimitedView.IsLimited(this.User));
        var oinsSpravce = await InsolvenceRepo.Searching.SimpleSearchAsync("spravci.osobaId:" + Model.NameId, 1, 1, (int)HlidacStatu.Repositories.Searching.InsolvenceSearchResult.InsolvenceOrderResult.FastestForScroll, false, HlidacStatu.Web.Framework.InsolvenceLimitedView.IsLimited(this.User));

        Dictionary<string, long> oinsolv = new();
        oinsolv.Add("dluznici|dlužník|dlužníka|dlužníkem", oinsDluznik.Total);
        oinsolv.Add("veritele|věřitel|věřitele|veřitelem", oinsVeritel.Total);
        oinsolv.Add("spravci|insolvenční správce|insolvenčního správce|insolvenčním správcem", oinsSpravce.Total);

        var insDluznik = await InsolvenceRepo.Searching.SimpleSearchAsync("osobaIddluznik:" + Model.NameId, 1, 1, (int)HlidacStatu.Repositories.Searching.InsolvenceSearchResult.InsolvenceOrderResult.FastestForScroll, false, HlidacStatu.Web.Framework.InsolvenceLimitedView.IsLimited(this.User));
        var insVeritel = await InsolvenceRepo.Searching.SimpleSearchAsync("osobaIdveritel:" + Model.NameId, 1, 1, (int)HlidacStatu.Repositories.Searching.InsolvenceSearchResult.InsolvenceOrderResult.FastestForScroll, false, HlidacStatu.Web.Framework.InsolvenceLimitedView.IsLimited(this.User));
        var insSpravce = await InsolvenceRepo.Searching.SimpleSearchAsync("osobaIdspravce:" + Model.NameId, 1, 1, (int)HlidacStatu.Repositories.Searching.InsolvenceSearchResult.InsolvenceOrderResult.FastestForScroll, false, HlidacStatu.Web.Framework.InsolvenceLimitedView.IsLimited(this.User));

        Dictionary<string, long> insolv = new();
        insolv.Add("dluznik|dlužník|dlužníka|dlužníkem", insDluznik.Total);
        insolv.Add("veritel|věřitel|věřitele|veřitelem", insVeritel.Total);
        insolv.Add("spravce|insolvenční správce|insolvenčního správce|insolvenčním správcem", insSpravce.Total);

    }
    @if (oinsolv.Sum(m => m.Value) + insolv.Sum(m => m.Value) > 0)
    {
        <div>
            <h4>Insolvenční rejstřík</h4>
            <p class="text-muted sub-header-info">
                Informace o insolvenčních řízeních, kterých se @Model.FullName() nebo firmy, ve kterých se angažuje,
                účastní jako dlužník, věřitel či správce.
            </p>
            @if (oinsolv.Sum(m => m.Value) > 0)
            {
                <p>
                    @Model.FullName() se osobně
                    <ul>
                        @foreach (var kv in oinsolv.OrderByDescending(m => m.Value))
                        {
                            var text = kv.Key.Split('|');
                            string surl = WebUtil.GetSearchUrl("/insolvence/hledat", $"{text[0]}.osobaId:" + Model.NameId);

                            <li>
                                @Html.Raw(Devmasters.Lang.CS.Plural.GetWithZero((int)kv.Value,
                               "<b>nevyskytuje</b> v insolvenčním rejstříku ",
                               " vyskytuje v <a href='" + surl + "'><b>jedné insolvenci</b></a>",
                               " vyskytuje v <a href='" + surl + "'><b>{0} insolvencích</b></a>",
                               " vyskytuje v <a href='" + surl + "'><b>{0} insolvencích</b></a>"))
                                jako @text[1].
                            </li>
                        }
                    </ul>
                </p>
            }
            @if (insolv.Sum(m => m.Value) > 0)
            {
                <p>
                    Společnosti, ve který se @Model.FullName() angažuje, se
                    <ul>
                        @foreach (var kv in insolv.OrderByDescending(m => m.Value))
                        {
                            var text = kv.Key.Split('|');
                            string surl = WebUtil.GetSearchUrl("/insolvence/hledat", $"osobaid{text[0]}:" + Model.NameId);

                            <li>
                                @Html.Raw(Devmasters.Lang.CS.Plural.GetWithZero((int)kv.Value,
                               "<b>nevyskytují</b> v insolvenčním rejstříku ",
                               "vyskytují v <a href='" + surl + "'><b>jedné insolvenci</b></a>",
                               "vyskytují v <a href='" + surl + "'><b>{0} insolvencích</b></a>",
                               "vyskytují v <a href='" + surl + "'><b>{0} insolvencích</b></a>")) jako @text[1].
                        </li>
                    }
                    </ul>
                </p>
            }

        </div>
        <hr />

    }

    @* ----- Veřejné zakázky -----*@
    @{
        laps.AddAndStartLap("verejne zakazky");
    }
    @{
        var resVZdodav = await VerejnaZakazkaRepo.Searching.SimpleSearchAsync("osobaiddodavatel:" + Model.NameId, null, 1, 0, "1");
        var resVZzadav = await VerejnaZakazkaRepo.Searching.SimpleSearchAsync("osobaidzadavatel:" + Model.NameId, null, 1, 0, "1");
        Dictionary<string, long> vzakaz = new();
        vzakaz.Add("dodavatel|dodavatel|dodavatele|dodavatelem", resVZdodav.Total);
        vzakaz.Add("zadavatel|zadavatel|zadavatele|zadavatelem", resVZzadav.Total);
    }
    @if (resVZdodav.Total + resVZzadav.Total > 0)
    {
        <div>
            <h4>Veřejné zakázky</h4>
            <p class="text-muted sub-header-info">
                Veřejné zakázky firem a organizací, ve kterých se angažuje @Model.FullName().
                Zakázky analyzujeme jak z věstníku veřejných zakázek, tak z profilů zadavatelů.
            </p>

            <p>
                Firmy navázané na @Model.FullName() jsme našli
                <ul>
                    @foreach (var kv in vzakaz.OrderByDescending(m => m.Value).Where(m => m.Value > 0))
                    {
                        var text = kv.Key.Split('|');
                        string surl = WebUtil.GetSearchUrl("/verejnezakazky/hledat", $"osobaid{text[0]}:" + Model.NameId);
                        if (kv.Value > 0)
                        {
                            <li>
                                @Html.Raw(Devmasters.Lang.CS.Plural.Get(kv.Value,
                            $"v <a href='{surl}'><b>jedné</b> veřejné zakázce</a> jako {text[2]}",
                            $"v <a href='{surl}'><b>{{0}}</b> veřejných zakázkách</a> jako {text[2]}",
                            $"v <a href='{surl}'><b>{{0}}</b> veřejných zakázkach</a> jako {text[2]}")).
                            </li>
                        }
                    }
                </ul>
            </p>


        </div>
        <hr />
    }

        @{
        laps.AddAndStartLap("datasety");
    }

    @{
        var datasetsToSearch = DataSetDB.ProductionDataSets.Get();
        if (await Model.NotInterestingToShowAsync())
        {
            datasetsToSearch = datasetsToSearch.Where(m => m.DatasetId != "skutecni-majitele").ToArray();
        }
        var dsQuery = $"( OsobaId:{Model.NameId} ) ";
        var dsSearch = await HlidacStatu.Datasets.Search.DatasetMultiResult.GeneralSearchAsync(dsQuery,
            datasets:datasetsToSearch, 
            pageSize: 5);

    }
    @if (dsSearch.IsValid && dsSearch.Total > 0)
    {
        <div>
            <h4>@(Model.FullName() ) v dalších databázích</h4>
            <p class="text-muted sub-header-info">
                Na hlídači máme kromě hlavních databází @(DataSetDB.AllDataSets.Get()?.Count().ToString() ?? "") dalších menších databází.
                Zde vám podrobně vypíšeme, co jsme v nich o @Model.FullName() našli.
            </p>
            <p>
                @(HlidacStatu.Util.RenderData.Vysledky.PocetVysledku(dsSearch.Total))
                @Html.Raw(Devmasters.Lang.CS.Plural.Get(dsSearch.Results.Count(m => m.Total > 0), "v <b>jedné</b> databázi", "ve <b>{0} databázích</b>", "v <b>{0} databázích</b>")).
                @if (dsSearch.Results.Count(m => m.Total > 0) > 1)
                {
                    <text>
                        Nejvíce v
                        <ul>
                            @Html.Raw(string
                                .Join("", dsSearch.Results.Where(m => m.Total > 0)
                                .OrderByDescending(o => o.Total)
                                .Take(4)
                                .Select(m => $"<li><a href='{m.DataSet.DatasetSearchUrl(m.RenderQuery())}'>{m.DataSet.RegistrationAsync().GetAwaiter().GetResult().name}</a> ({HlidacStatu.Util.RenderData.NiceNumber(m.Total)})</li>"))
                            )
                        </ul>
                    </text>
                }
            </p>


        </div>

        <a asp-action="DalsiDatabaze" asp-route-id="@Model.NameId" class="moreinfolink text-uppercase">
            <strong>Zobrazit výsledky z dalších databází</strong>
        </a>

        <hr />
    }

    @{
        laps.StopAll();
    }

    <!--
        
    RenderTimes:
        @Html.Raw(laps.ToString())
        -->
</div>