@{
    ViewBag.Title = "Podání";
}

@section breadcrumb
{
    <ol class="breadcrumb">
        <li><a href="/">Hlídač Státu</a></li>
        <li class="active">@ViewBag.Title</li>
    </ol>
}


<h1>Jednotlivá podání, která můžete učinit přes vašeho oblíbeného Hlídače státu</h1>

<button onclick="startRecording()">Start Recording</button>
<button onclick="stopRecording()">Stop Recording</button>
<button onclick="downloadMP3()">Download MP3</button>

<form action="/podani/SaveObtezujiciHovor" method="post" class="form-group" id="myform">
  <div class="card mb-3">
    <h5 class="card-header">Podání</h5>
    <div class="col-sm-9 col-xl-10">
      <div class="card-body">
        <div class="mx-auto">
          <div class="form-floating">
            <input type="text" id="jmeno" name="jmeno"
                   class="form-control"/>
            <label for="jmeno">Jméno a příjmení</label>
          </div>
        </div>
        <div class="mx-auto">
          <div class="form-floating">
            <input type="text" id="datum" name="datum"
                   class="form-control"/>
            <label for="datum">Datum a čas hovoru</label>
          </div>
        </div>
        <div class="mx-auto">
          <div class="form-floating">
            <input type="text" id="volany" name="volany"
                   class="form-control"/>
            <label for="volany">Vaše telefonní číslo</label>
          </div>
        </div>
        <div class="mx-auto">
          <div class="form-floating">
            <input type="text" id="volajici" name="volajici"
                   class="form-control"/>
            <label for="volajici">Telefonní číslo, které volalo</label>
          </div>
        </div>
        <div class="mx-auto">
          <div class="form-floating">
            <input type="text" id="spolecnost" name="spolecnost"
                   class="form-control"/>
            <label for="spolecnost">Název/jméno volajícího</label>
          </div>
        </div>
        <div class="mx-auto">
          <div class="form-floating">
            <input type="text" id="ucel" name="ucel"
                   class="form-control"
                   value="marketingový hovor"/>
            <label for="ucel">Účel hovoru</label>
          </div>
        </div>
        <div class="mx-auto">
          <div class="form-floating">
            <input type="text" id="teloperator" name="teloperator"
                   class="form-control"/>
            <label for="teloperator">Název Vašeho operátora</label>
          </div>
        </div>
        <div class="mx-auto">
          <div class="form-floating">
            <input type="text" id="kontakt" name="kontakt"
                   class="form-control"/>
            <label for="kontakt">Kontakt, kde Vás může úřad zastihnout pro doplnění žádosti</label>
          </div>
        </div>
        @* <input type="file" id="audio" name="audio" hidden="hidden"/> *@
        <button class="btn btn-success" id="formSubmit">Odeslat</button>
      </div>
    </div>
  </div>
</form>


<script src="https://cdnjs.cloudflare.com/ajax/libs/lamejs/1.2.0/lame.min.js"></script>
<script>
let mediaRecorder;
let audioChunks = [];
let mp3Blob;
let audioBlob

async function startRecording() {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    const options = { bitsPerSecond: 128000 };
    mediaRecorder = new MediaRecorder(stream, options);
    mediaRecorder.ondataavailable = event => {
        audioChunks.push(event.data);
    };
    mediaRecorder.onstop = async () => {
        audioBlob = new Blob(audioChunks, { type: "audio/wav" });
        // const buffer = await blobToArrayBuffer(audioBlob);
        // convertToMp3(buffer);
    };
    audioChunks = [];
    mediaRecorder.start();
}

function stopRecording() {
    if (mediaRecorder) {
        mediaRecorder.stop();
    }
}

// function downloadMP3() {
//     if (mp3Blob) {
//         const url = URL.createObjectURL(mp3Blob);
//         const a = document.createElement("a");
//         a.href = url;
//         a.download = "recorded_audio.mp3";
//         document.body.appendChild(a);
//         a.click();
//         document.body.removeChild(a);
//     }
// }
function downloadMP3() {
    if (audioBlob) {
        const url = URL.createObjectURL(audioBlob);
        const a = document.createElement("a");
        a.href = url;
        a.download = "recorded_audio.wav";
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    }
}

// function blobToArrayBuffer(blob) {
//     return new Promise(resolve => {
//         const reader = new FileReader();
//         reader.readAsArrayBuffer(blob);
//         reader.onload = () => resolve(reader.result);
//     });
// }

// function convertToMp3(buffer) {
//     const audioData = new Int16Array(buffer);
//     const mp3encoder = new lamejs.Mp3Encoder(1, 44100, 128);
//     const mp3Data = [];
//     const mp3buf = mp3encoder.encodeBuffer(audioData);
//     if (mp3buf.length > 0) {
//         mp3Data.push(mp3buf);
//     }
//     mp3Blob = new Blob(mp3Data, { type: 'audio/mp3' });
// }

// function convertToMp3(buffer) {
//     const audioData = new Int8Array(buffer);
//     const int16Buffer = int8ToInt16(audioData);
//     const mp3encoder = new lamejs.Mp3Encoder(1, 44100, 128);
//     const mp3Data = [];
//     const mp3buf = mp3encoder.encodeBuffer(int16Buffer);
//     if (mp3buf.length > 0) {
//         mp3Data.push(mp3buf);
//     }
//     mp3Blob = new Blob(mp3Data, { type: 'audio/mp3' });
// }
//
// function int8ToInt16(input) {
//     const output = new Int16Array(input.length / 2);
//     for (let i = 0; i < output.length; i++) {
//         output[i] = (input[2*i] << 8) | (input[2*i+1] & 0xFF);
//     }
//     return output;
// }


document.getElementById('formSubmit').addEventListener("click", (event) => {
  event.preventDefault();

  const form = document.getElementById('myform');
  const formData = new FormData(form);
  formData.append('audio', audioBlob);
  
  for (const key of formData.keys()) {
    console.log(key);
  }
  
  $.ajax({
      url: "/podani/SaveObtezujiciHovor",
      type: "POST",
      data: formData,
      processData: false,
      contentType: false,
      responseType: 'blob',  // Set expected response type to blob for the PDF data
      success: function(response) {
        // Convert the blob response to an Object URL
        const blob = new Blob([response], { type: 'application/pdf' });
        const url = URL.createObjectURL(blob);
        
        // Create the download link and append it to the document
        const downloadLink = document.createElement('a');
        downloadLink.href = url;
        downloadLink.download = 'document.pdf';  // Set desired download file name
        downloadLink.textContent = 'Download PDF';
        document.body.appendChild(downloadLink);
      },
      error: function(err) {
        console.error("Error uploading audio", err);
      }
  });
  
});

</script>