@using HlidacStatu.Entities
@using System.Threading
@using System.Text.Json
@using System.Web
@using HlidacStatu.Entities.KIndex
@using HlidacStatu.Extensions
@using HlidacStatu.Repositories
@using HlidacStatu.Util
@using Microsoft.AspNetCore.WebUtilities

@inject NavigationManager Navigation

<style>
    .hlidac-autocomplete {
        /*border: 2px solid yellow;   */
        position: relative;
        padding: 0;
        margin: 0;
    }

        .hlidac-autocomplete .hlidac-autocomplete-list {
            /*border: 1px solid red;*/
            position: absolute;
            left: 0px;
            z-index: 100;
            width: 100%;
            margin: 0;
            padding: 0;
        }

            .hlidac-autocomplete .hlidac-autocomplete-list .list-group-item {
                margin: 0;
                padding-top: 2px;
                padding-bottom: 2px;
            }

    .no-overflow {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .selected-element {
        max-width: 200px;
    }

    .input-group-newline {
        width: 100%;
    }

    .hs-avatar {
        width: 50px;
        height: auto;
        color: #ccc;
        font-size: 45px;
    }

        .hs-avatar.small {
            font-size: 25px;
        }

        .hs-avatar img {
            width: 50px;
        }

    .hs-autocomplete-description {
        margin-left: 15px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

        .hs-autocomplete-description.small {
            margin-top: 10px;
        }

    #components-reconnect-modal,
    #components-reconnect-modal.components-reconnect-show {
        display: block;
    }

        #components-reconnect-modal .connection-ok,
        #components-reconnect-modal.components-reconnect-show .connection-ok {
            display: block;
        }

        #components-reconnect-modal.components-reconnect-failed .connection-ok,
        #components-reconnect-modal.components-reconnect-rejected .connection-ok {
            display: none;
        }

        #components-reconnect-modal .connection-error,
        #components-reconnect-modal.components-reconnect-show .connection-error {
            display: none;
        }

        #components-reconnect-modal.components-reconnect-failed .connection-error,
        #components-reconnect-modal.components-reconnect-rejected .connection-error {
            display: block;
        }
</style>

<div id="components-reconnect-modal">
    <div class="connection-ok">
        <ErrorBoundary>
            <ChildContent>
                <HlidacAutocompleteMultitag SearchFuncAsync="@((s, token) => OnSearch(s, token))"
                                            OnAutocompleteSubmitted="@(OnAutocompleteSubmitted)"
                                            TextSelector="@((autocomplete) => autocomplete?.RenderText())"
                                            InputTags="InputTags"
                                            HelpTips="HelpTips"
                                            TItem="Autocomplete">
                    <TagTemplate>
                        @if (context.Value is null)
                        {
                            <span style="overflow:hidden; text-overflow:ellipsis;">@context.Text</span>
                        }
                        else
                        {
                            if (context.Value.Category is Autocomplete.CategoryEnum.Hint)
                            {
                                <span style="overflow:hidden; text-overflow:ellipsis;">@(CategoryToPicture(context.Value.Category))&nbsp;@context.Value.Id</span>
                            }
                            else
                            {
                                <span style="overflow:hidden; text-overflow:ellipsis;">@(CategoryToPicture(context.Value.Category))&nbsp;@context.Value.RenderText()</span>
                            }
                        }
                    </TagTemplate>
                    <HelpTemplate>
                        <div class="list-group-item d-flex align-items-center justify-content-start">
                            <div class="hs-avatar small">
                                <i class="fa-regular fa-comment-question"></i>
                            </div>
                            <div class="hs-autocomplete-description small flex-grow-1 me-2">
                                <h6 class="align-middle">@context</h6>
                            </div>
                        </div>
                    </HelpTemplate>
                    <ItemTemplate>
                        <div class="d-flex align-items-center justify-content-start">
                            <div class="hs-avatar @((context.Category == Autocomplete.CategoryEnum.Hint) ? "small" : "")">
                                @((MarkupString)context.ImageElement)
                            </div>
                            <div class="hs-autocomplete-description  @((context.Category == Autocomplete.CategoryEnum.Hint) ? "small" : "") flex-grow-1 me-2">
                                @if (context.Category == Autocomplete.CategoryEnum.Hint)
                                {
                                    <h6 class="align-middle">
                                        @context.RenderText() <span class="badge rounded-pill bg-secondary">@context.Id</span>
                                    </h6>
                                }
                                else
                                {
                                    <h6 class="fw-bold mb-0">
                                        @if (!string.IsNullOrWhiteSpace(context.KIndex))
                                        {
                                            if (Enum.TryParse<KIndexData.KIndexLabelValues>(context.KIndex, out var KindexLabel))
                                            {
                                                @((MarkupString)KIndexData.KindexImageIcon(KindexLabel, "height: 20px; vertical-align: text-bottom; margin-right: 5px;"))
                                            }
                                        }
                                        @context.RenderText()
                                    </h6>
                                    <small>@context.Description</small>
                                    <p class="small text-muted mb-0">
                                        <i>@context.Type</i>
                                    </p>
                                }
                            </div>
                            <div>
                                @if (context.Id.StartsWith("osobaid:"))
                                {
                                    <a href="/osoba/@context.Id.Replace("osobaid:", "")" class="text-muted">
                                        <i class="fa-regular fa-arrow-up-right-from-square fa-lg"></i>
                                    </a>
                                }
                                @if (context.Id.StartsWith("ico:"))
                                {
                                    <a href="/subjekt/@context.Id.Replace("ico:", "")" class="text-muted">
                                        <i class="fa-regular fa-arrow-up-right-from-square fa-lg"></i>
                                    </a>
                                }

                            </div>
                        </div>
                    </ItemTemplate>
                </HlidacAutocompleteMultitag>
            </ChildContent>
            <ErrorContent>
                <div class="hlidac-autocomplete">
                    <div class="input-group">
                        <input type="text"
                               autocomplete="off"
                               placeholder="Došlo k neočekávané chybě. Načtěte prosím stránku znovu"
                               class="hlidac-autocomplete-input form-control"
                               disabled="disabled"/>

                        <a class="btn btn-primary" href="javascript:window.location.reload()" style="margin-bottom:0;margin-top:0;padding-bottom:0">
                            Načíst znovu
                        </a>
                    </div>
                </div>
            </ErrorContent>
        </ErrorBoundary>
    </div>

    <div class="connection-error">
        <form class="header__search__input-wrapper" method="get" style="visibility:visible">
            <input value="@_query" id="Q" name="Q" type="text" class="header__search__input" placeholder="Smluvní strana, Název instituce, Jméno osoby, IČO, téma smlouvy …">
            <button class="header__search__btn" formaction="/hledat">Hledat</button>
        </form>
        <a class="btn btn-warning btn-sm" href="javascript:window.location.reload()" style="margin-bottom:0;margin-top:0;padding-bottom:0">
            Chyba připojení. Chcete-li používat vylepšené hledání, načtěte znovu tuto stránku.
        </a>
    </div>
</div>


@code {

    [Parameter]
    public string Endpoint { get; set; }

    [Parameter]
    public HttpClient HttpClient { get; set; }

    [Parameter]
    public string SearchPath { get; set; }

    private List<AutocompleteItem<Autocomplete>>? InputTags { get; set; }

    private string _query;

    private List<RenderFragment> HelpTips = new List<RenderFragment>()
    {
        new RenderFragment(@<span>Začněte psát a my vám nabídneme nejvhodnější slova k doplnění.</span>),
        new RenderFragment(@<span>Hledat můžete úřady, politiky, osoby, firmy podle jména i IČ i libovolná slova. <span class="badge rounded-pill bg-secondary">petr fiala</span></span>),
        new RenderFragment(@<span>Stačí napsat počáteční písmena slov a my si zbytek domyslíme. <span class="badge rounded-pill bg-secondary">min fin</span></span>),
        new RenderFragment(@<span>Najdeme slova ve všech tvarech, časech a pádech. <span class="badge rounded-pill bg-secondary">reklamní kampaň</span></span>),
        new RenderFragment(@<span>Víte přesný výraz? Dejte ho do uvozovek a my hledáme přesnou shodu. <span class="badge rounded-pill bg-secondary">"Zelená úsporám"</span></span>),
        new RenderFragment(@<span><a href="/napoveda">Podrobnější návod na hledání najdete kliknutím zde</a></span>)
    };


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        Uri? uri = null;

        try
        {
            uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("q", out var q))
            {
                _query = q;

                if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("qtl", out var qtl))
                {
                    var parsedQueries = ParseTools.ParseQueryStringWithOffsets(q, qtl);
                    InputTags = CreateAutocompleteItemsFromparsedQueries(parsedQueries);
                }
                else
                {
                    var parsedQueries = ParseTools.ParseQueryStringWithoutOffsets(q);
                    InputTags = CreateAutocompleteItemsFromparsedQueries(parsedQueries);
                }
            }
        }
        catch (Exception e)
        {
            Util.Consts.Logger.Error($"During autocomplete usage an error occured. OnParametersSetAsync in Wrapper. query=[{uri?.Query}]", e);
        }
    }

    private List<AutocompleteItem<Autocomplete>> CreateAutocompleteItemsFromparsedQueries(List<string>? parsedQueries)
    {
        if (parsedQueries is null)
            return Enumerable.Empty<AutocompleteItem<Autocomplete>>().ToList();
        return parsedQueries.AsParallel().Select(CreateAutocompleteItemFromQuery).ToList();
    }

    private AutocompleteItem<Autocomplete> CreateAutocompleteItemFromQuery(string parsedQuery)
    {
        try
        {
            if (parsedQuery.StartsWith("osobaid:", StringComparison.InvariantCultureIgnoreCase))
            {
                var osoba = OsobaRepo.GetByNameId(parsedQuery.Substring(8));
                if (osoba is not null)
                {
                    return new AutocompleteItem<Autocomplete>(new Autocomplete()
                    {
                        Id = parsedQuery,
                        Text = osoba.FullName(),
                        Category = Autocomplete.CategoryEnum.Person
                    });
                }
            }
            else if (parsedQuery.StartsWith("ico:", StringComparison.InvariantCultureIgnoreCase))
            {
                var firma = FirmaRepo.FromIco(parsedQuery.Substring(4));
                if (firma is not null)
                {
                    Autocomplete.CategoryEnum kategorie = Autocomplete.CategoryEnum.Company;
                    if (firma.TypSubjektu == Firma.TypSubjektuEnum.Obec)
                    {
                        kategorie = Autocomplete.CategoryEnum.City;
                    }
                    else if (firma.Kod_PF > 110 && firma.JsemOVM() && firma.IsInRS == 1)
                    {
                        kategorie = Autocomplete.CategoryEnum.Authority;
                    }

                    return new AutocompleteItem<Autocomplete>(new Autocomplete()
                    {
                        Id = parsedQuery,
                        Text = firma.Jmeno,
                        Category = kategorie
                    });
                }
            }
            else if (parsedQuery.StartsWith("oblast:", StringComparison.InvariantCultureIgnoreCase))
            {
                return new AutocompleteItem<Autocomplete>(new Autocomplete()
                {
                    Id = parsedQuery,
                    Text = parsedQuery,
                    Category = Autocomplete.CategoryEnum.Oblast
                });
            }
        }
        catch (Exception e)
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            Util.Consts.Logger.Error($"During autocomplete usage an error occured. CreateAutocompleteItemFromQuery in Wrapper. Parsed query [{parsedQuery}], uri=[{uri}]", e);
        }

        return new AutocompleteItem<Autocomplete>(parsedQuery);
    }


    private async Task<List<Autocomplete>> OnSearch(string query, CancellationToken cancellationToken)
    {
        JsonSerializerOptions? _jsonSerializerOptions = new()
        {
            PropertyNameCaseInsensitive = true
        };
        
        var autocompletePath = $"/autocomplete/autocomplete?q={HttpUtility.UrlEncode(query)}";

        var uri = new Uri($"{Endpoint}{autocompletePath}");

        try
        {
            using var response = await HttpClient.GetAsync(uri, cancellationToken);

            _ = response.EnsureSuccessStatusCode();


            var datastream = await response.Content.ReadAsStreamAsync(cancellationToken);

            var autocomplete = await JsonSerializer.DeserializeAsync<List<Autocomplete>>(datastream,
                cancellationToken: cancellationToken,
                options: _jsonSerializerOptions);

    // add hint
            autocomplete.Insert(0, new Autocomplete()
            {
                Text = "Vyhledat text",
                Id = query,
                ImageElement = "<i class=\"fa-solid fa-magnifying-glass\"></i>",
                Category = Autocomplete.CategoryEnum.Hint
            });

            return autocomplete;
        }
        catch (Exception ex) when (ex is OperationCanceledException || ex is TaskCanceledException)
        {
    // canceled by user (writing more letters), do not need catch here
        }
        catch (Exception e)
        {
            Util.Consts.Logger.Error($"During autocomplete usage an error occured. OnSearch in Wrapper. Query was=[{query}]", e);
        }

        return Enumerable.Empty<Autocomplete>().ToList();
    }

    private Task OnAutocompleteSubmitted(List<AutocompleteItem<Autocomplete>> autocomplete)
    {
        try
        {
            (string qs, string qtl) = ParseTools.CreateQueryWithOffsets(
                autocomplete.Select(i => i.Value?.Id ?? i.Text ?? "").ToList());

            string url = $"{Navigation.BaseUri}{SearchPath}?q={HttpUtility.UrlEncode(qs)}&qtl={qtl}";
            Navigation.NavigateTo(url, true);
        }
        catch (Exception e)
        {
            Util.Consts.Logger.Error("During autocomplete usage an error occured. OnAutocompleteSubmitted in Wrapper.", e);
        }

        return Task.CompletedTask;
    }

    private RenderFragment CategoryToPicture(Autocomplete.CategoryEnum categoryEnum) => categoryEnum switch
    {
        Autocomplete.CategoryEnum.Company => @<i class='fas fa-industry-alt fa-xs text-muted'></i>,
        Autocomplete.CategoryEnum.StateCompany => @<i class='fas fa-industry-alt fa-xs text-muted'></i>,
        Autocomplete.CategoryEnum.Authority => @<i class='fas fa-university fa-xs text-muted'></i>,
        Autocomplete.CategoryEnum.City => @<i class='fas fa-city fa-xs text-muted'></i>,
        Autocomplete.CategoryEnum.Person => @<i class="fa-duotone fa-user-secret fa-xs text-muted"></i>,
        Autocomplete.CategoryEnum.Operator => @<i class="fa-solid fa-circle-small fa-xs text-muted"></i>,
        Autocomplete.CategoryEnum.Synonym => @<i class="fa-regular fa-hashtag fa-xs text-muted"></i>,
        Autocomplete.CategoryEnum.Oblast => @<i class="fa-regular fa-tag fa-xs text-muted"></i>,
        Autocomplete.CategoryEnum.Hint => @<i class="fa-solid fa-magnifying-glass fa-xs text-muted"></i>,
        _ => @<i class="fa-regular fa-alien-8bit"></i>
        };


}