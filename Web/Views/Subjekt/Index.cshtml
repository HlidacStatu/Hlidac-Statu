@model Firma

@using Nest;
@using Devmasters.Enums;
@using System.Linq;
@using HlidacStatu.XLib.Render;
@using HlidacStatu.Lib.Analytics;
@using HlidacStatu.Datasets
@using HlidacStatu.Datastructures.Graphs
@using HlidacStatu.Entities
@using HlidacStatu.Extensions
@using HlidacStatu.Lib.Analysis.KorupcniRiziko;
@using HlidacStatu.Repositories
@using HlidacStatu.Web.Framework

@{
    Layout = null;

    Devmasters.DT.StopWatchLaps laps = new();

    var intv = laps.AddAndStartLap("StatistikaRegistruSmluv");
    HlidacStatu.Lib.Analytics.StatisticsSubjectPerYear<Smlouva.Statistics.Data> statistics = Model.StatistikaRegistruSmluv();
    intv.Stop();

    intv = laps.AddAndStartLap("CurrentSeasonStatistics");
    var seasonStat = statistics.CurrentSeasonStatistics();
    var currentSeasonYear = statistics.CurrentSeasonYear();
    var zmenaObjemuSmluv = statistics.ChangeBetweenYears(currentSeasonYear - 1, currentSeasonYear, s => s.CelkovaHodnotaSmluv);
    intv.Stop();

    intv = laps.AddAndStartLap("KIndex");
    var kindex = Model.Kindex();

}

@* První sloupec *@
<div class="col-sm-7 col-xs-12 order-1">
    @* ----- K-Index ----- *@
    @if (kindex != null && kindex.LastKIndexLabel() != KIndexData.KIndexLabelValues.None)
    {
        <div>
            <h4>K-Index</h4>

            <p class="text-muted">
                Index klíčových rizik - zkráceně K–Index, je ukazatel míry rizikových faktorů. Tyto faktory jsou spojovány s rizikem korupce a nehospodárným nakládáním veřejných peněz.
            </p>
            <div class="row" style="padding-top:25px;">
                <div class="col-sm-2" title="@HlidacStatu.Util.RenderData.NiceNumber(kindex.LastReadyKIndex().KIndex)">
                    <a href="/kindex/detail/@Model.ICO">@Html.KIndexIcon(kindex.LastReadyKIndex(HtmlExtensions.MaxKIndexYearToShow(this.User)).KIndexLabel, "width:66px")</a>
                </div>
                <div class="col-sm-10">
                    <div>
                        @Html.Raw(HlidacStatu.Util.InfoFact.RenderInfoFacts(kindex.InfoFacts(kindex.LastReadyKIndex(HtmlExtensions.MaxKIndexYearToShow(this.User)).Rok), 3, true, false, lineFormat: "<p>{0}</p>", html: true))
                    </div>
                </div>
            </div>
            <br />
            <a href="/kindex/detail/@Model.ICO">Jak jsme @Html.KIndexIcon(Model.ICO) spočítali podrobně popisujeme zde</a>
            <br />

            <a href="/kindex/detail/@Model.ICO" class="moreinfolink text-uppercase"><strong>Zobrazit podrobnosti o K-Indexu</strong></a>
        </div>
        <hr />

    }
    @{
        intv.Stop();
        intv = laps.AddAndStartLap("RegistrSmluv");
    }

    @* ----- Rizika ----- *@
    @{
        int rok = HlidacStatu.Lib.Analysis.KorupcniRiziko.Consts.AvailableCalculationYears.Max();
    }
    <div>
        <h4>
            Sledovaná rizika
        </h4>
        <p class="text-muted sub-header-info">
            Přehled rizik, která u jednotlivých subjektů sledujeme za <b>rok @rok</b>
        </p>

        <partial name="_rizikoPart" model="@((firma: Model, rok: rok))"/>

        <a href="/subjekt/Rizika/@Model.ICO" class="moreinfolink text-uppercase"><strong>Zobrazit další rizika i v předchozích letech</strong></a>

        <div style="padding-top:15px;">
            <i class="fas fa-info-circle fa-2x fa-float-start"></i>
            <span class="text-muted small">
                Toto je výstup <i>Automatické kontroly rizik</i> transparentnosti a hospodaření u uzavřených smluv prováděný Hlídačem státu.
                Závěry kontroly nedokazují pochybení či porušení zákona na žádné straně smluvních vztahů.
                Zjištěná rizika znamenají pouze vyšší možnost výskytu námi posuzovaných a identifikovaných situací u analyzovaných smluv.
            </span>
        </div>
    </div>
    <hr />

    @* ----- Registr smluv ----- *@
    <div>
        <h4>
            Registr smluv
        </h4>
        <p class="text-muted sub-header-info">
            Detailní informace o smlouvách uzavřených @Html.SubjektTypTrojice(Model, "úřadem", "státní organizací", "soukromou firmou")
            za poslední roky uvedených v registru smluv.
        </p>
        @{
            var currentYear = DateTime.Now.Year;
            var numFatalIssue = SmlouvaRepo.Searching.SimpleSearch($"ico:{Model.ICO} AND chyby:zasadni  AND datumUzavreni:[{currentYear}-01-01 TO {currentYear + 1}-01-01}}", 0, 0, SmlouvaRepo.Searching.OrderResult.FastestForScroll, exactNumOfResults: true).ElasticResults.HitsMetadata.Total;
            var numVazneIssue = SmlouvaRepo.Searching.SimpleSearch($"ico:{Model.ICO} AND chyby:vazne  AND datumUzavreni:[{currentYear}-01-01 TO {currentYear + 1}-01-01}}", 0, 0, SmlouvaRepo.Searching.OrderResult.FastestForScroll, exactNumOfResults: true).ElasticResults.HitsMetadata.Total;
        }
        @if (numFatalIssue.Value > 0)
        {
            <p>
                Zásadní nedostatky za letošní rok v rozporu se zákonem jsme zjistili u
                <a class="text-danger" href="/hledatsmlouvy?q=@System.Net.WebUtility.UrlEncode($"ico:{Model.ICO} AND chyby:zasadni AND datumUzavreni:[{currentYear}-01-01+TO {currentYear + 1}-01-01}}")">
                    @if (numFatalIssue.Relation == TotalHitsRelation.GreaterThanOrEqualTo)
                    {
                        @Html.Raw(Devmasters.Lang.CS.Plural.GetWithZero((int)numFatalIssue.Value, "<strong>0</strong> smluv.", "<strong>jedné</strong> smlouvy.", "<strong>{0} </strong>smluv.", "<strong>více než {0:### ### ##0} </strong>smluv.")) }
                    else
                    {
                        @Html.Raw(Devmasters.Lang.CS.Plural.GetWithZero((int)numFatalIssue.Value, "<strong>0</strong> smluv.", "<strong>jedné</strong> smlouvy.", "<strong>{0} </strong>smluv.", "<strong>{0:### ### ##0} </strong>smluv."))
                    }
                    Tyto smlouvy jsou velmi pravděpodobně neplatné.
                </a>
            </p>
        }
        @if (numVazneIssue.Value > 0)
        {
            <p>
                @if (numFatalIssue.Value == 0)
                {
                    <span>Vážné nedostatky za letošní rok jsme zjistili u</span>
                }
                else
                {
                    <span>Zároveň vážné nedostatky za letošní rok jsme zjistili u</span>
                }

                <a class="text-danger" href="/hledatsmlouvy?q=@System.Net.WebUtility.UrlEncode($"ico:{Model.ICO} AND chyby:vazne AND datumUzavreni:[{currentYear}-01-01 TO {currentYear + 1}-01-01}}")">
                    @if (numFatalIssue.Relation == TotalHitsRelation.GreaterThanOrEqualTo)
                    {
                        @Html.Raw(Devmasters.Lang.CS.Plural.GetWithZero((int)numVazneIssue.Value, "<strong>0 </strong>smluv.", "<strong>jedné </strong>smlouvy.", "<strong>{0} </strong>smluv.", "<strong>více než {0:### ### ##0} </strong>smluv.")) }
                    else
                    {
                        @Html.Raw(Devmasters.Lang.CS.Plural.GetWithZero((int)numVazneIssue.Value, "<strong>0 </strong>smluv.", "<strong>jedné </strong>smlouvy.", "<strong>{0} </strong>smluv.", "<strong>{0:### ### ##0} </strong>smluv."))
                    }
                </a>
            </p>
        }

        <p>
            V roce @(currentSeasonYear) uzavřel @(Model.JsemOVM() ? "úřad" : "subjekt")
            <a href="/hledat?q=@System.Net.WebUtility.UrlEncode($"ico:{Model.ICO} AND datumUzavreni:[{currentSeasonYear}-01-01 TO {currentSeasonYear + 1}-01-01}}")">
                @Html.Raw(Devmasters.Lang.CS.Plural.GetWithZero((int)seasonStat.PocetSmluv, "<strong>0 </strong>smluv", "<strong>jednu </strong>smlouvu", "<strong>{0} </strong>smluvy", "<strong>{0:### ### ##0} </strong>smluv"))
            </a>
            za <strong>@(Html.Raw(Smlouva.NicePrice(seasonStat.CelkovaHodnotaSmluv, html: true, shortFormat: true)))</strong>

            @if (zmenaObjemuSmluv.percentage.HasValue)
            {
                int predchoziRok = currentSeasonYear - 1;
                string baseText = $"o {zmenaObjemuSmluv.percentage?.ToString("P2")} oproti roku {predchoziRok}";
                string text;
                switch (zmenaObjemuSmluv.percentage)
                {
                    case decimal n when n > 0:
                        text = $"(nárůst {baseText})";
                        break;
                    case decimal n when n < 0:
                        text = $"(pokles {baseText})";
                        break;
                    default:
                        text = $"(stejný objem smluv jako v roce {predchoziRok})";
                        break;
                }

                <span>@text</span>
            }
        </p>

        <p>
            V @(currentSeasonYear) utajil hodnotu kontraktu u
            <a href="/hledat?q=@System.Net.WebUtility.UrlEncode($"ico:{Model.ICO} AND hint.skrytaCena:1 AND datumUzavreni:[{currentSeasonYear}-01-01 TO {currentSeasonYear + 1}-01-01}}")">
                @Html.Raw(Devmasters.Lang.CS.Plural.GetWithZero((int)seasonStat.PocetSmluvBezCeny, "<strong>0 </strong>smluv,", "<strong>jedné </strong>smlouvy,", "<strong>{0} </strong>smluv,", "<strong>{0:### ### ##0} </strong>smluv,"))
            </a> což je celkem @(seasonStat.PercentSmluvBezCeny.ToString("P2")) ze všech.
        </p>
        @if (statistics.CurrentSeasonStatistics().PoOblastech?.Count > 0)
        {
            var obls = statistics.CurrentSeasonStatistics().PoOblastech.OrderByDescending(m => m.Value.CelkemCena)
                .Select(m => $"<b>{((Smlouva.SClassification.ClassificationsTypes?)m.Key).ToNiceDisplayName()}</b> ({HlidacStatu.Util.RenderData.ShortNicePrice(m.Value.CelkemCena)})");
            <p>
                Největší smlouvy v @(currentSeasonYear) byly uzavřeny v oblastech
                @Html.Raw(HlidacStatu.Util.RenderData.LimitedList(4, obls, itemsDelimiter: ", ", lastItemDelimiter: ", ", moreTextPrefix: " a dalších."))
            </p>
        }
        @if (statistics.Summary(statistics.YearsAfter2016()).PocetSmluv > 0)
        {
            <div class="row">
                <div class="col-sm-12 col-xs-12">
                    <hr />
                    @{ 
                        var statisticsAfter2016 = statistics
                            .Where(s => statistics.YearsAfter2016().Contains(s.Year))
                            .OrderBy(s => s.Year);
                        //Graf hodnota smluv
                        var hodnotaSmluvGraphData = new Series[]
                        {
                            new()
                            {
                                Name = "Hodnota smluv",
                                Type = Series.SeriesType.column,
                                Data = statisticsAfter2016
                                    .Select(x => new SeriesData(x.Year, x.Value.CelkovaHodnotaSmluv)).ToArray(),
                                SeriesTooltip = new SeriesTooltip()
                                {
                                    ValueSuffix = " Kč"
                                }
                            },
                            new()
                            {
                                Name = "Hodnota smluv se soukromými subjekty",
                                Type = Series.SeriesType.column,
                                Data = statisticsAfter2016
                                    .Select(x => new SeriesData(x.Year, x.Value.CelkovaHodnotaSmluvSeSoukrSubj)).ToArray(),
                                SeriesTooltip = new SeriesTooltip()
                                {
                                    ValueSuffix = " Kč"
                                }
                            },
                            new()
                            {
                                Name = "Počet smluv bez ceny",
                                Data = statisticsAfter2016
                                    .Select(x => new SeriesData(x.Year, x.Value.PocetSmluvBezCeny)).ToArray(),
                                Type = Series.SeriesType.line,

                            }
                        };
                    }
                    @Html.ColumnGraph("Hodnota smluv po letech", hodnotaSmluvGraphData, yTitleRight: "Počet smluv")
                </div>

            </div>
        }
        <a href="/subjekt/RegistrSmluv/@Model.ICO" class="moreinfolink text-uppercase"><strong>Zobrazit podrobnosti o registru smluv</strong></a>
    </div>
    <hr />
    @{
        intv.Stop();
        intv = laps.AddAndStartLap("VerejneZakazky");
    }

    @* ----- Veřejné zakázky -----*@

    <div>
        <h4>Veřejné zakázky</h4>
        <p class="text-muted sub-header-info">
            Podrobné informace o veřejných zakázkách, @Html.SubjektTypTrojice(Model, "které úřad vypsal", "které státní organizace vypsala či se jich zúčastnila", "kterých se firma zúčastnila")
            jak z věstníku veřejných zakázek, tak z profilů zadavatelů.
        </p>
        @{
            var resVZdodav = VerejnaZakazkaRepo.Searching.SimpleSearch("icododavatel:" + Model.ICO, null, 1, 0, "1");
            var resVZzadav = VerejnaZakazkaRepo.Searching.SimpleSearch("icozadavatel:" + Model.ICO, null, 1, 0, "1");
            Dictionary<string, long> vzakaz = new();
            vzakaz.Add("dodavatel|dodavatel|dodavatele|dodavatelem", resVZdodav.Total);
            vzakaz.Add("zadavatel|zadavatel|zadavatele|zadavatelem", resVZzadav.Total);

            if (resVZdodav.Total + resVZzadav.Total > 0)
            {
                <p>
                    @Model.Jmeno se vyskytuje
                    <ul>
                        @foreach (var kv in vzakaz.OrderByDescending(m => m.Value).Where(m => m.Value > 0))
                        {
                            var text = kv.Key.Split('|');
                            string surl = WebUtil.GetSearchUrl("/verejnezakazky/hledat", $"ico{text[0]}:" + Model.ICO);

                            <li>
                                @Html.Raw(Devmasters.Lang.CS.Plural.Get(kv.Value, $"v <a href='{surl}'><b>jedné</b> veřejné zakázce</a> jako {text[1]}",
                                    $"v <a href='{surl}'><b>{{0}}</b> veřejných zakázkách</a> jako {text[1]}",
                                    $"v <a href='{surl}'><b>{{0}}</b> veřejných zakázkach</a> jako {text[1]}")).
                            </li>
                        }
                    </ul>
                </p>
            }
        }
        <a href="/subjekt/VerejneZakazky/@Model.ICO" class="moreinfolink text-uppercase"><strong>Zobrazit podrobnosti o veřejných zakázkách</strong></a>
    </div>
    <hr />

    @* ----- Dotace -----*@
    @{
        intv.Stop();
        intv = laps.AddAndStartLap("Dotace");
    }

    <div>
        <h4>Dotace</h4>
        <p class="text-muted sub-header-info">
            Podrobné informace o dotacích, které @Html.SubjektTypTrojice(Model, "úřad dostal", "organizace dostala", "firma obdržela"),
            z nejúplnější databáze dotací.
        </p>
        @{
            //var dotaceService = new DotaceService();
            var dotaceSummary = Model.StatistikaDotaci().Summary();
            var dotaceHoldingStat = Model.HoldingStatistikaDotaci(Relation.AktualnostType.Nedavny);
            var dotaceHoldingSummary = dotaceHoldingStat.Summary();
            string durl = "/dotace/hledat?Q=ico%3A+" + Model.ICO;
            //var dotaceStat = dotaceSummary.PocetDotaci;

            var sdotaceKc = " v celkové hodnotě <b>" + HlidacStatu.Util.RenderData.NicePriceHtml(dotaceSummary.CelkemCerpano, html: true) + "</b>."; }

        @if (Model.JsemOVM())
        {
            <p>
                @(Model.JsemOVM()? "Úřad" : "Subjekt") @Devmasters.TextUtil.ShortenText(Model.Jmeno, 35)
                @Html.Raw(Devmasters.Lang.CS.Plural.GetWithZero(dotaceSummary.PocetDotaci,
                        " nedostal žádnou dotaci.",
                        " dostal <a href='" + durl + "'><b>jednu dotaci</b></a>" + sdotaceKc,
                        " dostal <a href='" + durl + "'><b>{0} dotace</b></a>" + sdotaceKc,
                        " dostal <a href='" + durl + "'><b>{0} dotací</b></a>" + sdotaceKc))
            </p>
        }
        else
        {
            <p>
                Firma @Devmasters.TextUtil.ShortenText(Model.Jmeno, 35)
                @Html.Raw(Devmasters.Lang.CS.Plural.GetWithZero(dotaceSummary.PocetDotaci,
                                            " nedostala žádnou dotaci.",
                                            " dostala <a href='" + durl + "'><b>jednu dotaci</b></a>" + sdotaceKc,
                                            " dostala <a href='" + durl + "'><b>{0} dotace</b></a>" + sdotaceKc,
                                            " dostala <a href='" + durl + "'><b>{0} dotací</b></a>" + sdotaceKc))
            </p>
        }

        @if (Model.AktualniVazby(Relation.AktualnostType.Nedavny).Count() > 0)
        {
            var subjectsWithSubsidiesCount = Model.Holding(Relation.AktualnostType.Nedavny)
                .Where(s => s.StatistikaDotaci().HasStatistics).Count();

            decimal totalSumDotaceHolding = dotaceHoldingSummary.CelkemCerpano;
            int totalCountDotaceHolding = dotaceHoldingSummary.PocetDotaci;

            if (totalCountDotaceHolding - dotaceSummary.PocetDotaci > 0)
            {
                var sdotaceHDiffKc = " v hodnotě <b>" + HlidacStatu.Util.RenderData.NicePriceHtml(totalSumDotaceHolding - dotaceSummary.CelkemCerpano, html: true) + "</b>.";
                var sdotaceHKc = " v celkové hodnotě <b>" + HlidacStatu.Util.RenderData.NicePriceHtml(totalSumDotaceHolding, html: true) + "</b>.";
                string durlH = "/dotace/hledat?Q=holding%3A+" + Model.ICO;
                if (Model.JsemOVM())
                {
                    <p>
                        <b>@Devmasters.Lang.CS.Plural.Get(subjectsWithSubsidiesCount, "Jedna podřízená organizace", "{0} podřízená organizace", "{0} podřízených organizací")</b>
                        (z celkem @HlidacStatu.Util.RenderData.NiceNumber(Model.AktualniVazby(Relation.AktualnostType.Nedavny).Length))
                        úřadu @Devmasters.TextUtil.ShortenText(Model.Jmeno, 35)

                        @Devmasters.Lang.CS.Plural.Get(subjectsWithSubsidiesCount,
                                                    "dostala",
                                                    "dostaly",
                                                    "dostalo")
                        @Html.Raw(Devmasters.Lang.CS.Plural.Get(totalCountDotaceHolding - dotaceSummary.PocetDotaci,
                                                                                " ještě <b>jednu dotaci</b>" + sdotaceHDiffKc,
                                                                                " další <b>{0} dotace</b>" + sdotaceHDiffKc,
                                                                                " dalších <b>{0} dotací</b>" + sdotaceHDiffKc))
                    </p>
                    <p>
                        Úřad <b>@(Model.Jmeno)</b> včetně podřízených organizací dostal celkem
                        @Html.Raw(Devmasters.Lang.CS.Plural.Get(totalCountDotaceHolding,
                                                " <a href='" + durlH + "'><b>jednu dotaci</b></a>" + sdotaceHKc,
                                                " <a href='" + durlH + "'><b>{0} dotace</b></a>" + sdotaceHKc,
                                                " <a href='" + durlH + "'><b>{0} dotací</b></a>" + sdotaceHKc))
                    </p> }
                else
                {
                    <p>
                        <b>@Devmasters.Lang.CS.Plural.Get(subjectsWithSubsidiesCount, "Jedna dceřiná společnost", "{0} dceřiné společnosti", "{0} dceřiných společností")</b>
                        (z celkem @HlidacStatu.Util.RenderData.NiceNumber(Model.AktualniVazby(Relation.AktualnostType.Nedavny).Length))
                        firmy @Devmasters.TextUtil.ShortenText(Model.Jmeno, 35)

                        @Devmasters.Lang.CS.Plural.Get(subjectsWithSubsidiesCount,
                                                    "dostala",
                                                    "dostaly",
                                                    "dostalo")
                        @Html.Raw(Devmasters.Lang.CS.Plural.Get(totalCountDotaceHolding - dotaceSummary.PocetDotaci,
                                                                                " ještě <b>jednu dotaci</b>" + sdotaceHDiffKc,
                                                                                " další <b>{0} dotace</b>" + sdotaceHDiffKc,
                                                                                " dalších <b>{0} dotací</b>" + sdotaceHDiffKc))
                    </p>
                    <p>
                        Celý holding včetně <b>@(Model.Jmeno)</b> dostal celkem
                        @Html.Raw(Devmasters.Lang.CS.Plural.Get(totalCountDotaceHolding,
                                                " <a href='" + durlH + "'><b>jednu dotaci</b></a>" + sdotaceHKc,
                                                " <a href='" + durlH + "'><b>{0} dotace</b></a>" + sdotaceHKc,
                                                " <a href='" + durlH + "'><b>{0} dotací</b></a>" + sdotaceHKc))
                    </p> }
            }
            else
            {
                if (Model.JsemOVM())
                {
                    <p>
                        <b>@Devmasters.Lang.CS.Plural.Get(subjectsWithSubsidiesCount, "Jedna podřízená organizace", "{0} podřízená organizace", "{0} podřízených organizací")</b>
                        úřadu @Devmasters.TextUtil.ShortenText(Model.Jmeno, 35) nedostaly žádné dotace.
                    </p> }
                else
                {
                    <p>
                        <b>@Devmasters.Lang.CS.Plural.Get(subjectsWithSubsidiesCount, "Jedna dceřiná společnost", "{0} dceřiné společnosti", "{0} dceřiných společností")</b>
                        firmy @Devmasters.TextUtil.ShortenText(Model.Jmeno, 35) nedostaly žádné dotace.
                    </p>}
            }
        }

        @if (dotaceHoldingSummary.PocetDotaci > 0)
        {
            string holdingSubsidiesTitle = $"Přehled čerpání dotací ";
            if (Model.JsemOVM())
            {
                holdingSubsidiesTitle += (Model.IcosInHolding(Relation.AktualnostType.Nedavny).Count() > 0 ? "úřadu včetně podřízených organizací" : "úřadu");
            }
            else
            {
                holdingSubsidiesTitle += (Model.IcosInHolding(Relation.AktualnostType.Nedavny).Count() > 0 ? "firmy" : "holdingu");
            }

            var holdingFirmy = Model.Holding(Relation.AktualnostType.Nedavny).ToList();
            var holdingFirmyWithSubsidies = holdingFirmy.Where(c => c.StatistikaDotaci().HasStatistics).Append(Model);

            var holdingStats = StatisticsSubjectPerYear<Firma.Statistics.Dotace>.Aggregate(
                holdingFirmyWithSubsidies.Select(f => f.StatistikaDotaci())
            );
            var holdingGraphData = new Series[]
            {
                new()
                {
                    Name = "Celkem Kč",
                    Type = Series.SeriesType.column,
                    Data = holdingStats
                        .Where(x => x.Year > 0)
                        .OrderBy(x => x.Year)
                        .Select(x => new SeriesData(x.Year, x.Value.CelkemCerpano)).ToArray(),
                    SeriesTooltip = new SeriesTooltip()
                    {
                        ValueSuffix = " Kč"
                    }
                },

            };
            <div>
                <hr />
                @Html.ColumnGraph(holdingSubsidiesTitle, holdingGraphData, yTitleLeft: "Celkem čerpáno", yTitleRight: "")
            </div>
        }

        <a href="/subjekt/Dotace/@Model.ICO" class="moreinfolink text-uppercase"><strong>Zobrazit podrobnosti o dotacích</strong></a>
    </div>
    <hr />

    @* ----- Insolvence -----*@
    @{
        intv.Stop();
        intv = laps.AddAndStartLap("Insolvence");
    }

    <div>
        <h4>Insolvenční rejstřík</h4>
        <p class="text-muted sub-header-info">
            Informace o insolvenčních řízeních, kterých se @Html.SubjektTypTrojice(Model, "úřad ", "organizace ", "firma ")
            účastní jako dlužník, věřitel či správce.
        </p>

        @{ var insDluznik = InsolvenceRepo.Searching.SimpleSearch("icodluznik:" + Model.ICO, 1, 1, (int)HlidacStatu.Repositories.Searching.InsolvenceSearchResult.InsolvenceOrderResult.FastestForScroll, false, InsolvenceLimitedView.IsLimited(User));
            var insVeritel = InsolvenceRepo.Searching.SimpleSearch("icoveritel:" + Model.ICO, 1, 1, (int)HlidacStatu.Repositories.Searching.InsolvenceSearchResult.InsolvenceOrderResult.FastestForScroll, false, InsolvenceLimitedView.IsLimited(User));
            var insSpravce = InsolvenceRepo.Searching.SimpleSearch("icospravce:" + Model.ICO, 1, 1, (int)HlidacStatu.Repositories.Searching.InsolvenceSearchResult.InsolvenceOrderResult.FastestForScroll, false, InsolvenceLimitedView.IsLimited(User));

            Dictionary<string, long> insolv = new();
            insolv.Add("dluznik|dlužník|dlužníka|dlužníkem", insDluznik.Total);
            insolv.Add("veritel|věřitel|věřitele|veřitelem", insVeritel.Total);
            insolv.Add("spravce|insolvenční správce|insolvenčního správce|insolvenčním správcem", insSpravce.Total);
        }
        @if (insolv.Sum(m => m.Value) > 0)
        {
            <p>
                @Model.Jmeno se vyskytuje
                <ul>
                    @foreach (var kv in insolv.OrderByDescending(m => m.Value))
                    {
                        var text = kv.Key.Split('|');
                        string surl = WebUtil.GetSearchUrl("/insolvence/hledat", $"ico{text[0]}:" + Model.ICO);

                        <li>
                            @Html.Raw(Devmasters.Lang.CS.Plural.Get((int)kv.Value,
                                             " se vyskytuje v <a href='" + surl + "'><b>jedné insolvenci</b></a>", " se vyskytuje v <a href='" + surl + "'><b>{0} insolvencích</b></a>", " se vyskytuje v <a href='" + surl + "'><b>{0} insolvencích</b></a>")) jako @text[1].
                                        </li>
                                    }
                </ul>
            </p>
        }
        <a href="/subjekt/InsolvencniRejstrik/@Model.ICO" class="moreinfolink text-uppercase"><strong>Zobrazit podrobnosti o insolvencích</strong></a>
    </div>
    <hr />

    @if (Model.IsSponzor() || StaticData.FirmySVazbamiNaPolitiky_nedavne_Cache.Get().SoukromeFirmy.ContainsKey(Model.ICO))
    {
        <div>
            <h4>Sponzoring politických stran</h4>
            @if (Model.IsSponzor())
            {
                <p>
                    @Html.SubjektTypTrojice(Model, "Úřad sponzoroval", "Organizace sponzorovala", "Firma sponzorovala")
                    politické strany @HlidacStatu.Util.RenderData.RenderList(Model.Sponzoring().Select(m => m.JmenoPrijemce()).Distinct(), ending: "")
                    v celkové výši @HlidacStatu.Util.RenderData.NicePriceHtml(Model.Sponzoring().Sum(m => m.Hodnota) ?? 0).
                </p>
            }
            @if (StaticData.FirmySVazbamiNaPolitiky_nedavne_Cache.Get().SoukromeFirmy.ContainsKey(Model.ICO))
            {
                <p>
                    Osoby @Html.Raw(HlidacStatu.Util.RenderData.RenderList(
StaticData.FirmySVazbamiNaPolitiky_nedavne_Cache.Get()
.SoukromeFirmy[Model.ICO]
.Select(m => Osoby.GetById.Get(m).FullNameWithYear()), format: "<b>{0}</b>")
),
                    spojené s @Model.Jmeno, také sponzorovali politické strany.
                </p>
            }
            <a href="/subjekt/sponzoring/@Model.ICO" class="moreinfolink text-uppercase"><strong>Zobrazit podrobnosti o sponzoringu politických stran</strong></a>
        </div>
        <hr />
    }

    @* ----- Odkazy na další -----*@
    @if (Model.JsemStatniFirma())
    {

        intv.Stop();
        intv = laps.AddAndStartLap("uradSVazbami");

        var uradSVazbami = StaticData.UradyObchodujiciSFirmami_s_vazbouNaPolitiky_nedavne_Cache.Get()
.SoukromeFirmy.Where(m => m.Ico == Model.ICO && m.Detail != null && m.Detail.Count > 0)
.FirstOrDefault();
        ;

        if (uradSVazbami != null)
        {
            var numPercent = "0";
            var sumPercent = "0";
            var stat = Firmy.Get(uradSVazbami.Ico).StatistikaRegistruSmluv();
            if (stat.Summary().PocetSmluv > 0)
            {
                numPercent = ((double)uradSVazbami.Pocet / (double)stat.Summary().PocetSmluv).ToString("P2");
            }
            if (stat.Summary().CelkovaHodnotaSmluv > 0)
            {
                sumPercent = (uradSVazbami.CelkemCena / stat.Summary().CelkovaHodnotaSmluv).ToString("P1");
            }


            <div>
                <h4>Obchody úřadu s firmami a osobami podporující politické strany</h4>
                <p class="text-muted sub-header-info">
                    Podrobný přehled smluv, které @Html.SubjektTypTrojice(Model, "úřad uzavřel ", "organizace uzavřela", "firma uzavřela ")
                    s firmou, která sponzorovala politické straný (nebo její majitel).
                </p>
                <p>
                    @Model.Jmeno uzavřel <b>@Devmasters.Lang.CS.Plural.Get(uradSVazbami.Pocet, "{0} smlouvu;{0} smlouvy;{0} smluv")</b> smluv (tj. <b>@numPercent</b> všech smluv) s firmami a osobami podporující politické strany.
                </p>
                <a href="/subjekt/ObchodySeSponzory/@Model.ICO" class="moreinfolink text-uppercase"><strong>Zobrazit podrobnosti o vazbách se sponzory politických stran</strong></a>

            </div>
            <hr />
        }
    }

    @{
        intv.Stop();
        intv = laps.AddAndStartLap("Dodavatele");
    }

    @{
        var topDodavateleFull = HlidacStatu.Repositories.ES.QueryGrouped.TopDodavatelePerYear("icoPlatce:" + Model.ICO, HlidacStatu.Lib.Analytics.Consts.RegistrSmluvYearsList);
        var topDodavatele = topDodavateleFull[currentSeasonYear].topPodleKc.Take(5)
                    .Union(topDodavateleFull[currentSeasonYear].topPodlePoctu.Take(5))
                    .Select(m => m.ico)
                    .Where(m => m != Model.ICO)
                    .Distinct();
        var topOdberateleFull = HlidacStatu.Repositories.ES.QueryGrouped.TopOdberatelePerYear("icoPrijemce:" + Model.ICO, HlidacStatu.Lib.Analytics.Consts.RegistrSmluvYearsList);
        var topOdberatele = topOdberateleFull[currentSeasonYear].topPodleKc.Take(5)
                    .Union(topOdberateleFull[currentSeasonYear].topPodlePoctu.Take(5))
                    .Select(m => m.ico)
                    .Where(m => m != Model.ICO)
                    .Distinct();
    }

    <div>
        <h4>Statistika dodavatelů (smluvních partnerů) @(Model.JsemOVM()? "úřadu" : "subjektu" )</h4>
        <p class="text-muted sub-header-info">
            Přehledná statistika největších dodavatelů pro @Html.SubjektTypTrojice(Model, "úřad", "organizaci", "firmu")
            podle smluv v registru smluv.
        </p>
        <p>
            V roce @currentSeasonYear byly největšími smluvními dodavateli @(Model.JsemOVM()? "úřadu" : "subjektu" ) společnosti
            <ul>
                @Html.Raw(string.Join("", topDodavatele.Take(6).Select(m => $"<li><a href='{m}'>{Firmy.GetJmeno(m)}</a></li>")))
            </ul>
        </p>
        <a href="/subjekt/dodavatele/@Model.ICO" class="moreinfolink text-uppercase"><strong>Zobrazit podrobnosti o všech dodavatelích</strong></a>

    </div>
    <hr />
    @{
        intv.Stop();
        intv = laps.AddAndStartLap("Odberatele");
    }

    <div>
        <h4>Statistiky odběratelů @(Model.JsemOVM()? "úřadu" : "subjektu" )</h4>
        <p class="text-muted sub-header-info">
            Přehledná statistika největších odběratelů zboží a služeb od @Html.SubjektTypTrojice(Model, "tohoto úřadu", "této organizace ", "této firmy")
            podle smluv v registru smluv.
        </p>
        <p>
            V roce @currentSeasonYear byly největšími smluvními odběrateli @(Model.JsemOVM()? "úřadu" : "subjektu" ) společnosti
            <ul>
                @Html.Raw(string.Join("", topOdberatele.Take(6).Select(m => $"<li><a href='{m}'>{Firmy.GetJmeno(m)}</a></li>")))
            </ul>
        </p>
        <a href="/subjekt/odberatele/@Model.ICO" class="moreinfolink text-uppercase"><strong>Zobrazit podrobnosti o všech odběratelích</strong></a>
    </div>
    <hr />
    @{
        intv.Stop();
        intv = laps.AddAndStartLap("DalsiDB");
    }

    @{

        var queries = HlidacStatu.Datasets.DatasetRepo.Searching.GetSpecificQueriesForDatasets("ICO", Model.ICO, true);
        var dsSearch = HlidacStatu.Datasets.Search.DatasetMultiQueryMultiResult.GeneralSearch(queries, 1, 5);

    }
    @if (dsSearch.IsValid && dsSearch.Total > 0)
    {
        <div>
            <h4>@(Model.JsemOVM() ? "Úřad" : "Subjekt" ) v dalších databázích</h4>
            <p class="text-muted sub-header-info">
                Na hlídači máme kromě hlavních databází @(DataSetDB.AllDataSets.Get()?.Count().ToString() ?? "") dalších menších databází.
                Zde vám podrobně vypíšeme, co v nich @Html.SubjektTypTrojice(Model, "o tomto úřadu", "o této organizaci ", "této firmě") naleznete.
            </p>
            <p>
                O @(Model.JsemOVM() ? "úřadu" : "subjektu" ) jsme našli @(HlidacStatu.Util.RenderData.Vysledky.PocetVysledku(dsSearch.Total))
                @Html.Raw(Devmasters.Lang.CS.Plural.Get(dsSearch.Results.Count(m => m.Total > 0), "v <b>jedné</b> databázi", "ve <b>{0} databázích</b>", "v <b>{0} databázích</b>")).
                @if (dsSearch.Results.Count(m => m.Total > 0) > 1)
                {
                    <text>
                        Nejvíce v
                        <ul>
                            @Html.Raw(string.Join("", dsSearch.Results
                                .Where(m => m.Total > 0)
                                .OrderByDescending(o => o.Total)
                                .Take(4)
                                .Select(m => $"<li><a href='{m.DataSet.DatasetSearchUrl(m.RenderQuery())}'>{m.DataSet.Registration().name}</a> ({HlidacStatu.Util.RenderData.NiceNumber(m.Total)})</li>")))

                        </ul>
                    </text>
                }
            </p>


        </div>


        <a href="/subjekt/DalsiDatabaze/@Model.ICO" class="moreinfolink text-uppercase"><strong>Zobrazit výsledky z dalších databází</strong></a>

        <hr />
    }
    @{
        intv.Stop();
        intv = laps.AddAndStartLap("DalsiInfo");
    }

    <div>
        <h4>Další informace o organizaci</h4>
        <p class="text-muted sub-header-info">
            Zaměstnanci, rozpočty, organizační struktura a další informace @Html.SubjektTypTrojice(Model, "o tomto úřadu", "o této organizaci ", "této firmě") ze státních rejstříků.
        </p>
        <p>
            @if (Model.AktualniVazby(Relation.AktualnostType.Nedavny).Count() > 0)
            {
                if (Model.PatrimStatu())
                {
                    <span>
                        Řídí <a href="/subjekt/Vazby/@Model.ICO">@Devmasters.Lang.CS.Plural.Get(Model.AktualniVazby(Relation.AktualnostType.Nedavny).Count(), "jednu podřízenou organizaci", "{0} podřízené organizace", "{0} podřízených organizací").</a>
                    </span>
                }
                else
                {
                    <span>
                        Řídí <a href="/subjekt/Vazby/@Model.ICO">@Devmasters.Lang.CS.Plural.Get(Model.AktualniVazby(Relation.AktualnostType.Nedavny).Count(), "jeden podřízený subjekt", "{0} podřízené subjekty", "{0} podřízených subjektů").</a>
                    </span>
                }
            }
            @if (Model.KategorieOVM().Count() > 0)
            {
                <span>
                    Je součástí <a href="/subjekt/DalsiInformace/@Model.ICO">@Devmasters.Lang.CS.Plural.Get(Model.KategorieOVM().Count(), "jedné kategorie", "{0} kategorií", "{0} kategorií") orgánu veřejné moci.</a>
                </span>
            }
        </p>
        @if (StaticData.OrganizacniStrukturyUradu.Get().TryGetValue(Model.ICO, out var ossu))
        {
            var sum = new HlidacStatu.Entities.OrgStrukturyStatu.Summary(ossu);
            if (sum.Urady > 0)
            {
                <p>
                    @Html.Raw(sum.HtmlDescription(Model.ICO))
                </p>
            }
        }
        <a href="/subjekt/DalsiInformace/@Model.ICO" class="moreinfolink text-uppercase"><strong>Zobrazit další informace</strong></a>


    </div>
    @{
        intv.Stop();
    }

</div>
<!--
RenderTimes
    @Html.Raw(string.Join("\n",laps.Laps.Select(m=>$"{m.Name} : {m.ExactElapsedMs:# ##0.00}ms")))
    -->
